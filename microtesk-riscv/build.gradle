/*
 * Copyright 2017-2019 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

import net.researchgate.release.ReleasePlugin

import java.text.SimpleDateFormat
import java.util.regex.Matcher

buildscript {
  repositories {
    ivy {
      url = 'https://forge.ispras.ru/repo'
      layout 'pattern', {
        artifact '[organization]/[ext]s/[artifact]-[revision](.[ext])'
      }
    }
    jcenter()
  }

  dependencies {
    classpath 'gradle:gradle-os-plugin:1.0'
  }
}

plugins {
  id 'net.saliman.properties' version '1.4.4'
  id 'net.researchgate.release' version '2.6.0'
  id 'org.sonarqube' version '2.6.2'
}

apply plugin: 'os'
apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

def repoUrlStr = repoUrl
def repoUserStr = hasProperty('repoUser') ? repoUser : "$System.env._REPO_USER"
def repoPasswordStr = hasProperty('repoPassword') ? repoPassword : "$System.env._REPO_PASSWORD"

repositories {
  maven {
    url repoUrlStr + 'releases'

    credentials {
      username repoUserStr
      password repoPasswordStr
    }
    authentication {
      basic(BasicAuthentication)
    }
  }
  maven {
    url repoUrlStr + 'snapshots'

    credentials {
      username repoUserStr
      password repoPasswordStr
    }
    authentication {
      basic(BasicAuthentication)
    }
  }
  ivy {
    url = 'https://forge.ispras.ru/repo'
    layout 'pattern', {
      artifact '[organization]/[ext]s/[artifact]-[revision](.[ext])'
      // z3
      artifact '[organization]/[artifact]-[revision](.[ext])'
    }
  }
  jcenter()
}

uploadArchives {
  repositories {
    mavenLocal()
  }
}

release {
  failOnCommitNeeded = false
  failOnUnversionedFiles = false

  versionPatterns = [
    // Increments build number: "0.2.5-alpha-150428" => "0.2.6-alpha-150428"
    /(^\d+\.\d+\.)(\d+)(-[^-]*)(-[^-]*$)/:
    { Matcher m, Project p -> m.replaceAll("${ m[0][1] }${ (m[0][2] as int) + 1 }${ m[0][3] }" ) }
  ]
}

String getCurrentDateString()  {
  new SimpleDateFormat( "yyMMdd" ).format( new Date() )
}

task unSnapshotVersion.doLast {
  def version = project.version.toString()
  version += '-' + getCurrentDateString()
   project.plugins.getPlugin( net.researchgate.release.ReleasePlugin.class )
  .updateVersionProperty( version )
}

String z3
String z3path

String cvc4
String cvc4path

windows {
  z3 = 'z3:z3:4.3.0-x64:@zip'
  z3path = 'tools/z3/bin/z3.exe'

  cvc4 = 'cvc4:cvc4:1.4-win32-opt:@exe'
  cvc4path = 'tools/cvc4-windows.exe'
}

unix {
  z3 = 'z3:z3:x64-4.1:@tar.gz'
  z3path = 'tools/z3/bin/z3'

  cvc4 = 'cvc4:cvc4:2015-05-12-x86_64-linux-opt:@bin'
  cvc4path = 'tools/cvc4-unix.bin'
}

macOs {
  z3 = 'z3:z3:4.3.2.7c12ab47165a-x64-osx-10.8.2:@zip'
  z3path = 'tools/z3/bin/z3'

  // Currently, no suitable CVC4 for OS X is available. For now Unix binaries
  // are specified here. These temp values are required for the build to complete.
  cvc4 = 'cvc4:cvc4:2015-05-12-x86_64-linux-opt:@bin'
  cvc4path = 'tools/cvc4-unix.bin'
}

configurations {
  jruby
  solvers
  qemu
  traceutils
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
  testCompile 'junit:junit:4.11'
  testCompile 'hamcrest:hamcrest-core:1.3'

  testRuntime z3
  testRuntime cvc4
  solvers z3
  solvers cvc4
  qemu("qemu4v:qemu4v:${qemuVersion}:@tar.gz") { changing = true }
  traceutils("traceutils:traceutils:${traceutilsVersion}:@tar.gz") { changing = true }

  compile("microtesk:microtesk:${coreVersion}:@tar.gz") { changing = true }
  testCompile fileTree(include: ['*.jar'], dir: "${project.projectDir}/build/target/lib/jars")

  checkstyle 'com.puppycrawl.tools:checkstyle:6.12.1'
  pmd 'net.sourceforge.pmd:pmd-core:5.4.0'
  pmd 'net.sourceforge.pmd:pmd-java:5.4.0'
  findbugs 'com.google.code.findbugs:findbugs:3.0.1'
}

eclipse {
  classpath {
    downloadJavadoc=false
    downloadSources=true

    minusConfigurations += [ configurations.solvers ]
    minusConfigurations += [ configurations.compile ]
    sourceSets -= [ sourceSets.main, sourceSets.test ]

    file {
      withXml {
        def node = it.asNode()
        node.appendNode('classpathentry', [kind: 'src', path: 'src/main/arch/riscv/extensions'])
        node.appendNode('classpathentry', [kind: 'src', path: 'src/test/java'])
      }
    }
  }
}

task getZ3(type: Copy) {
  windows {
    from zipTree( configurations.testRuntime.fileCollection { dep -> dep.name == 'z3' }.singleFile )
  }
  unix  {
    from tarTree( configurations.testRuntime.fileCollection { dep -> dep.name == 'z3' }.singleFile )
  }
  macOs {
    from zipTree( configurations.testRuntime.fileCollection { dep -> dep.name == 'z3' }.singleFile )
  }
  into 'tools/z3'
  eachFile { 
    it.relativePath = RelativePath.parse( true, it.relativePath.segments[1..-1].join('/') )
  }
}

test.dependsOn getZ3

task getCVC4(type: Copy) {
  windows {
    from configurations.testRuntime.fileCollection { dep -> dep.name == 'cvc4' }.singleFile
    rename '.*', 'cvc4-windows.exe'
  }
  unix  {
    from configurations.testRuntime.fileCollection { dep -> dep.name == 'cvc4' }.singleFile
    rename '.*', 'cvc4-unix.bin'
    fileMode = 0755
  }
  into 'tools'
}

test.dependsOn getCVC4

test {
  environment 'Z3_PATH', z3path
  environment 'CVC4_PATH', cvc4path
  environment 'QEMU_RISCV_PATH', "${project.projectDir}/build/tools/qemu/bin"
  environment 'TRACE_PATH', "${project.projectDir}/build/tools/traceutils"
  environment 'MICROTESK_HOME', "${project.projectDir}/build/target"
  environment 'TEST_PATH', "${project.projectDir}/build/test"
  testLogging.showStandardStreams = true
  ignoreFailures = true
  forkEvery = 1
}

test.doLast {
  delete fileTree(dir: "${project.projectDir}/build/target",
                  include: ['*.s', '*.dat', '*.log'])
}

compileJava {
  options.encoding = "UTF-8"
}

checkstyle {
  toolVersion = 6.5
  ignoreFailures = true
  showViolations = false
  configFile=file("${project.projectDir}/config/checkstyle/google_checks.xml")
}

findbugs {
  ignoreFailures = true
}

pmd {
  ignoreFailures = true
  ruleSets = [ "java-android,java-basic,java-braces,java-clone,java-codesize,java-controversial,"
             + "java-coupling,java-design,java-empty,java-finalizers,java-imports,java-j2ee,"
             + "java-javabeans,java-junit,java-logging-jakarta-commons,java-logging-java,"
             + "java-migrating,java-migrating_to_13,java-migrating_to_14,java-migrating_to_15,"
             + "java-migrating_to_junit4,java-naming,java-optimizations,java-strictexception,"
             + "java-strings,java-sunsecure,java-typeresolution,java-unnecessary,java-unusedcode"]
  ruleSetFiles = files("config/pmd/java/comments.xml")
}

jacoco {
  toolVersion = "0.7.5.201505241946"
}

jacocoTestReport {
  sourceDirectories = files("${project.projectDir}/build/generated-src/models/src/java")
  classDirectories = files("${project.projectDir}/build/classes/models")

  reports {
    xml.enabled true
    csv.enabled false
  }

  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ['**/*$Info**'])
    })
  }
}

sonarqube {
  properties {
    property "sonar.host.url", "http://forge.ispras.ru:9000"
    property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar"
    property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
    property "sonar.jdbc.username", "sonar"
    property "sonar.jdbc.password", "sonar"
  }
}

task cleanDistribution(type: Delete) {
  delete "${project.projectDir}/build/target"
}

task getDistribution(type: Copy) {
  from configurations.compile.fileCollection { dep -> dep.name == 'microtesk' }.singleFile
  rename '.*', 'microtesk.tar.gz'
  into "${project.projectDir}/build/tools"
}

task copyDistribution(type: Copy) {
  includeEmptyDirs = false
  from tarTree("${project.projectDir}/build/tools/microtesk.tar.gz")
  into "${project.projectDir}/build/target"
  eachFile {FileCopyDetails details ->
    details.path = (details.path - details.getPath().split('/')[0])
  }
  rename("ChangeLog", "ChangeLog.core")
  exclude "LICENSE"
  exclude "models.jar"
}

copyDistribution.dependsOn cleanDistribution
copyDistribution.dependsOn getDistribution

compileJava.dependsOn copyDistribution
compileTestJava.dependsOn copyDistribution

task copyRISCV(type: Copy) {
  from "${project.projectDir}/src/main/arch"
  into "${project.projectDir}/build/target/arch"
}

copyRISCV.dependsOn copyDistribution

task copySettings(type: Copy) {
  from "${project.projectDir}/src/main/etc"
  into "${project.projectDir}/build/target/etc"
}

copySettings.dependsOn copyDistribution

task copyChangeLog(type: Copy) {
  from "${project.projectDir}/ChangeLog"
  into "${project.projectDir}/build/target"
  rename "ChangeLog", "ChangeLog.RISCV"
}

copyChangeLog.dependsOn copyDistribution

task translateRISCV(type: JavaExec) {
  classpath = files("${project.projectDir}/build/target/lib/jars/microtesk.jar")
  classpath += sourceSets.main.runtimeClasspath
  environment 'MICROTESK_HOME', "${project.projectDir}/build/target"
  main = mainClassName
  args = [
    '-t',
    "${project.projectDir}/build/target/arch/riscv/model/riscv.nml",
    "${project.projectDir}/build/target/arch/riscv/model/mmu/riscv.mmu",
    '-od',
    "${project.projectDir}/build/generated-src/models",
    '-ed',
    "${project.projectDir}/build/target/arch/riscv/extensions",
    '-ri',
    "${specRevision}"
  ]
}

translateRISCV.dependsOn copyDistribution
translateRISCV.dependsOn copyRISCV
translateRISCV.dependsOn copySettings
translateRISCV.dependsOn copyChangeLog

task compileModels(type: JavaCompile) {
  source = fileTree(dir: 'build/generated-src/models/src', include: '**/*.java')
  destinationDir = file('build/classes/models')
  classpath = files("${project.projectDir}/build/target/lib/jars/microtesk.jar")
  classpath += sourceSets.main.runtimeClasspath
}

compileModels.dependsOn translateRISCV

jar {
  archiveName = 'models.jar'
  from('build/classes/models')
  manifest {
    attributes 'Title'  : projectTitle + ' Models'
    attributes 'Version': project.version
    attributes 'Vendor' : 'ISP RAS (http://www.ispras.ru)'
    attributes 'Built-By': System.getProperty('user.name')
    attributes 'Built-JDK': System.getProperty('java.version')
    attributes 'Class-Path': 'microtesk.jar'
  }
}

jar.dependsOn compileModels

task copyModelCode(type: Copy) {
  from "${project.projectDir}/build/generated-src/models"
  into "${project.projectDir}/build/target/gen"
}

copyModelCode.dependsOn jar
distTar.dependsOn copyModelCode

task copyModels(type: Copy) {
  from "${project.projectDir}/build/libs/models.jar"
  into "${project.projectDir}/build/target/lib/jars"
}

copyModels.dependsOn jar

task copyQemu(type: Copy) {
  from tarTree(configurations.qemu.fileCollection { dep -> dep.name == 'qemu4v' }.singleFile)
  into "${project.projectDir}/build/tools/qemu"
}

task copyTraceUtils(type: Copy) {
  from tarTree(configurations.traceutils.fileCollection { dep -> dep.name == 'traceutils' }
          .singleFile)
  into "${project.projectDir}/build/tools/"
}

task generateRiscvTemplates(type: JavaExec) {
  classpath = files("${project.projectDir}/build/target/lib/jars/microtesk.jar")
  classpath += sourceSets.main.runtimeClasspath
  environment 'MICROTESK_HOME', "${project.projectDir}/build/target"
  main = mainClassName
  args = [
    '-gt',
    'riscv',
    '-btn',
    'RiscVBaseTemplate',
    '-btp',
    '../riscv_base',
    '-ii',
    'ecall:ebreak:fence:fencei:mret:sret:uret:wfi:' +
    'c_addi4spn:c_lq:c_flw:c_fld:c_sw:c_sd:c_sq:c_fsw:c_fsd:c_nop:c_addi:c_addiw:c_addi16sp:c_li:' +
    'c_lui:c_srli:c_srli64:c_srai:c_srai64:c_lwsp:c_ldsp:c_swsp:c_sdsp:c_lw:c_ld:c_andi:c_add:' +
    'c_or:c_xor:c_sub:c_and:c_addw:c_subw:c_j:c_jal:c_beqz:c_bnez:c_slli:c_slli64:c_lqsp:c_flwsp:' +
    'c_fldsp:c_jr:c_jalr:c_mv:c_ebreak:c_sqsp:c_fswsp:c_fsdsp:jalr',
    '-od',
    "${project.projectDir}/build/target/arch/riscv/templates/autogen/"
  ]
}

generateRiscvTemplates.dependsOn copyModels
distTar.dependsOn generateRiscvTemplates

test.dependsOn copyModels
test.dependsOn copyModelCode
test.dependsOn copyQemu
test.dependsOn copyTraceUtils
test.dependsOn generateRiscvTemplates

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveName = projectName + '-src.jar'
  from(projectDir) {
    into(projectName)
    include('src/')
    include('config/')
    include('gradle/')
  }

  from(files { projectDir.listFiles() }.filter { File file -> file.isFile() ? file : null }) {
    into(projectName)
    exclude('gradle-local.properties')
  }
}

javadoc {
  classpath += sourceSets.test.compileClasspath
  source += fileTree("${project.projectDir}/build/target/arch/riscv/extensions")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveName = projectName + '-javadoc.jar'
  from javadoc.destinationDir
}

tasks.withType(Tar) {
  compression = Compression.GZIP
  extension = 'tar.gz'
}

distributions {
  main {
    baseName = projectName

    contents {
      exclude "microtesk-*.tar.gz"
      exclude "models.jar"

      exclude 'LICENSE'
      exclude 'NOTICE'
      exclude 'README'

      from ("${project.projectDir}/build/target") {
        into('')
      }

      from(sourcesJar) {
        into('src')
      }

      from(javadocJar) {
        into('doc')
      }
    }
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      groupId projectGroup
      artifactId projectName
      version project.version
      from components.java

      artifact(sourcesJar) {
        classifier = "sources"
      }

      artifact(distTar)
    }
  }

  repositories {
    maven {
      if(project.version.endsWith('-SNAPSHOT')) {
        url repoUrlStr + 'snapshots'
      } else {
        url repoUrlStr + 'releases'
      }
      credentials {
        username repoUserStr
        password repoPasswordStr
      }
      authentication {
        basic(BasicAuthentication)
      }
    }
  }
}

afterReleaseBuild.dependsOn publish
