Analyzing file: fibonacci.bin...
addi a5, zero, 1
sd a5, 0(a0)
sd a5, 8(a0)
addi a5, zero, 2
bgeu a5, a1, 52
addi a5, zero, 4
bgeu a5, a1, 50
addi a3, a1, -5
andi a3, a3, -2
addi a2, a0, 16
addi a3, a3, 4
addi a4, zero, 1
addi a5, zero, 1
addi a6, zero, 2
add a5, a5, a4
add a4, a4, a5
sd a5, 0(a2)
sd a4, 8(a2)
addi a6, a6, 2
addi a2, a2, 16
bne a6, a3, -12
slli a5, a3, 0x3
add a5, a0, a5
ld a4, -16(a5)
ld a2, -8(a5)
addi a5, a5, 8
addi a3, a3, 1
add a4, a4, a2
sd a4, -8(a5)
bltu a3, a1, -12
jalr zero, ra, 0
addi a3, zero, 2
jal zero, 0xfffea
COMPILE
insn_0.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 0} X, i12 1} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_0.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 0} X, i12 1} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_0.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_0.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_1.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 10} X, i12 0} sd} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_1.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb24
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 10} X, i12 0} sd} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
store i64 %19, i64 rs2_var
%17 = load i64, i64 rs2_var
%20 = i64 Lshr i64 %14, 3
%21 = Extract i53 of i64 %20 <52, 0>
store i53 %21, i53 mem_index
%22 = Extract i3 of i64 %14 <2, 0>
%23 = i1 Eq i3 %22, 0
br i1 %23, label %bb8, label %bb9
bb8:
%24 = load i53, i53 mem_index
store i64 %17, [9007199254740992, i64] MEM[%24]
br label %bb10
bb9:
%25 = load i53, i53 mem_index
%26 = i53 Add i53 %25, 1
%27 = load i64, [9007199254740992, i64] MEM[%26]
store i64 %27, i64 tmp_dword1
%28 = load i53, i53 mem_index
%29 = load i64, [9007199254740992, i64] MEM[%28]
store i64 %29, i64 tmp_dword2
%30 = Extract i3 of i64 %14 <2, 0>
%31 = i1 Eq i3 %30, 1
br i1 %31, label %bb11, label %bb12
bb10:
br label %bb6
bb11:
%32 = i64 Lshr i64 %17, 56
%33 = Extract i8 of i64 %32 <7, 0>
%35 = load i64, i64 tmp_dword1
%36 = Zext i8 %33 to i64
%37 = i64 And i64 %35, -256
%38 = i64 Shl i64 %36, 0
%34 = i64 Or i64 %37, %38
store i64 %34, i64 tmp_dword1
%39 = i64 Lshr i64 %17, 0
%40 = Extract i56 of i64 %39 <55, 0>
%42 = load i64, i64 tmp_dword2
%43 = Zext i56 %40 to i64
%44 = i64 And i64 %42, 255
%45 = i64 Shl i64 %43, 8
%41 = i64 Or i64 %44, %45
store i64 %41, i64 tmp_dword2
br label %bb13
bb12:
%46 = Extract i3 of i64 %14 <2, 0>
%47 = i1 Eq i3 %46, 2
br i1 %47, label %bb14, label %bb15
bb13:
%140 = load i64, i64 tmp_dword1
%141 = load i53, i53 mem_index
%142 = i53 Add i53 %141, 1
store i64 %140, [9007199254740992, i64] MEM[%142]
%143 = load i64, i64 tmp_dword2
%144 = load i53, i53 mem_index
store i64 %143, [9007199254740992, i64] MEM[%144]
br label %bb10
bb14:
%48 = i64 Lshr i64 %17, 48
%49 = Extract i16 of i64 %48 <15, 0>
%51 = load i64, i64 tmp_dword1
%52 = Zext i16 %49 to i64
%53 = i64 And i64 %51, -65536
%54 = i64 Shl i64 %52, 0
%50 = i64 Or i64 %53, %54
store i64 %50, i64 tmp_dword1
%55 = i64 Lshr i64 %17, 0
%56 = Extract i48 of i64 %55 <47, 0>
%58 = load i64, i64 tmp_dword2
%59 = Zext i48 %56 to i64
%60 = i64 And i64 %58, 65535
%61 = i64 Shl i64 %59, 16
%57 = i64 Or i64 %60, %61
store i64 %57, i64 tmp_dword2
br label %bb13
bb15:
%62 = Extract i3 of i64 %14 <2, 0>
%63 = i1 Eq i3 %62, 3
br i1 %63, label %bb16, label %bb17
bb16:
%64 = i64 Lshr i64 %17, 40
%65 = Extract i24 of i64 %64 <23, 0>
%67 = load i64, i64 tmp_dword1
%68 = Zext i24 %65 to i64
%69 = i64 And i64 %67, -16777216
%70 = i64 Shl i64 %68, 0
%66 = i64 Or i64 %69, %70
store i64 %66, i64 tmp_dword1
%71 = i64 Lshr i64 %17, 0
%72 = Extract i40 of i64 %71 <39, 0>
%74 = load i64, i64 tmp_dword2
%75 = Zext i40 %72 to i64
%76 = i64 And i64 %74, 16777215
%77 = i64 Shl i64 %75, 24
%73 = i64 Or i64 %76, %77
store i64 %73, i64 tmp_dword2
br label %bb13
bb17:
%78 = Extract i3 of i64 %14 <2, 0>
%79 = i1 Eq i3 %78, -4
br i1 %79, label %bb18, label %bb19
bb18:
%80 = i64 Lshr i64 %17, 32
%81 = Extract i32 of i64 %80 <31, 0>
%83 = load i64, i64 tmp_dword1
%84 = Zext i32 %81 to i64
%85 = i64 And i64 %83, -4294967296
%86 = i64 Shl i64 %84, 0
%82 = i64 Or i64 %85, %86
store i64 %82, i64 tmp_dword1
%87 = i64 Lshr i64 %17, 0
%88 = Extract i32 of i64 %87 <31, 0>
%90 = load i64, i64 tmp_dword2
%91 = Zext i32 %88 to i64
%92 = i64 And i64 %90, 4294967295
%93 = i64 Shl i64 %91, 32
%89 = i64 Or i64 %92, %93
store i64 %89, i64 tmp_dword2
br label %bb13
bb19:
%94 = Extract i3 of i64 %14 <2, 0>
%95 = i1 Eq i3 %94, -3
br i1 %95, label %bb20, label %bb21
bb20:
%96 = i64 Lshr i64 %17, 24
%97 = Extract i40 of i64 %96 <39, 0>
%99 = load i64, i64 tmp_dword1
%100 = Zext i40 %97 to i64
%101 = i64 And i64 %99, -1099511627776
%102 = i64 Shl i64 %100, 0
%98 = i64 Or i64 %101, %102
store i64 %98, i64 tmp_dword1
%103 = i64 Lshr i64 %17, 0
%104 = Extract i24 of i64 %103 <23, 0>
%106 = load i64, i64 tmp_dword2
%107 = Zext i24 %104 to i64
%108 = i64 And i64 %106, 1099511627775
%109 = i64 Shl i64 %107, 40
%105 = i64 Or i64 %108, %109
store i64 %105, i64 tmp_dword2
br label %bb13
bb21:
%110 = Extract i3 of i64 %14 <2, 0>
%111 = i1 Eq i3 %110, -2
br i1 %111, label %bb22, label %bb23
bb22:
%112 = i64 Lshr i64 %17, 16
%113 = Extract i48 of i64 %112 <47, 0>
%115 = load i64, i64 tmp_dword1
%116 = Zext i48 %113 to i64
%117 = i64 And i64 %115, -281474976710656
%118 = i64 Shl i64 %116, 0
%114 = i64 Or i64 %117, %118
store i64 %114, i64 tmp_dword1
%119 = i64 Lshr i64 %17, 0
%120 = Extract i16 of i64 %119 <15, 0>
%122 = load i64, i64 tmp_dword2
%123 = Zext i16 %120 to i64
%124 = i64 And i64 %122, 281474976710655
%125 = i64 Shl i64 %123, 48
%121 = i64 Or i64 %124, %125
store i64 %121, i64 tmp_dword2
br label %bb13
bb23:
%126 = i64 Lshr i64 %17, 8
%127 = Extract i56 of i64 %126 <55, 0>
%129 = load i64, i64 tmp_dword1
%130 = Zext i56 %127 to i64
%131 = i64 And i64 %129, -72057594037927936
%132 = i64 Shl i64 %130, 0
%128 = i64 Or i64 %131, %132
store i64 %128, i64 tmp_dword1
%133 = i64 Lshr i64 %17, 0
%134 = Extract i8 of i64 %133 <7, 0>
%136 = load i64, i64 tmp_dword2
%137 = Zext i8 %134 to i64
%138 = i64 And i64 %136, 72057594037927935
%139 = i64 Shl i64 %137, 56
%135 = i64 Or i64 %138, %139
store i64 %135, i64 tmp_dword2
br label %bb13
bb24:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_1.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb5, label %bb6
bb5:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
br label %bb10
bb8:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb11
bb9:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb12, label %bb13
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb14, label %bb15
bb11:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb7
bb12:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb11
bb13:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb16, label %bb17
bb14:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb18
bb15:
br label %bb18
bb16:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb11
bb17:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb19, label %bb20
bb18:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb19:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb11
bb20:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb21, label %bb22
bb21:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb11
bb22:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb23, label %bb24
bb23:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb11
bb24:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb11

inline blocks
insn_1.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

COMPILE
insn_2.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 10} X, i12 8} sd} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_2.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb24
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 10} X, i12 8} sd} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
store i64 %19, i64 rs2_var
%17 = load i64, i64 rs2_var
%20 = i64 Lshr i64 %14, 3
%21 = Extract i53 of i64 %20 <52, 0>
store i53 %21, i53 mem_index
%22 = Extract i3 of i64 %14 <2, 0>
%23 = i1 Eq i3 %22, 0
br i1 %23, label %bb8, label %bb9
bb8:
%24 = load i53, i53 mem_index
store i64 %17, [9007199254740992, i64] MEM[%24]
br label %bb10
bb9:
%25 = load i53, i53 mem_index
%26 = i53 Add i53 %25, 1
%27 = load i64, [9007199254740992, i64] MEM[%26]
store i64 %27, i64 tmp_dword1
%28 = load i53, i53 mem_index
%29 = load i64, [9007199254740992, i64] MEM[%28]
store i64 %29, i64 tmp_dword2
%30 = Extract i3 of i64 %14 <2, 0>
%31 = i1 Eq i3 %30, 1
br i1 %31, label %bb11, label %bb12
bb10:
br label %bb6
bb11:
%32 = i64 Lshr i64 %17, 56
%33 = Extract i8 of i64 %32 <7, 0>
%35 = load i64, i64 tmp_dword1
%36 = Zext i8 %33 to i64
%37 = i64 And i64 %35, -256
%38 = i64 Shl i64 %36, 0
%34 = i64 Or i64 %37, %38
store i64 %34, i64 tmp_dword1
%39 = i64 Lshr i64 %17, 0
%40 = Extract i56 of i64 %39 <55, 0>
%42 = load i64, i64 tmp_dword2
%43 = Zext i56 %40 to i64
%44 = i64 And i64 %42, 255
%45 = i64 Shl i64 %43, 8
%41 = i64 Or i64 %44, %45
store i64 %41, i64 tmp_dword2
br label %bb13
bb12:
%46 = Extract i3 of i64 %14 <2, 0>
%47 = i1 Eq i3 %46, 2
br i1 %47, label %bb14, label %bb15
bb13:
%140 = load i64, i64 tmp_dword1
%141 = load i53, i53 mem_index
%142 = i53 Add i53 %141, 1
store i64 %140, [9007199254740992, i64] MEM[%142]
%143 = load i64, i64 tmp_dword2
%144 = load i53, i53 mem_index
store i64 %143, [9007199254740992, i64] MEM[%144]
br label %bb10
bb14:
%48 = i64 Lshr i64 %17, 48
%49 = Extract i16 of i64 %48 <15, 0>
%51 = load i64, i64 tmp_dword1
%52 = Zext i16 %49 to i64
%53 = i64 And i64 %51, -65536
%54 = i64 Shl i64 %52, 0
%50 = i64 Or i64 %53, %54
store i64 %50, i64 tmp_dword1
%55 = i64 Lshr i64 %17, 0
%56 = Extract i48 of i64 %55 <47, 0>
%58 = load i64, i64 tmp_dword2
%59 = Zext i48 %56 to i64
%60 = i64 And i64 %58, 65535
%61 = i64 Shl i64 %59, 16
%57 = i64 Or i64 %60, %61
store i64 %57, i64 tmp_dword2
br label %bb13
bb15:
%62 = Extract i3 of i64 %14 <2, 0>
%63 = i1 Eq i3 %62, 3
br i1 %63, label %bb16, label %bb17
bb16:
%64 = i64 Lshr i64 %17, 40
%65 = Extract i24 of i64 %64 <23, 0>
%67 = load i64, i64 tmp_dword1
%68 = Zext i24 %65 to i64
%69 = i64 And i64 %67, -16777216
%70 = i64 Shl i64 %68, 0
%66 = i64 Or i64 %69, %70
store i64 %66, i64 tmp_dword1
%71 = i64 Lshr i64 %17, 0
%72 = Extract i40 of i64 %71 <39, 0>
%74 = load i64, i64 tmp_dword2
%75 = Zext i40 %72 to i64
%76 = i64 And i64 %74, 16777215
%77 = i64 Shl i64 %75, 24
%73 = i64 Or i64 %76, %77
store i64 %73, i64 tmp_dword2
br label %bb13
bb17:
%78 = Extract i3 of i64 %14 <2, 0>
%79 = i1 Eq i3 %78, -4
br i1 %79, label %bb18, label %bb19
bb18:
%80 = i64 Lshr i64 %17, 32
%81 = Extract i32 of i64 %80 <31, 0>
%83 = load i64, i64 tmp_dword1
%84 = Zext i32 %81 to i64
%85 = i64 And i64 %83, -4294967296
%86 = i64 Shl i64 %84, 0
%82 = i64 Or i64 %85, %86
store i64 %82, i64 tmp_dword1
%87 = i64 Lshr i64 %17, 0
%88 = Extract i32 of i64 %87 <31, 0>
%90 = load i64, i64 tmp_dword2
%91 = Zext i32 %88 to i64
%92 = i64 And i64 %90, 4294967295
%93 = i64 Shl i64 %91, 32
%89 = i64 Or i64 %92, %93
store i64 %89, i64 tmp_dword2
br label %bb13
bb19:
%94 = Extract i3 of i64 %14 <2, 0>
%95 = i1 Eq i3 %94, -3
br i1 %95, label %bb20, label %bb21
bb20:
%96 = i64 Lshr i64 %17, 24
%97 = Extract i40 of i64 %96 <39, 0>
%99 = load i64, i64 tmp_dword1
%100 = Zext i40 %97 to i64
%101 = i64 And i64 %99, -1099511627776
%102 = i64 Shl i64 %100, 0
%98 = i64 Or i64 %101, %102
store i64 %98, i64 tmp_dword1
%103 = i64 Lshr i64 %17, 0
%104 = Extract i24 of i64 %103 <23, 0>
%106 = load i64, i64 tmp_dword2
%107 = Zext i24 %104 to i64
%108 = i64 And i64 %106, 1099511627775
%109 = i64 Shl i64 %107, 40
%105 = i64 Or i64 %108, %109
store i64 %105, i64 tmp_dword2
br label %bb13
bb21:
%110 = Extract i3 of i64 %14 <2, 0>
%111 = i1 Eq i3 %110, -2
br i1 %111, label %bb22, label %bb23
bb22:
%112 = i64 Lshr i64 %17, 16
%113 = Extract i48 of i64 %112 <47, 0>
%115 = load i64, i64 tmp_dword1
%116 = Zext i48 %113 to i64
%117 = i64 And i64 %115, -281474976710656
%118 = i64 Shl i64 %116, 0
%114 = i64 Or i64 %117, %118
store i64 %114, i64 tmp_dword1
%119 = i64 Lshr i64 %17, 0
%120 = Extract i16 of i64 %119 <15, 0>
%122 = load i64, i64 tmp_dword2
%123 = Zext i16 %120 to i64
%124 = i64 And i64 %122, 281474976710655
%125 = i64 Shl i64 %123, 48
%121 = i64 Or i64 %124, %125
store i64 %121, i64 tmp_dword2
br label %bb13
bb23:
%126 = i64 Lshr i64 %17, 8
%127 = Extract i56 of i64 %126 <55, 0>
%129 = load i64, i64 tmp_dword1
%130 = Zext i56 %127 to i64
%131 = i64 And i64 %129, -72057594037927936
%132 = i64 Shl i64 %130, 0
%128 = i64 Or i64 %131, %132
store i64 %128, i64 tmp_dword1
%133 = i64 Lshr i64 %17, 0
%134 = Extract i8 of i64 %133 <7, 0>
%136 = load i64, i64 tmp_dword2
%137 = Zext i8 %134 to i64
%138 = i64 And i64 %136, 72057594037927935
%139 = i64 Shl i64 %137, 56
%135 = i64 Or i64 %138, %139
store i64 %135, i64 tmp_dword2
br label %bb13
bb24:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_2.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb5, label %bb6
bb5:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
br label %bb10
bb8:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb11
bb9:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb12, label %bb13
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb14, label %bb15
bb11:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb7
bb12:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb11
bb13:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb16, label %bb17
bb14:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb18
bb15:
br label %bb18
bb16:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb11
bb17:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb19, label %bb20
bb18:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb19:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb11
bb20:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb21, label %bb22
bb21:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb11
bb22:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb23, label %bb24
bb23:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb11
bb24:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb11

inline blocks
insn_2.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

COMPILE
insn_3.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 0} X, i12 2} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_3.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 0} X, i12 2} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_3.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_3.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_4.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 15} X, func void [i5] {i5 11} X, func void [i12] {i12 52} BRANCH_IMM} bgeu} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_4.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb10
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i12]]] {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 15} X, func void [i5] {i5 11} X, func void [i12] {i12 52} BRANCH_IMM} bgeu} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
%20 = Disclose i5 of func i64 [i5] %10 i32 0
%21 = load i64, [32, i64] XREG[%20]
%12 = i1 Uge i64 %19, %21
br i1 %12, label %bb8, label %bb9
bb8:
br label %bb13
bb9:
br label %bb6
bb10:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7
bb11:
%14 = Sext i12 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb12:
%13 = i12 Use i12 %22
br label %bb11
bb13:
%22 = Disclose void of func i12 [] %11 i32 0
br label %bb12

propagate
insn_4.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Uge i64 %13, %14
br i1 %8, label %bb5, label %bb6
bb5:
br label %bb7
bb6:
br label %bb8
bb7:
br label %bb9
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb10, label %bb11
bb9:
br label %bb12
bb10:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb11:
br label %bb13
bb12:
%9 = Sext i12 52 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_4.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Uge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 52 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_5.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 0} X, i12 4} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_5.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 0} X, i12 4} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_5.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_5.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_6.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 15} X, func void [i5] {i5 11} X, func void [i12] {i12 50} BRANCH_IMM} bgeu} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_6.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb10
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i12]]] {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 15} X, func void [i5] {i5 11} X, func void [i12] {i12 50} BRANCH_IMM} bgeu} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
%20 = Disclose i5 of func i64 [i5] %10 i32 0
%21 = load i64, [32, i64] XREG[%20]
%12 = i1 Uge i64 %19, %21
br i1 %12, label %bb8, label %bb9
bb8:
br label %bb13
bb9:
br label %bb6
bb10:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7
bb11:
%14 = Sext i12 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb12:
%13 = i12 Use i12 %22
br label %bb11
bb13:
%22 = Disclose void of func i12 [] %11 i32 0
br label %bb12

propagate
insn_6.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Uge i64 %13, %14
br i1 %8, label %bb5, label %bb6
bb5:
br label %bb7
bb6:
br label %bb8
bb7:
br label %bb9
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb10, label %bb11
bb9:
br label %bb12
bb10:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb11:
br label %bb13
bb12:
%9 = Sext i12 50 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_6.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Uge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 50 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_7.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 11} X, i12 4091} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_7.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 11} X, i12 4091} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_7.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4091 to i64
%10 = load i64, [32, i64] XREG[11]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_7.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4091 to i64
%10 = load i64, [32, i64] XREG[11]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_8.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 13} X, i12 4094} andi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_8.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 13} X, i12 4094} andi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 And i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_8.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4094 to i64
%10 = load i64, [32, i64] XREG[13]
%9 = i64 And i64 %10, %8
store i64 %9, [32, i64] XREG[13]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_8.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4094 to i64
%10 = load i64, [32, i64] XREG[13]
%9 = i64 And i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_9.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 12} X, func void [i5] {i5 10} X, i12 16} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_9.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 12} X, func void [i5] {i5 10} X, i12 16} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_9.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[12]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_9.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[12]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_10.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 13} X, i12 4} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_10.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 13} X, i12 4} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_10.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[13]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_10.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[13]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_11.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 14} X, func void [i5] {i5 0} X, i12 1} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_11.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 14} X, func void [i5] {i5 0} X, i12 1} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_11.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[14]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_11.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_12.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 0} X, i12 1} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_12.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 0} X, i12 1} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_12.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_12.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_13.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 16} X, func void [i5] {i5 0} X, i12 2} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_13.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 16} X, func void [i5] {i5 0} X, i12 2} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_13.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[16]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_13.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[16]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_14.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 15} X, func void [i5] {i5 15} X, func void [i5] {i5 14} X} add} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_14.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i5]]] {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 15} X, func void [i5] {i5 15} X, func void [i5] {i5 14} X} add} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%13 = Disclose i5 of func i64 [i5] %10 i32 0
%14 = load i64, [32, i64] XREG[%13]
%15 = Disclose i5 of func i64 [i5] %11 i32 0
%16 = load i64, [32, i64] XREG[%15]
%12 = i64 Add i64 %14, %16
%17 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %12, [32, i64] XREG[%17]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_14.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%9 = load i64, [32, i64] XREG[15]
%10 = load i64, [32, i64] XREG[14]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_14.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[15]
%10 = load i64, [32, i64] XREG[14]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_15.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 14} X, func void [i5] {i5 14} X, func void [i5] {i5 15} X} add} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_15.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i5]]] {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 14} X, func void [i5] {i5 14} X, func void [i5] {i5 15} X} add} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%13 = Disclose i5 of func i64 [i5] %10 i32 0
%14 = load i64, [32, i64] XREG[%13]
%15 = Disclose i5 of func i64 [i5] %11 i32 0
%16 = load i64, [32, i64] XREG[%15]
%12 = i64 Add i64 %14, %16
%17 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %12, [32, i64] XREG[%17]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_15.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%9 = load i64, [32, i64] XREG[14]
%10 = load i64, [32, i64] XREG[15]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[14]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_15.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[14]
%10 = load i64, [32, i64] XREG[15]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_16.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 12} X, i12 0} sd} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_16.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb24
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 12} X, i12 0} sd} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
store i64 %19, i64 rs2_var
%17 = load i64, i64 rs2_var
%20 = i64 Lshr i64 %14, 3
%21 = Extract i53 of i64 %20 <52, 0>
store i53 %21, i53 mem_index
%22 = Extract i3 of i64 %14 <2, 0>
%23 = i1 Eq i3 %22, 0
br i1 %23, label %bb8, label %bb9
bb8:
%24 = load i53, i53 mem_index
store i64 %17, [9007199254740992, i64] MEM[%24]
br label %bb10
bb9:
%25 = load i53, i53 mem_index
%26 = i53 Add i53 %25, 1
%27 = load i64, [9007199254740992, i64] MEM[%26]
store i64 %27, i64 tmp_dword1
%28 = load i53, i53 mem_index
%29 = load i64, [9007199254740992, i64] MEM[%28]
store i64 %29, i64 tmp_dword2
%30 = Extract i3 of i64 %14 <2, 0>
%31 = i1 Eq i3 %30, 1
br i1 %31, label %bb11, label %bb12
bb10:
br label %bb6
bb11:
%32 = i64 Lshr i64 %17, 56
%33 = Extract i8 of i64 %32 <7, 0>
%35 = load i64, i64 tmp_dword1
%36 = Zext i8 %33 to i64
%37 = i64 And i64 %35, -256
%38 = i64 Shl i64 %36, 0
%34 = i64 Or i64 %37, %38
store i64 %34, i64 tmp_dword1
%39 = i64 Lshr i64 %17, 0
%40 = Extract i56 of i64 %39 <55, 0>
%42 = load i64, i64 tmp_dword2
%43 = Zext i56 %40 to i64
%44 = i64 And i64 %42, 255
%45 = i64 Shl i64 %43, 8
%41 = i64 Or i64 %44, %45
store i64 %41, i64 tmp_dword2
br label %bb13
bb12:
%46 = Extract i3 of i64 %14 <2, 0>
%47 = i1 Eq i3 %46, 2
br i1 %47, label %bb14, label %bb15
bb13:
%140 = load i64, i64 tmp_dword1
%141 = load i53, i53 mem_index
%142 = i53 Add i53 %141, 1
store i64 %140, [9007199254740992, i64] MEM[%142]
%143 = load i64, i64 tmp_dword2
%144 = load i53, i53 mem_index
store i64 %143, [9007199254740992, i64] MEM[%144]
br label %bb10
bb14:
%48 = i64 Lshr i64 %17, 48
%49 = Extract i16 of i64 %48 <15, 0>
%51 = load i64, i64 tmp_dword1
%52 = Zext i16 %49 to i64
%53 = i64 And i64 %51, -65536
%54 = i64 Shl i64 %52, 0
%50 = i64 Or i64 %53, %54
store i64 %50, i64 tmp_dword1
%55 = i64 Lshr i64 %17, 0
%56 = Extract i48 of i64 %55 <47, 0>
%58 = load i64, i64 tmp_dword2
%59 = Zext i48 %56 to i64
%60 = i64 And i64 %58, 65535
%61 = i64 Shl i64 %59, 16
%57 = i64 Or i64 %60, %61
store i64 %57, i64 tmp_dword2
br label %bb13
bb15:
%62 = Extract i3 of i64 %14 <2, 0>
%63 = i1 Eq i3 %62, 3
br i1 %63, label %bb16, label %bb17
bb16:
%64 = i64 Lshr i64 %17, 40
%65 = Extract i24 of i64 %64 <23, 0>
%67 = load i64, i64 tmp_dword1
%68 = Zext i24 %65 to i64
%69 = i64 And i64 %67, -16777216
%70 = i64 Shl i64 %68, 0
%66 = i64 Or i64 %69, %70
store i64 %66, i64 tmp_dword1
%71 = i64 Lshr i64 %17, 0
%72 = Extract i40 of i64 %71 <39, 0>
%74 = load i64, i64 tmp_dword2
%75 = Zext i40 %72 to i64
%76 = i64 And i64 %74, 16777215
%77 = i64 Shl i64 %75, 24
%73 = i64 Or i64 %76, %77
store i64 %73, i64 tmp_dword2
br label %bb13
bb17:
%78 = Extract i3 of i64 %14 <2, 0>
%79 = i1 Eq i3 %78, -4
br i1 %79, label %bb18, label %bb19
bb18:
%80 = i64 Lshr i64 %17, 32
%81 = Extract i32 of i64 %80 <31, 0>
%83 = load i64, i64 tmp_dword1
%84 = Zext i32 %81 to i64
%85 = i64 And i64 %83, -4294967296
%86 = i64 Shl i64 %84, 0
%82 = i64 Or i64 %85, %86
store i64 %82, i64 tmp_dword1
%87 = i64 Lshr i64 %17, 0
%88 = Extract i32 of i64 %87 <31, 0>
%90 = load i64, i64 tmp_dword2
%91 = Zext i32 %88 to i64
%92 = i64 And i64 %90, 4294967295
%93 = i64 Shl i64 %91, 32
%89 = i64 Or i64 %92, %93
store i64 %89, i64 tmp_dword2
br label %bb13
bb19:
%94 = Extract i3 of i64 %14 <2, 0>
%95 = i1 Eq i3 %94, -3
br i1 %95, label %bb20, label %bb21
bb20:
%96 = i64 Lshr i64 %17, 24
%97 = Extract i40 of i64 %96 <39, 0>
%99 = load i64, i64 tmp_dword1
%100 = Zext i40 %97 to i64
%101 = i64 And i64 %99, -1099511627776
%102 = i64 Shl i64 %100, 0
%98 = i64 Or i64 %101, %102
store i64 %98, i64 tmp_dword1
%103 = i64 Lshr i64 %17, 0
%104 = Extract i24 of i64 %103 <23, 0>
%106 = load i64, i64 tmp_dword2
%107 = Zext i24 %104 to i64
%108 = i64 And i64 %106, 1099511627775
%109 = i64 Shl i64 %107, 40
%105 = i64 Or i64 %108, %109
store i64 %105, i64 tmp_dword2
br label %bb13
bb21:
%110 = Extract i3 of i64 %14 <2, 0>
%111 = i1 Eq i3 %110, -2
br i1 %111, label %bb22, label %bb23
bb22:
%112 = i64 Lshr i64 %17, 16
%113 = Extract i48 of i64 %112 <47, 0>
%115 = load i64, i64 tmp_dword1
%116 = Zext i48 %113 to i64
%117 = i64 And i64 %115, -281474976710656
%118 = i64 Shl i64 %116, 0
%114 = i64 Or i64 %117, %118
store i64 %114, i64 tmp_dword1
%119 = i64 Lshr i64 %17, 0
%120 = Extract i16 of i64 %119 <15, 0>
%122 = load i64, i64 tmp_dword2
%123 = Zext i16 %120 to i64
%124 = i64 And i64 %122, 281474976710655
%125 = i64 Shl i64 %123, 48
%121 = i64 Or i64 %124, %125
store i64 %121, i64 tmp_dword2
br label %bb13
bb23:
%126 = i64 Lshr i64 %17, 8
%127 = Extract i56 of i64 %126 <55, 0>
%129 = load i64, i64 tmp_dword1
%130 = Zext i56 %127 to i64
%131 = i64 And i64 %129, -72057594037927936
%132 = i64 Shl i64 %130, 0
%128 = i64 Or i64 %131, %132
store i64 %128, i64 tmp_dword1
%133 = i64 Lshr i64 %17, 0
%134 = Extract i8 of i64 %133 <7, 0>
%136 = load i64, i64 tmp_dword2
%137 = Zext i8 %134 to i64
%138 = i64 And i64 %136, 72057594037927935
%139 = i64 Shl i64 %137, 56
%135 = i64 Or i64 %138, %139
store i64 %135, i64 tmp_dword2
br label %bb13
bb24:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_16.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb5, label %bb6
bb5:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
br label %bb10
bb8:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb11
bb9:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb12, label %bb13
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb14, label %bb15
bb11:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb7
bb12:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb11
bb13:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb16, label %bb17
bb14:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb18
bb15:
br label %bb18
bb16:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb11
bb17:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb19, label %bb20
bb18:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb19:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb11
bb20:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb21, label %bb22
bb21:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb11
bb22:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb23, label %bb24
bb23:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb11
bb24:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb11

inline blocks
insn_16.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

COMPILE
insn_17.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 14} X, func void [i5] {i5 12} X, i12 8} sd} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_17.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb24
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 14} X, func void [i5] {i5 12} X, i12 8} sd} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
store i64 %19, i64 rs2_var
%17 = load i64, i64 rs2_var
%20 = i64 Lshr i64 %14, 3
%21 = Extract i53 of i64 %20 <52, 0>
store i53 %21, i53 mem_index
%22 = Extract i3 of i64 %14 <2, 0>
%23 = i1 Eq i3 %22, 0
br i1 %23, label %bb8, label %bb9
bb8:
%24 = load i53, i53 mem_index
store i64 %17, [9007199254740992, i64] MEM[%24]
br label %bb10
bb9:
%25 = load i53, i53 mem_index
%26 = i53 Add i53 %25, 1
%27 = load i64, [9007199254740992, i64] MEM[%26]
store i64 %27, i64 tmp_dword1
%28 = load i53, i53 mem_index
%29 = load i64, [9007199254740992, i64] MEM[%28]
store i64 %29, i64 tmp_dword2
%30 = Extract i3 of i64 %14 <2, 0>
%31 = i1 Eq i3 %30, 1
br i1 %31, label %bb11, label %bb12
bb10:
br label %bb6
bb11:
%32 = i64 Lshr i64 %17, 56
%33 = Extract i8 of i64 %32 <7, 0>
%35 = load i64, i64 tmp_dword1
%36 = Zext i8 %33 to i64
%37 = i64 And i64 %35, -256
%38 = i64 Shl i64 %36, 0
%34 = i64 Or i64 %37, %38
store i64 %34, i64 tmp_dword1
%39 = i64 Lshr i64 %17, 0
%40 = Extract i56 of i64 %39 <55, 0>
%42 = load i64, i64 tmp_dword2
%43 = Zext i56 %40 to i64
%44 = i64 And i64 %42, 255
%45 = i64 Shl i64 %43, 8
%41 = i64 Or i64 %44, %45
store i64 %41, i64 tmp_dword2
br label %bb13
bb12:
%46 = Extract i3 of i64 %14 <2, 0>
%47 = i1 Eq i3 %46, 2
br i1 %47, label %bb14, label %bb15
bb13:
%140 = load i64, i64 tmp_dword1
%141 = load i53, i53 mem_index
%142 = i53 Add i53 %141, 1
store i64 %140, [9007199254740992, i64] MEM[%142]
%143 = load i64, i64 tmp_dword2
%144 = load i53, i53 mem_index
store i64 %143, [9007199254740992, i64] MEM[%144]
br label %bb10
bb14:
%48 = i64 Lshr i64 %17, 48
%49 = Extract i16 of i64 %48 <15, 0>
%51 = load i64, i64 tmp_dword1
%52 = Zext i16 %49 to i64
%53 = i64 And i64 %51, -65536
%54 = i64 Shl i64 %52, 0
%50 = i64 Or i64 %53, %54
store i64 %50, i64 tmp_dword1
%55 = i64 Lshr i64 %17, 0
%56 = Extract i48 of i64 %55 <47, 0>
%58 = load i64, i64 tmp_dword2
%59 = Zext i48 %56 to i64
%60 = i64 And i64 %58, 65535
%61 = i64 Shl i64 %59, 16
%57 = i64 Or i64 %60, %61
store i64 %57, i64 tmp_dword2
br label %bb13
bb15:
%62 = Extract i3 of i64 %14 <2, 0>
%63 = i1 Eq i3 %62, 3
br i1 %63, label %bb16, label %bb17
bb16:
%64 = i64 Lshr i64 %17, 40
%65 = Extract i24 of i64 %64 <23, 0>
%67 = load i64, i64 tmp_dword1
%68 = Zext i24 %65 to i64
%69 = i64 And i64 %67, -16777216
%70 = i64 Shl i64 %68, 0
%66 = i64 Or i64 %69, %70
store i64 %66, i64 tmp_dword1
%71 = i64 Lshr i64 %17, 0
%72 = Extract i40 of i64 %71 <39, 0>
%74 = load i64, i64 tmp_dword2
%75 = Zext i40 %72 to i64
%76 = i64 And i64 %74, 16777215
%77 = i64 Shl i64 %75, 24
%73 = i64 Or i64 %76, %77
store i64 %73, i64 tmp_dword2
br label %bb13
bb17:
%78 = Extract i3 of i64 %14 <2, 0>
%79 = i1 Eq i3 %78, -4
br i1 %79, label %bb18, label %bb19
bb18:
%80 = i64 Lshr i64 %17, 32
%81 = Extract i32 of i64 %80 <31, 0>
%83 = load i64, i64 tmp_dword1
%84 = Zext i32 %81 to i64
%85 = i64 And i64 %83, -4294967296
%86 = i64 Shl i64 %84, 0
%82 = i64 Or i64 %85, %86
store i64 %82, i64 tmp_dword1
%87 = i64 Lshr i64 %17, 0
%88 = Extract i32 of i64 %87 <31, 0>
%90 = load i64, i64 tmp_dword2
%91 = Zext i32 %88 to i64
%92 = i64 And i64 %90, 4294967295
%93 = i64 Shl i64 %91, 32
%89 = i64 Or i64 %92, %93
store i64 %89, i64 tmp_dword2
br label %bb13
bb19:
%94 = Extract i3 of i64 %14 <2, 0>
%95 = i1 Eq i3 %94, -3
br i1 %95, label %bb20, label %bb21
bb20:
%96 = i64 Lshr i64 %17, 24
%97 = Extract i40 of i64 %96 <39, 0>
%99 = load i64, i64 tmp_dword1
%100 = Zext i40 %97 to i64
%101 = i64 And i64 %99, -1099511627776
%102 = i64 Shl i64 %100, 0
%98 = i64 Or i64 %101, %102
store i64 %98, i64 tmp_dword1
%103 = i64 Lshr i64 %17, 0
%104 = Extract i24 of i64 %103 <23, 0>
%106 = load i64, i64 tmp_dword2
%107 = Zext i24 %104 to i64
%108 = i64 And i64 %106, 1099511627775
%109 = i64 Shl i64 %107, 40
%105 = i64 Or i64 %108, %109
store i64 %105, i64 tmp_dword2
br label %bb13
bb21:
%110 = Extract i3 of i64 %14 <2, 0>
%111 = i1 Eq i3 %110, -2
br i1 %111, label %bb22, label %bb23
bb22:
%112 = i64 Lshr i64 %17, 16
%113 = Extract i48 of i64 %112 <47, 0>
%115 = load i64, i64 tmp_dword1
%116 = Zext i48 %113 to i64
%117 = i64 And i64 %115, -281474976710656
%118 = i64 Shl i64 %116, 0
%114 = i64 Or i64 %117, %118
store i64 %114, i64 tmp_dword1
%119 = i64 Lshr i64 %17, 0
%120 = Extract i16 of i64 %119 <15, 0>
%122 = load i64, i64 tmp_dword2
%123 = Zext i16 %120 to i64
%124 = i64 And i64 %122, 281474976710655
%125 = i64 Shl i64 %123, 48
%121 = i64 Or i64 %124, %125
store i64 %121, i64 tmp_dword2
br label %bb13
bb23:
%126 = i64 Lshr i64 %17, 8
%127 = Extract i56 of i64 %126 <55, 0>
%129 = load i64, i64 tmp_dword1
%130 = Zext i56 %127 to i64
%131 = i64 And i64 %129, -72057594037927936
%132 = i64 Shl i64 %130, 0
%128 = i64 Or i64 %131, %132
store i64 %128, i64 tmp_dword1
%133 = i64 Lshr i64 %17, 0
%134 = Extract i8 of i64 %133 <7, 0>
%136 = load i64, i64 tmp_dword2
%137 = Zext i8 %134 to i64
%138 = i64 And i64 %136, 72057594037927935
%139 = i64 Shl i64 %137, 56
%135 = i64 Or i64 %138, %139
store i64 %135, i64 tmp_dword2
br label %bb13
bb24:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_17.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[14]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb5, label %bb6
bb5:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
br label %bb10
bb8:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb11
bb9:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb12, label %bb13
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb14, label %bb15
bb11:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb7
bb12:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb11
bb13:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb16, label %bb17
bb14:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb18
bb15:
br label %bb18
bb16:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb11
bb17:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb19, label %bb20
bb18:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb19:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb11
bb20:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb21, label %bb22
bb21:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb11
bb22:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb23, label %bb24
bb23:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb11
bb24:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb11

inline blocks
insn_17.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[14]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

COMPILE
insn_18.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 16} X, func void [i5] {i5 16} X, i12 2} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_18.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 16} X, func void [i5] {i5 16} X, i12 2} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_18.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[16]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[16]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_18.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[16]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[16]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_19.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 12} X, func void [i5] {i5 12} X, i12 16} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_19.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 12} X, func void [i5] {i5 12} X, i12 16} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_19.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[12]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_19.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[12]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_20.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 16} X, func void [i5] {i5 13} X, func void [i12] {i12 4084} BRANCH_IMM} bne} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_20.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb10
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i12]]] {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 16} X, func void [i5] {i5 13} X, func void [i12] {i12 4084} BRANCH_IMM} bne} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
%20 = Disclose i5 of func i64 [i5] %10 i32 0
%21 = load i64, [32, i64] XREG[%20]
%12 = i1 Ne i64 %19, %21
br i1 %12, label %bb8, label %bb9
bb8:
br label %bb13
bb9:
br label %bb6
bb10:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7
bb11:
%14 = Sext i12 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb12:
%13 = i12 Use i12 %22
br label %bb11
bb13:
%22 = Disclose void of func i12 [] %11 i32 0
br label %bb12

propagate
insn_20.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%13 = load i64, [32, i64] XREG[16]
%14 = load i64, [32, i64] XREG[13]
%8 = i1 Ne i64 %13, %14
br i1 %8, label %bb5, label %bb6
bb5:
br label %bb7
bb6:
br label %bb8
bb7:
br label %bb9
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb10, label %bb11
bb9:
br label %bb12
bb10:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb11:
br label %bb13
bb12:
%9 = Sext i12 4084 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_20.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[16]
%14 = load i64, [32, i64] XREG[13]
%8 = i1 Ne i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4084 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_21.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i6] {func void [i5] {i5 15} X, func void [i5] {i5 13} X, i6 3} slli} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_21.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i6]] {func void [func void [i5], func void [i5], i6] {func void [i5] {i5 15} X, func void [i5] {i5 13} X, i6 3} slli} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%13 = Disclose i5 of func i64 [i5] %10 i32 0
%14 = load i64, [32, i64] XREG[%13]
%12 = i64 Shl i64 %14, %11
%15 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %12, [32, i64] XREG[%15]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_21.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%9 = load i64, [32, i64] XREG[13]
%8 = i64 Shl i64 %9, 3
store i64 %8, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_21.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[13]
%8 = i64 Shl i64 %9, 3
store i64 %8, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_22.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 15} X, func void [i5] {i5 10} X, func void [i5] {i5 15} X} add} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_22.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i5]]] {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 15} X, func void [i5] {i5 10} X, func void [i5] {i5 15} X} add} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%13 = Disclose i5 of func i64 [i5] %10 i32 0
%14 = load i64, [32, i64] XREG[%13]
%15 = Disclose i5 of func i64 [i5] %11 i32 0
%16 = load i64, [32, i64] XREG[%15]
%12 = i64 Add i64 %14, %16
%17 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %12, [32, i64] XREG[%17]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_22.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%9 = load i64, [32, i64] XREG[10]
%10 = load i64, [32, i64] XREG[15]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_22.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[10]
%10 = load i64, [32, i64] XREG[15]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_23.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 14} X, func void [i5] {i5 15} X, i12 4080} ld} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_23.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb23
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 14} X, func void [i5] {i5 15} X, i12 4080} ld} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = i64 Lshr i64 %14, 3
%19 = Extract i53 of i64 %18 <52, 0>
store i53 %19, i53 mem_index
%20 = Extract i3 of i64 %14 <2, 0>
%21 = i1 Eq i3 %20, 0
br i1 %21, label %bb8, label %bb9
bb8:
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword
br label %bb10
bb9:
%24 = load i53, i53 mem_index
%25 = i53 Add i53 %24, 1
%26 = load i64, [9007199254740992, i64] MEM[%25]
store i64 %26, i64 tmp_dword1
%27 = load i53, i53 mem_index
%28 = load i64, [9007199254740992, i64] MEM[%27]
store i64 %28, i64 tmp_dword2
%29 = Extract i3 of i64 %14 <2, 0>
%30 = i1 Eq i3 %29, 1
br i1 %30, label %bb11, label %bb12
bb10:
%76 = load i64, i64 tmp_dword
store i64 %76, i64 rd_var
%17 = load i64, i64 rd_var
%77 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %17, [32, i64] XREG[%77]
br label %bb6
bb11:
%32 = load i64, i64 tmp_dword1
%33 = Extract i8 of i64 %32 <7, 0>
%34 = load i64, i64 tmp_dword2
%35 = Extract i56 of i64 %34 <63, 8>
%31 = Concat i64 i8 %33, i56 %35
store i64 %31, i64 tmp_dword
br label %bb10
bb12:
%36 = Extract i3 of i64 %14 <2, 0>
%37 = i1 Eq i3 %36, 2
br i1 %37, label %bb13, label %bb14
bb13:
%39 = load i64, i64 tmp_dword1
%40 = Extract i16 of i64 %39 <15, 0>
%41 = load i64, i64 tmp_dword2
%42 = Extract i48 of i64 %41 <63, 16>
%38 = Concat i64 i16 %40, i48 %42
store i64 %38, i64 tmp_dword
br label %bb10
bb14:
%43 = Extract i3 of i64 %14 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb15, label %bb16
bb15:
%46 = load i64, i64 tmp_dword1
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2
%49 = Extract i40 of i64 %48 <63, 24>
%45 = Concat i64 i24 %47, i40 %49
store i64 %45, i64 tmp_dword
br label %bb10
bb16:
%50 = Extract i3 of i64 %14 <2, 0>
%51 = i1 Eq i3 %50, -4
br i1 %51, label %bb17, label %bb18
bb17:
%53 = load i64, i64 tmp_dword1
%54 = Extract i32 of i64 %53 <31, 0>
%55 = load i64, i64 tmp_dword2
%56 = Extract i32 of i64 %55 <63, 32>
%52 = Concat i64 i32 %54, i32 %56
store i64 %52, i64 tmp_dword
br label %bb10
bb18:
%57 = Extract i3 of i64 %14 <2, 0>
%58 = i1 Eq i3 %57, -3
br i1 %58, label %bb19, label %bb20
bb19:
%60 = load i64, i64 tmp_dword1
%61 = Extract i40 of i64 %60 <39, 0>
%62 = load i64, i64 tmp_dword2
%63 = Extract i24 of i64 %62 <63, 40>
%59 = Concat i64 i40 %61, i24 %63
store i64 %59, i64 tmp_dword
br label %bb10
bb20:
%64 = Extract i3 of i64 %14 <2, 0>
%65 = i1 Eq i3 %64, -2
br i1 %65, label %bb21, label %bb22
bb21:
%67 = load i64, i64 tmp_dword1
%68 = Extract i48 of i64 %67 <47, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i16 of i64 %69 <63, 48>
%66 = Concat i64 i48 %68, i16 %70
store i64 %66, i64 tmp_dword
br label %bb10
bb22:
%72 = load i64, i64 tmp_dword1
%73 = Extract i56 of i64 %72 <55, 0>
%74 = load i64, i64 tmp_dword2
%75 = Extract i8 of i64 %74 <63, 56>
%71 = Concat i64 i56 %73, i8 %75
store i64 %71, i64 tmp_dword
br label %bb10
bb23:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_23.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4080 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb5, label %bb6
bb5:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[14]
br label %bb10
bb8:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb7
bb9:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb11, label %bb12
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb13, label %bb14
bb11:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb7
bb12:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb15, label %bb16
bb13:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb17
bb14:
br label %bb17
bb15:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb7
bb16:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb18, label %bb19
bb17:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb18:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb7
bb19:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb20, label %bb21
bb20:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb7
bb21:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb22, label %bb23
bb22:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb7
bb23:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb7

inline blocks
insn_23.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4080 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb13:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb3

COMPILE
insn_24.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 12} X, func void [i5] {i5 15} X, i12 4088} ld} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_24.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb23
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 12} X, func void [i5] {i5 15} X, i12 4088} ld} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = i64 Lshr i64 %14, 3
%19 = Extract i53 of i64 %18 <52, 0>
store i53 %19, i53 mem_index
%20 = Extract i3 of i64 %14 <2, 0>
%21 = i1 Eq i3 %20, 0
br i1 %21, label %bb8, label %bb9
bb8:
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword
br label %bb10
bb9:
%24 = load i53, i53 mem_index
%25 = i53 Add i53 %24, 1
%26 = load i64, [9007199254740992, i64] MEM[%25]
store i64 %26, i64 tmp_dword1
%27 = load i53, i53 mem_index
%28 = load i64, [9007199254740992, i64] MEM[%27]
store i64 %28, i64 tmp_dword2
%29 = Extract i3 of i64 %14 <2, 0>
%30 = i1 Eq i3 %29, 1
br i1 %30, label %bb11, label %bb12
bb10:
%76 = load i64, i64 tmp_dword
store i64 %76, i64 rd_var
%17 = load i64, i64 rd_var
%77 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %17, [32, i64] XREG[%77]
br label %bb6
bb11:
%32 = load i64, i64 tmp_dword1
%33 = Extract i8 of i64 %32 <7, 0>
%34 = load i64, i64 tmp_dword2
%35 = Extract i56 of i64 %34 <63, 8>
%31 = Concat i64 i8 %33, i56 %35
store i64 %31, i64 tmp_dword
br label %bb10
bb12:
%36 = Extract i3 of i64 %14 <2, 0>
%37 = i1 Eq i3 %36, 2
br i1 %37, label %bb13, label %bb14
bb13:
%39 = load i64, i64 tmp_dword1
%40 = Extract i16 of i64 %39 <15, 0>
%41 = load i64, i64 tmp_dword2
%42 = Extract i48 of i64 %41 <63, 16>
%38 = Concat i64 i16 %40, i48 %42
store i64 %38, i64 tmp_dword
br label %bb10
bb14:
%43 = Extract i3 of i64 %14 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb15, label %bb16
bb15:
%46 = load i64, i64 tmp_dword1
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2
%49 = Extract i40 of i64 %48 <63, 24>
%45 = Concat i64 i24 %47, i40 %49
store i64 %45, i64 tmp_dword
br label %bb10
bb16:
%50 = Extract i3 of i64 %14 <2, 0>
%51 = i1 Eq i3 %50, -4
br i1 %51, label %bb17, label %bb18
bb17:
%53 = load i64, i64 tmp_dword1
%54 = Extract i32 of i64 %53 <31, 0>
%55 = load i64, i64 tmp_dword2
%56 = Extract i32 of i64 %55 <63, 32>
%52 = Concat i64 i32 %54, i32 %56
store i64 %52, i64 tmp_dword
br label %bb10
bb18:
%57 = Extract i3 of i64 %14 <2, 0>
%58 = i1 Eq i3 %57, -3
br i1 %58, label %bb19, label %bb20
bb19:
%60 = load i64, i64 tmp_dword1
%61 = Extract i40 of i64 %60 <39, 0>
%62 = load i64, i64 tmp_dword2
%63 = Extract i24 of i64 %62 <63, 40>
%59 = Concat i64 i40 %61, i24 %63
store i64 %59, i64 tmp_dword
br label %bb10
bb20:
%64 = Extract i3 of i64 %14 <2, 0>
%65 = i1 Eq i3 %64, -2
br i1 %65, label %bb21, label %bb22
bb21:
%67 = load i64, i64 tmp_dword1
%68 = Extract i48 of i64 %67 <47, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i16 of i64 %69 <63, 48>
%66 = Concat i64 i48 %68, i16 %70
store i64 %66, i64 tmp_dword
br label %bb10
bb22:
%72 = load i64, i64 tmp_dword1
%73 = Extract i56 of i64 %72 <55, 0>
%74 = load i64, i64 tmp_dword2
%75 = Extract i8 of i64 %74 <63, 56>
%71 = Concat i64 i56 %73, i8 %75
store i64 %71, i64 tmp_dword
br label %bb10
bb23:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_24.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4088 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb5, label %bb6
bb5:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[12]
br label %bb10
bb8:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb7
bb9:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb11, label %bb12
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb13, label %bb14
bb11:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb7
bb12:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb15, label %bb16
bb13:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb17
bb14:
br label %bb17
bb15:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb7
bb16:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb18, label %bb19
bb17:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb18:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb7
bb19:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb20, label %bb21
bb20:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb7
bb21:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb22, label %bb23
bb22:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb7
bb23:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb7

inline blocks
insn_24.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4088 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[12]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb13:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb3

COMPILE
insn_25.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 15} X, i12 8} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_25.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 15} X, i12 8} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_25.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 8 to i64
%10 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_25.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 8 to i64
%10 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_26.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 13} X, i12 1} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_26.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 13} X, i12 1} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_26.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[13]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_26.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[13]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_27.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 14} X, func void [i5] {i5 14} X, func void [i5] {i5 12} X} add} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_27.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i5]]] {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 14} X, func void [i5] {i5 14} X, func void [i5] {i5 12} X} add} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%13 = Disclose i5 of func i64 [i5] %10 i32 0
%14 = load i64, [32, i64] XREG[%13]
%15 = Disclose i5 of func i64 [i5] %11 i32 0
%16 = load i64, [32, i64] XREG[%15]
%12 = i64 Add i64 %14, %16
%17 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %12, [32, i64] XREG[%17]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_27.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%9 = load i64, [32, i64] XREG[14]
%10 = load i64, [32, i64] XREG[12]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[14]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_27.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[14]
%10 = load i64, [32, i64] XREG[12]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_28.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 14} X, func void [i5] {i5 15} X, i12 4088} sd} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_28.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb24
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 14} X, func void [i5] {i5 15} X, i12 4088} sd} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
store i64 %19, i64 rs2_var
%17 = load i64, i64 rs2_var
%20 = i64 Lshr i64 %14, 3
%21 = Extract i53 of i64 %20 <52, 0>
store i53 %21, i53 mem_index
%22 = Extract i3 of i64 %14 <2, 0>
%23 = i1 Eq i3 %22, 0
br i1 %23, label %bb8, label %bb9
bb8:
%24 = load i53, i53 mem_index
store i64 %17, [9007199254740992, i64] MEM[%24]
br label %bb10
bb9:
%25 = load i53, i53 mem_index
%26 = i53 Add i53 %25, 1
%27 = load i64, [9007199254740992, i64] MEM[%26]
store i64 %27, i64 tmp_dword1
%28 = load i53, i53 mem_index
%29 = load i64, [9007199254740992, i64] MEM[%28]
store i64 %29, i64 tmp_dword2
%30 = Extract i3 of i64 %14 <2, 0>
%31 = i1 Eq i3 %30, 1
br i1 %31, label %bb11, label %bb12
bb10:
br label %bb6
bb11:
%32 = i64 Lshr i64 %17, 56
%33 = Extract i8 of i64 %32 <7, 0>
%35 = load i64, i64 tmp_dword1
%36 = Zext i8 %33 to i64
%37 = i64 And i64 %35, -256
%38 = i64 Shl i64 %36, 0
%34 = i64 Or i64 %37, %38
store i64 %34, i64 tmp_dword1
%39 = i64 Lshr i64 %17, 0
%40 = Extract i56 of i64 %39 <55, 0>
%42 = load i64, i64 tmp_dword2
%43 = Zext i56 %40 to i64
%44 = i64 And i64 %42, 255
%45 = i64 Shl i64 %43, 8
%41 = i64 Or i64 %44, %45
store i64 %41, i64 tmp_dword2
br label %bb13
bb12:
%46 = Extract i3 of i64 %14 <2, 0>
%47 = i1 Eq i3 %46, 2
br i1 %47, label %bb14, label %bb15
bb13:
%140 = load i64, i64 tmp_dword1
%141 = load i53, i53 mem_index
%142 = i53 Add i53 %141, 1
store i64 %140, [9007199254740992, i64] MEM[%142]
%143 = load i64, i64 tmp_dword2
%144 = load i53, i53 mem_index
store i64 %143, [9007199254740992, i64] MEM[%144]
br label %bb10
bb14:
%48 = i64 Lshr i64 %17, 48
%49 = Extract i16 of i64 %48 <15, 0>
%51 = load i64, i64 tmp_dword1
%52 = Zext i16 %49 to i64
%53 = i64 And i64 %51, -65536
%54 = i64 Shl i64 %52, 0
%50 = i64 Or i64 %53, %54
store i64 %50, i64 tmp_dword1
%55 = i64 Lshr i64 %17, 0
%56 = Extract i48 of i64 %55 <47, 0>
%58 = load i64, i64 tmp_dword2
%59 = Zext i48 %56 to i64
%60 = i64 And i64 %58, 65535
%61 = i64 Shl i64 %59, 16
%57 = i64 Or i64 %60, %61
store i64 %57, i64 tmp_dword2
br label %bb13
bb15:
%62 = Extract i3 of i64 %14 <2, 0>
%63 = i1 Eq i3 %62, 3
br i1 %63, label %bb16, label %bb17
bb16:
%64 = i64 Lshr i64 %17, 40
%65 = Extract i24 of i64 %64 <23, 0>
%67 = load i64, i64 tmp_dword1
%68 = Zext i24 %65 to i64
%69 = i64 And i64 %67, -16777216
%70 = i64 Shl i64 %68, 0
%66 = i64 Or i64 %69, %70
store i64 %66, i64 tmp_dword1
%71 = i64 Lshr i64 %17, 0
%72 = Extract i40 of i64 %71 <39, 0>
%74 = load i64, i64 tmp_dword2
%75 = Zext i40 %72 to i64
%76 = i64 And i64 %74, 16777215
%77 = i64 Shl i64 %75, 24
%73 = i64 Or i64 %76, %77
store i64 %73, i64 tmp_dword2
br label %bb13
bb17:
%78 = Extract i3 of i64 %14 <2, 0>
%79 = i1 Eq i3 %78, -4
br i1 %79, label %bb18, label %bb19
bb18:
%80 = i64 Lshr i64 %17, 32
%81 = Extract i32 of i64 %80 <31, 0>
%83 = load i64, i64 tmp_dword1
%84 = Zext i32 %81 to i64
%85 = i64 And i64 %83, -4294967296
%86 = i64 Shl i64 %84, 0
%82 = i64 Or i64 %85, %86
store i64 %82, i64 tmp_dword1
%87 = i64 Lshr i64 %17, 0
%88 = Extract i32 of i64 %87 <31, 0>
%90 = load i64, i64 tmp_dword2
%91 = Zext i32 %88 to i64
%92 = i64 And i64 %90, 4294967295
%93 = i64 Shl i64 %91, 32
%89 = i64 Or i64 %92, %93
store i64 %89, i64 tmp_dword2
br label %bb13
bb19:
%94 = Extract i3 of i64 %14 <2, 0>
%95 = i1 Eq i3 %94, -3
br i1 %95, label %bb20, label %bb21
bb20:
%96 = i64 Lshr i64 %17, 24
%97 = Extract i40 of i64 %96 <39, 0>
%99 = load i64, i64 tmp_dword1
%100 = Zext i40 %97 to i64
%101 = i64 And i64 %99, -1099511627776
%102 = i64 Shl i64 %100, 0
%98 = i64 Or i64 %101, %102
store i64 %98, i64 tmp_dword1
%103 = i64 Lshr i64 %17, 0
%104 = Extract i24 of i64 %103 <23, 0>
%106 = load i64, i64 tmp_dword2
%107 = Zext i24 %104 to i64
%108 = i64 And i64 %106, 1099511627775
%109 = i64 Shl i64 %107, 40
%105 = i64 Or i64 %108, %109
store i64 %105, i64 tmp_dword2
br label %bb13
bb21:
%110 = Extract i3 of i64 %14 <2, 0>
%111 = i1 Eq i3 %110, -2
br i1 %111, label %bb22, label %bb23
bb22:
%112 = i64 Lshr i64 %17, 16
%113 = Extract i48 of i64 %112 <47, 0>
%115 = load i64, i64 tmp_dword1
%116 = Zext i48 %113 to i64
%117 = i64 And i64 %115, -281474976710656
%118 = i64 Shl i64 %116, 0
%114 = i64 Or i64 %117, %118
store i64 %114, i64 tmp_dword1
%119 = i64 Lshr i64 %17, 0
%120 = Extract i16 of i64 %119 <15, 0>
%122 = load i64, i64 tmp_dword2
%123 = Zext i16 %120 to i64
%124 = i64 And i64 %122, 281474976710655
%125 = i64 Shl i64 %123, 48
%121 = i64 Or i64 %124, %125
store i64 %121, i64 tmp_dword2
br label %bb13
bb23:
%126 = i64 Lshr i64 %17, 8
%127 = Extract i56 of i64 %126 <55, 0>
%129 = load i64, i64 tmp_dword1
%130 = Zext i56 %127 to i64
%131 = i64 And i64 %129, -72057594037927936
%132 = i64 Shl i64 %130, 0
%128 = i64 Or i64 %131, %132
store i64 %128, i64 tmp_dword1
%133 = i64 Lshr i64 %17, 0
%134 = Extract i8 of i64 %133 <7, 0>
%136 = load i64, i64 tmp_dword2
%137 = Zext i8 %134 to i64
%138 = i64 And i64 %136, 72057594037927935
%139 = i64 Shl i64 %137, 56
%135 = i64 Or i64 %138, %139
store i64 %135, i64 tmp_dword2
br label %bb13
bb24:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_28.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4088 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[14]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb5, label %bb6
bb5:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
br label %bb10
bb8:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb11
bb9:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb12, label %bb13
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb14, label %bb15
bb11:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb7
bb12:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb11
bb13:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb16, label %bb17
bb14:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb18
bb15:
br label %bb18
bb16:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb11
bb17:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb19, label %bb20
bb18:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb19:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb11
bb20:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb21, label %bb22
bb21:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb11
bb22:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb23, label %bb24
bb23:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb11
bb24:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb11

inline blocks
insn_28.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4088 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[14]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

COMPILE
insn_29.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 13} X, func void [i5] {i5 11} X, func void [i12] {i12 4084} BRANCH_IMM} bltu} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_29.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb10
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i12]]] {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 13} X, func void [i5] {i5 11} X, func void [i12] {i12 4084} BRANCH_IMM} bltu} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
%20 = Disclose i5 of func i64 [i5] %10 i32 0
%21 = load i64, [32, i64] XREG[%20]
%12 = i1 Ult i64 %19, %21
br i1 %12, label %bb8, label %bb9
bb8:
br label %bb13
bb9:
br label %bb6
bb10:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7
bb11:
%14 = Sext i12 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb12:
%13 = i12 Use i12 %22
br label %bb11
bb13:
%22 = Disclose void of func i12 [] %11 i32 0
br label %bb12

propagate
insn_29.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%13 = load i64, [32, i64] XREG[13]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Ult i64 %13, %14
br i1 %8, label %bb5, label %bb6
bb5:
br label %bb7
bb6:
br label %bb8
bb7:
br label %bb9
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb10, label %bb11
bb9:
br label %bb12
bb10:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb11:
br label %bb13
bb12:
%9 = Sext i12 4084 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_29.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[13]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Ult i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4084 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_30.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 0} X, func void [i5] {i5 1} X, i12 0} jalr} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_30.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 0} X, func void [i5] {i5 1} X, i12 0} jalr} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, 4
%18 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%18]
%14 = Sext i12 %11 to i64
%15 = i64 Lshr i64 %14, 1
%16 = i64 Shl i64 %15, 1
%19 = Disclose i5 of func i64 [i5] %10 i32 0
%20 = load i64, [32, i64] XREG[%19]
%17 = i64 Add i64 %20, %16
store i64 %17, i64 PC
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_30.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_30.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_31.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 0} X, i12 2} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_31.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 0} X, i12 2} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_31.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_31.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_32.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i20]] {func void [i5] {i5 0} X, func void [i20] {i20 1048554} JUMP_IMM} jal} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_32.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i20]]] {func void [func void [i5], func void [i20]] {func void [i5] {i5 0} X, func void [i20] {i20 1048554} JUMP_IMM} jal} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, 4
%18 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %12, [32, i64] XREG[%18]
br label %bb11
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
br label %bb7
bb9:
%14 = Sext i20 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb10:
%13 = i20 Use i20 %19
br label %bb9
bb11:
%19 = Disclose i64 of func i20 [] %10 i32 0
br label %bb10

propagate
insn_32.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
br label %bb5
bb5:
br label %bb6
bb6:
br label %bb7
bb7:
%10 = Sext i20 1048554 to i64
%11 = i64 Shl i64 %10, 1
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, %11
store i64 %13, i64 PC
br label %bb8
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_32.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i20 1048554 to i64
%11 = i64 Shl i64 %10, 1
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, %11
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_0.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_1.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

build SSA
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG!2[10]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %13, i64 rs2_var!1
%12 = load i64, i64 rs2_var!2
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
mem_index!2 = store i53 %15, i53 mem_index!1
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index!2
MEM!3 = store i64 %12, [9007199254740992, i64] MEM!1[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!3 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!3 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %17 MEM!3 MEM!5
tmp_dword2!2 = phi ite %17 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %17 tmp_dword1!1 tmp_dword1!11
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1!3
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
tmp_dword1!10 = store i64 %28, i64 tmp_dword1!3
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2!3
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
tmp_dword2!10 = store i64 %35, i64 tmp_dword2!3
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
tmp_dword2!11 = phi ite %25 tmp_dword2!10 ite %41 tmp_dword2!4 ite %57 tmp_dword2!5 ite %73 tmp_dword2!9 ite %89 tmp_dword2!6 ite %105 tmp_dword2!8 tmp_dword2!7
tmp_dword1!11 = phi ite %25 tmp_dword1!10 ite %41 tmp_dword1!4 ite %57 tmp_dword1!5 ite %73 tmp_dword1!9 ite %89 tmp_dword1!6 ite %105 tmp_dword1!8 tmp_dword1!7
%134 = load i64, i64 tmp_dword1!11
%135 = load i53, i53 mem_index!2
%136 = i53 Add i53 %135, 1
MEM!4 = store i64 %134, [9007199254740992, i64] MEM!1[%136]
%137 = load i64, i64 tmp_dword2!11
%138 = load i53, i53 mem_index!2
MEM!5 = store i64 %137, [9007199254740992, i64] MEM!4[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1!3
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
tmp_dword1!4 = store i64 %44, i64 tmp_dword1!3
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2!3
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
tmp_dword2!4 = store i64 %51, i64 tmp_dword2!3
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1!3
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
tmp_dword1!5 = store i64 %60, i64 tmp_dword1!3
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2!3
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
tmp_dword2!5 = store i64 %67, i64 tmp_dword2!3
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1!3
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
tmp_dword1!9 = store i64 %76, i64 tmp_dword1!3
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2!3
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
tmp_dword2!9 = store i64 %83, i64 tmp_dword2!3
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1!3
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
tmp_dword1!6 = store i64 %92, i64 tmp_dword1!3
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2!3
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
tmp_dword2!6 = store i64 %99, i64 tmp_dword2!3
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1!3
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
tmp_dword1!8 = store i64 %108, i64 tmp_dword1!3
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2!3
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
tmp_dword2!8 = store i64 %115, i64 tmp_dword2!3
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1!3
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
tmp_dword1!7 = store i64 %122, i64 tmp_dword1!3
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2!3
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
tmp_dword2!7 = store i64 %129, i64 tmp_dword2!3
br label %bb6

SSA forward
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!3 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!3 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!10 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!10 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!4 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!4 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!5 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!5 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!9 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!9 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!6 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!6 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!8 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!8 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!7 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!7 = store i64 %103, i64 tmp_dword2!3
br label %bb7

Nested SCCP
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!3 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!3 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!10 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!10 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!4 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!4 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!5 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!5 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!9 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!9 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!6 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!6 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!8 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!8 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!7 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!7 = store i64 %103, i64 tmp_dword2!3
br label %bb7

SCCP forward
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!3 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!3 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!10 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!10 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!4 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!4 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!5 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!5 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!9 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!9 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!6 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!6 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!8 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!8 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!7 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!7 = store i64 %103, i64 tmp_dword2!3
br label %bb7

cherry
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!3 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!3 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!10 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!10 = store i64 %21, i64 tmp_dword2!3
br label %bb6
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb7, label %bb8
bb6:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb7:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!4 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!4 = store i64 %35, i64 tmp_dword2!3
br label %bb6
bb8:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb9, label %bb10
bb9:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!5 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!5 = store i64 %49, i64 tmp_dword2!3
br label %bb6
bb10:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb11, label %bb12
bb11:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!9 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!9 = store i64 %63, i64 tmp_dword2!3
br label %bb6
bb12:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb13, label %bb14
bb13:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!6 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!6 = store i64 %77, i64 tmp_dword2!3
br label %bb6
bb14:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb15, label %bb16
bb15:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!8 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!8 = store i64 %91, i64 tmp_dword2!3
br label %bb6
bb16:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!7 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!7 = store i64 %103, i64 tmp_dword2!3
br label %bb6

COMPILE
insn_2.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

build SSA
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG!2[10]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %13, i64 rs2_var!1
%12 = load i64, i64 rs2_var!2
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
mem_index!2 = store i53 %15, i53 mem_index!1
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index!2
MEM!2 = store i64 %12, [9007199254740992, i64] MEM!1[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!2 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!2 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %17 MEM!2 MEM!4
tmp_dword2!11 = phi ite %17 tmp_dword2!1 tmp_dword2!9
tmp_dword1!11 = phi ite %17 tmp_dword1!1 tmp_dword1!9
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1!2
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
tmp_dword1!10 = store i64 %28, i64 tmp_dword1!2
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2!2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
tmp_dword2!10 = store i64 %35, i64 tmp_dword2!2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
tmp_dword2!9 = phi ite %25 tmp_dword2!10 ite %41 tmp_dword2!3 ite %57 tmp_dword2!8 ite %73 tmp_dword2!4 ite %89 tmp_dword2!7 ite %105 tmp_dword2!5 tmp_dword2!6
tmp_dword1!9 = phi ite %25 tmp_dword1!10 ite %41 tmp_dword1!3 ite %57 tmp_dword1!8 ite %73 tmp_dword1!4 ite %89 tmp_dword1!7 ite %105 tmp_dword1!5 tmp_dword1!6
%134 = load i64, i64 tmp_dword1!9
%135 = load i53, i53 mem_index!2
%136 = i53 Add i53 %135, 1
MEM!3 = store i64 %134, [9007199254740992, i64] MEM!1[%136]
%137 = load i64, i64 tmp_dword2!9
%138 = load i53, i53 mem_index!2
MEM!4 = store i64 %137, [9007199254740992, i64] MEM!3[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1!2
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
tmp_dword1!3 = store i64 %44, i64 tmp_dword1!2
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2!2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
tmp_dword2!3 = store i64 %51, i64 tmp_dword2!2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1!2
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
tmp_dword1!8 = store i64 %60, i64 tmp_dword1!2
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2!2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
tmp_dword2!8 = store i64 %67, i64 tmp_dword2!2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1!2
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
tmp_dword1!4 = store i64 %76, i64 tmp_dword1!2
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2!2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
tmp_dword2!4 = store i64 %83, i64 tmp_dword2!2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1!2
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
tmp_dword1!7 = store i64 %92, i64 tmp_dword1!2
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2!2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
tmp_dword2!7 = store i64 %99, i64 tmp_dword2!2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1!2
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
tmp_dword1!5 = store i64 %108, i64 tmp_dword1!2
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2!2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
tmp_dword2!5 = store i64 %115, i64 tmp_dword2!2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1!2
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
tmp_dword1!6 = store i64 %122, i64 tmp_dword1!2
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2!2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
tmp_dword2!6 = store i64 %129, i64 tmp_dword2!2
br label %bb6

SSA forward
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %7 MEM!2 MEM!4
tmp_dword2!11 = phi ite %7 tmp_dword2!1 tmp_dword2!9
tmp_dword1!11 = phi ite %7 tmp_dword1!1 tmp_dword1!9
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!10 = store i64 %15, i64 tmp_dword1!2
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!10 = store i64 %21, i64 tmp_dword2!2
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!9 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!9 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!9, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!9, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!3 = store i64 %29, i64 tmp_dword1!2
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!3 = store i64 %35, i64 tmp_dword2!2
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!8 = store i64 %43, i64 tmp_dword1!2
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!8 = store i64 %49, i64 tmp_dword2!2
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!4 = store i64 %57, i64 tmp_dword1!2
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!4 = store i64 %63, i64 tmp_dword2!2
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!7 = store i64 %71, i64 tmp_dword1!2
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!7 = store i64 %77, i64 tmp_dword2!2
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!5 = store i64 %85, i64 tmp_dword1!2
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!5 = store i64 %91, i64 tmp_dword2!2
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!6 = store i64 %97, i64 tmp_dword1!2
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!6 = store i64 %103, i64 tmp_dword2!2
br label %bb7

Nested SCCP
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %7 MEM!2 MEM!4
tmp_dword2!11 = phi ite %7 tmp_dword2!1 tmp_dword2!9
tmp_dword1!11 = phi ite %7 tmp_dword1!1 tmp_dword1!9
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!10 = store i64 %15, i64 tmp_dword1!2
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!10 = store i64 %21, i64 tmp_dword2!2
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!9 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!9 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!9, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!9, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!3 = store i64 %29, i64 tmp_dword1!2
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!3 = store i64 %35, i64 tmp_dword2!2
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!8 = store i64 %43, i64 tmp_dword1!2
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!8 = store i64 %49, i64 tmp_dword2!2
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!4 = store i64 %57, i64 tmp_dword1!2
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!4 = store i64 %63, i64 tmp_dword2!2
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!7 = store i64 %71, i64 tmp_dword1!2
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!7 = store i64 %77, i64 tmp_dword2!2
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!5 = store i64 %85, i64 tmp_dword1!2
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!5 = store i64 %91, i64 tmp_dword2!2
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!6 = store i64 %97, i64 tmp_dword1!2
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!6 = store i64 %103, i64 tmp_dword2!2
br label %bb7

SCCP forward
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %7 MEM!2 MEM!4
tmp_dword2!11 = phi ite %7 tmp_dword2!1 tmp_dword2!9
tmp_dword1!11 = phi ite %7 tmp_dword1!1 tmp_dword1!9
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!10 = store i64 %15, i64 tmp_dword1!2
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!10 = store i64 %21, i64 tmp_dword2!2
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!9 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!9 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!9, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!9, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!3 = store i64 %29, i64 tmp_dword1!2
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!3 = store i64 %35, i64 tmp_dword2!2
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!8 = store i64 %43, i64 tmp_dword1!2
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!8 = store i64 %49, i64 tmp_dword2!2
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!4 = store i64 %57, i64 tmp_dword1!2
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!4 = store i64 %63, i64 tmp_dword2!2
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!7 = store i64 %71, i64 tmp_dword1!2
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!7 = store i64 %77, i64 tmp_dword2!2
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!5 = store i64 %85, i64 tmp_dword1!2
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!5 = store i64 %91, i64 tmp_dword2!2
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!6 = store i64 %97, i64 tmp_dword1!2
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!6 = store i64 %103, i64 tmp_dword2!2
br label %bb7

cherry
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %7 MEM!2 MEM!4
tmp_dword2!11 = phi ite %7 tmp_dword2!1 tmp_dword2!9
tmp_dword1!11 = phi ite %7 tmp_dword1!1 tmp_dword1!9
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!10 = store i64 %15, i64 tmp_dword1!2
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!10 = store i64 %21, i64 tmp_dword2!2
br label %bb6
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb7, label %bb8
bb6:
tmp_dword2!9 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!9 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!9, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!9, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb7:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!3 = store i64 %29, i64 tmp_dword1!2
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!3 = store i64 %35, i64 tmp_dword2!2
br label %bb6
bb8:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb9, label %bb10
bb9:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!8 = store i64 %43, i64 tmp_dword1!2
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!8 = store i64 %49, i64 tmp_dword2!2
br label %bb6
bb10:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb11, label %bb12
bb11:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!4 = store i64 %57, i64 tmp_dword1!2
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!4 = store i64 %63, i64 tmp_dword2!2
br label %bb6
bb12:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb13, label %bb14
bb13:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!7 = store i64 %71, i64 tmp_dword1!2
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!7 = store i64 %77, i64 tmp_dword2!2
br label %bb6
bb14:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb15, label %bb16
bb15:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!5 = store i64 %85, i64 tmp_dword1!2
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!5 = store i64 %91, i64 tmp_dword2!2
br label %bb6
bb16:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!6 = store i64 %97, i64 tmp_dword1!2
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!6 = store i64 %103, i64 tmp_dword2!2
br label %bb6

COMPILE
insn_3.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_4.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Uge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 52 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%13 = load i64, [32, i64] XREG!2[15]
%14 = load i64, [32, i64] XREG!2[11]
%8 = i1 Uge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 52 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC!1
%12 = i64 Add i64 %11, %10
PC!2 = store i64 %12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %8 PC!2 PC!1
%3 = load i64, i64 PC!3
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC!3
%7 = i64 Add i64 %6, 4
PC!6 = store i64 %7, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %4 PC!6 PC!3
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[15]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Uge i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!2 = store i64 104, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 104 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!3, 4
PC!6 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %1 %2 PC!3
PC!5 = store i64 PC!4, i64 PC!4
ret void

Nested SCCP
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[15]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Uge i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!2 = store i64 104, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 104 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 0, 4
PC!6 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %3 104 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

SCCP forward
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Uge i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!2 = store i64 104, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %2 104 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!6 = store i64 4, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 104 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

cherry
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Uge i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!2 = store i64 104, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %2 104 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!6 = store i64 4, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 104 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

COMPILE
insn_5.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_6.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Uge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 50 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%13 = load i64, [32, i64] XREG!2[15]
%14 = load i64, [32, i64] XREG!2[11]
%8 = i1 Uge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 50 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC!1
%12 = i64 Add i64 %11, %10
PC!6 = store i64 %12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %8 PC!6 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!5 = store i64 %7, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %4 PC!5 PC!2
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[15]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Uge i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!6 = store i64 100, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %3 100 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!2, 4
PC!5 = store i64 %2, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %1 %2 PC!2
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[15]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Uge i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!6 = store i64 100, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %3 100 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 0, 4
PC!5 = store i64 %2, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %3 100 %2
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Uge i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!6 = store i64 100, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %2 100 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!5 = store i64 4, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %2 100 4
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Uge i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!6 = store i64 100, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %2 100 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!5 = store i64 4, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %2 100 4
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_7.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4091 to i64
%10 = load i64, [32, i64] XREG[11]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4091 to i64
%10 = load i64, [32, i64] XREG!2[11]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[13]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[11]
%1 = i64 Add i64 %2, -5
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[11]
%1 = i64 Add i64 %2, -5
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[11]
%1 = i64 Add i64 %2, -5
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[11]
%1 = i64 Add i64 %2, -5
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_8.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4094 to i64
%10 = load i64, [32, i64] XREG[13]
%9 = i64 And i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4094 to i64
%10 = load i64, [32, i64] XREG!2[13]
%9 = i64 And i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[13]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 And i64 %2, -2
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 And i64 %2, -2
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 And i64 %2, -2
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 And i64 %2, -2
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_9.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[12]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG!2[10]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[12]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[12]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[12]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[12]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[12]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_10.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[13]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG!2[13]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[13]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_11.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[14]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_12.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_12.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_12.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_12.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_12.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_12.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_13.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[16]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_13.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[16]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_13.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[16]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_13.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[16]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_13.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[16]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_13.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[16]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_14.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[15]
%10 = load i64, [32, i64] XREG[14]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_14.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%9 = load i64, [32, i64] XREG!2[15]
%10 = load i64, [32, i64] XREG!2[14]
%8 = i64 Add i64 %9, %10
XREG!3 = store i64 %8, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_14.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%3 = load i64, [32, i64] XREG!2[14]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_14.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%3 = load i64, [32, i64] XREG!2[14]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_14.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%3 = load i64, [32, i64] XREG!2[14]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_14.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%3 = load i64, [32, i64] XREG!2[14]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_15.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[14]
%10 = load i64, [32, i64] XREG[15]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_15.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%9 = load i64, [32, i64] XREG!2[14]
%10 = load i64, [32, i64] XREG!2[15]
%8 = i64 Add i64 %9, %10
XREG!3 = store i64 %8, [32, i64] XREG!2[14]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_15.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_15.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_15.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_15.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_16.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

build SSA
insn_16.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG!2[12]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %13, i64 rs2_var!1
%12 = load i64, i64 rs2_var!2
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
mem_index!2 = store i53 %15, i53 mem_index!1
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index!2
MEM!5 = store i64 %12, [9007199254740992, i64] MEM!1[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!3 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!3 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %17 MEM!5 MEM!4
tmp_dword2!2 = phi ite %17 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %17 tmp_dword1!1 tmp_dword1!11
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1!3
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
tmp_dword1!4 = store i64 %28, i64 tmp_dword1!3
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2!3
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
tmp_dword2!4 = store i64 %35, i64 tmp_dword2!3
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
tmp_dword2!11 = phi ite %25 tmp_dword2!4 ite %41 tmp_dword2!5 ite %57 tmp_dword2!6 ite %73 tmp_dword2!7 ite %89 tmp_dword2!10 ite %105 tmp_dword2!8 tmp_dword2!9
tmp_dword1!11 = phi ite %25 tmp_dword1!4 ite %41 tmp_dword1!5 ite %57 tmp_dword1!6 ite %73 tmp_dword1!7 ite %89 tmp_dword1!10 ite %105 tmp_dword1!8 tmp_dword1!9
%134 = load i64, i64 tmp_dword1!11
%135 = load i53, i53 mem_index!2
%136 = i53 Add i53 %135, 1
MEM!3 = store i64 %134, [9007199254740992, i64] MEM!1[%136]
%137 = load i64, i64 tmp_dword2!11
%138 = load i53, i53 mem_index!2
MEM!4 = store i64 %137, [9007199254740992, i64] MEM!3[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1!3
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
tmp_dword1!5 = store i64 %44, i64 tmp_dword1!3
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2!3
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
tmp_dword2!5 = store i64 %51, i64 tmp_dword2!3
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1!3
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
tmp_dword1!6 = store i64 %60, i64 tmp_dword1!3
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2!3
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
tmp_dword2!6 = store i64 %67, i64 tmp_dword2!3
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1!3
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
tmp_dword1!7 = store i64 %76, i64 tmp_dword1!3
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2!3
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
tmp_dword2!7 = store i64 %83, i64 tmp_dword2!3
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1!3
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
tmp_dword1!10 = store i64 %92, i64 tmp_dword1!3
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2!3
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
tmp_dword2!10 = store i64 %99, i64 tmp_dword2!3
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1!3
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
tmp_dword1!8 = store i64 %108, i64 tmp_dword1!3
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2!3
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
tmp_dword2!8 = store i64 %115, i64 tmp_dword2!3
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1!3
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
tmp_dword1!9 = store i64 %122, i64 tmp_dword1!3
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2!3
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
tmp_dword2!9 = store i64 %129, i64 tmp_dword2!3
br label %bb6

SSA forward
insn_16.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!5 MEM!4
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!4 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!4 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!10 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!10 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!8 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!8 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!9 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!9 = store i64 %103, i64 tmp_dword2!3
br label %bb7

Nested SCCP
insn_16.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!5 MEM!4
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!4 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!4 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!10 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!10 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!8 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!8 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!9 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!9 = store i64 %103, i64 tmp_dword2!3
br label %bb7

SCCP forward
insn_16.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!5 MEM!4
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!4 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!4 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!10 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!10 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!8 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!8 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!9 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!9 = store i64 %103, i64 tmp_dword2!3
br label %bb7

cherry
insn_16.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!5 MEM!4
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!4 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!4 = store i64 %21, i64 tmp_dword2!3
br label %bb6
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb7, label %bb8
bb6:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb7:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!3
br label %bb6
bb8:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb9, label %bb10
bb9:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!3
br label %bb6
bb10:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb11, label %bb12
bb11:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!3
br label %bb6
bb12:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb13, label %bb14
bb13:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!10 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!10 = store i64 %77, i64 tmp_dword2!3
br label %bb6
bb14:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb15, label %bb16
bb15:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!8 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!8 = store i64 %91, i64 tmp_dword2!3
br label %bb6
bb16:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!9 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!9 = store i64 %103, i64 tmp_dword2!3
br label %bb6

COMPILE
insn_17.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[14]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

build SSA
insn_17.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG!2[12]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = load i64, [32, i64] XREG!2[14]
rs2_var!2 = store i64 %13, i64 rs2_var!1
%12 = load i64, i64 rs2_var!2
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
mem_index!2 = store i53 %15, i53 mem_index!1
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index!2
MEM!2 = store i64 %12, [9007199254740992, i64] MEM!1[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!3 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!3 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %17 MEM!2 MEM!5
tmp_dword2!2 = phi ite %17 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %17 tmp_dword1!1 tmp_dword1!11
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1!3
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
tmp_dword1!4 = store i64 %28, i64 tmp_dword1!3
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2!3
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
tmp_dword2!4 = store i64 %35, i64 tmp_dword2!3
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
tmp_dword2!11 = phi ite %25 tmp_dword2!4 ite %41 tmp_dword2!5 ite %57 tmp_dword2!10 ite %73 tmp_dword2!6 ite %89 tmp_dword2!7 ite %105 tmp_dword2!9 tmp_dword2!8
tmp_dword1!11 = phi ite %25 tmp_dword1!4 ite %41 tmp_dword1!5 ite %57 tmp_dword1!10 ite %73 tmp_dword1!6 ite %89 tmp_dword1!7 ite %105 tmp_dword1!9 tmp_dword1!8
%134 = load i64, i64 tmp_dword1!11
%135 = load i53, i53 mem_index!2
%136 = i53 Add i53 %135, 1
MEM!4 = store i64 %134, [9007199254740992, i64] MEM!1[%136]
%137 = load i64, i64 tmp_dword2!11
%138 = load i53, i53 mem_index!2
MEM!5 = store i64 %137, [9007199254740992, i64] MEM!4[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1!3
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
tmp_dword1!5 = store i64 %44, i64 tmp_dword1!3
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2!3
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
tmp_dword2!5 = store i64 %51, i64 tmp_dword2!3
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1!3
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
tmp_dword1!10 = store i64 %60, i64 tmp_dword1!3
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2!3
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
tmp_dword2!10 = store i64 %67, i64 tmp_dword2!3
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1!3
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
tmp_dword1!6 = store i64 %76, i64 tmp_dword1!3
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2!3
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
tmp_dword2!6 = store i64 %83, i64 tmp_dword2!3
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1!3
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
tmp_dword1!7 = store i64 %92, i64 tmp_dword1!3
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2!3
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
tmp_dword2!7 = store i64 %99, i64 tmp_dword2!3
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1!3
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
tmp_dword1!9 = store i64 %108, i64 tmp_dword1!3
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2!3
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
tmp_dword2!9 = store i64 %115, i64 tmp_dword2!3
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1!3
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
tmp_dword1!8 = store i64 %122, i64 tmp_dword1!3
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2!3
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
tmp_dword2!8 = store i64 %129, i64 tmp_dword2!3
br label %bb6

SSA forward
insn_17.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[14]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %7 MEM!2 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!4 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!4 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!10 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!10 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!6 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!6 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!7 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!7 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!9 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!9 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!8 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!8 = store i64 %103, i64 tmp_dword2!3
br label %bb7

Nested SCCP
insn_17.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[14]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %7 MEM!2 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!4 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!4 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!10 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!10 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!6 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!6 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!7 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!7 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!9 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!9 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!8 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!8 = store i64 %103, i64 tmp_dword2!3
br label %bb7

SCCP forward
insn_17.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[14]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %7 MEM!2 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!4 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!4 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!10 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!10 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!6 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!6 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!7 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!7 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!9 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!9 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!8 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!8 = store i64 %103, i64 tmp_dword2!3
br label %bb7

cherry
insn_17.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[14]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %7 MEM!2 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!11
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!4 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!4 = store i64 %21, i64 tmp_dword2!3
br label %bb6
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb7, label %bb8
bb6:
tmp_dword2!11 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!11 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!11, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!11, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb7:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!3
br label %bb6
bb8:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb9, label %bb10
bb9:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!10 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!10 = store i64 %49, i64 tmp_dword2!3
br label %bb6
bb10:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb11, label %bb12
bb11:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!6 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!6 = store i64 %63, i64 tmp_dword2!3
br label %bb6
bb12:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb13, label %bb14
bb13:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!7 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!7 = store i64 %77, i64 tmp_dword2!3
br label %bb6
bb14:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb15, label %bb16
bb15:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!9 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!9 = store i64 %91, i64 tmp_dword2!3
br label %bb6
bb16:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!8 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!8 = store i64 %103, i64 tmp_dword2!3
br label %bb6

COMPILE
insn_18.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[16]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[16]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_18.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG!2[16]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[16]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_18.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[16]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[16]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_18.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[16]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[16]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_18.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[16]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[16]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_18.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[16]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[16]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_19.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[12]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_19.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG!2[12]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[12]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_19.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[12]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_19.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[12]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_19.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[12]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_19.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[12]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_20.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[16]
%14 = load i64, [32, i64] XREG[13]
%8 = i1 Ne i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4084 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_20.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%13 = load i64, [32, i64] XREG!2[16]
%14 = load i64, [32, i64] XREG!2[13]
%8 = i1 Ne i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4084 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC!1
%12 = i64 Add i64 %11, %10
PC!2 = store i64 %12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %8 PC!2 PC!1
%3 = load i64, i64 PC!3
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC!3
%7 = i64 Add i64 %6, 4
PC!6 = store i64 %7, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %4 PC!6 PC!3
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
insn_20.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[16]
%5 = load i64, [32, i64] XREG!2[13]
%3 = i1 Ne i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!2 = store i64 -24, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 -24 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!3, 4
PC!6 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %1 %2 PC!3
PC!5 = store i64 PC!4, i64 PC!4
ret void

Nested SCCP
insn_20.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[16]
%5 = load i64, [32, i64] XREG!2[13]
%3 = i1 Ne i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!2 = store i64 -24, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 -24 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 0, 4
PC!6 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %3 -24 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

SCCP forward
insn_20.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[16]
%4 = load i64, [32, i64] XREG!2[13]
%2 = i1 Ne i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!2 = store i64 -24, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %2 -24 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!6 = store i64 4, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 -24 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

cherry
insn_20.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[16]
%4 = load i64, [32, i64] XREG!2[13]
%2 = i1 Ne i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!2 = store i64 -24, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %2 -24 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!6 = store i64 4, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 -24 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

COMPILE
insn_21.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[13]
%8 = i64 Shl i64 %9, 3
store i64 %8, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_21.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%9 = load i64, [32, i64] XREG!2[13]
%8 = i64 Shl i64 %9, 3
XREG!3 = store i64 %8, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_21.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Shl i64 %2, 3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_21.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Shl i64 %2, 3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_21.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Shl i64 %2, 3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_21.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Shl i64 %2, 3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_22.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[10]
%10 = load i64, [32, i64] XREG[15]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_22.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%9 = load i64, [32, i64] XREG!2[10]
%10 = load i64, [32, i64] XREG!2[15]
%8 = i64 Add i64 %9, %10
XREG!3 = store i64 %8, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_22.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%3 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_22.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%3 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_22.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%3 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_22.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%3 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_23.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4080 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb13:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb3

build SSA
insn_23.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4080 to i64
%11 = load i64, [32, i64] XREG!2[15]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index!2
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword!10 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!3 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!3 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %16 tmp_dword!10 ite %25 tmp_dword!9 ite %32 tmp_dword!3 ite %39 tmp_dword!8 ite %46 tmp_dword!7 ite %53 tmp_dword!6 ite %60 tmp_dword!4 tmp_dword!5
tmp_dword2!2 = phi ite %16 tmp_dword2!1 tmp_dword2!3
tmp_dword1!2 = phi ite %16 tmp_dword1!1 tmp_dword1!3
%71 = load i64, i64 tmp_dword!2
rd_var!2 = store i64 %71, i64 rd_var!1
%12 = load i64, i64 rd_var!2
XREG!3 = store i64 %12, [32, i64] XREG!2[14]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1!3
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2!3
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
tmp_dword!9 = store i64 %26, i64 tmp_dword!1
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1!3
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2!3
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
tmp_dword!3 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1!3
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2!3
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
tmp_dword!8 = store i64 %40, i64 tmp_dword!1
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void
bb13:
%48 = load i64, i64 tmp_dword1!3
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2!3
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
tmp_dword!7 = store i64 %47, i64 tmp_dword!1
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1!3
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2!3
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
tmp_dword!6 = store i64 %54, i64 tmp_dword!1
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1!3
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2!3
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
tmp_dword!4 = store i64 %61, i64 tmp_dword!1
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1!3
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2!3
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
tmp_dword!5 = store i64 %66, i64 tmp_dword!1
br label %bb3

SSA forward
insn_23.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -16
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!10 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[14]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!9 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!3 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!8 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!7 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!6 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!4 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!5 = store i64 %41, i64 tmp_dword!1
br label %bb3

Nested SCCP
insn_23.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -16
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!10 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[14]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!9 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!3 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!8 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!7 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!6 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!4 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!5 = store i64 %41, i64 tmp_dword!1
br label %bb3

SCCP forward
insn_23.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -16
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!10 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[14]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!9 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!3 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!8 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!7 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!6 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!4 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!5 = store i64 %41, i64 tmp_dword!1
br label %bb3

cherry
insn_23.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -16
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!10 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[14]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!9 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb6, label %bb7
bb6:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!3 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb7:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb8, label %bb9
bb8:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!8 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb9:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb10, label %bb11
bb10:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!7 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb11:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb12, label %bb13
bb12:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!6 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb13:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb14, label %bb15
bb14:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!4 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb15:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!5 = store i64 %41, i64 tmp_dword!1
br label %bb3

COMPILE
insn_24.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4088 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[12]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb13:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb3

build SSA
insn_24.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4088 to i64
%11 = load i64, [32, i64] XREG!2[15]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index!2
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword!3 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!3 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!3 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %16 tmp_dword!3 ite %25 tmp_dword!10 ite %32 tmp_dword!4 ite %39 tmp_dword!9 ite %46 tmp_dword!8 ite %53 tmp_dword!5 ite %60 tmp_dword!7 tmp_dword!6
tmp_dword2!2 = phi ite %16 tmp_dword2!1 tmp_dword2!3
tmp_dword1!2 = phi ite %16 tmp_dword1!1 tmp_dword1!3
%71 = load i64, i64 tmp_dword!2
rd_var!2 = store i64 %71, i64 rd_var!1
%12 = load i64, i64 rd_var!2
XREG!3 = store i64 %12, [32, i64] XREG!2[12]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1!3
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2!3
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
tmp_dword!10 = store i64 %26, i64 tmp_dword!1
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1!3
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2!3
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
tmp_dword!4 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1!3
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2!3
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
tmp_dword!9 = store i64 %40, i64 tmp_dword!1
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void
bb13:
%48 = load i64, i64 tmp_dword1!3
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2!3
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
tmp_dword!8 = store i64 %47, i64 tmp_dword!1
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1!3
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2!3
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
tmp_dword!5 = store i64 %54, i64 tmp_dword!1
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1!3
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2!3
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
tmp_dword!7 = store i64 %61, i64 tmp_dword!1
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1!3
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2!3
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
tmp_dword!6 = store i64 %66, i64 tmp_dword!1
br label %bb3

SSA forward
insn_24.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!3 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[12]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!10 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!4 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!9 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!8 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!5 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!7 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

Nested SCCP
insn_24.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!3 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[12]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!10 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!4 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!9 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!8 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!5 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!7 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

SCCP forward
insn_24.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!3 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[12]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!10 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!4 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!9 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!8 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!5 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!7 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

cherry
insn_24.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!3 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[12]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!10 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb6, label %bb7
bb6:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!4 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb7:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb8, label %bb9
bb8:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!9 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb9:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb10, label %bb11
bb10:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!8 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb11:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb12, label %bb13
bb12:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!5 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb13:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb14, label %bb15
bb14:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!7 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb15:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

COMPILE
insn_25.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 8 to i64
%10 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_25.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 8 to i64
%10 = load i64, [32, i64] XREG!2[15]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_25.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 8
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_25.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 8
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_25.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 8
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_25.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 8
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_26.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG[13]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_26.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 1 to i64
%10 = load i64, [32, i64] XREG!2[13]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[13]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_26.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_26.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_26.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_26.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, 1
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_27.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[14]
%10 = load i64, [32, i64] XREG[12]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_27.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%9 = load i64, [32, i64] XREG!2[14]
%10 = load i64, [32, i64] XREG!2[12]
%8 = i64 Add i64 %9, %10
XREG!3 = store i64 %8, [32, i64] XREG!2[14]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_27.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_27.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_27.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_27.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_28.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4088 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[14]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

build SSA
insn_28.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4088 to i64
%11 = load i64, [32, i64] XREG!2[15]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = load i64, [32, i64] XREG!2[14]
rs2_var!2 = store i64 %13, i64 rs2_var!1
%12 = load i64, i64 rs2_var!2
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
mem_index!2 = store i53 %15, i53 mem_index!1
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index!2
MEM!2 = store i64 %12, [9007199254740992, i64] MEM!1[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!3 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!3 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %17 MEM!2 MEM!5
tmp_dword2!2 = phi ite %17 tmp_dword2!1 tmp_dword2!4
tmp_dword1!2 = phi ite %17 tmp_dword1!1 tmp_dword1!4
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1!3
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %28, i64 tmp_dword1!3
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2!3
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!3
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
tmp_dword2!4 = phi ite %25 tmp_dword2!5 ite %41 tmp_dword2!11 ite %57 tmp_dword2!10 ite %73 tmp_dword2!9 ite %89 tmp_dword2!8 ite %105 tmp_dword2!6 tmp_dword2!7
tmp_dword1!4 = phi ite %25 tmp_dword1!5 ite %41 tmp_dword1!11 ite %57 tmp_dword1!10 ite %73 tmp_dword1!9 ite %89 tmp_dword1!8 ite %105 tmp_dword1!6 tmp_dword1!7
%134 = load i64, i64 tmp_dword1!4
%135 = load i53, i53 mem_index!2
%136 = i53 Add i53 %135, 1
MEM!4 = store i64 %134, [9007199254740992, i64] MEM!1[%136]
%137 = load i64, i64 tmp_dword2!4
%138 = load i53, i53 mem_index!2
MEM!5 = store i64 %137, [9007199254740992, i64] MEM!4[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1!3
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
tmp_dword1!11 = store i64 %44, i64 tmp_dword1!3
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2!3
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
tmp_dword2!11 = store i64 %51, i64 tmp_dword2!3
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1!3
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
tmp_dword1!10 = store i64 %60, i64 tmp_dword1!3
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2!3
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
tmp_dword2!10 = store i64 %67, i64 tmp_dword2!3
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1!3
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
tmp_dword1!9 = store i64 %76, i64 tmp_dword1!3
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2!3
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
tmp_dword2!9 = store i64 %83, i64 tmp_dword2!3
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1!3
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
tmp_dword1!8 = store i64 %92, i64 tmp_dword1!3
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2!3
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
tmp_dword2!8 = store i64 %99, i64 tmp_dword2!3
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1!3
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
tmp_dword1!6 = store i64 %108, i64 tmp_dword1!3
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2!3
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
tmp_dword2!6 = store i64 %115, i64 tmp_dword2!3
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1!3
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
tmp_dword1!7 = store i64 %122, i64 tmp_dword1!3
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2!3
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
tmp_dword2!7 = store i64 %129, i64 tmp_dword2!3
br label %bb6

SSA forward
insn_28.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[14]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %7 MEM!2 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!4
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!5 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!5 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!11 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!11 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!10 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!10 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!9 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!9 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!6 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!6 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!7 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!7 = store i64 %103, i64 tmp_dword2!3
br label %bb7

Nested SCCP
insn_28.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[14]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %7 MEM!2 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!4
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!5 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!5 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!11 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!11 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!10 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!10 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!9 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!9 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!6 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!6 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!7 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!7 = store i64 %103, i64 tmp_dword2!3
br label %bb7

SCCP forward
insn_28.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[14]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %7 MEM!2 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!4
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!5 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!5 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!11 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!11 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!10 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!10 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!9 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!9 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!6 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!6 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!7 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!7 = store i64 %103, i64 tmp_dword2!3
br label %bb7

cherry
insn_28.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, -8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[14]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %7 MEM!2 MEM!5
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!4
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!5 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!5 = store i64 %21, i64 tmp_dword2!3
br label %bb6
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb7, label %bb8
bb6:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!4 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!5 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!4[%5]
br label %bb3
bb7:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!11 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!11 = store i64 %35, i64 tmp_dword2!3
br label %bb6
bb8:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb9, label %bb10
bb9:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!10 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!10 = store i64 %49, i64 tmp_dword2!3
br label %bb6
bb10:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb11, label %bb12
bb11:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!9 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!9 = store i64 %63, i64 tmp_dword2!3
br label %bb6
bb12:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb13, label %bb14
bb13:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!3
br label %bb6
bb14:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb15, label %bb16
bb15:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!6 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!6 = store i64 %91, i64 tmp_dword2!3
br label %bb6
bb16:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!7 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!7 = store i64 %103, i64 tmp_dword2!3
br label %bb6

COMPILE
insn_29.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[13]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Ult i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4084 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_29.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%13 = load i64, [32, i64] XREG!2[13]
%14 = load i64, [32, i64] XREG!2[11]
%8 = i1 Ult i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4084 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC!1
%12 = i64 Add i64 %11, %10
PC!6 = store i64 %12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %8 PC!6 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!5 = store i64 %7, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %4 PC!5 PC!2
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_29.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[13]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Ult i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!6 = store i64 -24, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %3 -24 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!2, 4
PC!5 = store i64 %2, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %1 %2 PC!2
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_29.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[13]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Ult i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!6 = store i64 -24, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %3 -24 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 0, 4
PC!5 = store i64 %2, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %3 -24 %2
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_29.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[13]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Ult i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!6 = store i64 -24, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %2 -24 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!5 = store i64 4, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %2 -24 4
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_29.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[13]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Ult i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!6 = store i64 -24, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %2 -24 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!5 = store i64 4, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %2 -24 4
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_30.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_30.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = load i64, i64 PC!1
%9 = i64 Add i64 %8, 4
XREG!3 = store i64 %9, [32, i64] XREG!2[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG!3[1]
%13 = i64 Add i64 %14, %12
PC!2 = store i64 %13, i64 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!5 = store i64 %7, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!5 PC!2
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_30.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!3[1]
%3 = i64 Add i64 %4, 0
PC!2 = store i64 %3, i64 PC!1
%1 = i1 Eq i64 %3, 0
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %3, 4
PC!5 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_30.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!3[1]
%3 = i64 Add i64 %4, 0
PC!2 = store i64 %3, i64 PC!1
%1 = i1 Eq i64 %3, 0
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 0, 4
PC!5 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_30.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%3 = load i64, [32, i64] XREG!3[1]
%2 = i64 Add i64 %3, 0
PC!2 = store i64 %2, i64 PC!1
%1 = i1 Eq i64 %2, 0
br i1 %1, label %bb1, label %bb2
bb1:
PC!5 = store i64 4, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 4 %2
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_30.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%3 = load i64, [32, i64] XREG!3[1]
%2 = i64 Add i64 %3, 0
PC!2 = store i64 %2, i64 PC!1
%1 = i1 Eq i64 %2, 0
br i1 %1, label %bb1, label %bb2
bb1:
PC!5 = store i64 4, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 4 %2
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_31.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_31.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 2 to i64
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[13]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_31.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_31.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_31.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_31.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 2
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_32.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i20 1048554 to i64
%11 = i64 Shl i64 %10, 1
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, %11
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_32.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = load i64, i64 PC!1
%9 = i64 Add i64 %8, 4
XREG!3 = store i64 %9, [32, i64] XREG!2[0]
%10 = Sext i20 1048554 to i64
%11 = i64 Shl i64 %10, 1
%12 = load i64, i64 PC!1
%13 = i64 Add i64 %12, %11
PC!2 = store i64 %13, i64 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!5 = store i64 %7, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!5 PC!2
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_32.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
PC!2 = store i64 -44, i64 PC!1
br label %bb1
bb1:
br label %bb2
bb2:
store i64 -44, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_32.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
PC!2 = store i64 -44, i64 PC!1
br label %bb1
bb1:
br label %bb2
bb2:
store i64 -44, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_32.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
PC!2 = store i64 -44, i64 PC!1
br label %bb1
bb1:
br label %bb2
bb2:
store i64 -44, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_32.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
PC!2 = store i64 -44, i64 PC!1
store i64 -44, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
bb_0 func void []
bb0:
call void insn_0.action %0 ()
call void insn_1.action %0 ()
call void insn_2.action %0 ()
call void insn_3.action %0 ()
call void insn_4.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_0 func void []
bb0:
br label %bb6
bb1:
br label %bb28
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 1 to i64
%11 = load i64, [32, i64] XREG[0]
%10 = i64 Add i64 %11, %9
store i64 %10, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
br label %bb50
bb8:
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%19 = Sext i12 0 to i64
%22 = load i64, [32, i64] XREG[10]
%20 = i64 Add i64 %22, %19
store i64 %20, i64 tmp_address
%21 = load i64, i64 tmp_address
%24 = load i64, [32, i64] XREG[15]
store i64 %24, i64 rs2_var
%23 = load i64, i64 rs2_var
%25 = i64 Lshr i64 %21, 3
%26 = Extract i53 of i64 %25 <52, 0>
store i53 %26, i53 mem_index
%27 = Extract i3 of i64 %21 <2, 0>
%28 = i1 Eq i3 %27, 0
br i1 %28, label %bb9, label %bb10
bb9:
%29 = load i53, i53 mem_index
store i64 %23, [9007199254740992, i64] MEM[%29]
br label %bb11
bb10:
%30 = load i53, i53 mem_index
%31 = i53 Add i53 %30, 1
%32 = load i64, [9007199254740992, i64] MEM[%31]
store i64 %32, i64 tmp_dword1
%33 = load i53, i53 mem_index
%34 = load i64, [9007199254740992, i64] MEM[%33]
store i64 %34, i64 tmp_dword2
%35 = Extract i3 of i64 %21 <2, 0>
%36 = i1 Eq i3 %35, 1
br i1 %36, label %bb12, label %bb13
bb11:
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb17, label %bb18
bb12:
%37 = i64 Lshr i64 %23, 56
%38 = Extract i8 of i64 %37 <7, 0>
%40 = load i64, i64 tmp_dword1
%41 = Zext i8 %38 to i64
%42 = i64 And i64 %40, -256
%43 = i64 Shl i64 %41, 0
%39 = i64 Or i64 %42, %43
store i64 %39, i64 tmp_dword1
%44 = i64 Lshr i64 %23, 0
%45 = Extract i56 of i64 %44 <55, 0>
%47 = load i64, i64 tmp_dword2
%48 = Zext i56 %45 to i64
%49 = i64 And i64 %47, 255
%50 = i64 Shl i64 %48, 8
%46 = i64 Or i64 %49, %50
store i64 %46, i64 tmp_dword2
br label %bb14
bb13:
%51 = Extract i3 of i64 %21 <2, 0>
%52 = i1 Eq i3 %51, 2
br i1 %52, label %bb15, label %bb16
bb14:
%145 = load i64, i64 tmp_dword1
%146 = load i53, i53 mem_index
%147 = i53 Add i53 %146, 1
store i64 %145, [9007199254740992, i64] MEM[%147]
%148 = load i64, i64 tmp_dword2
%149 = load i53, i53 mem_index
store i64 %148, [9007199254740992, i64] MEM[%149]
br label %bb11
bb15:
%53 = i64 Lshr i64 %23, 48
%54 = Extract i16 of i64 %53 <15, 0>
%56 = load i64, i64 tmp_dword1
%57 = Zext i16 %54 to i64
%58 = i64 And i64 %56, -65536
%59 = i64 Shl i64 %57, 0
%55 = i64 Or i64 %58, %59
store i64 %55, i64 tmp_dword1
%60 = i64 Lshr i64 %23, 0
%61 = Extract i48 of i64 %60 <47, 0>
%63 = load i64, i64 tmp_dword2
%64 = Zext i48 %61 to i64
%65 = i64 And i64 %63, 65535
%66 = i64 Shl i64 %64, 16
%62 = i64 Or i64 %65, %66
store i64 %62, i64 tmp_dword2
br label %bb14
bb16:
%67 = Extract i3 of i64 %21 <2, 0>
%68 = i1 Eq i3 %67, 3
br i1 %68, label %bb19, label %bb20
bb17:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb21
bb18:
br label %bb21
bb19:
%69 = i64 Lshr i64 %23, 40
%70 = Extract i24 of i64 %69 <23, 0>
%72 = load i64, i64 tmp_dword1
%73 = Zext i24 %70 to i64
%74 = i64 And i64 %72, -16777216
%75 = i64 Shl i64 %73, 0
%71 = i64 Or i64 %74, %75
store i64 %71, i64 tmp_dword1
%76 = i64 Lshr i64 %23, 0
%77 = Extract i40 of i64 %76 <39, 0>
%79 = load i64, i64 tmp_dword2
%80 = Zext i40 %77 to i64
%81 = i64 And i64 %79, 16777215
%82 = i64 Shl i64 %80, 24
%78 = i64 Or i64 %81, %82
store i64 %78, i64 tmp_dword2
br label %bb14
bb20:
%83 = Extract i3 of i64 %21 <2, 0>
%84 = i1 Eq i3 %83, -4
br i1 %84, label %bb22, label %bb23
bb21:
%12 = load i64, i64 PC
store i64 %12, i64 PC
br label %bb7
bb22:
%85 = i64 Lshr i64 %23, 32
%86 = Extract i32 of i64 %85 <31, 0>
%88 = load i64, i64 tmp_dword1
%89 = Zext i32 %86 to i64
%90 = i64 And i64 %88, -4294967296
%91 = i64 Shl i64 %89, 0
%87 = i64 Or i64 %90, %91
store i64 %87, i64 tmp_dword1
%92 = i64 Lshr i64 %23, 0
%93 = Extract i32 of i64 %92 <31, 0>
%95 = load i64, i64 tmp_dword2
%96 = Zext i32 %93 to i64
%97 = i64 And i64 %95, 4294967295
%98 = i64 Shl i64 %96, 32
%94 = i64 Or i64 %97, %98
store i64 %94, i64 tmp_dword2
br label %bb14
bb23:
%99 = Extract i3 of i64 %21 <2, 0>
%100 = i1 Eq i3 %99, -3
br i1 %100, label %bb24, label %bb25
bb24:
%101 = i64 Lshr i64 %23, 24
%102 = Extract i40 of i64 %101 <39, 0>
%104 = load i64, i64 tmp_dword1
%105 = Zext i40 %102 to i64
%106 = i64 And i64 %104, -1099511627776
%107 = i64 Shl i64 %105, 0
%103 = i64 Or i64 %106, %107
store i64 %103, i64 tmp_dword1
%108 = i64 Lshr i64 %23, 0
%109 = Extract i24 of i64 %108 <23, 0>
%111 = load i64, i64 tmp_dword2
%112 = Zext i24 %109 to i64
%113 = i64 And i64 %111, 1099511627775
%114 = i64 Shl i64 %112, 40
%110 = i64 Or i64 %113, %114
store i64 %110, i64 tmp_dword2
br label %bb14
bb25:
%115 = Extract i3 of i64 %21 <2, 0>
%116 = i1 Eq i3 %115, -2
br i1 %116, label %bb26, label %bb27
bb26:
%117 = i64 Lshr i64 %23, 16
%118 = Extract i48 of i64 %117 <47, 0>
%120 = load i64, i64 tmp_dword1
%121 = Zext i48 %118 to i64
%122 = i64 And i64 %120, -281474976710656
%123 = i64 Shl i64 %121, 0
%119 = i64 Or i64 %122, %123
store i64 %119, i64 tmp_dword1
%124 = i64 Lshr i64 %23, 0
%125 = Extract i16 of i64 %124 <15, 0>
%127 = load i64, i64 tmp_dword2
%128 = Zext i16 %125 to i64
%129 = i64 And i64 %127, 281474976710655
%130 = i64 Shl i64 %128, 48
%126 = i64 Or i64 %129, %130
store i64 %126, i64 tmp_dword2
br label %bb14
bb27:
%131 = i64 Lshr i64 %23, 8
%132 = Extract i56 of i64 %131 <55, 0>
%134 = load i64, i64 tmp_dword1
%135 = Zext i56 %132 to i64
%136 = i64 And i64 %134, -72057594037927936
%137 = i64 Shl i64 %135, 0
%133 = i64 Or i64 %136, %137
store i64 %133, i64 tmp_dword1
%138 = i64 Lshr i64 %23, 0
%139 = Extract i8 of i64 %138 <7, 0>
%141 = load i64, i64 tmp_dword2
%142 = Zext i8 %139 to i64
%143 = i64 And i64 %141, 72057594037927935
%144 = i64 Shl i64 %142, 56
%140 = i64 Or i64 %143, %144
store i64 %140, i64 tmp_dword2
br label %bb14
bb28:
br label %bb8
bb29:
br label %bb56
bb30:
store i64 0, [32, i64] XREG[0]
%151 = load i64, i64 PC
store i64 %151, i64 prev_pc
%157 = Sext i12 8 to i64
%160 = load i64, [32, i64] XREG[10]
%158 = i64 Add i64 %160, %157
store i64 %158, i64 tmp_address
%159 = load i64, i64 tmp_address
%162 = load i64, [32, i64] XREG[15]
store i64 %162, i64 rs2_var
%161 = load i64, i64 rs2_var
%163 = i64 Lshr i64 %159, 3
%164 = Extract i53 of i64 %163 <52, 0>
store i53 %164, i53 mem_index
%165 = Extract i3 of i64 %159 <2, 0>
%166 = i1 Eq i3 %165, 0
br i1 %166, label %bb31, label %bb32
bb31:
%167 = load i53, i53 mem_index
store i64 %161, [9007199254740992, i64] MEM[%167]
br label %bb33
bb32:
%168 = load i53, i53 mem_index
%169 = i53 Add i53 %168, 1
%170 = load i64, [9007199254740992, i64] MEM[%169]
store i64 %170, i64 tmp_dword1
%171 = load i53, i53 mem_index
%172 = load i64, [9007199254740992, i64] MEM[%171]
store i64 %172, i64 tmp_dword2
%173 = Extract i3 of i64 %159 <2, 0>
%174 = i1 Eq i3 %173, 1
br i1 %174, label %bb34, label %bb35
bb33:
%152 = load i64, i64 PC
%154 = load i64, i64 prev_pc
%153 = i1 Eq i64 %152, %154
br i1 %153, label %bb39, label %bb40
bb34:
%175 = i64 Lshr i64 %161, 56
%176 = Extract i8 of i64 %175 <7, 0>
%178 = load i64, i64 tmp_dword1
%179 = Zext i8 %176 to i64
%180 = i64 And i64 %178, -256
%181 = i64 Shl i64 %179, 0
%177 = i64 Or i64 %180, %181
store i64 %177, i64 tmp_dword1
%182 = i64 Lshr i64 %161, 0
%183 = Extract i56 of i64 %182 <55, 0>
%185 = load i64, i64 tmp_dword2
%186 = Zext i56 %183 to i64
%187 = i64 And i64 %185, 255
%188 = i64 Shl i64 %186, 8
%184 = i64 Or i64 %187, %188
store i64 %184, i64 tmp_dword2
br label %bb36
bb35:
%189 = Extract i3 of i64 %159 <2, 0>
%190 = i1 Eq i3 %189, 2
br i1 %190, label %bb37, label %bb38
bb36:
%283 = load i64, i64 tmp_dword1
%284 = load i53, i53 mem_index
%285 = i53 Add i53 %284, 1
store i64 %283, [9007199254740992, i64] MEM[%285]
%286 = load i64, i64 tmp_dword2
%287 = load i53, i53 mem_index
store i64 %286, [9007199254740992, i64] MEM[%287]
br label %bb33
bb37:
%191 = i64 Lshr i64 %161, 48
%192 = Extract i16 of i64 %191 <15, 0>
%194 = load i64, i64 tmp_dword1
%195 = Zext i16 %192 to i64
%196 = i64 And i64 %194, -65536
%197 = i64 Shl i64 %195, 0
%193 = i64 Or i64 %196, %197
store i64 %193, i64 tmp_dword1
%198 = i64 Lshr i64 %161, 0
%199 = Extract i48 of i64 %198 <47, 0>
%201 = load i64, i64 tmp_dword2
%202 = Zext i48 %199 to i64
%203 = i64 And i64 %201, 65535
%204 = i64 Shl i64 %202, 16
%200 = i64 Or i64 %203, %204
store i64 %200, i64 tmp_dword2
br label %bb36
bb38:
%205 = Extract i3 of i64 %159 <2, 0>
%206 = i1 Eq i3 %205, 3
br i1 %206, label %bb41, label %bb42
bb39:
%155 = load i64, i64 PC
%156 = i64 Add i64 %155, 4
store i64 %156, i64 PC
br label %bb43
bb40:
br label %bb43
bb41:
%207 = i64 Lshr i64 %161, 40
%208 = Extract i24 of i64 %207 <23, 0>
%210 = load i64, i64 tmp_dword1
%211 = Zext i24 %208 to i64
%212 = i64 And i64 %210, -16777216
%213 = i64 Shl i64 %211, 0
%209 = i64 Or i64 %212, %213
store i64 %209, i64 tmp_dword1
%214 = i64 Lshr i64 %161, 0
%215 = Extract i40 of i64 %214 <39, 0>
%217 = load i64, i64 tmp_dword2
%218 = Zext i40 %215 to i64
%219 = i64 And i64 %217, 16777215
%220 = i64 Shl i64 %218, 24
%216 = i64 Or i64 %219, %220
store i64 %216, i64 tmp_dword2
br label %bb36
bb42:
%221 = Extract i3 of i64 %159 <2, 0>
%222 = i1 Eq i3 %221, -4
br i1 %222, label %bb44, label %bb45
bb43:
%150 = load i64, i64 PC
store i64 %150, i64 PC
br label %bb29
bb44:
%223 = i64 Lshr i64 %161, 32
%224 = Extract i32 of i64 %223 <31, 0>
%226 = load i64, i64 tmp_dword1
%227 = Zext i32 %224 to i64
%228 = i64 And i64 %226, -4294967296
%229 = i64 Shl i64 %227, 0
%225 = i64 Or i64 %228, %229
store i64 %225, i64 tmp_dword1
%230 = i64 Lshr i64 %161, 0
%231 = Extract i32 of i64 %230 <31, 0>
%233 = load i64, i64 tmp_dword2
%234 = Zext i32 %231 to i64
%235 = i64 And i64 %233, 4294967295
%236 = i64 Shl i64 %234, 32
%232 = i64 Or i64 %235, %236
store i64 %232, i64 tmp_dword2
br label %bb36
bb45:
%237 = Extract i3 of i64 %159 <2, 0>
%238 = i1 Eq i3 %237, -3
br i1 %238, label %bb46, label %bb47
bb46:
%239 = i64 Lshr i64 %161, 24
%240 = Extract i40 of i64 %239 <39, 0>
%242 = load i64, i64 tmp_dword1
%243 = Zext i40 %240 to i64
%244 = i64 And i64 %242, -1099511627776
%245 = i64 Shl i64 %243, 0
%241 = i64 Or i64 %244, %245
store i64 %241, i64 tmp_dword1
%246 = i64 Lshr i64 %161, 0
%247 = Extract i24 of i64 %246 <23, 0>
%249 = load i64, i64 tmp_dword2
%250 = Zext i24 %247 to i64
%251 = i64 And i64 %249, 1099511627775
%252 = i64 Shl i64 %250, 40
%248 = i64 Or i64 %251, %252
store i64 %248, i64 tmp_dword2
br label %bb36
bb47:
%253 = Extract i3 of i64 %159 <2, 0>
%254 = i1 Eq i3 %253, -2
br i1 %254, label %bb48, label %bb49
bb48:
%255 = i64 Lshr i64 %161, 16
%256 = Extract i48 of i64 %255 <47, 0>
%258 = load i64, i64 tmp_dword1
%259 = Zext i48 %256 to i64
%260 = i64 And i64 %258, -281474976710656
%261 = i64 Shl i64 %259, 0
%257 = i64 Or i64 %260, %261
store i64 %257, i64 tmp_dword1
%262 = i64 Lshr i64 %161, 0
%263 = Extract i16 of i64 %262 <15, 0>
%265 = load i64, i64 tmp_dword2
%266 = Zext i16 %263 to i64
%267 = i64 And i64 %265, 281474976710655
%268 = i64 Shl i64 %266, 48
%264 = i64 Or i64 %267, %268
store i64 %264, i64 tmp_dword2
br label %bb36
bb49:
%269 = i64 Lshr i64 %161, 8
%270 = Extract i56 of i64 %269 <55, 0>
%272 = load i64, i64 tmp_dword1
%273 = Zext i56 %270 to i64
%274 = i64 And i64 %272, -72057594037927936
%275 = i64 Shl i64 %273, 0
%271 = i64 Or i64 %274, %275
store i64 %271, i64 tmp_dword1
%276 = i64 Lshr i64 %161, 0
%277 = Extract i8 of i64 %276 <7, 0>
%279 = load i64, i64 tmp_dword2
%280 = Zext i8 %277 to i64
%281 = i64 And i64 %279, 72057594037927935
%282 = i64 Shl i64 %280, 56
%278 = i64 Or i64 %281, %282
store i64 %278, i64 tmp_dword2
br label %bb36
bb50:
br label %bb30
bb51:
br label %bb65
bb52:
store i64 0, [32, i64] XREG[0]
%289 = load i64, i64 PC
store i64 %289, i64 prev_pc
%295 = Sext i12 2 to i64
%297 = load i64, [32, i64] XREG[0]
%296 = i64 Add i64 %297, %295
store i64 %296, [32, i64] XREG[15]
%290 = load i64, i64 PC
%292 = load i64, i64 prev_pc
%291 = i1 Eq i64 %290, %292
br i1 %291, label %bb53, label %bb54
bb53:
%293 = load i64, i64 PC
%294 = i64 Add i64 %293, 4
store i64 %294, i64 PC
br label %bb55
bb54:
br label %bb55
bb55:
%288 = load i64, i64 PC
store i64 %288, i64 PC
br label %bb51
bb56:
br label %bb52
bb57:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb58:
store i64 0, [32, i64] XREG[0]
%299 = load i64, i64 PC
store i64 %299, i64 prev_pc
%310 = load i64, [32, i64] XREG[15]
%311 = load i64, [32, i64] XREG[11]
%305 = i1 Uge i64 %310, %311
br i1 %305, label %bb59, label %bb60
bb59:
%306 = Sext i12 52 to i64
%307 = i64 Shl i64 %306, 1
%308 = load i64, i64 PC
%309 = i64 Add i64 %308, %307
store i64 %309, i64 PC
br label %bb61
bb60:
br label %bb61
bb61:
%300 = load i64, i64 PC
%302 = load i64, i64 prev_pc
%301 = i1 Eq i64 %300, %302
br i1 %301, label %bb62, label %bb63
bb62:
%303 = load i64, i64 PC
%304 = i64 Add i64 %303, 4
store i64 %304, i64 PC
br label %bb64
bb63:
br label %bb64
bb64:
%298 = load i64, i64 PC
store i64 %298, i64 PC
br label %bb57
bb65:
br label %bb58

propagate
bb_0 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, 1
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%20 = load i64, [32, i64] XREG[10]
%18 = i64 Add i64 %20, 0
store i64 %18, i64 tmp_address
%19 = load i64, i64 tmp_address
%22 = load i64, [32, i64] XREG[15]
store i64 %22, i64 rs2_var
%21 = load i64, i64 rs2_var
%23 = i64 Lshr i64 %19, 3
%24 = Extract i53 of i64 %23 <52, 0>
store i53 %24, i53 mem_index
%25 = Extract i3 of i64 %19 <2, 0>
%26 = i1 Eq i3 %25, 0
br i1 %26, label %bb9, label %bb10
bb9:
%27 = load i53, i53 mem_index
store i64 %21, [9007199254740992, i64] MEM[%27]
br label %bb11
bb10:
%28 = load i53, i53 mem_index
%29 = i53 Add i53 %28, 1
%30 = load i64, [9007199254740992, i64] MEM[%29]
store i64 %30, i64 tmp_dword1
%31 = load i53, i53 mem_index
%32 = load i64, [9007199254740992, i64] MEM[%31]
store i64 %32, i64 tmp_dword2
%33 = Extract i3 of i64 %19 <2, 0>
%34 = i1 Eq i3 %33, 1
br i1 %34, label %bb12, label %bb13
bb11:
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb14, label %bb15
bb12:
%35 = i64 Lshr i64 %21, 56
%36 = Extract i8 of i64 %35 <7, 0>
%38 = load i64, i64 tmp_dword1
%39 = Zext i8 %36 to i64
%40 = i64 And i64 %38, -256
%41 = i64 Shl i64 %39, 0
%37 = i64 Or i64 %40, %41
store i64 %37, i64 tmp_dword1
%42 = i64 Lshr i64 %21, 0
%43 = Extract i56 of i64 %42 <55, 0>
%45 = load i64, i64 tmp_dword2
%46 = Zext i56 %43 to i64
%47 = i64 And i64 %45, 255
%48 = i64 Shl i64 %46, 8
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword2
br label %bb16
bb13:
%49 = Extract i3 of i64 %19 <2, 0>
%50 = i1 Eq i3 %49, 2
br i1 %50, label %bb17, label %bb18
bb14:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb19
bb15:
br label %bb19
bb16:
%143 = load i64, i64 tmp_dword1
%144 = load i53, i53 mem_index
%145 = i53 Add i53 %144, 1
store i64 %143, [9007199254740992, i64] MEM[%145]
%146 = load i64, i64 tmp_dword2
%147 = load i53, i53 mem_index
store i64 %146, [9007199254740992, i64] MEM[%147]
br label %bb11
bb17:
%51 = i64 Lshr i64 %21, 48
%52 = Extract i16 of i64 %51 <15, 0>
%54 = load i64, i64 tmp_dword1
%55 = Zext i16 %52 to i64
%56 = i64 And i64 %54, -65536
%57 = i64 Shl i64 %55, 0
%53 = i64 Or i64 %56, %57
store i64 %53, i64 tmp_dword1
%58 = i64 Lshr i64 %21, 0
%59 = Extract i48 of i64 %58 <47, 0>
%61 = load i64, i64 tmp_dword2
%62 = Zext i48 %59 to i64
%63 = i64 And i64 %61, 65535
%64 = i64 Shl i64 %62, 16
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword2
br label %bb16
bb18:
%65 = Extract i3 of i64 %19 <2, 0>
%66 = i1 Eq i3 %65, 3
br i1 %66, label %bb20, label %bb21
bb19:
%11 = load i64, i64 PC
store i64 %11, i64 PC
br label %bb22
bb20:
%67 = i64 Lshr i64 %21, 40
%68 = Extract i24 of i64 %67 <23, 0>
%70 = load i64, i64 tmp_dword1
%71 = Zext i24 %68 to i64
%72 = i64 And i64 %70, -16777216
%73 = i64 Shl i64 %71, 0
%69 = i64 Or i64 %72, %73
store i64 %69, i64 tmp_dword1
%74 = i64 Lshr i64 %21, 0
%75 = Extract i40 of i64 %74 <39, 0>
%77 = load i64, i64 tmp_dword2
%78 = Zext i40 %75 to i64
%79 = i64 And i64 %77, 16777215
%80 = i64 Shl i64 %78, 24
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword2
br label %bb16
bb21:
%81 = Extract i3 of i64 %19 <2, 0>
%82 = i1 Eq i3 %81, -4
br i1 %82, label %bb23, label %bb24
bb22:
br label %bb25
bb23:
%83 = i64 Lshr i64 %21, 32
%84 = Extract i32 of i64 %83 <31, 0>
%86 = load i64, i64 tmp_dword1
%87 = Zext i32 %84 to i64
%88 = i64 And i64 %86, -4294967296
%89 = i64 Shl i64 %87, 0
%85 = i64 Or i64 %88, %89
store i64 %85, i64 tmp_dword1
%90 = i64 Lshr i64 %21, 0
%91 = Extract i32 of i64 %90 <31, 0>
%93 = load i64, i64 tmp_dword2
%94 = Zext i32 %91 to i64
%95 = i64 And i64 %93, 4294967295
%96 = i64 Shl i64 %94, 32
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword2
br label %bb16
bb24:
%97 = Extract i3 of i64 %19 <2, 0>
%98 = i1 Eq i3 %97, -3
br i1 %98, label %bb26, label %bb27
bb25:
br label %bb28
bb26:
%99 = i64 Lshr i64 %21, 24
%100 = Extract i40 of i64 %99 <39, 0>
%102 = load i64, i64 tmp_dword1
%103 = Zext i40 %100 to i64
%104 = i64 And i64 %102, -1099511627776
%105 = i64 Shl i64 %103, 0
%101 = i64 Or i64 %104, %105
store i64 %101, i64 tmp_dword1
%106 = i64 Lshr i64 %21, 0
%107 = Extract i24 of i64 %106 <23, 0>
%109 = load i64, i64 tmp_dword2
%110 = Zext i24 %107 to i64
%111 = i64 And i64 %109, 1099511627775
%112 = i64 Shl i64 %110, 40
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword2
br label %bb16
bb27:
%113 = Extract i3 of i64 %19 <2, 0>
%114 = i1 Eq i3 %113, -2
br i1 %114, label %bb29, label %bb30
bb28:
store i64 0, [32, i64] XREG[0]
%149 = load i64, i64 PC
store i64 %149, i64 prev_pc
%157 = load i64, [32, i64] XREG[10]
%155 = i64 Add i64 %157, 8
store i64 %155, i64 tmp_address
%156 = load i64, i64 tmp_address
%159 = load i64, [32, i64] XREG[15]
store i64 %159, i64 rs2_var
%158 = load i64, i64 rs2_var
%160 = i64 Lshr i64 %156, 3
%161 = Extract i53 of i64 %160 <52, 0>
store i53 %161, i53 mem_index
%162 = Extract i3 of i64 %156 <2, 0>
%163 = i1 Eq i3 %162, 0
br i1 %163, label %bb31, label %bb32
bb29:
%115 = i64 Lshr i64 %21, 16
%116 = Extract i48 of i64 %115 <47, 0>
%118 = load i64, i64 tmp_dword1
%119 = Zext i48 %116 to i64
%120 = i64 And i64 %118, -281474976710656
%121 = i64 Shl i64 %119, 0
%117 = i64 Or i64 %120, %121
store i64 %117, i64 tmp_dword1
%122 = i64 Lshr i64 %21, 0
%123 = Extract i16 of i64 %122 <15, 0>
%125 = load i64, i64 tmp_dword2
%126 = Zext i16 %123 to i64
%127 = i64 And i64 %125, 281474976710655
%128 = i64 Shl i64 %126, 48
%124 = i64 Or i64 %127, %128
store i64 %124, i64 tmp_dword2
br label %bb16
bb30:
%129 = i64 Lshr i64 %21, 8
%130 = Extract i56 of i64 %129 <55, 0>
%132 = load i64, i64 tmp_dword1
%133 = Zext i56 %130 to i64
%134 = i64 And i64 %132, -72057594037927936
%135 = i64 Shl i64 %133, 0
%131 = i64 Or i64 %134, %135
store i64 %131, i64 tmp_dword1
%136 = i64 Lshr i64 %21, 0
%137 = Extract i8 of i64 %136 <7, 0>
%139 = load i64, i64 tmp_dword2
%140 = Zext i8 %137 to i64
%141 = i64 And i64 %139, 72057594037927935
%142 = i64 Shl i64 %140, 56
%138 = i64 Or i64 %141, %142
store i64 %138, i64 tmp_dword2
br label %bb16
bb31:
%164 = load i53, i53 mem_index
store i64 %158, [9007199254740992, i64] MEM[%164]
br label %bb33
bb32:
%165 = load i53, i53 mem_index
%166 = i53 Add i53 %165, 1
%167 = load i64, [9007199254740992, i64] MEM[%166]
store i64 %167, i64 tmp_dword1
%168 = load i53, i53 mem_index
%169 = load i64, [9007199254740992, i64] MEM[%168]
store i64 %169, i64 tmp_dword2
%170 = Extract i3 of i64 %156 <2, 0>
%171 = i1 Eq i3 %170, 1
br i1 %171, label %bb34, label %bb35
bb33:
%150 = load i64, i64 PC
%152 = load i64, i64 prev_pc
%151 = i1 Eq i64 %150, %152
br i1 %151, label %bb36, label %bb37
bb34:
%172 = i64 Lshr i64 %158, 56
%173 = Extract i8 of i64 %172 <7, 0>
%175 = load i64, i64 tmp_dword1
%176 = Zext i8 %173 to i64
%177 = i64 And i64 %175, -256
%178 = i64 Shl i64 %176, 0
%174 = i64 Or i64 %177, %178
store i64 %174, i64 tmp_dword1
%179 = i64 Lshr i64 %158, 0
%180 = Extract i56 of i64 %179 <55, 0>
%182 = load i64, i64 tmp_dword2
%183 = Zext i56 %180 to i64
%184 = i64 And i64 %182, 255
%185 = i64 Shl i64 %183, 8
%181 = i64 Or i64 %184, %185
store i64 %181, i64 tmp_dword2
br label %bb38
bb35:
%186 = Extract i3 of i64 %156 <2, 0>
%187 = i1 Eq i3 %186, 2
br i1 %187, label %bb39, label %bb40
bb36:
%153 = load i64, i64 PC
%154 = i64 Add i64 %153, 4
store i64 %154, i64 PC
br label %bb41
bb37:
br label %bb41
bb38:
%280 = load i64, i64 tmp_dword1
%281 = load i53, i53 mem_index
%282 = i53 Add i53 %281, 1
store i64 %280, [9007199254740992, i64] MEM[%282]
%283 = load i64, i64 tmp_dword2
%284 = load i53, i53 mem_index
store i64 %283, [9007199254740992, i64] MEM[%284]
br label %bb33
bb39:
%188 = i64 Lshr i64 %158, 48
%189 = Extract i16 of i64 %188 <15, 0>
%191 = load i64, i64 tmp_dword1
%192 = Zext i16 %189 to i64
%193 = i64 And i64 %191, -65536
%194 = i64 Shl i64 %192, 0
%190 = i64 Or i64 %193, %194
store i64 %190, i64 tmp_dword1
%195 = i64 Lshr i64 %158, 0
%196 = Extract i48 of i64 %195 <47, 0>
%198 = load i64, i64 tmp_dword2
%199 = Zext i48 %196 to i64
%200 = i64 And i64 %198, 65535
%201 = i64 Shl i64 %199, 16
%197 = i64 Or i64 %200, %201
store i64 %197, i64 tmp_dword2
br label %bb38
bb40:
%202 = Extract i3 of i64 %156 <2, 0>
%203 = i1 Eq i3 %202, 3
br i1 %203, label %bb42, label %bb43
bb41:
%148 = load i64, i64 PC
store i64 %148, i64 PC
br label %bb44
bb42:
%204 = i64 Lshr i64 %158, 40
%205 = Extract i24 of i64 %204 <23, 0>
%207 = load i64, i64 tmp_dword1
%208 = Zext i24 %205 to i64
%209 = i64 And i64 %207, -16777216
%210 = i64 Shl i64 %208, 0
%206 = i64 Or i64 %209, %210
store i64 %206, i64 tmp_dword1
%211 = i64 Lshr i64 %158, 0
%212 = Extract i40 of i64 %211 <39, 0>
%214 = load i64, i64 tmp_dword2
%215 = Zext i40 %212 to i64
%216 = i64 And i64 %214, 16777215
%217 = i64 Shl i64 %215, 24
%213 = i64 Or i64 %216, %217
store i64 %213, i64 tmp_dword2
br label %bb38
bb43:
%218 = Extract i3 of i64 %156 <2, 0>
%219 = i1 Eq i3 %218, -4
br i1 %219, label %bb45, label %bb46
bb44:
br label %bb47
bb45:
%220 = i64 Lshr i64 %158, 32
%221 = Extract i32 of i64 %220 <31, 0>
%223 = load i64, i64 tmp_dword1
%224 = Zext i32 %221 to i64
%225 = i64 And i64 %223, -4294967296
%226 = i64 Shl i64 %224, 0
%222 = i64 Or i64 %225, %226
store i64 %222, i64 tmp_dword1
%227 = i64 Lshr i64 %158, 0
%228 = Extract i32 of i64 %227 <31, 0>
%230 = load i64, i64 tmp_dword2
%231 = Zext i32 %228 to i64
%232 = i64 And i64 %230, 4294967295
%233 = i64 Shl i64 %231, 32
%229 = i64 Or i64 %232, %233
store i64 %229, i64 tmp_dword2
br label %bb38
bb46:
%234 = Extract i3 of i64 %156 <2, 0>
%235 = i1 Eq i3 %234, -3
br i1 %235, label %bb48, label %bb49
bb47:
br label %bb50
bb48:
%236 = i64 Lshr i64 %158, 24
%237 = Extract i40 of i64 %236 <39, 0>
%239 = load i64, i64 tmp_dword1
%240 = Zext i40 %237 to i64
%241 = i64 And i64 %239, -1099511627776
%242 = i64 Shl i64 %240, 0
%238 = i64 Or i64 %241, %242
store i64 %238, i64 tmp_dword1
%243 = i64 Lshr i64 %158, 0
%244 = Extract i24 of i64 %243 <23, 0>
%246 = load i64, i64 tmp_dword2
%247 = Zext i24 %244 to i64
%248 = i64 And i64 %246, 1099511627775
%249 = i64 Shl i64 %247, 40
%245 = i64 Or i64 %248, %249
store i64 %245, i64 tmp_dword2
br label %bb38
bb49:
%250 = Extract i3 of i64 %156 <2, 0>
%251 = i1 Eq i3 %250, -2
br i1 %251, label %bb51, label %bb52
bb50:
store i64 0, [32, i64] XREG[0]
%286 = load i64, i64 PC
store i64 %286, i64 prev_pc
%293 = load i64, [32, i64] XREG[0]
%292 = i64 Add i64 %293, 2
store i64 %292, [32, i64] XREG[15]
%287 = load i64, i64 PC
%289 = load i64, i64 prev_pc
%288 = i1 Eq i64 %287, %289
br i1 %288, label %bb53, label %bb54
bb51:
%252 = i64 Lshr i64 %158, 16
%253 = Extract i48 of i64 %252 <47, 0>
%255 = load i64, i64 tmp_dword1
%256 = Zext i48 %253 to i64
%257 = i64 And i64 %255, -281474976710656
%258 = i64 Shl i64 %256, 0
%254 = i64 Or i64 %257, %258
store i64 %254, i64 tmp_dword1
%259 = i64 Lshr i64 %158, 0
%260 = Extract i16 of i64 %259 <15, 0>
%262 = load i64, i64 tmp_dword2
%263 = Zext i16 %260 to i64
%264 = i64 And i64 %262, 281474976710655
%265 = i64 Shl i64 %263, 48
%261 = i64 Or i64 %264, %265
store i64 %261, i64 tmp_dword2
br label %bb38
bb52:
%266 = i64 Lshr i64 %158, 8
%267 = Extract i56 of i64 %266 <55, 0>
%269 = load i64, i64 tmp_dword1
%270 = Zext i56 %267 to i64
%271 = i64 And i64 %269, -72057594037927936
%272 = i64 Shl i64 %270, 0
%268 = i64 Or i64 %271, %272
store i64 %268, i64 tmp_dword1
%273 = i64 Lshr i64 %158, 0
%274 = Extract i8 of i64 %273 <7, 0>
%276 = load i64, i64 tmp_dword2
%277 = Zext i8 %274 to i64
%278 = i64 And i64 %276, 72057594037927935
%279 = i64 Shl i64 %277, 56
%275 = i64 Or i64 %278, %279
store i64 %275, i64 tmp_dword2
br label %bb38
bb53:
%290 = load i64, i64 PC
%291 = i64 Add i64 %290, 4
store i64 %291, i64 PC
br label %bb55
bb54:
br label %bb55
bb55:
%285 = load i64, i64 PC
store i64 %285, i64 PC
br label %bb56
bb56:
br label %bb57
bb57:
br label %bb58
bb58:
store i64 0, [32, i64] XREG[0]
%295 = load i64, i64 PC
store i64 %295, i64 prev_pc
%304 = load i64, [32, i64] XREG[15]
%305 = load i64, [32, i64] XREG[11]
%301 = i1 Uge i64 %304, %305
br i1 %301, label %bb59, label %bb60
bb59:
%302 = load i64, i64 PC
%303 = i64 Add i64 %302, 104
store i64 %303, i64 PC
br label %bb61
bb60:
br label %bb61
bb61:
%296 = load i64, i64 PC
%298 = load i64, i64 prev_pc
%297 = i1 Eq i64 %296, %298
br i1 %297, label %bb62, label %bb63
bb62:
%299 = load i64, i64 PC
%300 = i64 Add i64 %299, 4
store i64 %300, i64 PC
br label %bb64
bb63:
br label %bb64
bb64:
%294 = load i64, i64 PC
store i64 %294, i64 PC
br label %bb65
bb65:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_0 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, 1
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%20 = load i64, [32, i64] XREG[10]
%18 = i64 Add i64 %20, 0
store i64 %18, i64 tmp_address
%19 = load i64, i64 tmp_address
%22 = load i64, [32, i64] XREG[15]
store i64 %22, i64 rs2_var
%21 = load i64, i64 rs2_var
%23 = i64 Lshr i64 %19, 3
%24 = Extract i53 of i64 %23 <52, 0>
store i53 %24, i53 mem_index
%25 = Extract i3 of i64 %19 <2, 0>
%26 = i1 Eq i3 %25, 0
br i1 %26, label %bb4, label %bb5
bb4:
%27 = load i53, i53 mem_index
store i64 %21, [9007199254740992, i64] MEM[%27]
br label %bb6
bb5:
%28 = load i53, i53 mem_index
%29 = i53 Add i53 %28, 1
%30 = load i64, [9007199254740992, i64] MEM[%29]
store i64 %30, i64 tmp_dword1
%31 = load i53, i53 mem_index
%32 = load i64, [9007199254740992, i64] MEM[%31]
store i64 %32, i64 tmp_dword2
%33 = Extract i3 of i64 %19 <2, 0>
%34 = i1 Eq i3 %33, 1
br i1 %34, label %bb7, label %bb8
bb6:
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb7:
%35 = i64 Lshr i64 %21, 56
%36 = Extract i8 of i64 %35 <7, 0>
%38 = load i64, i64 tmp_dword1
%39 = Zext i8 %36 to i64
%40 = i64 And i64 %38, -256
%41 = i64 Shl i64 %39, 0
%37 = i64 Or i64 %40, %41
store i64 %37, i64 tmp_dword1
%42 = i64 Lshr i64 %21, 0
%43 = Extract i56 of i64 %42 <55, 0>
%45 = load i64, i64 tmp_dword2
%46 = Zext i56 %43 to i64
%47 = i64 And i64 %45, 255
%48 = i64 Shl i64 %46, 8
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword2
br label %bb11
bb8:
%49 = Extract i3 of i64 %19 <2, 0>
%50 = i1 Eq i3 %49, 2
br i1 %50, label %bb12, label %bb13
bb9:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb14
bb10:
br label %bb14
bb11:
%143 = load i64, i64 tmp_dword1
%144 = load i53, i53 mem_index
%145 = i53 Add i53 %144, 1
store i64 %143, [9007199254740992, i64] MEM[%145]
%146 = load i64, i64 tmp_dword2
%147 = load i53, i53 mem_index
store i64 %146, [9007199254740992, i64] MEM[%147]
br label %bb6
bb12:
%51 = i64 Lshr i64 %21, 48
%52 = Extract i16 of i64 %51 <15, 0>
%54 = load i64, i64 tmp_dword1
%55 = Zext i16 %52 to i64
%56 = i64 And i64 %54, -65536
%57 = i64 Shl i64 %55, 0
%53 = i64 Or i64 %56, %57
store i64 %53, i64 tmp_dword1
%58 = i64 Lshr i64 %21, 0
%59 = Extract i48 of i64 %58 <47, 0>
%61 = load i64, i64 tmp_dword2
%62 = Zext i48 %59 to i64
%63 = i64 And i64 %61, 65535
%64 = i64 Shl i64 %62, 16
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword2
br label %bb11
bb13:
%65 = Extract i3 of i64 %19 <2, 0>
%66 = i1 Eq i3 %65, 3
br i1 %66, label %bb15, label %bb16
bb14:
%11 = load i64, i64 PC
store i64 %11, i64 PC
store i64 0, [32, i64] XREG[0]
%149 = load i64, i64 PC
store i64 %149, i64 prev_pc
%157 = load i64, [32, i64] XREG[10]
%155 = i64 Add i64 %157, 8
store i64 %155, i64 tmp_address
%156 = load i64, i64 tmp_address
%159 = load i64, [32, i64] XREG[15]
store i64 %159, i64 rs2_var
%158 = load i64, i64 rs2_var
%160 = i64 Lshr i64 %156, 3
%161 = Extract i53 of i64 %160 <52, 0>
store i53 %161, i53 mem_index
%162 = Extract i3 of i64 %156 <2, 0>
%163 = i1 Eq i3 %162, 0
br i1 %163, label %bb23, label %bb24
bb15:
%67 = i64 Lshr i64 %21, 40
%68 = Extract i24 of i64 %67 <23, 0>
%70 = load i64, i64 tmp_dword1
%71 = Zext i24 %68 to i64
%72 = i64 And i64 %70, -16777216
%73 = i64 Shl i64 %71, 0
%69 = i64 Or i64 %72, %73
store i64 %69, i64 tmp_dword1
%74 = i64 Lshr i64 %21, 0
%75 = Extract i40 of i64 %74 <39, 0>
%77 = load i64, i64 tmp_dword2
%78 = Zext i40 %75 to i64
%79 = i64 And i64 %77, 16777215
%80 = i64 Shl i64 %78, 24
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword2
br label %bb11
bb16:
%81 = Extract i3 of i64 %19 <2, 0>
%82 = i1 Eq i3 %81, -4
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %21, 32
%84 = Extract i32 of i64 %83 <31, 0>
%86 = load i64, i64 tmp_dword1
%87 = Zext i32 %84 to i64
%88 = i64 And i64 %86, -4294967296
%89 = i64 Shl i64 %87, 0
%85 = i64 Or i64 %88, %89
store i64 %85, i64 tmp_dword1
%90 = i64 Lshr i64 %21, 0
%91 = Extract i32 of i64 %90 <31, 0>
%93 = load i64, i64 tmp_dword2
%94 = Zext i32 %91 to i64
%95 = i64 And i64 %93, 4294967295
%96 = i64 Shl i64 %94, 32
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword2
br label %bb11
bb18:
%97 = Extract i3 of i64 %19 <2, 0>
%98 = i1 Eq i3 %97, -3
br i1 %98, label %bb19, label %bb20
bb19:
%99 = i64 Lshr i64 %21, 24
%100 = Extract i40 of i64 %99 <39, 0>
%102 = load i64, i64 tmp_dword1
%103 = Zext i40 %100 to i64
%104 = i64 And i64 %102, -1099511627776
%105 = i64 Shl i64 %103, 0
%101 = i64 Or i64 %104, %105
store i64 %101, i64 tmp_dword1
%106 = i64 Lshr i64 %21, 0
%107 = Extract i24 of i64 %106 <23, 0>
%109 = load i64, i64 tmp_dword2
%110 = Zext i24 %107 to i64
%111 = i64 And i64 %109, 1099511627775
%112 = i64 Shl i64 %110, 40
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword2
br label %bb11
bb20:
%113 = Extract i3 of i64 %19 <2, 0>
%114 = i1 Eq i3 %113, -2
br i1 %114, label %bb21, label %bb22
bb21:
%115 = i64 Lshr i64 %21, 16
%116 = Extract i48 of i64 %115 <47, 0>
%118 = load i64, i64 tmp_dword1
%119 = Zext i48 %116 to i64
%120 = i64 And i64 %118, -281474976710656
%121 = i64 Shl i64 %119, 0
%117 = i64 Or i64 %120, %121
store i64 %117, i64 tmp_dword1
%122 = i64 Lshr i64 %21, 0
%123 = Extract i16 of i64 %122 <15, 0>
%125 = load i64, i64 tmp_dword2
%126 = Zext i16 %123 to i64
%127 = i64 And i64 %125, 281474976710655
%128 = i64 Shl i64 %126, 48
%124 = i64 Or i64 %127, %128
store i64 %124, i64 tmp_dword2
br label %bb11
bb22:
%129 = i64 Lshr i64 %21, 8
%130 = Extract i56 of i64 %129 <55, 0>
%132 = load i64, i64 tmp_dword1
%133 = Zext i56 %130 to i64
%134 = i64 And i64 %132, -72057594037927936
%135 = i64 Shl i64 %133, 0
%131 = i64 Or i64 %134, %135
store i64 %131, i64 tmp_dword1
%136 = i64 Lshr i64 %21, 0
%137 = Extract i8 of i64 %136 <7, 0>
%139 = load i64, i64 tmp_dword2
%140 = Zext i8 %137 to i64
%141 = i64 And i64 %139, 72057594037927935
%142 = i64 Shl i64 %140, 56
%138 = i64 Or i64 %141, %142
store i64 %138, i64 tmp_dword2
br label %bb11
bb23:
%164 = load i53, i53 mem_index
store i64 %158, [9007199254740992, i64] MEM[%164]
br label %bb25
bb24:
%165 = load i53, i53 mem_index
%166 = i53 Add i53 %165, 1
%167 = load i64, [9007199254740992, i64] MEM[%166]
store i64 %167, i64 tmp_dword1
%168 = load i53, i53 mem_index
%169 = load i64, [9007199254740992, i64] MEM[%168]
store i64 %169, i64 tmp_dword2
%170 = Extract i3 of i64 %156 <2, 0>
%171 = i1 Eq i3 %170, 1
br i1 %171, label %bb26, label %bb27
bb25:
%150 = load i64, i64 PC
%152 = load i64, i64 prev_pc
%151 = i1 Eq i64 %150, %152
br i1 %151, label %bb28, label %bb29
bb26:
%172 = i64 Lshr i64 %158, 56
%173 = Extract i8 of i64 %172 <7, 0>
%175 = load i64, i64 tmp_dword1
%176 = Zext i8 %173 to i64
%177 = i64 And i64 %175, -256
%178 = i64 Shl i64 %176, 0
%174 = i64 Or i64 %177, %178
store i64 %174, i64 tmp_dword1
%179 = i64 Lshr i64 %158, 0
%180 = Extract i56 of i64 %179 <55, 0>
%182 = load i64, i64 tmp_dword2
%183 = Zext i56 %180 to i64
%184 = i64 And i64 %182, 255
%185 = i64 Shl i64 %183, 8
%181 = i64 Or i64 %184, %185
store i64 %181, i64 tmp_dword2
br label %bb30
bb27:
%186 = Extract i3 of i64 %156 <2, 0>
%187 = i1 Eq i3 %186, 2
br i1 %187, label %bb31, label %bb32
bb28:
%153 = load i64, i64 PC
%154 = i64 Add i64 %153, 4
store i64 %154, i64 PC
br label %bb33
bb29:
br label %bb33
bb30:
%280 = load i64, i64 tmp_dword1
%281 = load i53, i53 mem_index
%282 = i53 Add i53 %281, 1
store i64 %280, [9007199254740992, i64] MEM[%282]
%283 = load i64, i64 tmp_dword2
%284 = load i53, i53 mem_index
store i64 %283, [9007199254740992, i64] MEM[%284]
br label %bb25
bb31:
%188 = i64 Lshr i64 %158, 48
%189 = Extract i16 of i64 %188 <15, 0>
%191 = load i64, i64 tmp_dword1
%192 = Zext i16 %189 to i64
%193 = i64 And i64 %191, -65536
%194 = i64 Shl i64 %192, 0
%190 = i64 Or i64 %193, %194
store i64 %190, i64 tmp_dword1
%195 = i64 Lshr i64 %158, 0
%196 = Extract i48 of i64 %195 <47, 0>
%198 = load i64, i64 tmp_dword2
%199 = Zext i48 %196 to i64
%200 = i64 And i64 %198, 65535
%201 = i64 Shl i64 %199, 16
%197 = i64 Or i64 %200, %201
store i64 %197, i64 tmp_dword2
br label %bb30
bb32:
%202 = Extract i3 of i64 %156 <2, 0>
%203 = i1 Eq i3 %202, 3
br i1 %203, label %bb34, label %bb35
bb33:
%148 = load i64, i64 PC
store i64 %148, i64 PC
store i64 0, [32, i64] XREG[0]
%286 = load i64, i64 PC
store i64 %286, i64 prev_pc
%293 = load i64, [32, i64] XREG[0]
%292 = i64 Add i64 %293, 2
store i64 %292, [32, i64] XREG[15]
%287 = load i64, i64 PC
%289 = load i64, i64 prev_pc
%288 = i1 Eq i64 %287, %289
br i1 %288, label %bb42, label %bb43
bb34:
%204 = i64 Lshr i64 %158, 40
%205 = Extract i24 of i64 %204 <23, 0>
%207 = load i64, i64 tmp_dword1
%208 = Zext i24 %205 to i64
%209 = i64 And i64 %207, -16777216
%210 = i64 Shl i64 %208, 0
%206 = i64 Or i64 %209, %210
store i64 %206, i64 tmp_dword1
%211 = i64 Lshr i64 %158, 0
%212 = Extract i40 of i64 %211 <39, 0>
%214 = load i64, i64 tmp_dword2
%215 = Zext i40 %212 to i64
%216 = i64 And i64 %214, 16777215
%217 = i64 Shl i64 %215, 24
%213 = i64 Or i64 %216, %217
store i64 %213, i64 tmp_dword2
br label %bb30
bb35:
%218 = Extract i3 of i64 %156 <2, 0>
%219 = i1 Eq i3 %218, -4
br i1 %219, label %bb36, label %bb37
bb36:
%220 = i64 Lshr i64 %158, 32
%221 = Extract i32 of i64 %220 <31, 0>
%223 = load i64, i64 tmp_dword1
%224 = Zext i32 %221 to i64
%225 = i64 And i64 %223, -4294967296
%226 = i64 Shl i64 %224, 0
%222 = i64 Or i64 %225, %226
store i64 %222, i64 tmp_dword1
%227 = i64 Lshr i64 %158, 0
%228 = Extract i32 of i64 %227 <31, 0>
%230 = load i64, i64 tmp_dword2
%231 = Zext i32 %228 to i64
%232 = i64 And i64 %230, 4294967295
%233 = i64 Shl i64 %231, 32
%229 = i64 Or i64 %232, %233
store i64 %229, i64 tmp_dword2
br label %bb30
bb37:
%234 = Extract i3 of i64 %156 <2, 0>
%235 = i1 Eq i3 %234, -3
br i1 %235, label %bb38, label %bb39
bb38:
%236 = i64 Lshr i64 %158, 24
%237 = Extract i40 of i64 %236 <39, 0>
%239 = load i64, i64 tmp_dword1
%240 = Zext i40 %237 to i64
%241 = i64 And i64 %239, -1099511627776
%242 = i64 Shl i64 %240, 0
%238 = i64 Or i64 %241, %242
store i64 %238, i64 tmp_dword1
%243 = i64 Lshr i64 %158, 0
%244 = Extract i24 of i64 %243 <23, 0>
%246 = load i64, i64 tmp_dword2
%247 = Zext i24 %244 to i64
%248 = i64 And i64 %246, 1099511627775
%249 = i64 Shl i64 %247, 40
%245 = i64 Or i64 %248, %249
store i64 %245, i64 tmp_dword2
br label %bb30
bb39:
%250 = Extract i3 of i64 %156 <2, 0>
%251 = i1 Eq i3 %250, -2
br i1 %251, label %bb40, label %bb41
bb40:
%252 = i64 Lshr i64 %158, 16
%253 = Extract i48 of i64 %252 <47, 0>
%255 = load i64, i64 tmp_dword1
%256 = Zext i48 %253 to i64
%257 = i64 And i64 %255, -281474976710656
%258 = i64 Shl i64 %256, 0
%254 = i64 Or i64 %257, %258
store i64 %254, i64 tmp_dword1
%259 = i64 Lshr i64 %158, 0
%260 = Extract i16 of i64 %259 <15, 0>
%262 = load i64, i64 tmp_dword2
%263 = Zext i16 %260 to i64
%264 = i64 And i64 %262, 281474976710655
%265 = i64 Shl i64 %263, 48
%261 = i64 Or i64 %264, %265
store i64 %261, i64 tmp_dword2
br label %bb30
bb41:
%266 = i64 Lshr i64 %158, 8
%267 = Extract i56 of i64 %266 <55, 0>
%269 = load i64, i64 tmp_dword1
%270 = Zext i56 %267 to i64
%271 = i64 And i64 %269, -72057594037927936
%272 = i64 Shl i64 %270, 0
%268 = i64 Or i64 %271, %272
store i64 %268, i64 tmp_dword1
%273 = i64 Lshr i64 %158, 0
%274 = Extract i8 of i64 %273 <7, 0>
%276 = load i64, i64 tmp_dword2
%277 = Zext i8 %274 to i64
%278 = i64 And i64 %276, 72057594037927935
%279 = i64 Shl i64 %277, 56
%275 = i64 Or i64 %278, %279
store i64 %275, i64 tmp_dword2
br label %bb30
bb42:
%290 = load i64, i64 PC
%291 = i64 Add i64 %290, 4
store i64 %291, i64 PC
br label %bb44
bb43:
br label %bb44
bb44:
%285 = load i64, i64 PC
store i64 %285, i64 PC
store i64 0, [32, i64] XREG[0]
%295 = load i64, i64 PC
store i64 %295, i64 prev_pc
%304 = load i64, [32, i64] XREG[15]
%305 = load i64, [32, i64] XREG[11]
%301 = i1 Uge i64 %304, %305
br i1 %301, label %bb45, label %bb46
bb45:
%302 = load i64, i64 PC
%303 = i64 Add i64 %302, 104
store i64 %303, i64 PC
br label %bb47
bb46:
br label %bb47
bb47:
%296 = load i64, i64 PC
%298 = load i64, i64 prev_pc
%297 = i1 Eq i64 %296, %298
br i1 %297, label %bb48, label %bb49
bb48:
%299 = load i64, i64 PC
%300 = i64 Add i64 %299, 4
store i64 %300, i64 PC
br label %bb50
bb49:
br label %bb50
bb50:
%294 = load i64, i64 PC
store i64 %294, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, 1
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!2 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %5 PC!2 PC!1
%2 = load i64, i64 PC!3
PC!4 = store i64 %2, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%12 = load i64, i64 PC!4
prev_pc!3 = store i64 %12, i64 prev_pc!2
%20 = load i64, [32, i64] XREG!4[10]
%18 = i64 Add i64 %20, 0
tmp_address!2 = store i64 %18, i64 tmp_address!1
%19 = load i64, i64 tmp_address!2
%22 = load i64, [32, i64] XREG!4[15]
rs2_var!2 = store i64 %22, i64 rs2_var!1
%21 = load i64, i64 rs2_var!2
%23 = i64 Lshr i64 %19, 3
%24 = Extract i53 of i64 %23 <52, 0>
mem_index!2 = store i53 %24, i53 mem_index!1
%25 = Extract i3 of i64 %19 <2, 0>
%26 = i1 Eq i3 %25, 0
br i1 %26, label %bb4, label %bb5
bb4:
%27 = load i53, i53 mem_index!2
MEM!2 = store i64 %21, [9007199254740992, i64] MEM!1[%27]
br label %bb6
bb5:
%28 = load i53, i53 mem_index!2
%29 = i53 Add i53 %28, 1
%30 = load i64, [9007199254740992, i64] MEM!1[%29]
tmp_dword1!13 = store i64 %30, i64 tmp_dword1!1
%31 = load i53, i53 mem_index!2
%32 = load i64, [9007199254740992, i64] MEM!1[%31]
tmp_dword2!13 = store i64 %32, i64 tmp_dword2!1
%33 = Extract i3 of i64 %19 <2, 0>
%34 = i1 Eq i3 %33, 1
br i1 %34, label %bb7, label %bb8
bb6:
MEM!3 = phi ite %26 MEM!2 MEM!9
tmp_dword2!2 = phi ite %26 tmp_dword2!1 tmp_dword2!14
tmp_dword1!2 = phi ite %26 tmp_dword1!1 tmp_dword1!14
%13 = load i64, i64 PC!4
%15 = load i64, i64 prev_pc!3
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb7:
%35 = i64 Lshr i64 %21, 56
%36 = Extract i8 of i64 %35 <7, 0>
%38 = load i64, i64 tmp_dword1!13
%39 = Zext i8 %36 to i64
%40 = i64 And i64 %38, -256
%41 = i64 Shl i64 %39, 0
%37 = i64 Or i64 %40, %41
tmp_dword1!15 = store i64 %37, i64 tmp_dword1!13
%42 = i64 Lshr i64 %21, 0
%43 = Extract i56 of i64 %42 <55, 0>
%45 = load i64, i64 tmp_dword2!13
%46 = Zext i56 %43 to i64
%47 = i64 And i64 %45, 255
%48 = i64 Shl i64 %46, 8
%44 = i64 Or i64 %47, %48
tmp_dword2!15 = store i64 %44, i64 tmp_dword2!13
br label %bb11
bb8:
%49 = Extract i3 of i64 %19 <2, 0>
%50 = i1 Eq i3 %49, 2
br i1 %50, label %bb12, label %bb13
bb9:
%16 = load i64, i64 PC!4
%17 = i64 Add i64 %16, 4
PC!19 = store i64 %17, i64 PC!4
br label %bb14
bb10:
br label %bb14
bb11:
tmp_dword2!14 = phi ite %34 tmp_dword2!15 ite %50 tmp_dword2!21 ite %66 tmp_dword2!20 ite %82 tmp_dword2!19 ite %98 tmp_dword2!16 ite %114 tmp_dword2!17 tmp_dword2!18
tmp_dword1!14 = phi ite %34 tmp_dword1!15 ite %50 tmp_dword1!21 ite %66 tmp_dword1!20 ite %82 tmp_dword1!19 ite %98 tmp_dword1!16 ite %114 tmp_dword1!17 tmp_dword1!18
%143 = load i64, i64 tmp_dword1!14
%144 = load i53, i53 mem_index!2
%145 = i53 Add i53 %144, 1
MEM!8 = store i64 %143, [9007199254740992, i64] MEM!1[%145]
%146 = load i64, i64 tmp_dword2!14
%147 = load i53, i53 mem_index!2
MEM!9 = store i64 %146, [9007199254740992, i64] MEM!8[%147]
br label %bb6
bb12:
%51 = i64 Lshr i64 %21, 48
%52 = Extract i16 of i64 %51 <15, 0>
%54 = load i64, i64 tmp_dword1!13
%55 = Zext i16 %52 to i64
%56 = i64 And i64 %54, -65536
%57 = i64 Shl i64 %55, 0
%53 = i64 Or i64 %56, %57
tmp_dword1!21 = store i64 %53, i64 tmp_dword1!13
%58 = i64 Lshr i64 %21, 0
%59 = Extract i48 of i64 %58 <47, 0>
%61 = load i64, i64 tmp_dword2!13
%62 = Zext i48 %59 to i64
%63 = i64 And i64 %61, 65535
%64 = i64 Shl i64 %62, 16
%60 = i64 Or i64 %63, %64
tmp_dword2!21 = store i64 %60, i64 tmp_dword2!13
br label %bb11
bb13:
%65 = Extract i3 of i64 %19 <2, 0>
%66 = i1 Eq i3 %65, 3
br i1 %66, label %bb15, label %bb16
bb14:
PC!5 = phi ite %14 PC!19 PC!4
%11 = load i64, i64 PC!5
PC!6 = store i64 %11, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
%149 = load i64, i64 PC!6
prev_pc!4 = store i64 %149, i64 prev_pc!3
%157 = load i64, [32, i64] XREG!5[10]
%155 = i64 Add i64 %157, 8
tmp_address!3 = store i64 %155, i64 tmp_address!2
%156 = load i64, i64 tmp_address!3
%159 = load i64, [32, i64] XREG!5[15]
rs2_var!3 = store i64 %159, i64 rs2_var!2
%158 = load i64, i64 rs2_var!3
%160 = i64 Lshr i64 %156, 3
%161 = Extract i53 of i64 %160 <52, 0>
mem_index!3 = store i53 %161, i53 mem_index!2
%162 = Extract i3 of i64 %156 <2, 0>
%163 = i1 Eq i3 %162, 0
br i1 %163, label %bb23, label %bb24
bb15:
%67 = i64 Lshr i64 %21, 40
%68 = Extract i24 of i64 %67 <23, 0>
%70 = load i64, i64 tmp_dword1!13
%71 = Zext i24 %68 to i64
%72 = i64 And i64 %70, -16777216
%73 = i64 Shl i64 %71, 0
%69 = i64 Or i64 %72, %73
tmp_dword1!20 = store i64 %69, i64 tmp_dword1!13
%74 = i64 Lshr i64 %21, 0
%75 = Extract i40 of i64 %74 <39, 0>
%77 = load i64, i64 tmp_dword2!13
%78 = Zext i40 %75 to i64
%79 = i64 And i64 %77, 16777215
%80 = i64 Shl i64 %78, 24
%76 = i64 Or i64 %79, %80
tmp_dword2!20 = store i64 %76, i64 tmp_dword2!13
br label %bb11
bb16:
%81 = Extract i3 of i64 %19 <2, 0>
%82 = i1 Eq i3 %81, -4
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %21, 32
%84 = Extract i32 of i64 %83 <31, 0>
%86 = load i64, i64 tmp_dword1!13
%87 = Zext i32 %84 to i64
%88 = i64 And i64 %86, -4294967296
%89 = i64 Shl i64 %87, 0
%85 = i64 Or i64 %88, %89
tmp_dword1!19 = store i64 %85, i64 tmp_dword1!13
%90 = i64 Lshr i64 %21, 0
%91 = Extract i32 of i64 %90 <31, 0>
%93 = load i64, i64 tmp_dword2!13
%94 = Zext i32 %91 to i64
%95 = i64 And i64 %93, 4294967295
%96 = i64 Shl i64 %94, 32
%92 = i64 Or i64 %95, %96
tmp_dword2!19 = store i64 %92, i64 tmp_dword2!13
br label %bb11
bb18:
%97 = Extract i3 of i64 %19 <2, 0>
%98 = i1 Eq i3 %97, -3
br i1 %98, label %bb19, label %bb20
bb19:
%99 = i64 Lshr i64 %21, 24
%100 = Extract i40 of i64 %99 <39, 0>
%102 = load i64, i64 tmp_dword1!13
%103 = Zext i40 %100 to i64
%104 = i64 And i64 %102, -1099511627776
%105 = i64 Shl i64 %103, 0
%101 = i64 Or i64 %104, %105
tmp_dword1!16 = store i64 %101, i64 tmp_dword1!13
%106 = i64 Lshr i64 %21, 0
%107 = Extract i24 of i64 %106 <23, 0>
%109 = load i64, i64 tmp_dword2!13
%110 = Zext i24 %107 to i64
%111 = i64 And i64 %109, 1099511627775
%112 = i64 Shl i64 %110, 40
%108 = i64 Or i64 %111, %112
tmp_dword2!16 = store i64 %108, i64 tmp_dword2!13
br label %bb11
bb20:
%113 = Extract i3 of i64 %19 <2, 0>
%114 = i1 Eq i3 %113, -2
br i1 %114, label %bb21, label %bb22
bb21:
%115 = i64 Lshr i64 %21, 16
%116 = Extract i48 of i64 %115 <47, 0>
%118 = load i64, i64 tmp_dword1!13
%119 = Zext i48 %116 to i64
%120 = i64 And i64 %118, -281474976710656
%121 = i64 Shl i64 %119, 0
%117 = i64 Or i64 %120, %121
tmp_dword1!17 = store i64 %117, i64 tmp_dword1!13
%122 = i64 Lshr i64 %21, 0
%123 = Extract i16 of i64 %122 <15, 0>
%125 = load i64, i64 tmp_dword2!13
%126 = Zext i16 %123 to i64
%127 = i64 And i64 %125, 281474976710655
%128 = i64 Shl i64 %126, 48
%124 = i64 Or i64 %127, %128
tmp_dword2!17 = store i64 %124, i64 tmp_dword2!13
br label %bb11
bb22:
%129 = i64 Lshr i64 %21, 8
%130 = Extract i56 of i64 %129 <55, 0>
%132 = load i64, i64 tmp_dword1!13
%133 = Zext i56 %130 to i64
%134 = i64 And i64 %132, -72057594037927936
%135 = i64 Shl i64 %133, 0
%131 = i64 Or i64 %134, %135
tmp_dword1!18 = store i64 %131, i64 tmp_dword1!13
%136 = i64 Lshr i64 %21, 0
%137 = Extract i8 of i64 %136 <7, 0>
%139 = load i64, i64 tmp_dword2!13
%140 = Zext i8 %137 to i64
%141 = i64 And i64 %139, 72057594037927935
%142 = i64 Shl i64 %140, 56
%138 = i64 Or i64 %141, %142
tmp_dword2!18 = store i64 %138, i64 tmp_dword2!13
br label %bb11
bb23:
%164 = load i53, i53 mem_index!3
MEM!7 = store i64 %158, [9007199254740992, i64] MEM!3[%164]
br label %bb25
bb24:
%165 = load i53, i53 mem_index!3
%166 = i53 Add i53 %165, 1
%167 = load i64, [9007199254740992, i64] MEM!3[%166]
tmp_dword1!3 = store i64 %167, i64 tmp_dword1!2
%168 = load i53, i53 mem_index!3
%169 = load i64, [9007199254740992, i64] MEM!3[%168]
tmp_dword2!3 = store i64 %169, i64 tmp_dword2!2
%170 = Extract i3 of i64 %156 <2, 0>
%171 = i1 Eq i3 %170, 1
br i1 %171, label %bb26, label %bb27
bb25:
MEM!6 = phi ite %163 MEM!7 MEM!5
tmp_dword2!12 = phi ite %163 tmp_dword2!2 tmp_dword2!5
tmp_dword1!12 = phi ite %163 tmp_dword1!2 tmp_dword1!5
%150 = load i64, i64 PC!6
%152 = load i64, i64 prev_pc!4
%151 = i1 Eq i64 %150, %152
br i1 %151, label %bb28, label %bb29
bb26:
%172 = i64 Lshr i64 %158, 56
%173 = Extract i8 of i64 %172 <7, 0>
%175 = load i64, i64 tmp_dword1!3
%176 = Zext i8 %173 to i64
%177 = i64 And i64 %175, -256
%178 = i64 Shl i64 %176, 0
%174 = i64 Or i64 %177, %178
tmp_dword1!4 = store i64 %174, i64 tmp_dword1!3
%179 = i64 Lshr i64 %158, 0
%180 = Extract i56 of i64 %179 <55, 0>
%182 = load i64, i64 tmp_dword2!3
%183 = Zext i56 %180 to i64
%184 = i64 And i64 %182, 255
%185 = i64 Shl i64 %183, 8
%181 = i64 Or i64 %184, %185
tmp_dword2!4 = store i64 %181, i64 tmp_dword2!3
br label %bb30
bb27:
%186 = Extract i3 of i64 %156 <2, 0>
%187 = i1 Eq i3 %186, 2
br i1 %187, label %bb31, label %bb32
bb28:
%153 = load i64, i64 PC!6
%154 = i64 Add i64 %153, 4
PC!18 = store i64 %154, i64 PC!6
br label %bb33
bb29:
br label %bb33
bb30:
tmp_dword2!5 = phi ite %171 tmp_dword2!4 ite %187 tmp_dword2!6 ite %203 tmp_dword2!7 ite %219 tmp_dword2!8 ite %235 tmp_dword2!9 ite %251 tmp_dword2!11 tmp_dword2!10
tmp_dword1!5 = phi ite %171 tmp_dword1!4 ite %187 tmp_dword1!6 ite %203 tmp_dword1!7 ite %219 tmp_dword1!8 ite %235 tmp_dword1!9 ite %251 tmp_dword1!11 tmp_dword1!10
%280 = load i64, i64 tmp_dword1!5
%281 = load i53, i53 mem_index!3
%282 = i53 Add i53 %281, 1
MEM!4 = store i64 %280, [9007199254740992, i64] MEM!3[%282]
%283 = load i64, i64 tmp_dword2!5
%284 = load i53, i53 mem_index!3
MEM!5 = store i64 %283, [9007199254740992, i64] MEM!4[%284]
br label %bb25
bb31:
%188 = i64 Lshr i64 %158, 48
%189 = Extract i16 of i64 %188 <15, 0>
%191 = load i64, i64 tmp_dword1!3
%192 = Zext i16 %189 to i64
%193 = i64 And i64 %191, -65536
%194 = i64 Shl i64 %192, 0
%190 = i64 Or i64 %193, %194
tmp_dword1!6 = store i64 %190, i64 tmp_dword1!3
%195 = i64 Lshr i64 %158, 0
%196 = Extract i48 of i64 %195 <47, 0>
%198 = load i64, i64 tmp_dword2!3
%199 = Zext i48 %196 to i64
%200 = i64 And i64 %198, 65535
%201 = i64 Shl i64 %199, 16
%197 = i64 Or i64 %200, %201
tmp_dword2!6 = store i64 %197, i64 tmp_dword2!3
br label %bb30
bb32:
%202 = Extract i3 of i64 %156 <2, 0>
%203 = i1 Eq i3 %202, 3
br i1 %203, label %bb34, label %bb35
bb33:
PC!7 = phi ite %151 PC!18 PC!6
%148 = load i64, i64 PC!7
PC!8 = store i64 %148, i64 PC!7
XREG!6 = store i64 0, [32, i64] XREG!5[0]
%286 = load i64, i64 PC!8
prev_pc!5 = store i64 %286, i64 prev_pc!4
%293 = load i64, [32, i64] XREG!6[0]
%292 = i64 Add i64 %293, 2
XREG!7 = store i64 %292, [32, i64] XREG!6[15]
%287 = load i64, i64 PC!8
%289 = load i64, i64 prev_pc!5
%288 = i1 Eq i64 %287, %289
br i1 %288, label %bb42, label %bb43
bb34:
%204 = i64 Lshr i64 %158, 40
%205 = Extract i24 of i64 %204 <23, 0>
%207 = load i64, i64 tmp_dword1!3
%208 = Zext i24 %205 to i64
%209 = i64 And i64 %207, -16777216
%210 = i64 Shl i64 %208, 0
%206 = i64 Or i64 %209, %210
tmp_dword1!7 = store i64 %206, i64 tmp_dword1!3
%211 = i64 Lshr i64 %158, 0
%212 = Extract i40 of i64 %211 <39, 0>
%214 = load i64, i64 tmp_dword2!3
%215 = Zext i40 %212 to i64
%216 = i64 And i64 %214, 16777215
%217 = i64 Shl i64 %215, 24
%213 = i64 Or i64 %216, %217
tmp_dword2!7 = store i64 %213, i64 tmp_dword2!3
br label %bb30
bb35:
%218 = Extract i3 of i64 %156 <2, 0>
%219 = i1 Eq i3 %218, -4
br i1 %219, label %bb36, label %bb37
bb36:
%220 = i64 Lshr i64 %158, 32
%221 = Extract i32 of i64 %220 <31, 0>
%223 = load i64, i64 tmp_dword1!3
%224 = Zext i32 %221 to i64
%225 = i64 And i64 %223, -4294967296
%226 = i64 Shl i64 %224, 0
%222 = i64 Or i64 %225, %226
tmp_dword1!8 = store i64 %222, i64 tmp_dword1!3
%227 = i64 Lshr i64 %158, 0
%228 = Extract i32 of i64 %227 <31, 0>
%230 = load i64, i64 tmp_dword2!3
%231 = Zext i32 %228 to i64
%232 = i64 And i64 %230, 4294967295
%233 = i64 Shl i64 %231, 32
%229 = i64 Or i64 %232, %233
tmp_dword2!8 = store i64 %229, i64 tmp_dword2!3
br label %bb30
bb37:
%234 = Extract i3 of i64 %156 <2, 0>
%235 = i1 Eq i3 %234, -3
br i1 %235, label %bb38, label %bb39
bb38:
%236 = i64 Lshr i64 %158, 24
%237 = Extract i40 of i64 %236 <39, 0>
%239 = load i64, i64 tmp_dword1!3
%240 = Zext i40 %237 to i64
%241 = i64 And i64 %239, -1099511627776
%242 = i64 Shl i64 %240, 0
%238 = i64 Or i64 %241, %242
tmp_dword1!9 = store i64 %238, i64 tmp_dword1!3
%243 = i64 Lshr i64 %158, 0
%244 = Extract i24 of i64 %243 <23, 0>
%246 = load i64, i64 tmp_dword2!3
%247 = Zext i24 %244 to i64
%248 = i64 And i64 %246, 1099511627775
%249 = i64 Shl i64 %247, 40
%245 = i64 Or i64 %248, %249
tmp_dword2!9 = store i64 %245, i64 tmp_dword2!3
br label %bb30
bb39:
%250 = Extract i3 of i64 %156 <2, 0>
%251 = i1 Eq i3 %250, -2
br i1 %251, label %bb40, label %bb41
bb40:
%252 = i64 Lshr i64 %158, 16
%253 = Extract i48 of i64 %252 <47, 0>
%255 = load i64, i64 tmp_dword1!3
%256 = Zext i48 %253 to i64
%257 = i64 And i64 %255, -281474976710656
%258 = i64 Shl i64 %256, 0
%254 = i64 Or i64 %257, %258
tmp_dword1!11 = store i64 %254, i64 tmp_dword1!3
%259 = i64 Lshr i64 %158, 0
%260 = Extract i16 of i64 %259 <15, 0>
%262 = load i64, i64 tmp_dword2!3
%263 = Zext i16 %260 to i64
%264 = i64 And i64 %262, 281474976710655
%265 = i64 Shl i64 %263, 48
%261 = i64 Or i64 %264, %265
tmp_dword2!11 = store i64 %261, i64 tmp_dword2!3
br label %bb30
bb41:
%266 = i64 Lshr i64 %158, 8
%267 = Extract i56 of i64 %266 <55, 0>
%269 = load i64, i64 tmp_dword1!3
%270 = Zext i56 %267 to i64
%271 = i64 And i64 %269, -72057594037927936
%272 = i64 Shl i64 %270, 0
%268 = i64 Or i64 %271, %272
tmp_dword1!10 = store i64 %268, i64 tmp_dword1!3
%273 = i64 Lshr i64 %158, 0
%274 = Extract i8 of i64 %273 <7, 0>
%276 = load i64, i64 tmp_dword2!3
%277 = Zext i8 %274 to i64
%278 = i64 And i64 %276, 72057594037927935
%279 = i64 Shl i64 %277, 56
%275 = i64 Or i64 %278, %279
tmp_dword2!10 = store i64 %275, i64 tmp_dword2!3
br label %bb30
bb42:
%290 = load i64, i64 PC!8
%291 = i64 Add i64 %290, 4
PC!17 = store i64 %291, i64 PC!8
br label %bb44
bb43:
br label %bb44
bb44:
PC!9 = phi ite %288 PC!17 PC!8
%285 = load i64, i64 PC!9
PC!10 = store i64 %285, i64 PC!9
XREG!8 = store i64 0, [32, i64] XREG!7[0]
%295 = load i64, i64 PC!10
prev_pc!6 = store i64 %295, i64 prev_pc!5
%304 = load i64, [32, i64] XREG!8[15]
%305 = load i64, [32, i64] XREG!8[11]
%301 = i1 Uge i64 %304, %305
br i1 %301, label %bb45, label %bb46
bb45:
%302 = load i64, i64 PC!10
%303 = i64 Add i64 %302, 104
PC!16 = store i64 %303, i64 PC!10
br label %bb47
bb46:
br label %bb47
bb47:
PC!11 = phi ite %301 PC!16 PC!10
%296 = load i64, i64 PC!11
%298 = load i64, i64 prev_pc!6
%297 = i1 Eq i64 %296, %298
br i1 %297, label %bb48, label %bb49
bb48:
%299 = load i64, i64 PC!11
%300 = i64 Add i64 %299, 4
PC!15 = store i64 %300, i64 PC!11
br label %bb50
bb49:
br label %bb50
bb50:
PC!12 = phi ite %297 PC!15 PC!11
%294 = load i64, i64 PC!12
PC!13 = store i64 %294, i64 PC!12
%1 = load i64, i64 PC!13
PC!14 = store i64 %1, i64 PC!13
ret void

SSA forward
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 1
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[10]
%5 = i64 Add i64 %6, 0
tmp_address!2 = store i64 %5, i64 tmp_address!1
%7 = load i64, [32, i64] XREG!4[15]
rs2_var!2 = store i64 %7, i64 rs2_var!1
%8 = i64 Lshr i64 %5, 3
%9 = Extract i53 of i64 %8 <52, 0>
mem_index!2 = store i53 %9, i53 mem_index!1
%10 = Extract i3 of i64 %5 <2, 0>
%11 = i1 Eq i3 %10, 0
br i1 %11, label %bb3, label %bb4
bb3:
MEM!2 = store i64 %7, [9007199254740992, i64] MEM!1[%9]
br label %bb5
bb4:
%12 = i53 Add i53 %9, 1
%13 = load i64, [9007199254740992, i64] MEM!1[%12]
tmp_dword1!13 = store i64 %13, i64 tmp_dword1!1
%14 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword2!13 = store i64 %14, i64 tmp_dword2!1
%15 = Extract i3 of i64 %5 <2, 0>
%16 = i1 Eq i3 %15, 1
br i1 %16, label %bb6, label %bb7
bb5:
MEM!3 = phi ite %11 MEM!2 MEM!9
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!14
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!14
br label %bb8
bb6:
%17 = i64 Lshr i64 %7, 56
%18 = Extract i8 of i64 %17 <7, 0>
%20 = Zext i8 %18 to i64
%21 = i64 And i64 %13, -256
%22 = i64 Shl i64 %20, 0
%19 = i64 Or i64 %21, %22
tmp_dword1!15 = store i64 %19, i64 tmp_dword1!13
%23 = i64 Lshr i64 %7, 0
%24 = Extract i56 of i64 %23 <55, 0>
%26 = Zext i56 %24 to i64
%27 = i64 And i64 %14, 255
%28 = i64 Shl i64 %26, 8
%25 = i64 Or i64 %27, %28
tmp_dword2!15 = store i64 %25, i64 tmp_dword2!13
br label %bb9
bb7:
%29 = Extract i3 of i64 %5 <2, 0>
%30 = i1 Eq i3 %29, 2
br i1 %30, label %bb10, label %bb11
bb8:
%4 = i64 Add i64 PC!3, 4
PC!19 = store i64 %4, i64 PC!4
br label %bb12
bb9:
tmp_dword2!14 = phi ite %16 %25 ite %30 %39 ite %44 %53 ite %58 %67 ite %72 %81 ite %86 %95 %107
tmp_dword1!14 = phi ite %16 %19 ite %30 %33 ite %44 %47 ite %58 %61 ite %72 %75 ite %86 %89 %101
%111 = i53 Add i53 %9, 1
MEM!8 = store i64 tmp_dword1!14, [9007199254740992, i64] MEM!1[%111]
MEM!9 = store i64 tmp_dword2!14, [9007199254740992, i64] MEM!8[%9]
br label %bb5
bb10:
%31 = i64 Lshr i64 %7, 48
%32 = Extract i16 of i64 %31 <15, 0>
%34 = Zext i16 %32 to i64
%35 = i64 And i64 %13, -65536
%36 = i64 Shl i64 %34, 0
%33 = i64 Or i64 %35, %36
tmp_dword1!21 = store i64 %33, i64 tmp_dword1!13
%37 = i64 Lshr i64 %7, 0
%38 = Extract i48 of i64 %37 <47, 0>
%40 = Zext i48 %38 to i64
%41 = i64 And i64 %14, 65535
%42 = i64 Shl i64 %40, 16
%39 = i64 Or i64 %41, %42
tmp_dword2!21 = store i64 %39, i64 tmp_dword2!13
br label %bb9
bb11:
%43 = Extract i3 of i64 %5 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb13, label %bb14
bb12:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%114 = load i64, [32, i64] XREG!5[10]
%113 = i64 Add i64 %114, 8
tmp_address!3 = store i64 %113, i64 tmp_address!2
%115 = load i64, [32, i64] XREG!5[15]
rs2_var!3 = store i64 %115, i64 rs2_var!2
%116 = i64 Lshr i64 %113, 3
%117 = Extract i53 of i64 %116 <52, 0>
mem_index!3 = store i53 %117, i53 mem_index!2
%118 = Extract i3 of i64 %113 <2, 0>
%119 = i1 Eq i3 %118, 0
br i1 %119, label %bb15, label %bb16
bb13:
%45 = i64 Lshr i64 %7, 40
%46 = Extract i24 of i64 %45 <23, 0>
%48 = Zext i24 %46 to i64
%49 = i64 And i64 %13, -16777216
%50 = i64 Shl i64 %48, 0
%47 = i64 Or i64 %49, %50
tmp_dword1!20 = store i64 %47, i64 tmp_dword1!13
%51 = i64 Lshr i64 %7, 0
%52 = Extract i40 of i64 %51 <39, 0>
%54 = Zext i40 %52 to i64
%55 = i64 And i64 %14, 16777215
%56 = i64 Shl i64 %54, 24
%53 = i64 Or i64 %55, %56
tmp_dword2!20 = store i64 %53, i64 tmp_dword2!13
br label %bb9
bb14:
%57 = Extract i3 of i64 %5 <2, 0>
%58 = i1 Eq i3 %57, -4
br i1 %58, label %bb17, label %bb18
bb15:
MEM!7 = store i64 %115, [9007199254740992, i64] MEM!3[%117]
br label %bb19
bb16:
%120 = i53 Add i53 %117, 1
%121 = load i64, [9007199254740992, i64] MEM!3[%120]
tmp_dword1!3 = store i64 %121, i64 tmp_dword1!2
%122 = load i64, [9007199254740992, i64] MEM!3[%117]
tmp_dword2!3 = store i64 %122, i64 tmp_dword2!2
%123 = Extract i3 of i64 %113 <2, 0>
%124 = i1 Eq i3 %123, 1
br i1 %124, label %bb20, label %bb21
bb17:
%59 = i64 Lshr i64 %7, 32
%60 = Extract i32 of i64 %59 <31, 0>
%62 = Zext i32 %60 to i64
%63 = i64 And i64 %13, -4294967296
%64 = i64 Shl i64 %62, 0
%61 = i64 Or i64 %63, %64
tmp_dword1!19 = store i64 %61, i64 tmp_dword1!13
%65 = i64 Lshr i64 %7, 0
%66 = Extract i32 of i64 %65 <31, 0>
%68 = Zext i32 %66 to i64
%69 = i64 And i64 %14, 4294967295
%70 = i64 Shl i64 %68, 32
%67 = i64 Or i64 %69, %70
tmp_dword2!19 = store i64 %67, i64 tmp_dword2!13
br label %bb9
bb18:
%71 = Extract i3 of i64 %5 <2, 0>
%72 = i1 Eq i3 %71, -3
br i1 %72, label %bb22, label %bb23
bb19:
MEM!6 = phi ite %119 MEM!7 MEM!5
tmp_dword2!12 = phi ite %119 tmp_dword2!2 tmp_dword2!5
tmp_dword1!12 = phi ite %119 tmp_dword1!2 tmp_dword1!5
br label %bb24
bb20:
%125 = i64 Lshr i64 %115, 56
%126 = Extract i8 of i64 %125 <7, 0>
%128 = Zext i8 %126 to i64
%129 = i64 And i64 %121, -256
%130 = i64 Shl i64 %128, 0
%127 = i64 Or i64 %129, %130
tmp_dword1!4 = store i64 %127, i64 tmp_dword1!3
%131 = i64 Lshr i64 %115, 0
%132 = Extract i56 of i64 %131 <55, 0>
%134 = Zext i56 %132 to i64
%135 = i64 And i64 %122, 255
%136 = i64 Shl i64 %134, 8
%133 = i64 Or i64 %135, %136
tmp_dword2!4 = store i64 %133, i64 tmp_dword2!3
br label %bb25
bb21:
%137 = Extract i3 of i64 %113 <2, 0>
%138 = i1 Eq i3 %137, 2
br i1 %138, label %bb26, label %bb27
bb22:
%73 = i64 Lshr i64 %7, 24
%74 = Extract i40 of i64 %73 <39, 0>
%76 = Zext i40 %74 to i64
%77 = i64 And i64 %13, -1099511627776
%78 = i64 Shl i64 %76, 0
%75 = i64 Or i64 %77, %78
tmp_dword1!16 = store i64 %75, i64 tmp_dword1!13
%79 = i64 Lshr i64 %7, 0
%80 = Extract i24 of i64 %79 <23, 0>
%82 = Zext i24 %80 to i64
%83 = i64 And i64 %14, 1099511627775
%84 = i64 Shl i64 %82, 40
%81 = i64 Or i64 %83, %84
tmp_dword2!16 = store i64 %81, i64 tmp_dword2!13
br label %bb9
bb23:
%85 = Extract i3 of i64 %5 <2, 0>
%86 = i1 Eq i3 %85, -2
br i1 %86, label %bb28, label %bb29
bb24:
%112 = i64 Add i64 PC!5, 4
PC!18 = store i64 %112, i64 PC!6
br label %bb30
bb25:
tmp_dword2!5 = phi ite %124 %133 ite %138 %147 ite %152 %161 ite %166 %175 ite %180 %189 ite %194 %203 %215
tmp_dword1!5 = phi ite %124 %127 ite %138 %141 ite %152 %155 ite %166 %169 ite %180 %183 ite %194 %197 %209
%219 = i53 Add i53 %117, 1
MEM!4 = store i64 tmp_dword1!5, [9007199254740992, i64] MEM!3[%219]
MEM!5 = store i64 tmp_dword2!5, [9007199254740992, i64] MEM!4[%117]
br label %bb19
bb26:
%139 = i64 Lshr i64 %115, 48
%140 = Extract i16 of i64 %139 <15, 0>
%142 = Zext i16 %140 to i64
%143 = i64 And i64 %121, -65536
%144 = i64 Shl i64 %142, 0
%141 = i64 Or i64 %143, %144
tmp_dword1!6 = store i64 %141, i64 tmp_dword1!3
%145 = i64 Lshr i64 %115, 0
%146 = Extract i48 of i64 %145 <47, 0>
%148 = Zext i48 %146 to i64
%149 = i64 And i64 %122, 65535
%150 = i64 Shl i64 %148, 16
%147 = i64 Or i64 %149, %150
tmp_dword2!6 = store i64 %147, i64 tmp_dword2!3
br label %bb25
bb27:
%151 = Extract i3 of i64 %113 <2, 0>
%152 = i1 Eq i3 %151, 3
br i1 %152, label %bb31, label %bb32
bb28:
%87 = i64 Lshr i64 %7, 16
%88 = Extract i48 of i64 %87 <47, 0>
%90 = Zext i48 %88 to i64
%91 = i64 And i64 %13, -281474976710656
%92 = i64 Shl i64 %90, 0
%89 = i64 Or i64 %91, %92
tmp_dword1!17 = store i64 %89, i64 tmp_dword1!13
%93 = i64 Lshr i64 %7, 0
%94 = Extract i16 of i64 %93 <15, 0>
%96 = Zext i16 %94 to i64
%97 = i64 And i64 %14, 281474976710655
%98 = i64 Shl i64 %96, 48
%95 = i64 Or i64 %97, %98
tmp_dword2!17 = store i64 %95, i64 tmp_dword2!13
br label %bb9
bb29:
%99 = i64 Lshr i64 %7, 8
%100 = Extract i56 of i64 %99 <55, 0>
%102 = Zext i56 %100 to i64
%103 = i64 And i64 %13, -72057594037927936
%104 = i64 Shl i64 %102, 0
%101 = i64 Or i64 %103, %104
tmp_dword1!18 = store i64 %101, i64 tmp_dword1!13
%105 = i64 Lshr i64 %7, 0
%106 = Extract i8 of i64 %105 <7, 0>
%108 = Zext i8 %106 to i64
%109 = i64 And i64 %14, 72057594037927935
%110 = i64 Shl i64 %108, 56
%107 = i64 Or i64 %109, %110
tmp_dword2!18 = store i64 %107, i64 tmp_dword2!13
br label %bb9
bb30:
store i64 %112, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%222 = load i64, [32, i64] XREG!6[0]
%221 = i64 Add i64 %222, 2
XREG!7 = store i64 %221, [32, i64] XREG!6[15]
br label %bb33
bb31:
%153 = i64 Lshr i64 %115, 40
%154 = Extract i24 of i64 %153 <23, 0>
%156 = Zext i24 %154 to i64
%157 = i64 And i64 %121, -16777216
%158 = i64 Shl i64 %156, 0
%155 = i64 Or i64 %157, %158
tmp_dword1!7 = store i64 %155, i64 tmp_dword1!3
%159 = i64 Lshr i64 %115, 0
%160 = Extract i40 of i64 %159 <39, 0>
%162 = Zext i40 %160 to i64
%163 = i64 And i64 %122, 16777215
%164 = i64 Shl i64 %162, 24
%161 = i64 Or i64 %163, %164
tmp_dword2!7 = store i64 %161, i64 tmp_dword2!3
br label %bb25
bb32:
%165 = Extract i3 of i64 %113 <2, 0>
%166 = i1 Eq i3 %165, -4
br i1 %166, label %bb34, label %bb35
bb33:
%220 = i64 Add i64 PC!7, 4
PC!17 = store i64 %220, i64 PC!8
br label %bb36
bb34:
%167 = i64 Lshr i64 %115, 32
%168 = Extract i32 of i64 %167 <31, 0>
%170 = Zext i32 %168 to i64
%171 = i64 And i64 %121, -4294967296
%172 = i64 Shl i64 %170, 0
%169 = i64 Or i64 %171, %172
tmp_dword1!8 = store i64 %169, i64 tmp_dword1!3
%173 = i64 Lshr i64 %115, 0
%174 = Extract i32 of i64 %173 <31, 0>
%176 = Zext i32 %174 to i64
%177 = i64 And i64 %122, 4294967295
%178 = i64 Shl i64 %176, 32
%175 = i64 Or i64 %177, %178
tmp_dword2!8 = store i64 %175, i64 tmp_dword2!3
br label %bb25
bb35:
%179 = Extract i3 of i64 %113 <2, 0>
%180 = i1 Eq i3 %179, -3
br i1 %180, label %bb37, label %bb38
bb36:
store i64 %220, i64 PC!9
PC!10 = store i64 PC!9, i64 PC!9
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!9, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[15]
%228 = load i64, [32, i64] XREG!8[11]
%225 = i1 Uge i64 %227, %228
br i1 %225, label %bb39, label %bb40
bb37:
%181 = i64 Lshr i64 %115, 24
%182 = Extract i40 of i64 %181 <39, 0>
%184 = Zext i40 %182 to i64
%185 = i64 And i64 %121, -1099511627776
%186 = i64 Shl i64 %184, 0
%183 = i64 Or i64 %185, %186
tmp_dword1!9 = store i64 %183, i64 tmp_dword1!3
%187 = i64 Lshr i64 %115, 0
%188 = Extract i24 of i64 %187 <23, 0>
%190 = Zext i24 %188 to i64
%191 = i64 And i64 %122, 1099511627775
%192 = i64 Shl i64 %190, 40
%189 = i64 Or i64 %191, %192
tmp_dword2!9 = store i64 %189, i64 tmp_dword2!3
br label %bb25
bb38:
%193 = Extract i3 of i64 %113 <2, 0>
%194 = i1 Eq i3 %193, -2
br i1 %194, label %bb41, label %bb42
bb39:
%226 = i64 Add i64 PC!9, 104
PC!16 = store i64 %226, i64 PC!10
br label %bb43
bb40:
br label %bb43
bb41:
%195 = i64 Lshr i64 %115, 16
%196 = Extract i48 of i64 %195 <47, 0>
%198 = Zext i48 %196 to i64
%199 = i64 And i64 %121, -281474976710656
%200 = i64 Shl i64 %198, 0
%197 = i64 Or i64 %199, %200
tmp_dword1!11 = store i64 %197, i64 tmp_dword1!3
%201 = i64 Lshr i64 %115, 0
%202 = Extract i16 of i64 %201 <15, 0>
%204 = Zext i16 %202 to i64
%205 = i64 And i64 %122, 281474976710655
%206 = i64 Shl i64 %204, 48
%203 = i64 Or i64 %205, %206
tmp_dword2!11 = store i64 %203, i64 tmp_dword2!3
br label %bb25
bb42:
%207 = i64 Lshr i64 %115, 8
%208 = Extract i56 of i64 %207 <55, 0>
%210 = Zext i56 %208 to i64
%211 = i64 And i64 %121, -72057594037927936
%212 = i64 Shl i64 %210, 0
%209 = i64 Or i64 %211, %212
tmp_dword1!10 = store i64 %209, i64 tmp_dword1!3
%213 = i64 Lshr i64 %115, 0
%214 = Extract i8 of i64 %213 <7, 0>
%216 = Zext i8 %214 to i64
%217 = i64 And i64 %122, 72057594037927935
%218 = i64 Shl i64 %216, 56
%215 = i64 Or i64 %217, %218
tmp_dword2!10 = store i64 %215, i64 tmp_dword2!3
br label %bb25
bb43:
PC!11 = phi ite %225 %226 PC!9
%223 = i1 Eq i64 PC!11, PC!9
br i1 %223, label %bb44, label %bb45
bb44:
%224 = i64 Add i64 PC!11, 4
PC!15 = store i64 %224, i64 PC!11
br label %bb46
bb45:
br label %bb46
bb46:
PC!12 = phi ite %223 %224 PC!11
PC!13 = store i64 PC!12, i64 PC!12
PC!14 = store i64 PC!12, i64 PC!13
ret void

Nested SCCP
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 1
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[10]
%5 = i64 Add i64 %6, 0
tmp_address!2 = store i64 %5, i64 tmp_address!1
%7 = load i64, [32, i64] XREG!4[15]
rs2_var!2 = store i64 %7, i64 rs2_var!1
%8 = i64 Lshr i64 %5, 3
%9 = Extract i53 of i64 %8 <52, 0>
mem_index!2 = store i53 %9, i53 mem_index!1
%10 = Extract i3 of i64 %5 <2, 0>
%11 = i1 Eq i3 %10, 0
br i1 %11, label %bb3, label %bb4
bb3:
MEM!2 = store i64 %7, [9007199254740992, i64] MEM!1[%9]
br label %bb5
bb4:
%12 = i53 Add i53 %9, 1
%13 = load i64, [9007199254740992, i64] MEM!1[%12]
tmp_dword1!13 = store i64 %13, i64 tmp_dword1!1
%14 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword2!13 = store i64 %14, i64 tmp_dword2!1
%15 = Extract i3 of i64 %5 <2, 0>
%16 = i1 Eq i3 %15, 1
br i1 %16, label %bb6, label %bb7
bb5:
MEM!3 = phi ite %11 MEM!2 MEM!9
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!14
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!14
br label %bb8
bb6:
%17 = i64 Lshr i64 %7, 56
%18 = Extract i8 of i64 %17 <7, 0>
%20 = Zext i8 %18 to i64
%21 = i64 And i64 %13, -256
%22 = i64 Shl i64 %20, 0
%19 = i64 Or i64 %21, %22
tmp_dword1!15 = store i64 %19, i64 tmp_dword1!13
%23 = i64 Lshr i64 %7, 0
%24 = Extract i56 of i64 %23 <55, 0>
%26 = Zext i56 %24 to i64
%27 = i64 And i64 %14, 255
%28 = i64 Shl i64 %26, 8
%25 = i64 Or i64 %27, %28
tmp_dword2!15 = store i64 %25, i64 tmp_dword2!13
br label %bb9
bb7:
%29 = Extract i3 of i64 %5 <2, 0>
%30 = i1 Eq i3 %29, 2
br i1 %30, label %bb10, label %bb11
bb8:
%4 = i64 Add i64 PC!3, 4
PC!19 = store i64 %4, i64 PC!4
br label %bb12
bb9:
tmp_dword2!14 = phi ite %16 %25 ite %30 %39 ite %44 %53 ite %58 %67 ite %72 %81 ite %86 %95 %107
tmp_dword1!14 = phi ite %16 %19 ite %30 %33 ite %44 %47 ite %58 %61 ite %72 %75 ite %86 %89 %101
%111 = i53 Add i53 %9, 1
MEM!8 = store i64 tmp_dword1!14, [9007199254740992, i64] MEM!1[%111]
MEM!9 = store i64 tmp_dword2!14, [9007199254740992, i64] MEM!8[%9]
br label %bb5
bb10:
%31 = i64 Lshr i64 %7, 48
%32 = Extract i16 of i64 %31 <15, 0>
%34 = Zext i16 %32 to i64
%35 = i64 And i64 %13, -65536
%36 = i64 Shl i64 %34, 0
%33 = i64 Or i64 %35, %36
tmp_dword1!21 = store i64 %33, i64 tmp_dword1!13
%37 = i64 Lshr i64 %7, 0
%38 = Extract i48 of i64 %37 <47, 0>
%40 = Zext i48 %38 to i64
%41 = i64 And i64 %14, 65535
%42 = i64 Shl i64 %40, 16
%39 = i64 Or i64 %41, %42
tmp_dword2!21 = store i64 %39, i64 tmp_dword2!13
br label %bb9
bb11:
%43 = Extract i3 of i64 %5 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb13, label %bb14
bb12:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%114 = load i64, [32, i64] XREG!5[10]
%113 = i64 Add i64 %114, 8
tmp_address!3 = store i64 %113, i64 tmp_address!2
%115 = load i64, [32, i64] XREG!5[15]
rs2_var!3 = store i64 %115, i64 rs2_var!2
%116 = i64 Lshr i64 %113, 3
%117 = Extract i53 of i64 %116 <52, 0>
mem_index!3 = store i53 %117, i53 mem_index!2
%118 = Extract i3 of i64 %113 <2, 0>
%119 = i1 Eq i3 %118, 0
br i1 %119, label %bb15, label %bb16
bb13:
%45 = i64 Lshr i64 %7, 40
%46 = Extract i24 of i64 %45 <23, 0>
%48 = Zext i24 %46 to i64
%49 = i64 And i64 %13, -16777216
%50 = i64 Shl i64 %48, 0
%47 = i64 Or i64 %49, %50
tmp_dword1!20 = store i64 %47, i64 tmp_dword1!13
%51 = i64 Lshr i64 %7, 0
%52 = Extract i40 of i64 %51 <39, 0>
%54 = Zext i40 %52 to i64
%55 = i64 And i64 %14, 16777215
%56 = i64 Shl i64 %54, 24
%53 = i64 Or i64 %55, %56
tmp_dword2!20 = store i64 %53, i64 tmp_dword2!13
br label %bb9
bb14:
%57 = Extract i3 of i64 %5 <2, 0>
%58 = i1 Eq i3 %57, -4
br i1 %58, label %bb17, label %bb18
bb15:
MEM!7 = store i64 %115, [9007199254740992, i64] MEM!3[%117]
br label %bb19
bb16:
%120 = i53 Add i53 %117, 1
%121 = load i64, [9007199254740992, i64] MEM!3[%120]
tmp_dword1!3 = store i64 %121, i64 tmp_dword1!2
%122 = load i64, [9007199254740992, i64] MEM!3[%117]
tmp_dword2!3 = store i64 %122, i64 tmp_dword2!2
%123 = Extract i3 of i64 %113 <2, 0>
%124 = i1 Eq i3 %123, 1
br i1 %124, label %bb20, label %bb21
bb17:
%59 = i64 Lshr i64 %7, 32
%60 = Extract i32 of i64 %59 <31, 0>
%62 = Zext i32 %60 to i64
%63 = i64 And i64 %13, -4294967296
%64 = i64 Shl i64 %62, 0
%61 = i64 Or i64 %63, %64
tmp_dword1!19 = store i64 %61, i64 tmp_dword1!13
%65 = i64 Lshr i64 %7, 0
%66 = Extract i32 of i64 %65 <31, 0>
%68 = Zext i32 %66 to i64
%69 = i64 And i64 %14, 4294967295
%70 = i64 Shl i64 %68, 32
%67 = i64 Or i64 %69, %70
tmp_dword2!19 = store i64 %67, i64 tmp_dword2!13
br label %bb9
bb18:
%71 = Extract i3 of i64 %5 <2, 0>
%72 = i1 Eq i3 %71, -3
br i1 %72, label %bb22, label %bb23
bb19:
MEM!6 = phi ite %119 MEM!7 MEM!5
tmp_dword2!12 = phi ite %119 tmp_dword2!2 tmp_dword2!5
tmp_dword1!12 = phi ite %119 tmp_dword1!2 tmp_dword1!5
br label %bb24
bb20:
%125 = i64 Lshr i64 %115, 56
%126 = Extract i8 of i64 %125 <7, 0>
%128 = Zext i8 %126 to i64
%129 = i64 And i64 %121, -256
%130 = i64 Shl i64 %128, 0
%127 = i64 Or i64 %129, %130
tmp_dword1!4 = store i64 %127, i64 tmp_dword1!3
%131 = i64 Lshr i64 %115, 0
%132 = Extract i56 of i64 %131 <55, 0>
%134 = Zext i56 %132 to i64
%135 = i64 And i64 %122, 255
%136 = i64 Shl i64 %134, 8
%133 = i64 Or i64 %135, %136
tmp_dword2!4 = store i64 %133, i64 tmp_dword2!3
br label %bb25
bb21:
%137 = Extract i3 of i64 %113 <2, 0>
%138 = i1 Eq i3 %137, 2
br i1 %138, label %bb26, label %bb27
bb22:
%73 = i64 Lshr i64 %7, 24
%74 = Extract i40 of i64 %73 <39, 0>
%76 = Zext i40 %74 to i64
%77 = i64 And i64 %13, -1099511627776
%78 = i64 Shl i64 %76, 0
%75 = i64 Or i64 %77, %78
tmp_dword1!16 = store i64 %75, i64 tmp_dword1!13
%79 = i64 Lshr i64 %7, 0
%80 = Extract i24 of i64 %79 <23, 0>
%82 = Zext i24 %80 to i64
%83 = i64 And i64 %14, 1099511627775
%84 = i64 Shl i64 %82, 40
%81 = i64 Or i64 %83, %84
tmp_dword2!16 = store i64 %81, i64 tmp_dword2!13
br label %bb9
bb23:
%85 = Extract i3 of i64 %5 <2, 0>
%86 = i1 Eq i3 %85, -2
br i1 %86, label %bb28, label %bb29
bb24:
%112 = i64 Add i64 PC!5, 4
PC!18 = store i64 %112, i64 PC!6
br label %bb30
bb25:
tmp_dword2!5 = phi ite %124 %133 ite %138 %147 ite %152 %161 ite %166 %175 ite %180 %189 ite %194 %203 %215
tmp_dword1!5 = phi ite %124 %127 ite %138 %141 ite %152 %155 ite %166 %169 ite %180 %183 ite %194 %197 %209
%219 = i53 Add i53 %117, 1
MEM!4 = store i64 tmp_dword1!5, [9007199254740992, i64] MEM!3[%219]
MEM!5 = store i64 tmp_dword2!5, [9007199254740992, i64] MEM!4[%117]
br label %bb19
bb26:
%139 = i64 Lshr i64 %115, 48
%140 = Extract i16 of i64 %139 <15, 0>
%142 = Zext i16 %140 to i64
%143 = i64 And i64 %121, -65536
%144 = i64 Shl i64 %142, 0
%141 = i64 Or i64 %143, %144
tmp_dword1!6 = store i64 %141, i64 tmp_dword1!3
%145 = i64 Lshr i64 %115, 0
%146 = Extract i48 of i64 %145 <47, 0>
%148 = Zext i48 %146 to i64
%149 = i64 And i64 %122, 65535
%150 = i64 Shl i64 %148, 16
%147 = i64 Or i64 %149, %150
tmp_dword2!6 = store i64 %147, i64 tmp_dword2!3
br label %bb25
bb27:
%151 = Extract i3 of i64 %113 <2, 0>
%152 = i1 Eq i3 %151, 3
br i1 %152, label %bb31, label %bb32
bb28:
%87 = i64 Lshr i64 %7, 16
%88 = Extract i48 of i64 %87 <47, 0>
%90 = Zext i48 %88 to i64
%91 = i64 And i64 %13, -281474976710656
%92 = i64 Shl i64 %90, 0
%89 = i64 Or i64 %91, %92
tmp_dword1!17 = store i64 %89, i64 tmp_dword1!13
%93 = i64 Lshr i64 %7, 0
%94 = Extract i16 of i64 %93 <15, 0>
%96 = Zext i16 %94 to i64
%97 = i64 And i64 %14, 281474976710655
%98 = i64 Shl i64 %96, 48
%95 = i64 Or i64 %97, %98
tmp_dword2!17 = store i64 %95, i64 tmp_dword2!13
br label %bb9
bb29:
%99 = i64 Lshr i64 %7, 8
%100 = Extract i56 of i64 %99 <55, 0>
%102 = Zext i56 %100 to i64
%103 = i64 And i64 %13, -72057594037927936
%104 = i64 Shl i64 %102, 0
%101 = i64 Or i64 %103, %104
tmp_dword1!18 = store i64 %101, i64 tmp_dword1!13
%105 = i64 Lshr i64 %7, 0
%106 = Extract i8 of i64 %105 <7, 0>
%108 = Zext i8 %106 to i64
%109 = i64 And i64 %14, 72057594037927935
%110 = i64 Shl i64 %108, 56
%107 = i64 Or i64 %109, %110
tmp_dword2!18 = store i64 %107, i64 tmp_dword2!13
br label %bb9
bb30:
store i64 %112, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%222 = load i64, [32, i64] XREG!6[0]
%221 = i64 Add i64 %222, 2
XREG!7 = store i64 %221, [32, i64] XREG!6[15]
br label %bb33
bb31:
%153 = i64 Lshr i64 %115, 40
%154 = Extract i24 of i64 %153 <23, 0>
%156 = Zext i24 %154 to i64
%157 = i64 And i64 %121, -16777216
%158 = i64 Shl i64 %156, 0
%155 = i64 Or i64 %157, %158
tmp_dword1!7 = store i64 %155, i64 tmp_dword1!3
%159 = i64 Lshr i64 %115, 0
%160 = Extract i40 of i64 %159 <39, 0>
%162 = Zext i40 %160 to i64
%163 = i64 And i64 %122, 16777215
%164 = i64 Shl i64 %162, 24
%161 = i64 Or i64 %163, %164
tmp_dword2!7 = store i64 %161, i64 tmp_dword2!3
br label %bb25
bb32:
%165 = Extract i3 of i64 %113 <2, 0>
%166 = i1 Eq i3 %165, -4
br i1 %166, label %bb34, label %bb35
bb33:
%220 = i64 Add i64 PC!7, 4
PC!17 = store i64 %220, i64 PC!8
br label %bb36
bb34:
%167 = i64 Lshr i64 %115, 32
%168 = Extract i32 of i64 %167 <31, 0>
%170 = Zext i32 %168 to i64
%171 = i64 And i64 %121, -4294967296
%172 = i64 Shl i64 %170, 0
%169 = i64 Or i64 %171, %172
tmp_dword1!8 = store i64 %169, i64 tmp_dword1!3
%173 = i64 Lshr i64 %115, 0
%174 = Extract i32 of i64 %173 <31, 0>
%176 = Zext i32 %174 to i64
%177 = i64 And i64 %122, 4294967295
%178 = i64 Shl i64 %176, 32
%175 = i64 Or i64 %177, %178
tmp_dword2!8 = store i64 %175, i64 tmp_dword2!3
br label %bb25
bb35:
%179 = Extract i3 of i64 %113 <2, 0>
%180 = i1 Eq i3 %179, -3
br i1 %180, label %bb37, label %bb38
bb36:
store i64 %220, i64 PC!9
PC!10 = store i64 PC!9, i64 PC!9
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!9, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[15]
%228 = load i64, [32, i64] XREG!8[11]
%225 = i1 Uge i64 %227, %228
br i1 %225, label %bb39, label %bb40
bb37:
%181 = i64 Lshr i64 %115, 24
%182 = Extract i40 of i64 %181 <39, 0>
%184 = Zext i40 %182 to i64
%185 = i64 And i64 %121, -1099511627776
%186 = i64 Shl i64 %184, 0
%183 = i64 Or i64 %185, %186
tmp_dword1!9 = store i64 %183, i64 tmp_dword1!3
%187 = i64 Lshr i64 %115, 0
%188 = Extract i24 of i64 %187 <23, 0>
%190 = Zext i24 %188 to i64
%191 = i64 And i64 %122, 1099511627775
%192 = i64 Shl i64 %190, 40
%189 = i64 Or i64 %191, %192
tmp_dword2!9 = store i64 %189, i64 tmp_dword2!3
br label %bb25
bb38:
%193 = Extract i3 of i64 %113 <2, 0>
%194 = i1 Eq i3 %193, -2
br i1 %194, label %bb41, label %bb42
bb39:
%226 = i64 Add i64 PC!9, 104
PC!16 = store i64 %226, i64 PC!10
br label %bb43
bb40:
br label %bb43
bb41:
%195 = i64 Lshr i64 %115, 16
%196 = Extract i48 of i64 %195 <47, 0>
%198 = Zext i48 %196 to i64
%199 = i64 And i64 %121, -281474976710656
%200 = i64 Shl i64 %198, 0
%197 = i64 Or i64 %199, %200
tmp_dword1!11 = store i64 %197, i64 tmp_dword1!3
%201 = i64 Lshr i64 %115, 0
%202 = Extract i16 of i64 %201 <15, 0>
%204 = Zext i16 %202 to i64
%205 = i64 And i64 %122, 281474976710655
%206 = i64 Shl i64 %204, 48
%203 = i64 Or i64 %205, %206
tmp_dword2!11 = store i64 %203, i64 tmp_dword2!3
br label %bb25
bb42:
%207 = i64 Lshr i64 %115, 8
%208 = Extract i56 of i64 %207 <55, 0>
%210 = Zext i56 %208 to i64
%211 = i64 And i64 %121, -72057594037927936
%212 = i64 Shl i64 %210, 0
%209 = i64 Or i64 %211, %212
tmp_dword1!10 = store i64 %209, i64 tmp_dword1!3
%213 = i64 Lshr i64 %115, 0
%214 = Extract i8 of i64 %213 <7, 0>
%216 = Zext i8 %214 to i64
%217 = i64 And i64 %122, 72057594037927935
%218 = i64 Shl i64 %216, 56
%215 = i64 Or i64 %217, %218
tmp_dword2!10 = store i64 %215, i64 tmp_dword2!3
br label %bb25
bb43:
PC!11 = phi ite %225 %226 PC!9
%223 = i1 Eq i64 PC!11, PC!9
br i1 %223, label %bb44, label %bb45
bb44:
%224 = i64 Add i64 PC!11, 4
PC!15 = store i64 %224, i64 PC!11
br label %bb46
bb45:
br label %bb46
bb46:
PC!12 = phi ite %225 %226 %224
PC!13 = store i64 PC!12, i64 PC!12
PC!14 = store i64 PC!12, i64 PC!13
ret void

SCCP forward
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 1
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[10]
%5 = i64 Add i64 %6, 0
tmp_address!2 = store i64 %5, i64 tmp_address!1
%7 = load i64, [32, i64] XREG!4[15]
rs2_var!2 = store i64 %7, i64 rs2_var!1
%8 = i64 Lshr i64 %5, 3
%9 = Extract i53 of i64 %8 <52, 0>
mem_index!2 = store i53 %9, i53 mem_index!1
%10 = Extract i3 of i64 %5 <2, 0>
%11 = i1 Eq i3 %10, 0
br i1 %11, label %bb3, label %bb4
bb3:
MEM!2 = store i64 %7, [9007199254740992, i64] MEM!1[%9]
br label %bb5
bb4:
%12 = i53 Add i53 %9, 1
%13 = load i64, [9007199254740992, i64] MEM!1[%12]
tmp_dword1!13 = store i64 %13, i64 tmp_dword1!1
%14 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword2!13 = store i64 %14, i64 tmp_dword2!1
%15 = Extract i3 of i64 %5 <2, 0>
%16 = i1 Eq i3 %15, 1
br i1 %16, label %bb6, label %bb7
bb5:
MEM!3 = phi ite %11 MEM!2 MEM!9
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!14
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!14
br label %bb8
bb6:
%17 = i64 Lshr i64 %7, 56
%18 = Extract i8 of i64 %17 <7, 0>
%20 = Zext i8 %18 to i64
%21 = i64 And i64 %13, -256
%22 = i64 Shl i64 %20, 0
%19 = i64 Or i64 %21, %22
tmp_dword1!15 = store i64 %19, i64 tmp_dword1!13
%23 = i64 Lshr i64 %7, 0
%24 = Extract i56 of i64 %23 <55, 0>
%26 = Zext i56 %24 to i64
%27 = i64 And i64 %14, 255
%28 = i64 Shl i64 %26, 8
%25 = i64 Or i64 %27, %28
tmp_dword2!15 = store i64 %25, i64 tmp_dword2!13
br label %bb9
bb7:
%29 = Extract i3 of i64 %5 <2, 0>
%30 = i1 Eq i3 %29, 2
br i1 %30, label %bb10, label %bb11
bb8:
%4 = i64 Add i64 PC!3, 4
PC!19 = store i64 %4, i64 PC!4
br label %bb12
bb9:
tmp_dword2!14 = phi ite %16 %25 ite %30 %39 ite %44 %53 ite %58 %67 ite %72 %81 ite %86 %95 %107
tmp_dword1!14 = phi ite %16 %19 ite %30 %33 ite %44 %47 ite %58 %61 ite %72 %75 ite %86 %89 %101
%111 = i53 Add i53 %9, 1
MEM!8 = store i64 tmp_dword1!14, [9007199254740992, i64] MEM!1[%111]
MEM!9 = store i64 tmp_dword2!14, [9007199254740992, i64] MEM!8[%9]
br label %bb5
bb10:
%31 = i64 Lshr i64 %7, 48
%32 = Extract i16 of i64 %31 <15, 0>
%34 = Zext i16 %32 to i64
%35 = i64 And i64 %13, -65536
%36 = i64 Shl i64 %34, 0
%33 = i64 Or i64 %35, %36
tmp_dword1!21 = store i64 %33, i64 tmp_dword1!13
%37 = i64 Lshr i64 %7, 0
%38 = Extract i48 of i64 %37 <47, 0>
%40 = Zext i48 %38 to i64
%41 = i64 And i64 %14, 65535
%42 = i64 Shl i64 %40, 16
%39 = i64 Or i64 %41, %42
tmp_dword2!21 = store i64 %39, i64 tmp_dword2!13
br label %bb9
bb11:
%43 = Extract i3 of i64 %5 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb13, label %bb14
bb12:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%114 = load i64, [32, i64] XREG!5[10]
%113 = i64 Add i64 %114, 8
tmp_address!3 = store i64 %113, i64 tmp_address!2
%115 = load i64, [32, i64] XREG!5[15]
rs2_var!3 = store i64 %115, i64 rs2_var!2
%116 = i64 Lshr i64 %113, 3
%117 = Extract i53 of i64 %116 <52, 0>
mem_index!3 = store i53 %117, i53 mem_index!2
%118 = Extract i3 of i64 %113 <2, 0>
%119 = i1 Eq i3 %118, 0
br i1 %119, label %bb15, label %bb16
bb13:
%45 = i64 Lshr i64 %7, 40
%46 = Extract i24 of i64 %45 <23, 0>
%48 = Zext i24 %46 to i64
%49 = i64 And i64 %13, -16777216
%50 = i64 Shl i64 %48, 0
%47 = i64 Or i64 %49, %50
tmp_dword1!20 = store i64 %47, i64 tmp_dword1!13
%51 = i64 Lshr i64 %7, 0
%52 = Extract i40 of i64 %51 <39, 0>
%54 = Zext i40 %52 to i64
%55 = i64 And i64 %14, 16777215
%56 = i64 Shl i64 %54, 24
%53 = i64 Or i64 %55, %56
tmp_dword2!20 = store i64 %53, i64 tmp_dword2!13
br label %bb9
bb14:
%57 = Extract i3 of i64 %5 <2, 0>
%58 = i1 Eq i3 %57, -4
br i1 %58, label %bb17, label %bb18
bb15:
MEM!7 = store i64 %115, [9007199254740992, i64] MEM!3[%117]
br label %bb19
bb16:
%120 = i53 Add i53 %117, 1
%121 = load i64, [9007199254740992, i64] MEM!3[%120]
tmp_dword1!3 = store i64 %121, i64 tmp_dword1!2
%122 = load i64, [9007199254740992, i64] MEM!3[%117]
tmp_dword2!3 = store i64 %122, i64 tmp_dword2!2
%123 = Extract i3 of i64 %113 <2, 0>
%124 = i1 Eq i3 %123, 1
br i1 %124, label %bb20, label %bb21
bb17:
%59 = i64 Lshr i64 %7, 32
%60 = Extract i32 of i64 %59 <31, 0>
%62 = Zext i32 %60 to i64
%63 = i64 And i64 %13, -4294967296
%64 = i64 Shl i64 %62, 0
%61 = i64 Or i64 %63, %64
tmp_dword1!19 = store i64 %61, i64 tmp_dword1!13
%65 = i64 Lshr i64 %7, 0
%66 = Extract i32 of i64 %65 <31, 0>
%68 = Zext i32 %66 to i64
%69 = i64 And i64 %14, 4294967295
%70 = i64 Shl i64 %68, 32
%67 = i64 Or i64 %69, %70
tmp_dword2!19 = store i64 %67, i64 tmp_dword2!13
br label %bb9
bb18:
%71 = Extract i3 of i64 %5 <2, 0>
%72 = i1 Eq i3 %71, -3
br i1 %72, label %bb22, label %bb23
bb19:
MEM!6 = phi ite %119 MEM!7 MEM!5
tmp_dword2!12 = phi ite %119 tmp_dword2!2 tmp_dword2!5
tmp_dword1!12 = phi ite %119 tmp_dword1!2 tmp_dword1!5
br label %bb24
bb20:
%125 = i64 Lshr i64 %115, 56
%126 = Extract i8 of i64 %125 <7, 0>
%128 = Zext i8 %126 to i64
%129 = i64 And i64 %121, -256
%130 = i64 Shl i64 %128, 0
%127 = i64 Or i64 %129, %130
tmp_dword1!4 = store i64 %127, i64 tmp_dword1!3
%131 = i64 Lshr i64 %115, 0
%132 = Extract i56 of i64 %131 <55, 0>
%134 = Zext i56 %132 to i64
%135 = i64 And i64 %122, 255
%136 = i64 Shl i64 %134, 8
%133 = i64 Or i64 %135, %136
tmp_dword2!4 = store i64 %133, i64 tmp_dword2!3
br label %bb25
bb21:
%137 = Extract i3 of i64 %113 <2, 0>
%138 = i1 Eq i3 %137, 2
br i1 %138, label %bb26, label %bb27
bb22:
%73 = i64 Lshr i64 %7, 24
%74 = Extract i40 of i64 %73 <39, 0>
%76 = Zext i40 %74 to i64
%77 = i64 And i64 %13, -1099511627776
%78 = i64 Shl i64 %76, 0
%75 = i64 Or i64 %77, %78
tmp_dword1!16 = store i64 %75, i64 tmp_dword1!13
%79 = i64 Lshr i64 %7, 0
%80 = Extract i24 of i64 %79 <23, 0>
%82 = Zext i24 %80 to i64
%83 = i64 And i64 %14, 1099511627775
%84 = i64 Shl i64 %82, 40
%81 = i64 Or i64 %83, %84
tmp_dword2!16 = store i64 %81, i64 tmp_dword2!13
br label %bb9
bb23:
%85 = Extract i3 of i64 %5 <2, 0>
%86 = i1 Eq i3 %85, -2
br i1 %86, label %bb28, label %bb29
bb24:
%112 = i64 Add i64 PC!5, 4
PC!18 = store i64 %112, i64 PC!6
br label %bb30
bb25:
tmp_dword2!5 = phi ite %124 %133 ite %138 %147 ite %152 %161 ite %166 %175 ite %180 %189 ite %194 %203 %215
tmp_dword1!5 = phi ite %124 %127 ite %138 %141 ite %152 %155 ite %166 %169 ite %180 %183 ite %194 %197 %209
%219 = i53 Add i53 %117, 1
MEM!4 = store i64 tmp_dword1!5, [9007199254740992, i64] MEM!3[%219]
MEM!5 = store i64 tmp_dword2!5, [9007199254740992, i64] MEM!4[%117]
br label %bb19
bb26:
%139 = i64 Lshr i64 %115, 48
%140 = Extract i16 of i64 %139 <15, 0>
%142 = Zext i16 %140 to i64
%143 = i64 And i64 %121, -65536
%144 = i64 Shl i64 %142, 0
%141 = i64 Or i64 %143, %144
tmp_dword1!6 = store i64 %141, i64 tmp_dword1!3
%145 = i64 Lshr i64 %115, 0
%146 = Extract i48 of i64 %145 <47, 0>
%148 = Zext i48 %146 to i64
%149 = i64 And i64 %122, 65535
%150 = i64 Shl i64 %148, 16
%147 = i64 Or i64 %149, %150
tmp_dword2!6 = store i64 %147, i64 tmp_dword2!3
br label %bb25
bb27:
%151 = Extract i3 of i64 %113 <2, 0>
%152 = i1 Eq i3 %151, 3
br i1 %152, label %bb31, label %bb32
bb28:
%87 = i64 Lshr i64 %7, 16
%88 = Extract i48 of i64 %87 <47, 0>
%90 = Zext i48 %88 to i64
%91 = i64 And i64 %13, -281474976710656
%92 = i64 Shl i64 %90, 0
%89 = i64 Or i64 %91, %92
tmp_dword1!17 = store i64 %89, i64 tmp_dword1!13
%93 = i64 Lshr i64 %7, 0
%94 = Extract i16 of i64 %93 <15, 0>
%96 = Zext i16 %94 to i64
%97 = i64 And i64 %14, 281474976710655
%98 = i64 Shl i64 %96, 48
%95 = i64 Or i64 %97, %98
tmp_dword2!17 = store i64 %95, i64 tmp_dword2!13
br label %bb9
bb29:
%99 = i64 Lshr i64 %7, 8
%100 = Extract i56 of i64 %99 <55, 0>
%102 = Zext i56 %100 to i64
%103 = i64 And i64 %13, -72057594037927936
%104 = i64 Shl i64 %102, 0
%101 = i64 Or i64 %103, %104
tmp_dword1!18 = store i64 %101, i64 tmp_dword1!13
%105 = i64 Lshr i64 %7, 0
%106 = Extract i8 of i64 %105 <7, 0>
%108 = Zext i8 %106 to i64
%109 = i64 And i64 %14, 72057594037927935
%110 = i64 Shl i64 %108, 56
%107 = i64 Or i64 %109, %110
tmp_dword2!18 = store i64 %107, i64 tmp_dword2!13
br label %bb9
bb30:
store i64 %112, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%222 = load i64, [32, i64] XREG!6[0]
%221 = i64 Add i64 %222, 2
XREG!7 = store i64 %221, [32, i64] XREG!6[15]
br label %bb33
bb31:
%153 = i64 Lshr i64 %115, 40
%154 = Extract i24 of i64 %153 <23, 0>
%156 = Zext i24 %154 to i64
%157 = i64 And i64 %121, -16777216
%158 = i64 Shl i64 %156, 0
%155 = i64 Or i64 %157, %158
tmp_dword1!7 = store i64 %155, i64 tmp_dword1!3
%159 = i64 Lshr i64 %115, 0
%160 = Extract i40 of i64 %159 <39, 0>
%162 = Zext i40 %160 to i64
%163 = i64 And i64 %122, 16777215
%164 = i64 Shl i64 %162, 24
%161 = i64 Or i64 %163, %164
tmp_dword2!7 = store i64 %161, i64 tmp_dword2!3
br label %bb25
bb32:
%165 = Extract i3 of i64 %113 <2, 0>
%166 = i1 Eq i3 %165, -4
br i1 %166, label %bb34, label %bb35
bb33:
%220 = i64 Add i64 PC!7, 4
PC!17 = store i64 %220, i64 PC!8
br label %bb36
bb34:
%167 = i64 Lshr i64 %115, 32
%168 = Extract i32 of i64 %167 <31, 0>
%170 = Zext i32 %168 to i64
%171 = i64 And i64 %121, -4294967296
%172 = i64 Shl i64 %170, 0
%169 = i64 Or i64 %171, %172
tmp_dword1!8 = store i64 %169, i64 tmp_dword1!3
%173 = i64 Lshr i64 %115, 0
%174 = Extract i32 of i64 %173 <31, 0>
%176 = Zext i32 %174 to i64
%177 = i64 And i64 %122, 4294967295
%178 = i64 Shl i64 %176, 32
%175 = i64 Or i64 %177, %178
tmp_dword2!8 = store i64 %175, i64 tmp_dword2!3
br label %bb25
bb35:
%179 = Extract i3 of i64 %113 <2, 0>
%180 = i1 Eq i3 %179, -3
br i1 %180, label %bb37, label %bb38
bb36:
store i64 %220, i64 PC!9
PC!10 = store i64 PC!9, i64 PC!9
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!9, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[15]
%228 = load i64, [32, i64] XREG!8[11]
%225 = i1 Uge i64 %227, %228
br i1 %225, label %bb39, label %bb40
bb37:
%181 = i64 Lshr i64 %115, 24
%182 = Extract i40 of i64 %181 <39, 0>
%184 = Zext i40 %182 to i64
%185 = i64 And i64 %121, -1099511627776
%186 = i64 Shl i64 %184, 0
%183 = i64 Or i64 %185, %186
tmp_dword1!9 = store i64 %183, i64 tmp_dword1!3
%187 = i64 Lshr i64 %115, 0
%188 = Extract i24 of i64 %187 <23, 0>
%190 = Zext i24 %188 to i64
%191 = i64 And i64 %122, 1099511627775
%192 = i64 Shl i64 %190, 40
%189 = i64 Or i64 %191, %192
tmp_dword2!9 = store i64 %189, i64 tmp_dword2!3
br label %bb25
bb38:
%193 = Extract i3 of i64 %113 <2, 0>
%194 = i1 Eq i3 %193, -2
br i1 %194, label %bb41, label %bb42
bb39:
%226 = i64 Add i64 PC!9, 104
PC!16 = store i64 %226, i64 PC!10
br label %bb43
bb40:
br label %bb43
bb41:
%195 = i64 Lshr i64 %115, 16
%196 = Extract i48 of i64 %195 <47, 0>
%198 = Zext i48 %196 to i64
%199 = i64 And i64 %121, -281474976710656
%200 = i64 Shl i64 %198, 0
%197 = i64 Or i64 %199, %200
tmp_dword1!11 = store i64 %197, i64 tmp_dword1!3
%201 = i64 Lshr i64 %115, 0
%202 = Extract i16 of i64 %201 <15, 0>
%204 = Zext i16 %202 to i64
%205 = i64 And i64 %122, 281474976710655
%206 = i64 Shl i64 %204, 48
%203 = i64 Or i64 %205, %206
tmp_dword2!11 = store i64 %203, i64 tmp_dword2!3
br label %bb25
bb42:
%207 = i64 Lshr i64 %115, 8
%208 = Extract i56 of i64 %207 <55, 0>
%210 = Zext i56 %208 to i64
%211 = i64 And i64 %121, -72057594037927936
%212 = i64 Shl i64 %210, 0
%209 = i64 Or i64 %211, %212
tmp_dword1!10 = store i64 %209, i64 tmp_dword1!3
%213 = i64 Lshr i64 %115, 0
%214 = Extract i8 of i64 %213 <7, 0>
%216 = Zext i8 %214 to i64
%217 = i64 And i64 %122, 72057594037927935
%218 = i64 Shl i64 %216, 56
%215 = i64 Or i64 %217, %218
tmp_dword2!10 = store i64 %215, i64 tmp_dword2!3
br label %bb25
bb43:
PC!11 = phi ite %225 %226 PC!9
%223 = i1 Eq i64 PC!11, PC!9
br i1 %223, label %bb44, label %bb45
bb44:
%224 = i64 Add i64 PC!11, 4
PC!15 = store i64 %224, i64 PC!11
br label %bb46
bb45:
br label %bb46
bb46:
PC!12 = phi ite %225 %226 %224
PC!13 = store i64 PC!12, i64 PC!12
PC!14 = store i64 PC!12, i64 PC!13
ret void

cherry
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 1
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[10]
%5 = i64 Add i64 %6, 0
tmp_address!2 = store i64 %5, i64 tmp_address!1
%7 = load i64, [32, i64] XREG!4[15]
rs2_var!2 = store i64 %7, i64 rs2_var!1
%8 = i64 Lshr i64 %5, 3
%9 = Extract i53 of i64 %8 <52, 0>
mem_index!2 = store i53 %9, i53 mem_index!1
%10 = Extract i3 of i64 %5 <2, 0>
%11 = i1 Eq i3 %10, 0
br i1 %11, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %7, [9007199254740992, i64] MEM!1[%9]
br label %bb3
bb2:
%12 = i53 Add i53 %9, 1
%13 = load i64, [9007199254740992, i64] MEM!1[%12]
tmp_dword1!13 = store i64 %13, i64 tmp_dword1!1
%14 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword2!13 = store i64 %14, i64 tmp_dword2!1
%15 = Extract i3 of i64 %5 <2, 0>
%16 = i1 Eq i3 %15, 1
br i1 %16, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %11 MEM!2 MEM!9
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!14
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!14
%4 = i64 Add i64 PC!3, 4
PC!19 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%114 = load i64, [32, i64] XREG!5[10]
%113 = i64 Add i64 %114, 8
tmp_address!3 = store i64 %113, i64 tmp_address!2
%115 = load i64, [32, i64] XREG!5[15]
rs2_var!3 = store i64 %115, i64 rs2_var!2
%116 = i64 Lshr i64 %113, 3
%117 = Extract i53 of i64 %116 <52, 0>
mem_index!3 = store i53 %117, i53 mem_index!2
%118 = Extract i3 of i64 %113 <2, 0>
%119 = i1 Eq i3 %118, 0
br i1 %119, label %bb11, label %bb12
bb4:
%17 = i64 Lshr i64 %7, 56
%18 = Extract i8 of i64 %17 <7, 0>
%20 = Zext i8 %18 to i64
%21 = i64 And i64 %13, -256
%22 = i64 Shl i64 %20, 0
%19 = i64 Or i64 %21, %22
tmp_dword1!15 = store i64 %19, i64 tmp_dword1!13
%23 = i64 Lshr i64 %7, 0
%24 = Extract i56 of i64 %23 <55, 0>
%26 = Zext i56 %24 to i64
%27 = i64 And i64 %14, 255
%28 = i64 Shl i64 %26, 8
%25 = i64 Or i64 %27, %28
tmp_dword2!15 = store i64 %25, i64 tmp_dword2!13
br label %bb6
bb5:
%29 = Extract i3 of i64 %5 <2, 0>
%30 = i1 Eq i3 %29, 2
br i1 %30, label %bb7, label %bb8
bb6:
tmp_dword2!14 = phi ite %16 %25 ite %30 %39 ite %44 %53 ite %58 %67 ite %72 %81 ite %86 %95 %107
tmp_dword1!14 = phi ite %16 %19 ite %30 %33 ite %44 %47 ite %58 %61 ite %72 %75 ite %86 %89 %101
%111 = i53 Add i53 %9, 1
MEM!8 = store i64 tmp_dword1!14, [9007199254740992, i64] MEM!1[%111]
MEM!9 = store i64 tmp_dword2!14, [9007199254740992, i64] MEM!8[%9]
br label %bb3
bb7:
%31 = i64 Lshr i64 %7, 48
%32 = Extract i16 of i64 %31 <15, 0>
%34 = Zext i16 %32 to i64
%35 = i64 And i64 %13, -65536
%36 = i64 Shl i64 %34, 0
%33 = i64 Or i64 %35, %36
tmp_dword1!21 = store i64 %33, i64 tmp_dword1!13
%37 = i64 Lshr i64 %7, 0
%38 = Extract i48 of i64 %37 <47, 0>
%40 = Zext i48 %38 to i64
%41 = i64 And i64 %14, 65535
%42 = i64 Shl i64 %40, 16
%39 = i64 Or i64 %41, %42
tmp_dword2!21 = store i64 %39, i64 tmp_dword2!13
br label %bb6
bb8:
%43 = Extract i3 of i64 %5 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb9, label %bb10
bb9:
%45 = i64 Lshr i64 %7, 40
%46 = Extract i24 of i64 %45 <23, 0>
%48 = Zext i24 %46 to i64
%49 = i64 And i64 %13, -16777216
%50 = i64 Shl i64 %48, 0
%47 = i64 Or i64 %49, %50
tmp_dword1!20 = store i64 %47, i64 tmp_dword1!13
%51 = i64 Lshr i64 %7, 0
%52 = Extract i40 of i64 %51 <39, 0>
%54 = Zext i40 %52 to i64
%55 = i64 And i64 %14, 16777215
%56 = i64 Shl i64 %54, 24
%53 = i64 Or i64 %55, %56
tmp_dword2!20 = store i64 %53, i64 tmp_dword2!13
br label %bb6
bb10:
%57 = Extract i3 of i64 %5 <2, 0>
%58 = i1 Eq i3 %57, -4
br i1 %58, label %bb13, label %bb14
bb11:
MEM!7 = store i64 %115, [9007199254740992, i64] MEM!3[%117]
br label %bb15
bb12:
%120 = i53 Add i53 %117, 1
%121 = load i64, [9007199254740992, i64] MEM!3[%120]
tmp_dword1!3 = store i64 %121, i64 tmp_dword1!2
%122 = load i64, [9007199254740992, i64] MEM!3[%117]
tmp_dword2!3 = store i64 %122, i64 tmp_dword2!2
%123 = Extract i3 of i64 %113 <2, 0>
%124 = i1 Eq i3 %123, 1
br i1 %124, label %bb16, label %bb17
bb13:
%59 = i64 Lshr i64 %7, 32
%60 = Extract i32 of i64 %59 <31, 0>
%62 = Zext i32 %60 to i64
%63 = i64 And i64 %13, -4294967296
%64 = i64 Shl i64 %62, 0
%61 = i64 Or i64 %63, %64
tmp_dword1!19 = store i64 %61, i64 tmp_dword1!13
%65 = i64 Lshr i64 %7, 0
%66 = Extract i32 of i64 %65 <31, 0>
%68 = Zext i32 %66 to i64
%69 = i64 And i64 %14, 4294967295
%70 = i64 Shl i64 %68, 32
%67 = i64 Or i64 %69, %70
tmp_dword2!19 = store i64 %67, i64 tmp_dword2!13
br label %bb6
bb14:
%71 = Extract i3 of i64 %5 <2, 0>
%72 = i1 Eq i3 %71, -3
br i1 %72, label %bb18, label %bb19
bb15:
MEM!6 = phi ite %119 MEM!7 MEM!5
tmp_dword2!12 = phi ite %119 tmp_dword2!2 tmp_dword2!5
tmp_dword1!12 = phi ite %119 tmp_dword1!2 tmp_dword1!5
%112 = i64 Add i64 PC!5, 4
PC!18 = store i64 %112, i64 PC!6
store i64 %112, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%222 = load i64, [32, i64] XREG!6[0]
%221 = i64 Add i64 %222, 2
XREG!7 = store i64 %221, [32, i64] XREG!6[15]
%220 = i64 Add i64 PC!7, 4
PC!17 = store i64 %220, i64 PC!8
store i64 %220, i64 PC!9
PC!10 = store i64 PC!9, i64 PC!9
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!9, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[15]
%228 = load i64, [32, i64] XREG!8[11]
%225 = i1 Uge i64 %227, %228
br i1 %225, label %bb31, label %bb32
bb16:
%125 = i64 Lshr i64 %115, 56
%126 = Extract i8 of i64 %125 <7, 0>
%128 = Zext i8 %126 to i64
%129 = i64 And i64 %121, -256
%130 = i64 Shl i64 %128, 0
%127 = i64 Or i64 %129, %130
tmp_dword1!4 = store i64 %127, i64 tmp_dword1!3
%131 = i64 Lshr i64 %115, 0
%132 = Extract i56 of i64 %131 <55, 0>
%134 = Zext i56 %132 to i64
%135 = i64 And i64 %122, 255
%136 = i64 Shl i64 %134, 8
%133 = i64 Or i64 %135, %136
tmp_dword2!4 = store i64 %133, i64 tmp_dword2!3
br label %bb20
bb17:
%137 = Extract i3 of i64 %113 <2, 0>
%138 = i1 Eq i3 %137, 2
br i1 %138, label %bb21, label %bb22
bb18:
%73 = i64 Lshr i64 %7, 24
%74 = Extract i40 of i64 %73 <39, 0>
%76 = Zext i40 %74 to i64
%77 = i64 And i64 %13, -1099511627776
%78 = i64 Shl i64 %76, 0
%75 = i64 Or i64 %77, %78
tmp_dword1!16 = store i64 %75, i64 tmp_dword1!13
%79 = i64 Lshr i64 %7, 0
%80 = Extract i24 of i64 %79 <23, 0>
%82 = Zext i24 %80 to i64
%83 = i64 And i64 %14, 1099511627775
%84 = i64 Shl i64 %82, 40
%81 = i64 Or i64 %83, %84
tmp_dword2!16 = store i64 %81, i64 tmp_dword2!13
br label %bb6
bb19:
%85 = Extract i3 of i64 %5 <2, 0>
%86 = i1 Eq i3 %85, -2
br i1 %86, label %bb23, label %bb24
bb20:
tmp_dword2!5 = phi ite %124 %133 ite %138 %147 ite %152 %161 ite %166 %175 ite %180 %189 ite %194 %203 %215
tmp_dword1!5 = phi ite %124 %127 ite %138 %141 ite %152 %155 ite %166 %169 ite %180 %183 ite %194 %197 %209
%219 = i53 Add i53 %117, 1
MEM!4 = store i64 tmp_dword1!5, [9007199254740992, i64] MEM!3[%219]
MEM!5 = store i64 tmp_dword2!5, [9007199254740992, i64] MEM!4[%117]
br label %bb15
bb21:
%139 = i64 Lshr i64 %115, 48
%140 = Extract i16 of i64 %139 <15, 0>
%142 = Zext i16 %140 to i64
%143 = i64 And i64 %121, -65536
%144 = i64 Shl i64 %142, 0
%141 = i64 Or i64 %143, %144
tmp_dword1!6 = store i64 %141, i64 tmp_dword1!3
%145 = i64 Lshr i64 %115, 0
%146 = Extract i48 of i64 %145 <47, 0>
%148 = Zext i48 %146 to i64
%149 = i64 And i64 %122, 65535
%150 = i64 Shl i64 %148, 16
%147 = i64 Or i64 %149, %150
tmp_dword2!6 = store i64 %147, i64 tmp_dword2!3
br label %bb20
bb22:
%151 = Extract i3 of i64 %113 <2, 0>
%152 = i1 Eq i3 %151, 3
br i1 %152, label %bb25, label %bb26
bb23:
%87 = i64 Lshr i64 %7, 16
%88 = Extract i48 of i64 %87 <47, 0>
%90 = Zext i48 %88 to i64
%91 = i64 And i64 %13, -281474976710656
%92 = i64 Shl i64 %90, 0
%89 = i64 Or i64 %91, %92
tmp_dword1!17 = store i64 %89, i64 tmp_dword1!13
%93 = i64 Lshr i64 %7, 0
%94 = Extract i16 of i64 %93 <15, 0>
%96 = Zext i16 %94 to i64
%97 = i64 And i64 %14, 281474976710655
%98 = i64 Shl i64 %96, 48
%95 = i64 Or i64 %97, %98
tmp_dword2!17 = store i64 %95, i64 tmp_dword2!13
br label %bb6
bb24:
%99 = i64 Lshr i64 %7, 8
%100 = Extract i56 of i64 %99 <55, 0>
%102 = Zext i56 %100 to i64
%103 = i64 And i64 %13, -72057594037927936
%104 = i64 Shl i64 %102, 0
%101 = i64 Or i64 %103, %104
tmp_dword1!18 = store i64 %101, i64 tmp_dword1!13
%105 = i64 Lshr i64 %7, 0
%106 = Extract i8 of i64 %105 <7, 0>
%108 = Zext i8 %106 to i64
%109 = i64 And i64 %14, 72057594037927935
%110 = i64 Shl i64 %108, 56
%107 = i64 Or i64 %109, %110
tmp_dword2!18 = store i64 %107, i64 tmp_dword2!13
br label %bb6
bb25:
%153 = i64 Lshr i64 %115, 40
%154 = Extract i24 of i64 %153 <23, 0>
%156 = Zext i24 %154 to i64
%157 = i64 And i64 %121, -16777216
%158 = i64 Shl i64 %156, 0
%155 = i64 Or i64 %157, %158
tmp_dword1!7 = store i64 %155, i64 tmp_dword1!3
%159 = i64 Lshr i64 %115, 0
%160 = Extract i40 of i64 %159 <39, 0>
%162 = Zext i40 %160 to i64
%163 = i64 And i64 %122, 16777215
%164 = i64 Shl i64 %162, 24
%161 = i64 Or i64 %163, %164
tmp_dword2!7 = store i64 %161, i64 tmp_dword2!3
br label %bb20
bb26:
%165 = Extract i3 of i64 %113 <2, 0>
%166 = i1 Eq i3 %165, -4
br i1 %166, label %bb27, label %bb28
bb27:
%167 = i64 Lshr i64 %115, 32
%168 = Extract i32 of i64 %167 <31, 0>
%170 = Zext i32 %168 to i64
%171 = i64 And i64 %121, -4294967296
%172 = i64 Shl i64 %170, 0
%169 = i64 Or i64 %171, %172
tmp_dword1!8 = store i64 %169, i64 tmp_dword1!3
%173 = i64 Lshr i64 %115, 0
%174 = Extract i32 of i64 %173 <31, 0>
%176 = Zext i32 %174 to i64
%177 = i64 And i64 %122, 4294967295
%178 = i64 Shl i64 %176, 32
%175 = i64 Or i64 %177, %178
tmp_dword2!8 = store i64 %175, i64 tmp_dword2!3
br label %bb20
bb28:
%179 = Extract i3 of i64 %113 <2, 0>
%180 = i1 Eq i3 %179, -3
br i1 %180, label %bb29, label %bb30
bb29:
%181 = i64 Lshr i64 %115, 24
%182 = Extract i40 of i64 %181 <39, 0>
%184 = Zext i40 %182 to i64
%185 = i64 And i64 %121, -1099511627776
%186 = i64 Shl i64 %184, 0
%183 = i64 Or i64 %185, %186
tmp_dword1!9 = store i64 %183, i64 tmp_dword1!3
%187 = i64 Lshr i64 %115, 0
%188 = Extract i24 of i64 %187 <23, 0>
%190 = Zext i24 %188 to i64
%191 = i64 And i64 %122, 1099511627775
%192 = i64 Shl i64 %190, 40
%189 = i64 Or i64 %191, %192
tmp_dword2!9 = store i64 %189, i64 tmp_dword2!3
br label %bb20
bb30:
%193 = Extract i3 of i64 %113 <2, 0>
%194 = i1 Eq i3 %193, -2
br i1 %194, label %bb33, label %bb34
bb31:
%226 = i64 Add i64 PC!9, 104
PC!16 = store i64 %226, i64 PC!10
br label %bb35
bb32:
br label %bb35
bb33:
%195 = i64 Lshr i64 %115, 16
%196 = Extract i48 of i64 %195 <47, 0>
%198 = Zext i48 %196 to i64
%199 = i64 And i64 %121, -281474976710656
%200 = i64 Shl i64 %198, 0
%197 = i64 Or i64 %199, %200
tmp_dword1!11 = store i64 %197, i64 tmp_dword1!3
%201 = i64 Lshr i64 %115, 0
%202 = Extract i16 of i64 %201 <15, 0>
%204 = Zext i16 %202 to i64
%205 = i64 And i64 %122, 281474976710655
%206 = i64 Shl i64 %204, 48
%203 = i64 Or i64 %205, %206
tmp_dword2!11 = store i64 %203, i64 tmp_dword2!3
br label %bb20
bb34:
%207 = i64 Lshr i64 %115, 8
%208 = Extract i56 of i64 %207 <55, 0>
%210 = Zext i56 %208 to i64
%211 = i64 And i64 %121, -72057594037927936
%212 = i64 Shl i64 %210, 0
%209 = i64 Or i64 %211, %212
tmp_dword1!10 = store i64 %209, i64 tmp_dword1!3
%213 = i64 Lshr i64 %115, 0
%214 = Extract i8 of i64 %213 <7, 0>
%216 = Zext i8 %214 to i64
%217 = i64 And i64 %122, 72057594037927935
%218 = i64 Shl i64 %216, 56
%215 = i64 Or i64 %217, %218
tmp_dword2!10 = store i64 %215, i64 tmp_dword2!3
br label %bb20
bb35:
PC!11 = phi ite %225 %226 PC!9
%223 = i1 Eq i64 PC!11, PC!9
br i1 %223, label %bb36, label %bb37
bb36:
%224 = i64 Add i64 PC!11, 4
PC!15 = store i64 %224, i64 PC!11
br label %bb38
bb37:
br label %bb38
bb38:
PC!12 = phi ite %225 %226 %224
PC!13 = store i64 PC!12, i64 PC!12
PC!14 = store i64 PC!12, i64 PC!13
ret void

bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 1
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[10]
%5 = i64 Add i64 %6, 0
tmp_address!2 = store i64 %5, i64 tmp_address!1
%7 = load i64, [32, i64] XREG!4[15]
rs2_var!2 = store i64 %7, i64 rs2_var!1
%8 = i64 Lshr i64 %5, 3
%9 = Extract i53 of i64 %8 <52, 0>
mem_index!2 = store i53 %9, i53 mem_index!1
%10 = Extract i3 of i64 %5 <2, 0>
%11 = i1 Eq i3 %10, 0
br i1 %11, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %7, [9007199254740992, i64] MEM!1[%9]
br label %bb3
bb2:
%12 = i53 Add i53 %9, 1
%13 = load i64, [9007199254740992, i64] MEM!1[%12]
tmp_dword1!13 = store i64 %13, i64 tmp_dword1!1
%14 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword2!13 = store i64 %14, i64 tmp_dword2!1
%15 = Extract i3 of i64 %5 <2, 0>
%16 = i1 Eq i3 %15, 1
br i1 %16, label %bb4, label %bb5
bb3:
MEM!3 = phi ite %11 MEM!2 MEM!9
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!14
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!14
%4 = i64 Add i64 PC!3, 4
PC!19 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%114 = load i64, [32, i64] XREG!5[10]
%113 = i64 Add i64 %114, 8
tmp_address!3 = store i64 %113, i64 tmp_address!2
%115 = load i64, [32, i64] XREG!5[15]
rs2_var!3 = store i64 %115, i64 rs2_var!2
%116 = i64 Lshr i64 %113, 3
%117 = Extract i53 of i64 %116 <52, 0>
mem_index!3 = store i53 %117, i53 mem_index!2
%118 = Extract i3 of i64 %113 <2, 0>
%119 = i1 Eq i3 %118, 0
br i1 %119, label %bb11, label %bb12
bb4:
%17 = i64 Lshr i64 %7, 56
%18 = Extract i8 of i64 %17 <7, 0>
%20 = Zext i8 %18 to i64
%21 = i64 And i64 %13, -256
%22 = i64 Shl i64 %20, 0
%19 = i64 Or i64 %21, %22
tmp_dword1!15 = store i64 %19, i64 tmp_dword1!13
%23 = i64 Lshr i64 %7, 0
%24 = Extract i56 of i64 %23 <55, 0>
%26 = Zext i56 %24 to i64
%27 = i64 And i64 %14, 255
%28 = i64 Shl i64 %26, 8
%25 = i64 Or i64 %27, %28
tmp_dword2!15 = store i64 %25, i64 tmp_dword2!13
br label %bb6
bb5:
%29 = Extract i3 of i64 %5 <2, 0>
%30 = i1 Eq i3 %29, 2
br i1 %30, label %bb7, label %bb8
bb6:
tmp_dword2!14 = phi ite %16 %25 ite %30 %39 ite %44 %53 ite %58 %67 ite %72 %81 ite %86 %95 %107
tmp_dword1!14 = phi ite %16 %19 ite %30 %33 ite %44 %47 ite %58 %61 ite %72 %75 ite %86 %89 %101
%111 = i53 Add i53 %9, 1
MEM!8 = store i64 tmp_dword1!14, [9007199254740992, i64] MEM!1[%111]
MEM!9 = store i64 tmp_dword2!14, [9007199254740992, i64] MEM!8[%9]
br label %bb3
bb7:
%31 = i64 Lshr i64 %7, 48
%32 = Extract i16 of i64 %31 <15, 0>
%34 = Zext i16 %32 to i64
%35 = i64 And i64 %13, -65536
%36 = i64 Shl i64 %34, 0
%33 = i64 Or i64 %35, %36
tmp_dword1!21 = store i64 %33, i64 tmp_dword1!13
%37 = i64 Lshr i64 %7, 0
%38 = Extract i48 of i64 %37 <47, 0>
%40 = Zext i48 %38 to i64
%41 = i64 And i64 %14, 65535
%42 = i64 Shl i64 %40, 16
%39 = i64 Or i64 %41, %42
tmp_dword2!21 = store i64 %39, i64 tmp_dword2!13
br label %bb6
bb8:
%43 = Extract i3 of i64 %5 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb9, label %bb10
bb9:
%45 = i64 Lshr i64 %7, 40
%46 = Extract i24 of i64 %45 <23, 0>
%48 = Zext i24 %46 to i64
%49 = i64 And i64 %13, -16777216
%50 = i64 Shl i64 %48, 0
%47 = i64 Or i64 %49, %50
tmp_dword1!20 = store i64 %47, i64 tmp_dword1!13
%51 = i64 Lshr i64 %7, 0
%52 = Extract i40 of i64 %51 <39, 0>
%54 = Zext i40 %52 to i64
%55 = i64 And i64 %14, 16777215
%56 = i64 Shl i64 %54, 24
%53 = i64 Or i64 %55, %56
tmp_dword2!20 = store i64 %53, i64 tmp_dword2!13
br label %bb6
bb10:
%57 = Extract i3 of i64 %5 <2, 0>
%58 = i1 Eq i3 %57, -4
br i1 %58, label %bb13, label %bb14
bb11:
MEM!7 = store i64 %115, [9007199254740992, i64] MEM!3[%117]
br label %bb15
bb12:
%120 = i53 Add i53 %117, 1
%121 = load i64, [9007199254740992, i64] MEM!3[%120]
tmp_dword1!3 = store i64 %121, i64 tmp_dword1!2
%122 = load i64, [9007199254740992, i64] MEM!3[%117]
tmp_dword2!3 = store i64 %122, i64 tmp_dword2!2
%123 = Extract i3 of i64 %113 <2, 0>
%124 = i1 Eq i3 %123, 1
br i1 %124, label %bb16, label %bb17
bb13:
%59 = i64 Lshr i64 %7, 32
%60 = Extract i32 of i64 %59 <31, 0>
%62 = Zext i32 %60 to i64
%63 = i64 And i64 %13, -4294967296
%64 = i64 Shl i64 %62, 0
%61 = i64 Or i64 %63, %64
tmp_dword1!19 = store i64 %61, i64 tmp_dword1!13
%65 = i64 Lshr i64 %7, 0
%66 = Extract i32 of i64 %65 <31, 0>
%68 = Zext i32 %66 to i64
%69 = i64 And i64 %14, 4294967295
%70 = i64 Shl i64 %68, 32
%67 = i64 Or i64 %69, %70
tmp_dword2!19 = store i64 %67, i64 tmp_dword2!13
br label %bb6
bb14:
%71 = Extract i3 of i64 %5 <2, 0>
%72 = i1 Eq i3 %71, -3
br i1 %72, label %bb18, label %bb19
bb15:
MEM!6 = phi ite %119 MEM!7 MEM!5
tmp_dword2!12 = phi ite %119 tmp_dword2!2 tmp_dword2!5
tmp_dword1!12 = phi ite %119 tmp_dword1!2 tmp_dword1!5
%112 = i64 Add i64 PC!5, 4
PC!18 = store i64 %112, i64 PC!6
store i64 %112, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%222 = load i64, [32, i64] XREG!6[0]
%221 = i64 Add i64 %222, 2
XREG!7 = store i64 %221, [32, i64] XREG!6[15]
%220 = i64 Add i64 PC!7, 4
PC!17 = store i64 %220, i64 PC!8
store i64 %220, i64 PC!9
PC!10 = store i64 PC!9, i64 PC!9
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!9, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[15]
%228 = load i64, [32, i64] XREG!8[11]
%225 = i1 Uge i64 %227, %228
br i1 %225, label %bb31, label %bb32
bb16:
%125 = i64 Lshr i64 %115, 56
%126 = Extract i8 of i64 %125 <7, 0>
%128 = Zext i8 %126 to i64
%129 = i64 And i64 %121, -256
%130 = i64 Shl i64 %128, 0
%127 = i64 Or i64 %129, %130
tmp_dword1!4 = store i64 %127, i64 tmp_dword1!3
%131 = i64 Lshr i64 %115, 0
%132 = Extract i56 of i64 %131 <55, 0>
%134 = Zext i56 %132 to i64
%135 = i64 And i64 %122, 255
%136 = i64 Shl i64 %134, 8
%133 = i64 Or i64 %135, %136
tmp_dword2!4 = store i64 %133, i64 tmp_dword2!3
br label %bb20
bb17:
%137 = Extract i3 of i64 %113 <2, 0>
%138 = i1 Eq i3 %137, 2
br i1 %138, label %bb21, label %bb22
bb18:
%73 = i64 Lshr i64 %7, 24
%74 = Extract i40 of i64 %73 <39, 0>
%76 = Zext i40 %74 to i64
%77 = i64 And i64 %13, -1099511627776
%78 = i64 Shl i64 %76, 0
%75 = i64 Or i64 %77, %78
tmp_dword1!16 = store i64 %75, i64 tmp_dword1!13
%79 = i64 Lshr i64 %7, 0
%80 = Extract i24 of i64 %79 <23, 0>
%82 = Zext i24 %80 to i64
%83 = i64 And i64 %14, 1099511627775
%84 = i64 Shl i64 %82, 40
%81 = i64 Or i64 %83, %84
tmp_dword2!16 = store i64 %81, i64 tmp_dword2!13
br label %bb6
bb19:
%85 = Extract i3 of i64 %5 <2, 0>
%86 = i1 Eq i3 %85, -2
br i1 %86, label %bb23, label %bb24
bb20:
tmp_dword2!5 = phi ite %124 %133 ite %138 %147 ite %152 %161 ite %166 %175 ite %180 %189 ite %194 %203 %215
tmp_dword1!5 = phi ite %124 %127 ite %138 %141 ite %152 %155 ite %166 %169 ite %180 %183 ite %194 %197 %209
%219 = i53 Add i53 %117, 1
MEM!4 = store i64 tmp_dword1!5, [9007199254740992, i64] MEM!3[%219]
MEM!5 = store i64 tmp_dword2!5, [9007199254740992, i64] MEM!4[%117]
br label %bb15
bb21:
%139 = i64 Lshr i64 %115, 48
%140 = Extract i16 of i64 %139 <15, 0>
%142 = Zext i16 %140 to i64
%143 = i64 And i64 %121, -65536
%144 = i64 Shl i64 %142, 0
%141 = i64 Or i64 %143, %144
tmp_dword1!6 = store i64 %141, i64 tmp_dword1!3
%145 = i64 Lshr i64 %115, 0
%146 = Extract i48 of i64 %145 <47, 0>
%148 = Zext i48 %146 to i64
%149 = i64 And i64 %122, 65535
%150 = i64 Shl i64 %148, 16
%147 = i64 Or i64 %149, %150
tmp_dword2!6 = store i64 %147, i64 tmp_dword2!3
br label %bb20
bb22:
%151 = Extract i3 of i64 %113 <2, 0>
%152 = i1 Eq i3 %151, 3
br i1 %152, label %bb25, label %bb26
bb23:
%87 = i64 Lshr i64 %7, 16
%88 = Extract i48 of i64 %87 <47, 0>
%90 = Zext i48 %88 to i64
%91 = i64 And i64 %13, -281474976710656
%92 = i64 Shl i64 %90, 0
%89 = i64 Or i64 %91, %92
tmp_dword1!17 = store i64 %89, i64 tmp_dword1!13
%93 = i64 Lshr i64 %7, 0
%94 = Extract i16 of i64 %93 <15, 0>
%96 = Zext i16 %94 to i64
%97 = i64 And i64 %14, 281474976710655
%98 = i64 Shl i64 %96, 48
%95 = i64 Or i64 %97, %98
tmp_dword2!17 = store i64 %95, i64 tmp_dword2!13
br label %bb6
bb24:
%99 = i64 Lshr i64 %7, 8
%100 = Extract i56 of i64 %99 <55, 0>
%102 = Zext i56 %100 to i64
%103 = i64 And i64 %13, -72057594037927936
%104 = i64 Shl i64 %102, 0
%101 = i64 Or i64 %103, %104
tmp_dword1!18 = store i64 %101, i64 tmp_dword1!13
%105 = i64 Lshr i64 %7, 0
%106 = Extract i8 of i64 %105 <7, 0>
%108 = Zext i8 %106 to i64
%109 = i64 And i64 %14, 72057594037927935
%110 = i64 Shl i64 %108, 56
%107 = i64 Or i64 %109, %110
tmp_dword2!18 = store i64 %107, i64 tmp_dword2!13
br label %bb6
bb25:
%153 = i64 Lshr i64 %115, 40
%154 = Extract i24 of i64 %153 <23, 0>
%156 = Zext i24 %154 to i64
%157 = i64 And i64 %121, -16777216
%158 = i64 Shl i64 %156, 0
%155 = i64 Or i64 %157, %158
tmp_dword1!7 = store i64 %155, i64 tmp_dword1!3
%159 = i64 Lshr i64 %115, 0
%160 = Extract i40 of i64 %159 <39, 0>
%162 = Zext i40 %160 to i64
%163 = i64 And i64 %122, 16777215
%164 = i64 Shl i64 %162, 24
%161 = i64 Or i64 %163, %164
tmp_dword2!7 = store i64 %161, i64 tmp_dword2!3
br label %bb20
bb26:
%165 = Extract i3 of i64 %113 <2, 0>
%166 = i1 Eq i3 %165, -4
br i1 %166, label %bb27, label %bb28
bb27:
%167 = i64 Lshr i64 %115, 32
%168 = Extract i32 of i64 %167 <31, 0>
%170 = Zext i32 %168 to i64
%171 = i64 And i64 %121, -4294967296
%172 = i64 Shl i64 %170, 0
%169 = i64 Or i64 %171, %172
tmp_dword1!8 = store i64 %169, i64 tmp_dword1!3
%173 = i64 Lshr i64 %115, 0
%174 = Extract i32 of i64 %173 <31, 0>
%176 = Zext i32 %174 to i64
%177 = i64 And i64 %122, 4294967295
%178 = i64 Shl i64 %176, 32
%175 = i64 Or i64 %177, %178
tmp_dword2!8 = store i64 %175, i64 tmp_dword2!3
br label %bb20
bb28:
%179 = Extract i3 of i64 %113 <2, 0>
%180 = i1 Eq i3 %179, -3
br i1 %180, label %bb29, label %bb30
bb29:
%181 = i64 Lshr i64 %115, 24
%182 = Extract i40 of i64 %181 <39, 0>
%184 = Zext i40 %182 to i64
%185 = i64 And i64 %121, -1099511627776
%186 = i64 Shl i64 %184, 0
%183 = i64 Or i64 %185, %186
tmp_dword1!9 = store i64 %183, i64 tmp_dword1!3
%187 = i64 Lshr i64 %115, 0
%188 = Extract i24 of i64 %187 <23, 0>
%190 = Zext i24 %188 to i64
%191 = i64 And i64 %122, 1099511627775
%192 = i64 Shl i64 %190, 40
%189 = i64 Or i64 %191, %192
tmp_dword2!9 = store i64 %189, i64 tmp_dword2!3
br label %bb20
bb30:
%193 = Extract i3 of i64 %113 <2, 0>
%194 = i1 Eq i3 %193, -2
br i1 %194, label %bb33, label %bb34
bb31:
%226 = i64 Add i64 PC!9, 104
PC!16 = store i64 %226, i64 PC!10
br label %bb35
bb32:
br label %bb35
bb33:
%195 = i64 Lshr i64 %115, 16
%196 = Extract i48 of i64 %195 <47, 0>
%198 = Zext i48 %196 to i64
%199 = i64 And i64 %121, -281474976710656
%200 = i64 Shl i64 %198, 0
%197 = i64 Or i64 %199, %200
tmp_dword1!11 = store i64 %197, i64 tmp_dword1!3
%201 = i64 Lshr i64 %115, 0
%202 = Extract i16 of i64 %201 <15, 0>
%204 = Zext i16 %202 to i64
%205 = i64 And i64 %122, 281474976710655
%206 = i64 Shl i64 %204, 48
%203 = i64 Or i64 %205, %206
tmp_dword2!11 = store i64 %203, i64 tmp_dword2!3
br label %bb20
bb34:
%207 = i64 Lshr i64 %115, 8
%208 = Extract i56 of i64 %207 <55, 0>
%210 = Zext i56 %208 to i64
%211 = i64 And i64 %121, -72057594037927936
%212 = i64 Shl i64 %210, 0
%209 = i64 Or i64 %211, %212
tmp_dword1!10 = store i64 %209, i64 tmp_dword1!3
%213 = i64 Lshr i64 %115, 0
%214 = Extract i8 of i64 %213 <7, 0>
%216 = Zext i8 %214 to i64
%217 = i64 And i64 %122, 72057594037927935
%218 = i64 Shl i64 %216, 56
%215 = i64 Or i64 %217, %218
tmp_dword2!10 = store i64 %215, i64 tmp_dword2!3
br label %bb20
bb35:
PC!11 = phi ite %225 %226 PC!9
%223 = i1 Eq i64 PC!11, PC!9
br i1 %223, label %bb36, label %bb37
bb36:
%224 = i64 Add i64 PC!11, 4
PC!15 = store i64 %224, i64 PC!11
br label %bb38
bb37:
br label %bb38
bb38:
PC!12 = phi ite %225 %226 %224
PC!13 = store i64 PC!12, i64 PC!12
PC!14 = store i64 PC!12, i64 PC!13
ret void

COMPILE
bb_1 func void []
bb0:
call void insn_5.action %0 ()
call void insn_6.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_1 func void []
bb0:
br label %bb6
bb1:
br label %bb15
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 4 to i64
%11 = load i64, [32, i64] XREG[0]
%10 = i64 Add i64 %11, %9
store i64 %10, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb8:
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%24 = load i64, [32, i64] XREG[15]
%25 = load i64, [32, i64] XREG[11]
%19 = i1 Uge i64 %24, %25
br i1 %19, label %bb9, label %bb10
bb9:
%20 = Sext i12 50 to i64
%21 = i64 Shl i64 %20, 1
%22 = load i64, i64 PC
%23 = i64 Add i64 %22, %21
store i64 %23, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb12, label %bb13
bb12:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb14
bb13:
br label %bb14
bb14:
%12 = load i64, i64 PC
store i64 %12, i64 PC
br label %bb7
bb15:
br label %bb8

propagate
bb_1 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, 4
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%21 = load i64, [32, i64] XREG[15]
%22 = load i64, [32, i64] XREG[11]
%18 = i1 Uge i64 %21, %22
br i1 %18, label %bb9, label %bb10
bb9:
%19 = load i64, i64 PC
%20 = i64 Add i64 %19, 100
store i64 %20, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb12, label %bb13
bb12:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb14
bb13:
br label %bb14
bb14:
%11 = load i64, i64 PC
store i64 %11, i64 PC
br label %bb15
bb15:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_1 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, 4
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%21 = load i64, [32, i64] XREG[15]
%22 = load i64, [32, i64] XREG[11]
%18 = i1 Uge i64 %21, %22
br i1 %18, label %bb4, label %bb5
bb4:
%19 = load i64, i64 PC
%20 = i64 Add i64 %19, 100
store i64 %20, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb7, label %bb8
bb7:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb9
bb8:
br label %bb9
bb9:
%11 = load i64, i64 PC
store i64 %11, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, 4
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!10 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %5 PC!10 PC!1
%2 = load i64, i64 PC!2
PC!3 = store i64 %2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%12 = load i64, i64 PC!3
prev_pc!3 = store i64 %12, i64 prev_pc!2
%21 = load i64, [32, i64] XREG!4[15]
%22 = load i64, [32, i64] XREG!4[11]
%18 = i1 Uge i64 %21, %22
br i1 %18, label %bb4, label %bb5
bb4:
%19 = load i64, i64 PC!3
%20 = i64 Add i64 %19, 100
PC!4 = store i64 %20, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %18 PC!4 PC!3
%13 = load i64, i64 PC!5
%15 = load i64, i64 prev_pc!3
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb7, label %bb8
bb7:
%16 = load i64, i64 PC!5
%17 = i64 Add i64 %16, 4
PC!6 = store i64 %17, i64 PC!5
br label %bb9
bb8:
br label %bb9
bb9:
PC!7 = phi ite %14 PC!6 PC!5
%11 = load i64, i64 PC!7
PC!8 = store i64 %11, i64 PC!7
%1 = load i64, i64 PC!8
PC!9 = store i64 %1, i64 PC!8
ret void

SSA forward
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 4
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!10 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%8 = load i64, [32, i64] XREG!4[15]
%9 = load i64, [32, i64] XREG!4[11]
%6 = i1 Uge i64 %8, %9
br i1 %6, label %bb3, label %bb4
bb3:
%7 = i64 Add i64 PC!2, 100
PC!4 = store i64 %7, i64 PC!3
br label %bb5
bb4:
br label %bb5
bb5:
PC!5 = phi ite %6 %7 PC!2
%4 = i1 Eq i64 PC!5, PC!2
br i1 %4, label %bb6, label %bb7
bb6:
%5 = i64 Add i64 PC!5, 4
PC!6 = store i64 %5, i64 PC!5
br label %bb8
bb7:
br label %bb8
bb8:
PC!7 = phi ite %4 %5 PC!5
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

Nested SCCP
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 4
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!10 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%8 = load i64, [32, i64] XREG!4[15]
%9 = load i64, [32, i64] XREG!4[11]
%6 = i1 Uge i64 %8, %9
br i1 %6, label %bb3, label %bb4
bb3:
%7 = i64 Add i64 PC!2, 100
PC!4 = store i64 %7, i64 PC!3
br label %bb5
bb4:
br label %bb5
bb5:
PC!5 = phi ite %6 %7 PC!2
%4 = i1 Eq i64 PC!5, PC!2
br i1 %4, label %bb6, label %bb7
bb6:
%5 = i64 Add i64 PC!5, 4
PC!6 = store i64 %5, i64 PC!5
br label %bb8
bb7:
br label %bb8
bb8:
PC!7 = phi ite %6 %7 %5
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

SCCP forward
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 4
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!10 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%8 = load i64, [32, i64] XREG!4[15]
%9 = load i64, [32, i64] XREG!4[11]
%6 = i1 Uge i64 %8, %9
br i1 %6, label %bb3, label %bb4
bb3:
%7 = i64 Add i64 PC!2, 100
PC!4 = store i64 %7, i64 PC!3
br label %bb5
bb4:
br label %bb5
bb5:
PC!5 = phi ite %6 %7 PC!2
%4 = i1 Eq i64 PC!5, PC!2
br i1 %4, label %bb6, label %bb7
bb6:
%5 = i64 Add i64 PC!5, 4
PC!6 = store i64 %5, i64 PC!5
br label %bb8
bb7:
br label %bb8
bb8:
PC!7 = phi ite %6 %7 %5
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

cherry
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 4
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!10 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%8 = load i64, [32, i64] XREG!4[15]
%9 = load i64, [32, i64] XREG!4[11]
%6 = i1 Uge i64 %8, %9
br i1 %6, label %bb1, label %bb2
bb1:
%7 = i64 Add i64 PC!2, 100
PC!4 = store i64 %7, i64 PC!3
br label %bb3
bb2:
br label %bb3
bb3:
PC!5 = phi ite %6 %7 PC!2
%4 = i1 Eq i64 PC!5, PC!2
br i1 %4, label %bb4, label %bb5
bb4:
%5 = i64 Add i64 PC!5, 4
PC!6 = store i64 %5, i64 PC!5
br label %bb6
bb5:
br label %bb6
bb6:
PC!7 = phi ite %6 %7 %5
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 4
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!10 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%8 = load i64, [32, i64] XREG!4[15]
%9 = load i64, [32, i64] XREG!4[11]
%6 = i1 Uge i64 %8, %9
br i1 %6, label %bb1, label %bb2
bb1:
%7 = i64 Add i64 PC!2, 100
PC!4 = store i64 %7, i64 PC!3
br label %bb3
bb2:
br label %bb3
bb3:
PC!5 = phi ite %6 %7 PC!2
%4 = i1 Eq i64 PC!5, PC!2
br i1 %4, label %bb4, label %bb5
bb4:
%5 = i64 Add i64 PC!5, 4
PC!6 = store i64 %5, i64 PC!5
br label %bb6
bb5:
br label %bb6
bb6:
PC!7 = phi ite %6 %7 %5
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

COMPILE
bb_2 func void []
bb0:
call void insn_7.action %0 ()
call void insn_8.action %0 ()
call void insn_9.action %0 ()
call void insn_10.action %0 ()
call void insn_11.action %0 ()
call void insn_12.action %0 ()
call void insn_13.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_2 func void []
bb0:
br label %bb6
bb1:
br label %bb12
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 4091 to i64
%11 = load i64, [32, i64] XREG[11]
%10 = i64 Add i64 %11, %9
store i64 %10, [32, i64] XREG[13]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
br label %bb18
bb8:
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%19 = Sext i12 4094 to i64
%21 = load i64, [32, i64] XREG[13]
%20 = i64 And i64 %21, %19
store i64 %20, [32, i64] XREG[13]
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb9, label %bb10
bb9:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%12 = load i64, i64 PC
store i64 %12, i64 PC
br label %bb7
bb12:
br label %bb8
bb13:
br label %bb24
bb14:
store i64 0, [32, i64] XREG[0]
%23 = load i64, i64 PC
store i64 %23, i64 prev_pc
%29 = Sext i12 16 to i64
%31 = load i64, [32, i64] XREG[10]
%30 = i64 Add i64 %31, %29
store i64 %30, [32, i64] XREG[12]
%24 = load i64, i64 PC
%26 = load i64, i64 prev_pc
%25 = i1 Eq i64 %24, %26
br i1 %25, label %bb15, label %bb16
bb15:
%27 = load i64, i64 PC
%28 = i64 Add i64 %27, 4
store i64 %28, i64 PC
br label %bb17
bb16:
br label %bb17
bb17:
%22 = load i64, i64 PC
store i64 %22, i64 PC
br label %bb13
bb18:
br label %bb14
bb19:
br label %bb30
bb20:
store i64 0, [32, i64] XREG[0]
%33 = load i64, i64 PC
store i64 %33, i64 prev_pc
%39 = Sext i12 4 to i64
%41 = load i64, [32, i64] XREG[13]
%40 = i64 Add i64 %41, %39
store i64 %40, [32, i64] XREG[13]
%34 = load i64, i64 PC
%36 = load i64, i64 prev_pc
%35 = i1 Eq i64 %34, %36
br i1 %35, label %bb21, label %bb22
bb21:
%37 = load i64, i64 PC
%38 = i64 Add i64 %37, 4
store i64 %38, i64 PC
br label %bb23
bb22:
br label %bb23
bb23:
%32 = load i64, i64 PC
store i64 %32, i64 PC
br label %bb19
bb24:
br label %bb20
bb25:
br label %bb36
bb26:
store i64 0, [32, i64] XREG[0]
%43 = load i64, i64 PC
store i64 %43, i64 prev_pc
%49 = Sext i12 1 to i64
%51 = load i64, [32, i64] XREG[0]
%50 = i64 Add i64 %51, %49
store i64 %50, [32, i64] XREG[14]
%44 = load i64, i64 PC
%46 = load i64, i64 prev_pc
%45 = i1 Eq i64 %44, %46
br i1 %45, label %bb27, label %bb28
bb27:
%47 = load i64, i64 PC
%48 = i64 Add i64 %47, 4
store i64 %48, i64 PC
br label %bb29
bb28:
br label %bb29
bb29:
%42 = load i64, i64 PC
store i64 %42, i64 PC
br label %bb25
bb30:
br label %bb26
bb31:
br label %bb42
bb32:
store i64 0, [32, i64] XREG[0]
%53 = load i64, i64 PC
store i64 %53, i64 prev_pc
%59 = Sext i12 1 to i64
%61 = load i64, [32, i64] XREG[0]
%60 = i64 Add i64 %61, %59
store i64 %60, [32, i64] XREG[15]
%54 = load i64, i64 PC
%56 = load i64, i64 prev_pc
%55 = i1 Eq i64 %54, %56
br i1 %55, label %bb33, label %bb34
bb33:
%57 = load i64, i64 PC
%58 = i64 Add i64 %57, 4
store i64 %58, i64 PC
br label %bb35
bb34:
br label %bb35
bb35:
%52 = load i64, i64 PC
store i64 %52, i64 PC
br label %bb31
bb36:
br label %bb32
bb37:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb38:
store i64 0, [32, i64] XREG[0]
%63 = load i64, i64 PC
store i64 %63, i64 prev_pc
%69 = Sext i12 2 to i64
%71 = load i64, [32, i64] XREG[0]
%70 = i64 Add i64 %71, %69
store i64 %70, [32, i64] XREG[16]
%64 = load i64, i64 PC
%66 = load i64, i64 prev_pc
%65 = i1 Eq i64 %64, %66
br i1 %65, label %bb39, label %bb40
bb39:
%67 = load i64, i64 PC
%68 = i64 Add i64 %67, 4
store i64 %68, i64 PC
br label %bb41
bb40:
br label %bb41
bb41:
%62 = load i64, i64 PC
store i64 %62, i64 PC
br label %bb37
bb42:
br label %bb38

propagate
bb_2 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[11]
%9 = i64 Add i64 %10, -5
store i64 %9, [32, i64] XREG[13]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%19 = load i64, [32, i64] XREG[13]
%18 = i64 And i64 %19, -2
store i64 %18, [32, i64] XREG[13]
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb9:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%11 = load i64, i64 PC
store i64 %11, i64 PC
br label %bb12
bb12:
br label %bb13
bb13:
br label %bb14
bb14:
store i64 0, [32, i64] XREG[0]
%21 = load i64, i64 PC
store i64 %21, i64 prev_pc
%28 = load i64, [32, i64] XREG[10]
%27 = i64 Add i64 %28, 16
store i64 %27, [32, i64] XREG[12]
%22 = load i64, i64 PC
%24 = load i64, i64 prev_pc
%23 = i1 Eq i64 %22, %24
br i1 %23, label %bb15, label %bb16
bb15:
%25 = load i64, i64 PC
%26 = i64 Add i64 %25, 4
store i64 %26, i64 PC
br label %bb17
bb16:
br label %bb17
bb17:
%20 = load i64, i64 PC
store i64 %20, i64 PC
br label %bb18
bb18:
br label %bb19
bb19:
br label %bb20
bb20:
store i64 0, [32, i64] XREG[0]
%30 = load i64, i64 PC
store i64 %30, i64 prev_pc
%37 = load i64, [32, i64] XREG[13]
%36 = i64 Add i64 %37, 4
store i64 %36, [32, i64] XREG[13]
%31 = load i64, i64 PC
%33 = load i64, i64 prev_pc
%32 = i1 Eq i64 %31, %33
br i1 %32, label %bb21, label %bb22
bb21:
%34 = load i64, i64 PC
%35 = i64 Add i64 %34, 4
store i64 %35, i64 PC
br label %bb23
bb22:
br label %bb23
bb23:
%29 = load i64, i64 PC
store i64 %29, i64 PC
br label %bb24
bb24:
br label %bb25
bb25:
br label %bb26
bb26:
store i64 0, [32, i64] XREG[0]
%39 = load i64, i64 PC
store i64 %39, i64 prev_pc
%46 = load i64, [32, i64] XREG[0]
%45 = i64 Add i64 %46, 1
store i64 %45, [32, i64] XREG[14]
%40 = load i64, i64 PC
%42 = load i64, i64 prev_pc
%41 = i1 Eq i64 %40, %42
br i1 %41, label %bb27, label %bb28
bb27:
%43 = load i64, i64 PC
%44 = i64 Add i64 %43, 4
store i64 %44, i64 PC
br label %bb29
bb28:
br label %bb29
bb29:
%38 = load i64, i64 PC
store i64 %38, i64 PC
br label %bb30
bb30:
br label %bb31
bb31:
br label %bb32
bb32:
store i64 0, [32, i64] XREG[0]
%48 = load i64, i64 PC
store i64 %48, i64 prev_pc
%55 = load i64, [32, i64] XREG[0]
%54 = i64 Add i64 %55, 1
store i64 %54, [32, i64] XREG[15]
%49 = load i64, i64 PC
%51 = load i64, i64 prev_pc
%50 = i1 Eq i64 %49, %51
br i1 %50, label %bb33, label %bb34
bb33:
%52 = load i64, i64 PC
%53 = i64 Add i64 %52, 4
store i64 %53, i64 PC
br label %bb35
bb34:
br label %bb35
bb35:
%47 = load i64, i64 PC
store i64 %47, i64 PC
br label %bb36
bb36:
br label %bb37
bb37:
br label %bb38
bb38:
store i64 0, [32, i64] XREG[0]
%57 = load i64, i64 PC
store i64 %57, i64 prev_pc
%64 = load i64, [32, i64] XREG[0]
%63 = i64 Add i64 %64, 2
store i64 %63, [32, i64] XREG[16]
%58 = load i64, i64 PC
%60 = load i64, i64 prev_pc
%59 = i1 Eq i64 %58, %60
br i1 %59, label %bb39, label %bb40
bb39:
%61 = load i64, i64 PC
%62 = i64 Add i64 %61, 4
store i64 %62, i64 PC
br label %bb41
bb40:
br label %bb41
bb41:
%56 = load i64, i64 PC
store i64 %56, i64 PC
br label %bb42
bb42:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_2 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[11]
%9 = i64 Add i64 %10, -5
store i64 %9, [32, i64] XREG[13]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%19 = load i64, [32, i64] XREG[13]
%18 = i64 And i64 %19, -2
store i64 %18, [32, i64] XREG[13]
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%11 = load i64, i64 PC
store i64 %11, i64 PC
store i64 0, [32, i64] XREG[0]
%21 = load i64, i64 PC
store i64 %21, i64 prev_pc
%28 = load i64, [32, i64] XREG[10]
%27 = i64 Add i64 %28, 16
store i64 %27, [32, i64] XREG[12]
%22 = load i64, i64 PC
%24 = load i64, i64 prev_pc
%23 = i1 Eq i64 %22, %24
br i1 %23, label %bb7, label %bb8
bb7:
%25 = load i64, i64 PC
%26 = i64 Add i64 %25, 4
store i64 %26, i64 PC
br label %bb9
bb8:
br label %bb9
bb9:
%20 = load i64, i64 PC
store i64 %20, i64 PC
store i64 0, [32, i64] XREG[0]
%30 = load i64, i64 PC
store i64 %30, i64 prev_pc
%37 = load i64, [32, i64] XREG[13]
%36 = i64 Add i64 %37, 4
store i64 %36, [32, i64] XREG[13]
%31 = load i64, i64 PC
%33 = load i64, i64 prev_pc
%32 = i1 Eq i64 %31, %33
br i1 %32, label %bb10, label %bb11
bb10:
%34 = load i64, i64 PC
%35 = i64 Add i64 %34, 4
store i64 %35, i64 PC
br label %bb12
bb11:
br label %bb12
bb12:
%29 = load i64, i64 PC
store i64 %29, i64 PC
store i64 0, [32, i64] XREG[0]
%39 = load i64, i64 PC
store i64 %39, i64 prev_pc
%46 = load i64, [32, i64] XREG[0]
%45 = i64 Add i64 %46, 1
store i64 %45, [32, i64] XREG[14]
%40 = load i64, i64 PC
%42 = load i64, i64 prev_pc
%41 = i1 Eq i64 %40, %42
br i1 %41, label %bb13, label %bb14
bb13:
%43 = load i64, i64 PC
%44 = i64 Add i64 %43, 4
store i64 %44, i64 PC
br label %bb15
bb14:
br label %bb15
bb15:
%38 = load i64, i64 PC
store i64 %38, i64 PC
store i64 0, [32, i64] XREG[0]
%48 = load i64, i64 PC
store i64 %48, i64 prev_pc
%55 = load i64, [32, i64] XREG[0]
%54 = i64 Add i64 %55, 1
store i64 %54, [32, i64] XREG[15]
%49 = load i64, i64 PC
%51 = load i64, i64 prev_pc
%50 = i1 Eq i64 %49, %51
br i1 %50, label %bb16, label %bb17
bb16:
%52 = load i64, i64 PC
%53 = i64 Add i64 %52, 4
store i64 %53, i64 PC
br label %bb18
bb17:
br label %bb18
bb18:
%47 = load i64, i64 PC
store i64 %47, i64 PC
store i64 0, [32, i64] XREG[0]
%57 = load i64, i64 PC
store i64 %57, i64 prev_pc
%64 = load i64, [32, i64] XREG[0]
%63 = i64 Add i64 %64, 2
store i64 %63, [32, i64] XREG[16]
%58 = load i64, i64 PC
%60 = load i64, i64 prev_pc
%59 = i1 Eq i64 %58, %60
br i1 %59, label %bb19, label %bb20
bb19:
%61 = load i64, i64 PC
%62 = i64 Add i64 %61, 4
store i64 %62, i64 PC
br label %bb21
bb20:
br label %bb21
bb21:
%56 = load i64, i64 PC
store i64 %56, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%10 = load i64, [32, i64] XREG!2[11]
%9 = i64 Add i64 %10, -5
XREG!3 = store i64 %9, [32, i64] XREG!2[13]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!2 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %5 PC!2 PC!1
%2 = load i64, i64 PC!3
PC!4 = store i64 %2, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%12 = load i64, i64 PC!4
prev_pc!3 = store i64 %12, i64 prev_pc!2
%19 = load i64, [32, i64] XREG!4[13]
%18 = i64 And i64 %19, -2
XREG!5 = store i64 %18, [32, i64] XREG!4[13]
%13 = load i64, i64 PC!4
%15 = load i64, i64 prev_pc!3
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC!4
%17 = i64 Add i64 %16, 4
PC!23 = store i64 %17, i64 PC!4
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %14 PC!23 PC!4
%11 = load i64, i64 PC!5
PC!6 = store i64 %11, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
%21 = load i64, i64 PC!6
prev_pc!4 = store i64 %21, i64 prev_pc!3
%28 = load i64, [32, i64] XREG!6[10]
%27 = i64 Add i64 %28, 16
XREG!7 = store i64 %27, [32, i64] XREG!6[12]
%22 = load i64, i64 PC!6
%24 = load i64, i64 prev_pc!4
%23 = i1 Eq i64 %22, %24
br i1 %23, label %bb7, label %bb8
bb7:
%25 = load i64, i64 PC!6
%26 = i64 Add i64 %25, 4
PC!7 = store i64 %26, i64 PC!6
br label %bb9
bb8:
br label %bb9
bb9:
PC!8 = phi ite %23 PC!7 PC!6
%20 = load i64, i64 PC!8
PC!9 = store i64 %20, i64 PC!8
XREG!8 = store i64 0, [32, i64] XREG!7[0]
%30 = load i64, i64 PC!9
prev_pc!5 = store i64 %30, i64 prev_pc!4
%37 = load i64, [32, i64] XREG!8[13]
%36 = i64 Add i64 %37, 4
XREG!9 = store i64 %36, [32, i64] XREG!8[13]
%31 = load i64, i64 PC!9
%33 = load i64, i64 prev_pc!5
%32 = i1 Eq i64 %31, %33
br i1 %32, label %bb10, label %bb11
bb10:
%34 = load i64, i64 PC!9
%35 = i64 Add i64 %34, 4
PC!22 = store i64 %35, i64 PC!9
br label %bb12
bb11:
br label %bb12
bb12:
PC!10 = phi ite %32 PC!22 PC!9
%29 = load i64, i64 PC!10
PC!11 = store i64 %29, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
%39 = load i64, i64 PC!11
prev_pc!6 = store i64 %39, i64 prev_pc!5
%46 = load i64, [32, i64] XREG!10[0]
%45 = i64 Add i64 %46, 1
XREG!11 = store i64 %45, [32, i64] XREG!10[14]
%40 = load i64, i64 PC!11
%42 = load i64, i64 prev_pc!6
%41 = i1 Eq i64 %40, %42
br i1 %41, label %bb13, label %bb14
bb13:
%43 = load i64, i64 PC!11
%44 = i64 Add i64 %43, 4
PC!12 = store i64 %44, i64 PC!11
br label %bb15
bb14:
br label %bb15
bb15:
PC!13 = phi ite %41 PC!12 PC!11
%38 = load i64, i64 PC!13
PC!14 = store i64 %38, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
%48 = load i64, i64 PC!14
prev_pc!7 = store i64 %48, i64 prev_pc!6
%55 = load i64, [32, i64] XREG!12[0]
%54 = i64 Add i64 %55, 1
XREG!13 = store i64 %54, [32, i64] XREG!12[15]
%49 = load i64, i64 PC!14
%51 = load i64, i64 prev_pc!7
%50 = i1 Eq i64 %49, %51
br i1 %50, label %bb16, label %bb17
bb16:
%52 = load i64, i64 PC!14
%53 = i64 Add i64 %52, 4
PC!21 = store i64 %53, i64 PC!14
br label %bb18
bb17:
br label %bb18
bb18:
PC!15 = phi ite %50 PC!21 PC!14
%47 = load i64, i64 PC!15
PC!16 = store i64 %47, i64 PC!15
XREG!14 = store i64 0, [32, i64] XREG!13[0]
%57 = load i64, i64 PC!16
prev_pc!8 = store i64 %57, i64 prev_pc!7
%64 = load i64, [32, i64] XREG!14[0]
%63 = i64 Add i64 %64, 2
XREG!15 = store i64 %63, [32, i64] XREG!14[16]
%58 = load i64, i64 PC!16
%60 = load i64, i64 prev_pc!8
%59 = i1 Eq i64 %58, %60
br i1 %59, label %bb19, label %bb20
bb19:
%61 = load i64, i64 PC!16
%62 = i64 Add i64 %61, 4
PC!20 = store i64 %62, i64 PC!16
br label %bb21
bb20:
br label %bb21
bb21:
PC!17 = phi ite %59 PC!20 PC!16
%56 = load i64, i64 PC!17
PC!18 = store i64 %56, i64 PC!17
%1 = load i64, i64 PC!18
PC!19 = store i64 %1, i64 PC!18
ret void

SSA forward
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[11]
%2 = i64 Add i64 %3, -5
XREG!3 = store i64 %2, [32, i64] XREG!2[13]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[13]
%5 = i64 And i64 %6, -2
XREG!5 = store i64 %5, [32, i64] XREG!4[13]
br label %bb3
bb3:
%4 = i64 Add i64 PC!3, 4
PC!23 = store i64 %4, i64 PC!4
br label %bb4
bb4:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%9 = load i64, [32, i64] XREG!6[10]
%8 = i64 Add i64 %9, 16
XREG!7 = store i64 %8, [32, i64] XREG!6[12]
br label %bb5
bb5:
%7 = i64 Add i64 PC!5, 4
PC!7 = store i64 %7, i64 PC!6
br label %bb6
bb6:
store i64 %7, i64 PC!8
PC!9 = store i64 PC!8, i64 PC!8
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!8, i64 prev_pc!4
%12 = load i64, [32, i64] XREG!8[13]
%11 = i64 Add i64 %12, 4
XREG!9 = store i64 %11, [32, i64] XREG!8[13]
br label %bb7
bb7:
%10 = i64 Add i64 PC!8, 4
PC!22 = store i64 %10, i64 PC!9
br label %bb8
bb8:
store i64 %10, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%15 = load i64, [32, i64] XREG!10[0]
%14 = i64 Add i64 %15, 1
XREG!11 = store i64 %14, [32, i64] XREG!10[14]
br label %bb9
bb9:
%13 = i64 Add i64 PC!10, 4
PC!12 = store i64 %13, i64 PC!11
br label %bb10
bb10:
store i64 %13, i64 PC!13
PC!14 = store i64 PC!13, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!13, i64 prev_pc!6
%18 = load i64, [32, i64] XREG!12[0]
%17 = i64 Add i64 %18, 1
XREG!13 = store i64 %17, [32, i64] XREG!12[15]
br label %bb11
bb11:
%16 = i64 Add i64 PC!13, 4
PC!21 = store i64 %16, i64 PC!14
br label %bb12
bb12:
store i64 %16, i64 PC!15
PC!16 = store i64 PC!15, i64 PC!15
XREG!14 = store i64 0, [32, i64] XREG!13[0]
prev_pc!8 = store i64 PC!15, i64 prev_pc!7
%21 = load i64, [32, i64] XREG!14[0]
%20 = i64 Add i64 %21, 2
XREG!15 = store i64 %20, [32, i64] XREG!14[16]
br label %bb13
bb13:
%19 = i64 Add i64 PC!15, 4
PC!20 = store i64 %19, i64 PC!16
br label %bb14
bb14:
store i64 %19, i64 PC!17
PC!18 = store i64 PC!17, i64 PC!17
PC!19 = store i64 PC!17, i64 PC!18
ret void

Nested SCCP
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[11]
%2 = i64 Add i64 %3, -5
XREG!3 = store i64 %2, [32, i64] XREG!2[13]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[13]
%5 = i64 And i64 %6, -2
XREG!5 = store i64 %5, [32, i64] XREG!4[13]
br label %bb3
bb3:
%4 = i64 Add i64 PC!3, 4
PC!23 = store i64 %4, i64 PC!4
br label %bb4
bb4:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%9 = load i64, [32, i64] XREG!6[10]
%8 = i64 Add i64 %9, 16
XREG!7 = store i64 %8, [32, i64] XREG!6[12]
br label %bb5
bb5:
%7 = i64 Add i64 PC!5, 4
PC!7 = store i64 %7, i64 PC!6
br label %bb6
bb6:
store i64 %7, i64 PC!8
PC!9 = store i64 PC!8, i64 PC!8
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!8, i64 prev_pc!4
%12 = load i64, [32, i64] XREG!8[13]
%11 = i64 Add i64 %12, 4
XREG!9 = store i64 %11, [32, i64] XREG!8[13]
br label %bb7
bb7:
%10 = i64 Add i64 PC!8, 4
PC!22 = store i64 %10, i64 PC!9
br label %bb8
bb8:
store i64 %10, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%15 = load i64, [32, i64] XREG!10[0]
%14 = i64 Add i64 %15, 1
XREG!11 = store i64 %14, [32, i64] XREG!10[14]
br label %bb9
bb9:
%13 = i64 Add i64 PC!10, 4
PC!12 = store i64 %13, i64 PC!11
br label %bb10
bb10:
store i64 %13, i64 PC!13
PC!14 = store i64 PC!13, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!13, i64 prev_pc!6
%18 = load i64, [32, i64] XREG!12[0]
%17 = i64 Add i64 %18, 1
XREG!13 = store i64 %17, [32, i64] XREG!12[15]
br label %bb11
bb11:
%16 = i64 Add i64 PC!13, 4
PC!21 = store i64 %16, i64 PC!14
br label %bb12
bb12:
store i64 %16, i64 PC!15
PC!16 = store i64 PC!15, i64 PC!15
XREG!14 = store i64 0, [32, i64] XREG!13[0]
prev_pc!8 = store i64 PC!15, i64 prev_pc!7
%21 = load i64, [32, i64] XREG!14[0]
%20 = i64 Add i64 %21, 2
XREG!15 = store i64 %20, [32, i64] XREG!14[16]
br label %bb13
bb13:
%19 = i64 Add i64 PC!15, 4
PC!20 = store i64 %19, i64 PC!16
br label %bb14
bb14:
store i64 %19, i64 PC!17
PC!18 = store i64 PC!17, i64 PC!17
PC!19 = store i64 PC!17, i64 PC!18
ret void

SCCP forward
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[11]
%2 = i64 Add i64 %3, -5
XREG!3 = store i64 %2, [32, i64] XREG!2[13]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[13]
%5 = i64 And i64 %6, -2
XREG!5 = store i64 %5, [32, i64] XREG!4[13]
br label %bb3
bb3:
%4 = i64 Add i64 PC!3, 4
PC!23 = store i64 %4, i64 PC!4
br label %bb4
bb4:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%9 = load i64, [32, i64] XREG!6[10]
%8 = i64 Add i64 %9, 16
XREG!7 = store i64 %8, [32, i64] XREG!6[12]
br label %bb5
bb5:
%7 = i64 Add i64 PC!5, 4
PC!7 = store i64 %7, i64 PC!6
br label %bb6
bb6:
store i64 %7, i64 PC!8
PC!9 = store i64 PC!8, i64 PC!8
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!8, i64 prev_pc!4
%12 = load i64, [32, i64] XREG!8[13]
%11 = i64 Add i64 %12, 4
XREG!9 = store i64 %11, [32, i64] XREG!8[13]
br label %bb7
bb7:
%10 = i64 Add i64 PC!8, 4
PC!22 = store i64 %10, i64 PC!9
br label %bb8
bb8:
store i64 %10, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%15 = load i64, [32, i64] XREG!10[0]
%14 = i64 Add i64 %15, 1
XREG!11 = store i64 %14, [32, i64] XREG!10[14]
br label %bb9
bb9:
%13 = i64 Add i64 PC!10, 4
PC!12 = store i64 %13, i64 PC!11
br label %bb10
bb10:
store i64 %13, i64 PC!13
PC!14 = store i64 PC!13, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!13, i64 prev_pc!6
%18 = load i64, [32, i64] XREG!12[0]
%17 = i64 Add i64 %18, 1
XREG!13 = store i64 %17, [32, i64] XREG!12[15]
br label %bb11
bb11:
%16 = i64 Add i64 PC!13, 4
PC!21 = store i64 %16, i64 PC!14
br label %bb12
bb12:
store i64 %16, i64 PC!15
PC!16 = store i64 PC!15, i64 PC!15
XREG!14 = store i64 0, [32, i64] XREG!13[0]
prev_pc!8 = store i64 PC!15, i64 prev_pc!7
%21 = load i64, [32, i64] XREG!14[0]
%20 = i64 Add i64 %21, 2
XREG!15 = store i64 %20, [32, i64] XREG!14[16]
br label %bb13
bb13:
%19 = i64 Add i64 PC!15, 4
PC!20 = store i64 %19, i64 PC!16
br label %bb14
bb14:
store i64 %19, i64 PC!17
PC!18 = store i64 PC!17, i64 PC!17
PC!19 = store i64 PC!17, i64 PC!18
ret void

cherry
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[11]
%2 = i64 Add i64 %3, -5
XREG!3 = store i64 %2, [32, i64] XREG!2[13]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[13]
%5 = i64 And i64 %6, -2
XREG!5 = store i64 %5, [32, i64] XREG!4[13]
%4 = i64 Add i64 PC!3, 4
PC!23 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%9 = load i64, [32, i64] XREG!6[10]
%8 = i64 Add i64 %9, 16
XREG!7 = store i64 %8, [32, i64] XREG!6[12]
%7 = i64 Add i64 PC!5, 4
PC!7 = store i64 %7, i64 PC!6
store i64 %7, i64 PC!8
PC!9 = store i64 PC!8, i64 PC!8
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!8, i64 prev_pc!4
%12 = load i64, [32, i64] XREG!8[13]
%11 = i64 Add i64 %12, 4
XREG!9 = store i64 %11, [32, i64] XREG!8[13]
%10 = i64 Add i64 PC!8, 4
PC!22 = store i64 %10, i64 PC!9
store i64 %10, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%15 = load i64, [32, i64] XREG!10[0]
%14 = i64 Add i64 %15, 1
XREG!11 = store i64 %14, [32, i64] XREG!10[14]
%13 = i64 Add i64 PC!10, 4
PC!12 = store i64 %13, i64 PC!11
store i64 %13, i64 PC!13
PC!14 = store i64 PC!13, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!13, i64 prev_pc!6
%18 = load i64, [32, i64] XREG!12[0]
%17 = i64 Add i64 %18, 1
XREG!13 = store i64 %17, [32, i64] XREG!12[15]
%16 = i64 Add i64 PC!13, 4
PC!21 = store i64 %16, i64 PC!14
store i64 %16, i64 PC!15
PC!16 = store i64 PC!15, i64 PC!15
XREG!14 = store i64 0, [32, i64] XREG!13[0]
prev_pc!8 = store i64 PC!15, i64 prev_pc!7
%21 = load i64, [32, i64] XREG!14[0]
%20 = i64 Add i64 %21, 2
XREG!15 = store i64 %20, [32, i64] XREG!14[16]
%19 = i64 Add i64 PC!15, 4
PC!20 = store i64 %19, i64 PC!16
store i64 %19, i64 PC!17
PC!18 = store i64 PC!17, i64 PC!17
PC!19 = store i64 PC!17, i64 PC!18
ret void

bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[11]
%2 = i64 Add i64 %3, -5
XREG!3 = store i64 %2, [32, i64] XREG!2[13]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[13]
%5 = i64 And i64 %6, -2
XREG!5 = store i64 %5, [32, i64] XREG!4[13]
%4 = i64 Add i64 PC!3, 4
PC!23 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%9 = load i64, [32, i64] XREG!6[10]
%8 = i64 Add i64 %9, 16
XREG!7 = store i64 %8, [32, i64] XREG!6[12]
%7 = i64 Add i64 PC!5, 4
PC!7 = store i64 %7, i64 PC!6
store i64 %7, i64 PC!8
PC!9 = store i64 PC!8, i64 PC!8
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!8, i64 prev_pc!4
%12 = load i64, [32, i64] XREG!8[13]
%11 = i64 Add i64 %12, 4
XREG!9 = store i64 %11, [32, i64] XREG!8[13]
%10 = i64 Add i64 PC!8, 4
PC!22 = store i64 %10, i64 PC!9
store i64 %10, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%15 = load i64, [32, i64] XREG!10[0]
%14 = i64 Add i64 %15, 1
XREG!11 = store i64 %14, [32, i64] XREG!10[14]
%13 = i64 Add i64 PC!10, 4
PC!12 = store i64 %13, i64 PC!11
store i64 %13, i64 PC!13
PC!14 = store i64 PC!13, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!13, i64 prev_pc!6
%18 = load i64, [32, i64] XREG!12[0]
%17 = i64 Add i64 %18, 1
XREG!13 = store i64 %17, [32, i64] XREG!12[15]
%16 = i64 Add i64 PC!13, 4
PC!21 = store i64 %16, i64 PC!14
store i64 %16, i64 PC!15
PC!16 = store i64 PC!15, i64 PC!15
XREG!14 = store i64 0, [32, i64] XREG!13[0]
prev_pc!8 = store i64 PC!15, i64 prev_pc!7
%21 = load i64, [32, i64] XREG!14[0]
%20 = i64 Add i64 %21, 2
XREG!15 = store i64 %20, [32, i64] XREG!14[16]
%19 = i64 Add i64 PC!15, 4
PC!20 = store i64 %19, i64 PC!16
store i64 %19, i64 PC!17
PC!18 = store i64 PC!17, i64 PC!17
PC!19 = store i64 PC!17, i64 PC!18
ret void

COMPILE
bb_3 func void []
bb0:
call void insn_14.action %0 ()
call void insn_15.action %0 ()
call void insn_16.action %0 ()
call void insn_17.action %0 ()
call void insn_18.action %0 ()
call void insn_19.action %0 ()
call void insn_20.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_3 func void []
bb0:
br label %bb6
bb1:
br label %bb12
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[15]
%11 = load i64, [32, i64] XREG[14]
%9 = i64 Add i64 %10, %11
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
br label %bb34
bb8:
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%20 = load i64, [32, i64] XREG[14]
%21 = load i64, [32, i64] XREG[15]
%19 = i64 Add i64 %20, %21
store i64 %19, [32, i64] XREG[14]
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb9, label %bb10
bb9:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%12 = load i64, i64 PC
store i64 %12, i64 PC
br label %bb7
bb12:
br label %bb8
bb13:
br label %bb56
bb14:
store i64 0, [32, i64] XREG[0]
%23 = load i64, i64 PC
store i64 %23, i64 prev_pc
%29 = Sext i12 0 to i64
%32 = load i64, [32, i64] XREG[12]
%30 = i64 Add i64 %32, %29
store i64 %30, i64 tmp_address
%31 = load i64, i64 tmp_address
%34 = load i64, [32, i64] XREG[15]
store i64 %34, i64 rs2_var
%33 = load i64, i64 rs2_var
%35 = i64 Lshr i64 %31, 3
%36 = Extract i53 of i64 %35 <52, 0>
store i53 %36, i53 mem_index
%37 = Extract i3 of i64 %31 <2, 0>
%38 = i1 Eq i3 %37, 0
br i1 %38, label %bb15, label %bb16
bb15:
%39 = load i53, i53 mem_index
store i64 %33, [9007199254740992, i64] MEM[%39]
br label %bb17
bb16:
%40 = load i53, i53 mem_index
%41 = i53 Add i53 %40, 1
%42 = load i64, [9007199254740992, i64] MEM[%41]
store i64 %42, i64 tmp_dword1
%43 = load i53, i53 mem_index
%44 = load i64, [9007199254740992, i64] MEM[%43]
store i64 %44, i64 tmp_dword2
%45 = Extract i3 of i64 %31 <2, 0>
%46 = i1 Eq i3 %45, 1
br i1 %46, label %bb18, label %bb19
bb17:
%24 = load i64, i64 PC
%26 = load i64, i64 prev_pc
%25 = i1 Eq i64 %24, %26
br i1 %25, label %bb23, label %bb24
bb18:
%47 = i64 Lshr i64 %33, 56
%48 = Extract i8 of i64 %47 <7, 0>
%50 = load i64, i64 tmp_dword1
%51 = Zext i8 %48 to i64
%52 = i64 And i64 %50, -256
%53 = i64 Shl i64 %51, 0
%49 = i64 Or i64 %52, %53
store i64 %49, i64 tmp_dword1
%54 = i64 Lshr i64 %33, 0
%55 = Extract i56 of i64 %54 <55, 0>
%57 = load i64, i64 tmp_dword2
%58 = Zext i56 %55 to i64
%59 = i64 And i64 %57, 255
%60 = i64 Shl i64 %58, 8
%56 = i64 Or i64 %59, %60
store i64 %56, i64 tmp_dword2
br label %bb20
bb19:
%61 = Extract i3 of i64 %31 <2, 0>
%62 = i1 Eq i3 %61, 2
br i1 %62, label %bb21, label %bb22
bb20:
%155 = load i64, i64 tmp_dword1
%156 = load i53, i53 mem_index
%157 = i53 Add i53 %156, 1
store i64 %155, [9007199254740992, i64] MEM[%157]
%158 = load i64, i64 tmp_dword2
%159 = load i53, i53 mem_index
store i64 %158, [9007199254740992, i64] MEM[%159]
br label %bb17
bb21:
%63 = i64 Lshr i64 %33, 48
%64 = Extract i16 of i64 %63 <15, 0>
%66 = load i64, i64 tmp_dword1
%67 = Zext i16 %64 to i64
%68 = i64 And i64 %66, -65536
%69 = i64 Shl i64 %67, 0
%65 = i64 Or i64 %68, %69
store i64 %65, i64 tmp_dword1
%70 = i64 Lshr i64 %33, 0
%71 = Extract i48 of i64 %70 <47, 0>
%73 = load i64, i64 tmp_dword2
%74 = Zext i48 %71 to i64
%75 = i64 And i64 %73, 65535
%76 = i64 Shl i64 %74, 16
%72 = i64 Or i64 %75, %76
store i64 %72, i64 tmp_dword2
br label %bb20
bb22:
%77 = Extract i3 of i64 %31 <2, 0>
%78 = i1 Eq i3 %77, 3
br i1 %78, label %bb25, label %bb26
bb23:
%27 = load i64, i64 PC
%28 = i64 Add i64 %27, 4
store i64 %28, i64 PC
br label %bb27
bb24:
br label %bb27
bb25:
%79 = i64 Lshr i64 %33, 40
%80 = Extract i24 of i64 %79 <23, 0>
%82 = load i64, i64 tmp_dword1
%83 = Zext i24 %80 to i64
%84 = i64 And i64 %82, -16777216
%85 = i64 Shl i64 %83, 0
%81 = i64 Or i64 %84, %85
store i64 %81, i64 tmp_dword1
%86 = i64 Lshr i64 %33, 0
%87 = Extract i40 of i64 %86 <39, 0>
%89 = load i64, i64 tmp_dword2
%90 = Zext i40 %87 to i64
%91 = i64 And i64 %89, 16777215
%92 = i64 Shl i64 %90, 24
%88 = i64 Or i64 %91, %92
store i64 %88, i64 tmp_dword2
br label %bb20
bb26:
%93 = Extract i3 of i64 %31 <2, 0>
%94 = i1 Eq i3 %93, -4
br i1 %94, label %bb28, label %bb29
bb27:
%22 = load i64, i64 PC
store i64 %22, i64 PC
br label %bb13
bb28:
%95 = i64 Lshr i64 %33, 32
%96 = Extract i32 of i64 %95 <31, 0>
%98 = load i64, i64 tmp_dword1
%99 = Zext i32 %96 to i64
%100 = i64 And i64 %98, -4294967296
%101 = i64 Shl i64 %99, 0
%97 = i64 Or i64 %100, %101
store i64 %97, i64 tmp_dword1
%102 = i64 Lshr i64 %33, 0
%103 = Extract i32 of i64 %102 <31, 0>
%105 = load i64, i64 tmp_dword2
%106 = Zext i32 %103 to i64
%107 = i64 And i64 %105, 4294967295
%108 = i64 Shl i64 %106, 32
%104 = i64 Or i64 %107, %108
store i64 %104, i64 tmp_dword2
br label %bb20
bb29:
%109 = Extract i3 of i64 %31 <2, 0>
%110 = i1 Eq i3 %109, -3
br i1 %110, label %bb30, label %bb31
bb30:
%111 = i64 Lshr i64 %33, 24
%112 = Extract i40 of i64 %111 <39, 0>
%114 = load i64, i64 tmp_dword1
%115 = Zext i40 %112 to i64
%116 = i64 And i64 %114, -1099511627776
%117 = i64 Shl i64 %115, 0
%113 = i64 Or i64 %116, %117
store i64 %113, i64 tmp_dword1
%118 = i64 Lshr i64 %33, 0
%119 = Extract i24 of i64 %118 <23, 0>
%121 = load i64, i64 tmp_dword2
%122 = Zext i24 %119 to i64
%123 = i64 And i64 %121, 1099511627775
%124 = i64 Shl i64 %122, 40
%120 = i64 Or i64 %123, %124
store i64 %120, i64 tmp_dword2
br label %bb20
bb31:
%125 = Extract i3 of i64 %31 <2, 0>
%126 = i1 Eq i3 %125, -2
br i1 %126, label %bb32, label %bb33
bb32:
%127 = i64 Lshr i64 %33, 16
%128 = Extract i48 of i64 %127 <47, 0>
%130 = load i64, i64 tmp_dword1
%131 = Zext i48 %128 to i64
%132 = i64 And i64 %130, -281474976710656
%133 = i64 Shl i64 %131, 0
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword1
%134 = i64 Lshr i64 %33, 0
%135 = Extract i16 of i64 %134 <15, 0>
%137 = load i64, i64 tmp_dword2
%138 = Zext i16 %135 to i64
%139 = i64 And i64 %137, 281474976710655
%140 = i64 Shl i64 %138, 48
%136 = i64 Or i64 %139, %140
store i64 %136, i64 tmp_dword2
br label %bb20
bb33:
%141 = i64 Lshr i64 %33, 8
%142 = Extract i56 of i64 %141 <55, 0>
%144 = load i64, i64 tmp_dword1
%145 = Zext i56 %142 to i64
%146 = i64 And i64 %144, -72057594037927936
%147 = i64 Shl i64 %145, 0
%143 = i64 Or i64 %146, %147
store i64 %143, i64 tmp_dword1
%148 = i64 Lshr i64 %33, 0
%149 = Extract i8 of i64 %148 <7, 0>
%151 = load i64, i64 tmp_dword2
%152 = Zext i8 %149 to i64
%153 = i64 And i64 %151, 72057594037927935
%154 = i64 Shl i64 %152, 56
%150 = i64 Or i64 %153, %154
store i64 %150, i64 tmp_dword2
br label %bb20
bb34:
br label %bb14
bb35:
br label %bb62
bb36:
store i64 0, [32, i64] XREG[0]
%161 = load i64, i64 PC
store i64 %161, i64 prev_pc
%167 = Sext i12 8 to i64
%170 = load i64, [32, i64] XREG[12]
%168 = i64 Add i64 %170, %167
store i64 %168, i64 tmp_address
%169 = load i64, i64 tmp_address
%172 = load i64, [32, i64] XREG[14]
store i64 %172, i64 rs2_var
%171 = load i64, i64 rs2_var
%173 = i64 Lshr i64 %169, 3
%174 = Extract i53 of i64 %173 <52, 0>
store i53 %174, i53 mem_index
%175 = Extract i3 of i64 %169 <2, 0>
%176 = i1 Eq i3 %175, 0
br i1 %176, label %bb37, label %bb38
bb37:
%177 = load i53, i53 mem_index
store i64 %171, [9007199254740992, i64] MEM[%177]
br label %bb39
bb38:
%178 = load i53, i53 mem_index
%179 = i53 Add i53 %178, 1
%180 = load i64, [9007199254740992, i64] MEM[%179]
store i64 %180, i64 tmp_dword1
%181 = load i53, i53 mem_index
%182 = load i64, [9007199254740992, i64] MEM[%181]
store i64 %182, i64 tmp_dword2
%183 = Extract i3 of i64 %169 <2, 0>
%184 = i1 Eq i3 %183, 1
br i1 %184, label %bb40, label %bb41
bb39:
%162 = load i64, i64 PC
%164 = load i64, i64 prev_pc
%163 = i1 Eq i64 %162, %164
br i1 %163, label %bb45, label %bb46
bb40:
%185 = i64 Lshr i64 %171, 56
%186 = Extract i8 of i64 %185 <7, 0>
%188 = load i64, i64 tmp_dword1
%189 = Zext i8 %186 to i64
%190 = i64 And i64 %188, -256
%191 = i64 Shl i64 %189, 0
%187 = i64 Or i64 %190, %191
store i64 %187, i64 tmp_dword1
%192 = i64 Lshr i64 %171, 0
%193 = Extract i56 of i64 %192 <55, 0>
%195 = load i64, i64 tmp_dword2
%196 = Zext i56 %193 to i64
%197 = i64 And i64 %195, 255
%198 = i64 Shl i64 %196, 8
%194 = i64 Or i64 %197, %198
store i64 %194, i64 tmp_dword2
br label %bb42
bb41:
%199 = Extract i3 of i64 %169 <2, 0>
%200 = i1 Eq i3 %199, 2
br i1 %200, label %bb43, label %bb44
bb42:
%293 = load i64, i64 tmp_dword1
%294 = load i53, i53 mem_index
%295 = i53 Add i53 %294, 1
store i64 %293, [9007199254740992, i64] MEM[%295]
%296 = load i64, i64 tmp_dword2
%297 = load i53, i53 mem_index
store i64 %296, [9007199254740992, i64] MEM[%297]
br label %bb39
bb43:
%201 = i64 Lshr i64 %171, 48
%202 = Extract i16 of i64 %201 <15, 0>
%204 = load i64, i64 tmp_dword1
%205 = Zext i16 %202 to i64
%206 = i64 And i64 %204, -65536
%207 = i64 Shl i64 %205, 0
%203 = i64 Or i64 %206, %207
store i64 %203, i64 tmp_dword1
%208 = i64 Lshr i64 %171, 0
%209 = Extract i48 of i64 %208 <47, 0>
%211 = load i64, i64 tmp_dword2
%212 = Zext i48 %209 to i64
%213 = i64 And i64 %211, 65535
%214 = i64 Shl i64 %212, 16
%210 = i64 Or i64 %213, %214
store i64 %210, i64 tmp_dword2
br label %bb42
bb44:
%215 = Extract i3 of i64 %169 <2, 0>
%216 = i1 Eq i3 %215, 3
br i1 %216, label %bb47, label %bb48
bb45:
%165 = load i64, i64 PC
%166 = i64 Add i64 %165, 4
store i64 %166, i64 PC
br label %bb49
bb46:
br label %bb49
bb47:
%217 = i64 Lshr i64 %171, 40
%218 = Extract i24 of i64 %217 <23, 0>
%220 = load i64, i64 tmp_dword1
%221 = Zext i24 %218 to i64
%222 = i64 And i64 %220, -16777216
%223 = i64 Shl i64 %221, 0
%219 = i64 Or i64 %222, %223
store i64 %219, i64 tmp_dword1
%224 = i64 Lshr i64 %171, 0
%225 = Extract i40 of i64 %224 <39, 0>
%227 = load i64, i64 tmp_dword2
%228 = Zext i40 %225 to i64
%229 = i64 And i64 %227, 16777215
%230 = i64 Shl i64 %228, 24
%226 = i64 Or i64 %229, %230
store i64 %226, i64 tmp_dword2
br label %bb42
bb48:
%231 = Extract i3 of i64 %169 <2, 0>
%232 = i1 Eq i3 %231, -4
br i1 %232, label %bb50, label %bb51
bb49:
%160 = load i64, i64 PC
store i64 %160, i64 PC
br label %bb35
bb50:
%233 = i64 Lshr i64 %171, 32
%234 = Extract i32 of i64 %233 <31, 0>
%236 = load i64, i64 tmp_dword1
%237 = Zext i32 %234 to i64
%238 = i64 And i64 %236, -4294967296
%239 = i64 Shl i64 %237, 0
%235 = i64 Or i64 %238, %239
store i64 %235, i64 tmp_dword1
%240 = i64 Lshr i64 %171, 0
%241 = Extract i32 of i64 %240 <31, 0>
%243 = load i64, i64 tmp_dword2
%244 = Zext i32 %241 to i64
%245 = i64 And i64 %243, 4294967295
%246 = i64 Shl i64 %244, 32
%242 = i64 Or i64 %245, %246
store i64 %242, i64 tmp_dword2
br label %bb42
bb51:
%247 = Extract i3 of i64 %169 <2, 0>
%248 = i1 Eq i3 %247, -3
br i1 %248, label %bb52, label %bb53
bb52:
%249 = i64 Lshr i64 %171, 24
%250 = Extract i40 of i64 %249 <39, 0>
%252 = load i64, i64 tmp_dword1
%253 = Zext i40 %250 to i64
%254 = i64 And i64 %252, -1099511627776
%255 = i64 Shl i64 %253, 0
%251 = i64 Or i64 %254, %255
store i64 %251, i64 tmp_dword1
%256 = i64 Lshr i64 %171, 0
%257 = Extract i24 of i64 %256 <23, 0>
%259 = load i64, i64 tmp_dword2
%260 = Zext i24 %257 to i64
%261 = i64 And i64 %259, 1099511627775
%262 = i64 Shl i64 %260, 40
%258 = i64 Or i64 %261, %262
store i64 %258, i64 tmp_dword2
br label %bb42
bb53:
%263 = Extract i3 of i64 %169 <2, 0>
%264 = i1 Eq i3 %263, -2
br i1 %264, label %bb54, label %bb55
bb54:
%265 = i64 Lshr i64 %171, 16
%266 = Extract i48 of i64 %265 <47, 0>
%268 = load i64, i64 tmp_dword1
%269 = Zext i48 %266 to i64
%270 = i64 And i64 %268, -281474976710656
%271 = i64 Shl i64 %269, 0
%267 = i64 Or i64 %270, %271
store i64 %267, i64 tmp_dword1
%272 = i64 Lshr i64 %171, 0
%273 = Extract i16 of i64 %272 <15, 0>
%275 = load i64, i64 tmp_dword2
%276 = Zext i16 %273 to i64
%277 = i64 And i64 %275, 281474976710655
%278 = i64 Shl i64 %276, 48
%274 = i64 Or i64 %277, %278
store i64 %274, i64 tmp_dword2
br label %bb42
bb55:
%279 = i64 Lshr i64 %171, 8
%280 = Extract i56 of i64 %279 <55, 0>
%282 = load i64, i64 tmp_dword1
%283 = Zext i56 %280 to i64
%284 = i64 And i64 %282, -72057594037927936
%285 = i64 Shl i64 %283, 0
%281 = i64 Or i64 %284, %285
store i64 %281, i64 tmp_dword1
%286 = i64 Lshr i64 %171, 0
%287 = Extract i8 of i64 %286 <7, 0>
%289 = load i64, i64 tmp_dword2
%290 = Zext i8 %287 to i64
%291 = i64 And i64 %289, 72057594037927935
%292 = i64 Shl i64 %290, 56
%288 = i64 Or i64 %291, %292
store i64 %288, i64 tmp_dword2
br label %bb42
bb56:
br label %bb36
bb57:
br label %bb68
bb58:
store i64 0, [32, i64] XREG[0]
%299 = load i64, i64 PC
store i64 %299, i64 prev_pc
%305 = Sext i12 2 to i64
%307 = load i64, [32, i64] XREG[16]
%306 = i64 Add i64 %307, %305
store i64 %306, [32, i64] XREG[16]
%300 = load i64, i64 PC
%302 = load i64, i64 prev_pc
%301 = i1 Eq i64 %300, %302
br i1 %301, label %bb59, label %bb60
bb59:
%303 = load i64, i64 PC
%304 = i64 Add i64 %303, 4
store i64 %304, i64 PC
br label %bb61
bb60:
br label %bb61
bb61:
%298 = load i64, i64 PC
store i64 %298, i64 PC
br label %bb57
bb62:
br label %bb58
bb63:
br label %bb77
bb64:
store i64 0, [32, i64] XREG[0]
%309 = load i64, i64 PC
store i64 %309, i64 prev_pc
%315 = Sext i12 16 to i64
%317 = load i64, [32, i64] XREG[12]
%316 = i64 Add i64 %317, %315
store i64 %316, [32, i64] XREG[12]
%310 = load i64, i64 PC
%312 = load i64, i64 prev_pc
%311 = i1 Eq i64 %310, %312
br i1 %311, label %bb65, label %bb66
bb65:
%313 = load i64, i64 PC
%314 = i64 Add i64 %313, 4
store i64 %314, i64 PC
br label %bb67
bb66:
br label %bb67
bb67:
%308 = load i64, i64 PC
store i64 %308, i64 PC
br label %bb63
bb68:
br label %bb64
bb69:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb70:
store i64 0, [32, i64] XREG[0]
%319 = load i64, i64 PC
store i64 %319, i64 prev_pc
%330 = load i64, [32, i64] XREG[16]
%331 = load i64, [32, i64] XREG[13]
%325 = i1 Ne i64 %330, %331
br i1 %325, label %bb71, label %bb72
bb71:
%326 = Sext i12 4084 to i64
%327 = i64 Shl i64 %326, 1
%328 = load i64, i64 PC
%329 = i64 Add i64 %328, %327
store i64 %329, i64 PC
br label %bb73
bb72:
br label %bb73
bb73:
%320 = load i64, i64 PC
%322 = load i64, i64 prev_pc
%321 = i1 Eq i64 %320, %322
br i1 %321, label %bb74, label %bb75
bb74:
%323 = load i64, i64 PC
%324 = i64 Add i64 %323, 4
store i64 %324, i64 PC
br label %bb76
bb75:
br label %bb76
bb76:
%318 = load i64, i64 PC
store i64 %318, i64 PC
br label %bb69
bb77:
br label %bb70

propagate
bb_3 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[15]
%11 = load i64, [32, i64] XREG[14]
%9 = i64 Add i64 %10, %11
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%20 = load i64, [32, i64] XREG[14]
%21 = load i64, [32, i64] XREG[15]
%19 = i64 Add i64 %20, %21
store i64 %19, [32, i64] XREG[14]
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb9, label %bb10
bb9:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%12 = load i64, i64 PC
store i64 %12, i64 PC
br label %bb12
bb12:
br label %bb13
bb13:
br label %bb14
bb14:
store i64 0, [32, i64] XREG[0]
%23 = load i64, i64 PC
store i64 %23, i64 prev_pc
%31 = load i64, [32, i64] XREG[12]
%29 = i64 Add i64 %31, 0
store i64 %29, i64 tmp_address
%30 = load i64, i64 tmp_address
%33 = load i64, [32, i64] XREG[15]
store i64 %33, i64 rs2_var
%32 = load i64, i64 rs2_var
%34 = i64 Lshr i64 %30, 3
%35 = Extract i53 of i64 %34 <52, 0>
store i53 %35, i53 mem_index
%36 = Extract i3 of i64 %30 <2, 0>
%37 = i1 Eq i3 %36, 0
br i1 %37, label %bb15, label %bb16
bb15:
%38 = load i53, i53 mem_index
store i64 %32, [9007199254740992, i64] MEM[%38]
br label %bb17
bb16:
%39 = load i53, i53 mem_index
%40 = i53 Add i53 %39, 1
%41 = load i64, [9007199254740992, i64] MEM[%40]
store i64 %41, i64 tmp_dword1
%42 = load i53, i53 mem_index
%43 = load i64, [9007199254740992, i64] MEM[%42]
store i64 %43, i64 tmp_dword2
%44 = Extract i3 of i64 %30 <2, 0>
%45 = i1 Eq i3 %44, 1
br i1 %45, label %bb18, label %bb19
bb17:
%24 = load i64, i64 PC
%26 = load i64, i64 prev_pc
%25 = i1 Eq i64 %24, %26
br i1 %25, label %bb20, label %bb21
bb18:
%46 = i64 Lshr i64 %32, 56
%47 = Extract i8 of i64 %46 <7, 0>
%49 = load i64, i64 tmp_dword1
%50 = Zext i8 %47 to i64
%51 = i64 And i64 %49, -256
%52 = i64 Shl i64 %50, 0
%48 = i64 Or i64 %51, %52
store i64 %48, i64 tmp_dword1
%53 = i64 Lshr i64 %32, 0
%54 = Extract i56 of i64 %53 <55, 0>
%56 = load i64, i64 tmp_dword2
%57 = Zext i56 %54 to i64
%58 = i64 And i64 %56, 255
%59 = i64 Shl i64 %57, 8
%55 = i64 Or i64 %58, %59
store i64 %55, i64 tmp_dword2
br label %bb22
bb19:
%60 = Extract i3 of i64 %30 <2, 0>
%61 = i1 Eq i3 %60, 2
br i1 %61, label %bb23, label %bb24
bb20:
%27 = load i64, i64 PC
%28 = i64 Add i64 %27, 4
store i64 %28, i64 PC
br label %bb25
bb21:
br label %bb25
bb22:
%154 = load i64, i64 tmp_dword1
%155 = load i53, i53 mem_index
%156 = i53 Add i53 %155, 1
store i64 %154, [9007199254740992, i64] MEM[%156]
%157 = load i64, i64 tmp_dword2
%158 = load i53, i53 mem_index
store i64 %157, [9007199254740992, i64] MEM[%158]
br label %bb17
bb23:
%62 = i64 Lshr i64 %32, 48
%63 = Extract i16 of i64 %62 <15, 0>
%65 = load i64, i64 tmp_dword1
%66 = Zext i16 %63 to i64
%67 = i64 And i64 %65, -65536
%68 = i64 Shl i64 %66, 0
%64 = i64 Or i64 %67, %68
store i64 %64, i64 tmp_dword1
%69 = i64 Lshr i64 %32, 0
%70 = Extract i48 of i64 %69 <47, 0>
%72 = load i64, i64 tmp_dword2
%73 = Zext i48 %70 to i64
%74 = i64 And i64 %72, 65535
%75 = i64 Shl i64 %73, 16
%71 = i64 Or i64 %74, %75
store i64 %71, i64 tmp_dword2
br label %bb22
bb24:
%76 = Extract i3 of i64 %30 <2, 0>
%77 = i1 Eq i3 %76, 3
br i1 %77, label %bb26, label %bb27
bb25:
%22 = load i64, i64 PC
store i64 %22, i64 PC
br label %bb28
bb26:
%78 = i64 Lshr i64 %32, 40
%79 = Extract i24 of i64 %78 <23, 0>
%81 = load i64, i64 tmp_dword1
%82 = Zext i24 %79 to i64
%83 = i64 And i64 %81, -16777216
%84 = i64 Shl i64 %82, 0
%80 = i64 Or i64 %83, %84
store i64 %80, i64 tmp_dword1
%85 = i64 Lshr i64 %32, 0
%86 = Extract i40 of i64 %85 <39, 0>
%88 = load i64, i64 tmp_dword2
%89 = Zext i40 %86 to i64
%90 = i64 And i64 %88, 16777215
%91 = i64 Shl i64 %89, 24
%87 = i64 Or i64 %90, %91
store i64 %87, i64 tmp_dword2
br label %bb22
bb27:
%92 = Extract i3 of i64 %30 <2, 0>
%93 = i1 Eq i3 %92, -4
br i1 %93, label %bb29, label %bb30
bb28:
br label %bb31
bb29:
%94 = i64 Lshr i64 %32, 32
%95 = Extract i32 of i64 %94 <31, 0>
%97 = load i64, i64 tmp_dword1
%98 = Zext i32 %95 to i64
%99 = i64 And i64 %97, -4294967296
%100 = i64 Shl i64 %98, 0
%96 = i64 Or i64 %99, %100
store i64 %96, i64 tmp_dword1
%101 = i64 Lshr i64 %32, 0
%102 = Extract i32 of i64 %101 <31, 0>
%104 = load i64, i64 tmp_dword2
%105 = Zext i32 %102 to i64
%106 = i64 And i64 %104, 4294967295
%107 = i64 Shl i64 %105, 32
%103 = i64 Or i64 %106, %107
store i64 %103, i64 tmp_dword2
br label %bb22
bb30:
%108 = Extract i3 of i64 %30 <2, 0>
%109 = i1 Eq i3 %108, -3
br i1 %109, label %bb32, label %bb33
bb31:
br label %bb34
bb32:
%110 = i64 Lshr i64 %32, 24
%111 = Extract i40 of i64 %110 <39, 0>
%113 = load i64, i64 tmp_dword1
%114 = Zext i40 %111 to i64
%115 = i64 And i64 %113, -1099511627776
%116 = i64 Shl i64 %114, 0
%112 = i64 Or i64 %115, %116
store i64 %112, i64 tmp_dword1
%117 = i64 Lshr i64 %32, 0
%118 = Extract i24 of i64 %117 <23, 0>
%120 = load i64, i64 tmp_dword2
%121 = Zext i24 %118 to i64
%122 = i64 And i64 %120, 1099511627775
%123 = i64 Shl i64 %121, 40
%119 = i64 Or i64 %122, %123
store i64 %119, i64 tmp_dword2
br label %bb22
bb33:
%124 = Extract i3 of i64 %30 <2, 0>
%125 = i1 Eq i3 %124, -2
br i1 %125, label %bb35, label %bb36
bb34:
store i64 0, [32, i64] XREG[0]
%160 = load i64, i64 PC
store i64 %160, i64 prev_pc
%168 = load i64, [32, i64] XREG[12]
%166 = i64 Add i64 %168, 8
store i64 %166, i64 tmp_address
%167 = load i64, i64 tmp_address
%170 = load i64, [32, i64] XREG[14]
store i64 %170, i64 rs2_var
%169 = load i64, i64 rs2_var
%171 = i64 Lshr i64 %167, 3
%172 = Extract i53 of i64 %171 <52, 0>
store i53 %172, i53 mem_index
%173 = Extract i3 of i64 %167 <2, 0>
%174 = i1 Eq i3 %173, 0
br i1 %174, label %bb37, label %bb38
bb35:
%126 = i64 Lshr i64 %32, 16
%127 = Extract i48 of i64 %126 <47, 0>
%129 = load i64, i64 tmp_dword1
%130 = Zext i48 %127 to i64
%131 = i64 And i64 %129, -281474976710656
%132 = i64 Shl i64 %130, 0
%128 = i64 Or i64 %131, %132
store i64 %128, i64 tmp_dword1
%133 = i64 Lshr i64 %32, 0
%134 = Extract i16 of i64 %133 <15, 0>
%136 = load i64, i64 tmp_dword2
%137 = Zext i16 %134 to i64
%138 = i64 And i64 %136, 281474976710655
%139 = i64 Shl i64 %137, 48
%135 = i64 Or i64 %138, %139
store i64 %135, i64 tmp_dword2
br label %bb22
bb36:
%140 = i64 Lshr i64 %32, 8
%141 = Extract i56 of i64 %140 <55, 0>
%143 = load i64, i64 tmp_dword1
%144 = Zext i56 %141 to i64
%145 = i64 And i64 %143, -72057594037927936
%146 = i64 Shl i64 %144, 0
%142 = i64 Or i64 %145, %146
store i64 %142, i64 tmp_dword1
%147 = i64 Lshr i64 %32, 0
%148 = Extract i8 of i64 %147 <7, 0>
%150 = load i64, i64 tmp_dword2
%151 = Zext i8 %148 to i64
%152 = i64 And i64 %150, 72057594037927935
%153 = i64 Shl i64 %151, 56
%149 = i64 Or i64 %152, %153
store i64 %149, i64 tmp_dword2
br label %bb22
bb37:
%175 = load i53, i53 mem_index
store i64 %169, [9007199254740992, i64] MEM[%175]
br label %bb39
bb38:
%176 = load i53, i53 mem_index
%177 = i53 Add i53 %176, 1
%178 = load i64, [9007199254740992, i64] MEM[%177]
store i64 %178, i64 tmp_dword1
%179 = load i53, i53 mem_index
%180 = load i64, [9007199254740992, i64] MEM[%179]
store i64 %180, i64 tmp_dword2
%181 = Extract i3 of i64 %167 <2, 0>
%182 = i1 Eq i3 %181, 1
br i1 %182, label %bb40, label %bb41
bb39:
%161 = load i64, i64 PC
%163 = load i64, i64 prev_pc
%162 = i1 Eq i64 %161, %163
br i1 %162, label %bb42, label %bb43
bb40:
%183 = i64 Lshr i64 %169, 56
%184 = Extract i8 of i64 %183 <7, 0>
%186 = load i64, i64 tmp_dword1
%187 = Zext i8 %184 to i64
%188 = i64 And i64 %186, -256
%189 = i64 Shl i64 %187, 0
%185 = i64 Or i64 %188, %189
store i64 %185, i64 tmp_dword1
%190 = i64 Lshr i64 %169, 0
%191 = Extract i56 of i64 %190 <55, 0>
%193 = load i64, i64 tmp_dword2
%194 = Zext i56 %191 to i64
%195 = i64 And i64 %193, 255
%196 = i64 Shl i64 %194, 8
%192 = i64 Or i64 %195, %196
store i64 %192, i64 tmp_dword2
br label %bb44
bb41:
%197 = Extract i3 of i64 %167 <2, 0>
%198 = i1 Eq i3 %197, 2
br i1 %198, label %bb45, label %bb46
bb42:
%164 = load i64, i64 PC
%165 = i64 Add i64 %164, 4
store i64 %165, i64 PC
br label %bb47
bb43:
br label %bb47
bb44:
%291 = load i64, i64 tmp_dword1
%292 = load i53, i53 mem_index
%293 = i53 Add i53 %292, 1
store i64 %291, [9007199254740992, i64] MEM[%293]
%294 = load i64, i64 tmp_dword2
%295 = load i53, i53 mem_index
store i64 %294, [9007199254740992, i64] MEM[%295]
br label %bb39
bb45:
%199 = i64 Lshr i64 %169, 48
%200 = Extract i16 of i64 %199 <15, 0>
%202 = load i64, i64 tmp_dword1
%203 = Zext i16 %200 to i64
%204 = i64 And i64 %202, -65536
%205 = i64 Shl i64 %203, 0
%201 = i64 Or i64 %204, %205
store i64 %201, i64 tmp_dword1
%206 = i64 Lshr i64 %169, 0
%207 = Extract i48 of i64 %206 <47, 0>
%209 = load i64, i64 tmp_dword2
%210 = Zext i48 %207 to i64
%211 = i64 And i64 %209, 65535
%212 = i64 Shl i64 %210, 16
%208 = i64 Or i64 %211, %212
store i64 %208, i64 tmp_dword2
br label %bb44
bb46:
%213 = Extract i3 of i64 %167 <2, 0>
%214 = i1 Eq i3 %213, 3
br i1 %214, label %bb48, label %bb49
bb47:
%159 = load i64, i64 PC
store i64 %159, i64 PC
br label %bb50
bb48:
%215 = i64 Lshr i64 %169, 40
%216 = Extract i24 of i64 %215 <23, 0>
%218 = load i64, i64 tmp_dword1
%219 = Zext i24 %216 to i64
%220 = i64 And i64 %218, -16777216
%221 = i64 Shl i64 %219, 0
%217 = i64 Or i64 %220, %221
store i64 %217, i64 tmp_dword1
%222 = i64 Lshr i64 %169, 0
%223 = Extract i40 of i64 %222 <39, 0>
%225 = load i64, i64 tmp_dword2
%226 = Zext i40 %223 to i64
%227 = i64 And i64 %225, 16777215
%228 = i64 Shl i64 %226, 24
%224 = i64 Or i64 %227, %228
store i64 %224, i64 tmp_dword2
br label %bb44
bb49:
%229 = Extract i3 of i64 %167 <2, 0>
%230 = i1 Eq i3 %229, -4
br i1 %230, label %bb51, label %bb52
bb50:
br label %bb53
bb51:
%231 = i64 Lshr i64 %169, 32
%232 = Extract i32 of i64 %231 <31, 0>
%234 = load i64, i64 tmp_dword1
%235 = Zext i32 %232 to i64
%236 = i64 And i64 %234, -4294967296
%237 = i64 Shl i64 %235, 0
%233 = i64 Or i64 %236, %237
store i64 %233, i64 tmp_dword1
%238 = i64 Lshr i64 %169, 0
%239 = Extract i32 of i64 %238 <31, 0>
%241 = load i64, i64 tmp_dword2
%242 = Zext i32 %239 to i64
%243 = i64 And i64 %241, 4294967295
%244 = i64 Shl i64 %242, 32
%240 = i64 Or i64 %243, %244
store i64 %240, i64 tmp_dword2
br label %bb44
bb52:
%245 = Extract i3 of i64 %167 <2, 0>
%246 = i1 Eq i3 %245, -3
br i1 %246, label %bb54, label %bb55
bb53:
br label %bb56
bb54:
%247 = i64 Lshr i64 %169, 24
%248 = Extract i40 of i64 %247 <39, 0>
%250 = load i64, i64 tmp_dword1
%251 = Zext i40 %248 to i64
%252 = i64 And i64 %250, -1099511627776
%253 = i64 Shl i64 %251, 0
%249 = i64 Or i64 %252, %253
store i64 %249, i64 tmp_dword1
%254 = i64 Lshr i64 %169, 0
%255 = Extract i24 of i64 %254 <23, 0>
%257 = load i64, i64 tmp_dword2
%258 = Zext i24 %255 to i64
%259 = i64 And i64 %257, 1099511627775
%260 = i64 Shl i64 %258, 40
%256 = i64 Or i64 %259, %260
store i64 %256, i64 tmp_dword2
br label %bb44
bb55:
%261 = Extract i3 of i64 %167 <2, 0>
%262 = i1 Eq i3 %261, -2
br i1 %262, label %bb57, label %bb58
bb56:
store i64 0, [32, i64] XREG[0]
%297 = load i64, i64 PC
store i64 %297, i64 prev_pc
%304 = load i64, [32, i64] XREG[16]
%303 = i64 Add i64 %304, 2
store i64 %303, [32, i64] XREG[16]
%298 = load i64, i64 PC
%300 = load i64, i64 prev_pc
%299 = i1 Eq i64 %298, %300
br i1 %299, label %bb59, label %bb60
bb57:
%263 = i64 Lshr i64 %169, 16
%264 = Extract i48 of i64 %263 <47, 0>
%266 = load i64, i64 tmp_dword1
%267 = Zext i48 %264 to i64
%268 = i64 And i64 %266, -281474976710656
%269 = i64 Shl i64 %267, 0
%265 = i64 Or i64 %268, %269
store i64 %265, i64 tmp_dword1
%270 = i64 Lshr i64 %169, 0
%271 = Extract i16 of i64 %270 <15, 0>
%273 = load i64, i64 tmp_dword2
%274 = Zext i16 %271 to i64
%275 = i64 And i64 %273, 281474976710655
%276 = i64 Shl i64 %274, 48
%272 = i64 Or i64 %275, %276
store i64 %272, i64 tmp_dword2
br label %bb44
bb58:
%277 = i64 Lshr i64 %169, 8
%278 = Extract i56 of i64 %277 <55, 0>
%280 = load i64, i64 tmp_dword1
%281 = Zext i56 %278 to i64
%282 = i64 And i64 %280, -72057594037927936
%283 = i64 Shl i64 %281, 0
%279 = i64 Or i64 %282, %283
store i64 %279, i64 tmp_dword1
%284 = i64 Lshr i64 %169, 0
%285 = Extract i8 of i64 %284 <7, 0>
%287 = load i64, i64 tmp_dword2
%288 = Zext i8 %285 to i64
%289 = i64 And i64 %287, 72057594037927935
%290 = i64 Shl i64 %288, 56
%286 = i64 Or i64 %289, %290
store i64 %286, i64 tmp_dword2
br label %bb44
bb59:
%301 = load i64, i64 PC
%302 = i64 Add i64 %301, 4
store i64 %302, i64 PC
br label %bb61
bb60:
br label %bb61
bb61:
%296 = load i64, i64 PC
store i64 %296, i64 PC
br label %bb62
bb62:
br label %bb63
bb63:
br label %bb64
bb64:
store i64 0, [32, i64] XREG[0]
%306 = load i64, i64 PC
store i64 %306, i64 prev_pc
%313 = load i64, [32, i64] XREG[12]
%312 = i64 Add i64 %313, 16
store i64 %312, [32, i64] XREG[12]
%307 = load i64, i64 PC
%309 = load i64, i64 prev_pc
%308 = i1 Eq i64 %307, %309
br i1 %308, label %bb65, label %bb66
bb65:
%310 = load i64, i64 PC
%311 = i64 Add i64 %310, 4
store i64 %311, i64 PC
br label %bb67
bb66:
br label %bb67
bb67:
%305 = load i64, i64 PC
store i64 %305, i64 PC
br label %bb68
bb68:
br label %bb69
bb69:
br label %bb70
bb70:
store i64 0, [32, i64] XREG[0]
%315 = load i64, i64 PC
store i64 %315, i64 prev_pc
%324 = load i64, [32, i64] XREG[16]
%325 = load i64, [32, i64] XREG[13]
%321 = i1 Ne i64 %324, %325
br i1 %321, label %bb71, label %bb72
bb71:
%322 = load i64, i64 PC
%323 = i64 Add i64 %322, -24
store i64 %323, i64 PC
br label %bb73
bb72:
br label %bb73
bb73:
%316 = load i64, i64 PC
%318 = load i64, i64 prev_pc
%317 = i1 Eq i64 %316, %318
br i1 %317, label %bb74, label %bb75
bb74:
%319 = load i64, i64 PC
%320 = i64 Add i64 %319, 4
store i64 %320, i64 PC
br label %bb76
bb75:
br label %bb76
bb76:
%314 = load i64, i64 PC
store i64 %314, i64 PC
br label %bb77
bb77:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_3 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[15]
%11 = load i64, [32, i64] XREG[14]
%9 = i64 Add i64 %10, %11
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%20 = load i64, [32, i64] XREG[14]
%21 = load i64, [32, i64] XREG[15]
%19 = i64 Add i64 %20, %21
store i64 %19, [32, i64] XREG[14]
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb4, label %bb5
bb4:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%12 = load i64, i64 PC
store i64 %12, i64 PC
store i64 0, [32, i64] XREG[0]
%23 = load i64, i64 PC
store i64 %23, i64 prev_pc
%31 = load i64, [32, i64] XREG[12]
%29 = i64 Add i64 %31, 0
store i64 %29, i64 tmp_address
%30 = load i64, i64 tmp_address
%33 = load i64, [32, i64] XREG[15]
store i64 %33, i64 rs2_var
%32 = load i64, i64 rs2_var
%34 = i64 Lshr i64 %30, 3
%35 = Extract i53 of i64 %34 <52, 0>
store i53 %35, i53 mem_index
%36 = Extract i3 of i64 %30 <2, 0>
%37 = i1 Eq i3 %36, 0
br i1 %37, label %bb7, label %bb8
bb7:
%38 = load i53, i53 mem_index
store i64 %32, [9007199254740992, i64] MEM[%38]
br label %bb9
bb8:
%39 = load i53, i53 mem_index
%40 = i53 Add i53 %39, 1
%41 = load i64, [9007199254740992, i64] MEM[%40]
store i64 %41, i64 tmp_dword1
%42 = load i53, i53 mem_index
%43 = load i64, [9007199254740992, i64] MEM[%42]
store i64 %43, i64 tmp_dword2
%44 = Extract i3 of i64 %30 <2, 0>
%45 = i1 Eq i3 %44, 1
br i1 %45, label %bb10, label %bb11
bb9:
%24 = load i64, i64 PC
%26 = load i64, i64 prev_pc
%25 = i1 Eq i64 %24, %26
br i1 %25, label %bb12, label %bb13
bb10:
%46 = i64 Lshr i64 %32, 56
%47 = Extract i8 of i64 %46 <7, 0>
%49 = load i64, i64 tmp_dword1
%50 = Zext i8 %47 to i64
%51 = i64 And i64 %49, -256
%52 = i64 Shl i64 %50, 0
%48 = i64 Or i64 %51, %52
store i64 %48, i64 tmp_dword1
%53 = i64 Lshr i64 %32, 0
%54 = Extract i56 of i64 %53 <55, 0>
%56 = load i64, i64 tmp_dword2
%57 = Zext i56 %54 to i64
%58 = i64 And i64 %56, 255
%59 = i64 Shl i64 %57, 8
%55 = i64 Or i64 %58, %59
store i64 %55, i64 tmp_dword2
br label %bb14
bb11:
%60 = Extract i3 of i64 %30 <2, 0>
%61 = i1 Eq i3 %60, 2
br i1 %61, label %bb15, label %bb16
bb12:
%27 = load i64, i64 PC
%28 = i64 Add i64 %27, 4
store i64 %28, i64 PC
br label %bb17
bb13:
br label %bb17
bb14:
%154 = load i64, i64 tmp_dword1
%155 = load i53, i53 mem_index
%156 = i53 Add i53 %155, 1
store i64 %154, [9007199254740992, i64] MEM[%156]
%157 = load i64, i64 tmp_dword2
%158 = load i53, i53 mem_index
store i64 %157, [9007199254740992, i64] MEM[%158]
br label %bb9
bb15:
%62 = i64 Lshr i64 %32, 48
%63 = Extract i16 of i64 %62 <15, 0>
%65 = load i64, i64 tmp_dword1
%66 = Zext i16 %63 to i64
%67 = i64 And i64 %65, -65536
%68 = i64 Shl i64 %66, 0
%64 = i64 Or i64 %67, %68
store i64 %64, i64 tmp_dword1
%69 = i64 Lshr i64 %32, 0
%70 = Extract i48 of i64 %69 <47, 0>
%72 = load i64, i64 tmp_dword2
%73 = Zext i48 %70 to i64
%74 = i64 And i64 %72, 65535
%75 = i64 Shl i64 %73, 16
%71 = i64 Or i64 %74, %75
store i64 %71, i64 tmp_dword2
br label %bb14
bb16:
%76 = Extract i3 of i64 %30 <2, 0>
%77 = i1 Eq i3 %76, 3
br i1 %77, label %bb18, label %bb19
bb17:
%22 = load i64, i64 PC
store i64 %22, i64 PC
store i64 0, [32, i64] XREG[0]
%160 = load i64, i64 PC
store i64 %160, i64 prev_pc
%168 = load i64, [32, i64] XREG[12]
%166 = i64 Add i64 %168, 8
store i64 %166, i64 tmp_address
%167 = load i64, i64 tmp_address
%170 = load i64, [32, i64] XREG[14]
store i64 %170, i64 rs2_var
%169 = load i64, i64 rs2_var
%171 = i64 Lshr i64 %167, 3
%172 = Extract i53 of i64 %171 <52, 0>
store i53 %172, i53 mem_index
%173 = Extract i3 of i64 %167 <2, 0>
%174 = i1 Eq i3 %173, 0
br i1 %174, label %bb26, label %bb27
bb18:
%78 = i64 Lshr i64 %32, 40
%79 = Extract i24 of i64 %78 <23, 0>
%81 = load i64, i64 tmp_dword1
%82 = Zext i24 %79 to i64
%83 = i64 And i64 %81, -16777216
%84 = i64 Shl i64 %82, 0
%80 = i64 Or i64 %83, %84
store i64 %80, i64 tmp_dword1
%85 = i64 Lshr i64 %32, 0
%86 = Extract i40 of i64 %85 <39, 0>
%88 = load i64, i64 tmp_dword2
%89 = Zext i40 %86 to i64
%90 = i64 And i64 %88, 16777215
%91 = i64 Shl i64 %89, 24
%87 = i64 Or i64 %90, %91
store i64 %87, i64 tmp_dword2
br label %bb14
bb19:
%92 = Extract i3 of i64 %30 <2, 0>
%93 = i1 Eq i3 %92, -4
br i1 %93, label %bb20, label %bb21
bb20:
%94 = i64 Lshr i64 %32, 32
%95 = Extract i32 of i64 %94 <31, 0>
%97 = load i64, i64 tmp_dword1
%98 = Zext i32 %95 to i64
%99 = i64 And i64 %97, -4294967296
%100 = i64 Shl i64 %98, 0
%96 = i64 Or i64 %99, %100
store i64 %96, i64 tmp_dword1
%101 = i64 Lshr i64 %32, 0
%102 = Extract i32 of i64 %101 <31, 0>
%104 = load i64, i64 tmp_dword2
%105 = Zext i32 %102 to i64
%106 = i64 And i64 %104, 4294967295
%107 = i64 Shl i64 %105, 32
%103 = i64 Or i64 %106, %107
store i64 %103, i64 tmp_dword2
br label %bb14
bb21:
%108 = Extract i3 of i64 %30 <2, 0>
%109 = i1 Eq i3 %108, -3
br i1 %109, label %bb22, label %bb23
bb22:
%110 = i64 Lshr i64 %32, 24
%111 = Extract i40 of i64 %110 <39, 0>
%113 = load i64, i64 tmp_dword1
%114 = Zext i40 %111 to i64
%115 = i64 And i64 %113, -1099511627776
%116 = i64 Shl i64 %114, 0
%112 = i64 Or i64 %115, %116
store i64 %112, i64 tmp_dword1
%117 = i64 Lshr i64 %32, 0
%118 = Extract i24 of i64 %117 <23, 0>
%120 = load i64, i64 tmp_dword2
%121 = Zext i24 %118 to i64
%122 = i64 And i64 %120, 1099511627775
%123 = i64 Shl i64 %121, 40
%119 = i64 Or i64 %122, %123
store i64 %119, i64 tmp_dword2
br label %bb14
bb23:
%124 = Extract i3 of i64 %30 <2, 0>
%125 = i1 Eq i3 %124, -2
br i1 %125, label %bb24, label %bb25
bb24:
%126 = i64 Lshr i64 %32, 16
%127 = Extract i48 of i64 %126 <47, 0>
%129 = load i64, i64 tmp_dword1
%130 = Zext i48 %127 to i64
%131 = i64 And i64 %129, -281474976710656
%132 = i64 Shl i64 %130, 0
%128 = i64 Or i64 %131, %132
store i64 %128, i64 tmp_dword1
%133 = i64 Lshr i64 %32, 0
%134 = Extract i16 of i64 %133 <15, 0>
%136 = load i64, i64 tmp_dword2
%137 = Zext i16 %134 to i64
%138 = i64 And i64 %136, 281474976710655
%139 = i64 Shl i64 %137, 48
%135 = i64 Or i64 %138, %139
store i64 %135, i64 tmp_dword2
br label %bb14
bb25:
%140 = i64 Lshr i64 %32, 8
%141 = Extract i56 of i64 %140 <55, 0>
%143 = load i64, i64 tmp_dword1
%144 = Zext i56 %141 to i64
%145 = i64 And i64 %143, -72057594037927936
%146 = i64 Shl i64 %144, 0
%142 = i64 Or i64 %145, %146
store i64 %142, i64 tmp_dword1
%147 = i64 Lshr i64 %32, 0
%148 = Extract i8 of i64 %147 <7, 0>
%150 = load i64, i64 tmp_dword2
%151 = Zext i8 %148 to i64
%152 = i64 And i64 %150, 72057594037927935
%153 = i64 Shl i64 %151, 56
%149 = i64 Or i64 %152, %153
store i64 %149, i64 tmp_dword2
br label %bb14
bb26:
%175 = load i53, i53 mem_index
store i64 %169, [9007199254740992, i64] MEM[%175]
br label %bb28
bb27:
%176 = load i53, i53 mem_index
%177 = i53 Add i53 %176, 1
%178 = load i64, [9007199254740992, i64] MEM[%177]
store i64 %178, i64 tmp_dword1
%179 = load i53, i53 mem_index
%180 = load i64, [9007199254740992, i64] MEM[%179]
store i64 %180, i64 tmp_dword2
%181 = Extract i3 of i64 %167 <2, 0>
%182 = i1 Eq i3 %181, 1
br i1 %182, label %bb29, label %bb30
bb28:
%161 = load i64, i64 PC
%163 = load i64, i64 prev_pc
%162 = i1 Eq i64 %161, %163
br i1 %162, label %bb31, label %bb32
bb29:
%183 = i64 Lshr i64 %169, 56
%184 = Extract i8 of i64 %183 <7, 0>
%186 = load i64, i64 tmp_dword1
%187 = Zext i8 %184 to i64
%188 = i64 And i64 %186, -256
%189 = i64 Shl i64 %187, 0
%185 = i64 Or i64 %188, %189
store i64 %185, i64 tmp_dword1
%190 = i64 Lshr i64 %169, 0
%191 = Extract i56 of i64 %190 <55, 0>
%193 = load i64, i64 tmp_dword2
%194 = Zext i56 %191 to i64
%195 = i64 And i64 %193, 255
%196 = i64 Shl i64 %194, 8
%192 = i64 Or i64 %195, %196
store i64 %192, i64 tmp_dword2
br label %bb33
bb30:
%197 = Extract i3 of i64 %167 <2, 0>
%198 = i1 Eq i3 %197, 2
br i1 %198, label %bb34, label %bb35
bb31:
%164 = load i64, i64 PC
%165 = i64 Add i64 %164, 4
store i64 %165, i64 PC
br label %bb36
bb32:
br label %bb36
bb33:
%291 = load i64, i64 tmp_dword1
%292 = load i53, i53 mem_index
%293 = i53 Add i53 %292, 1
store i64 %291, [9007199254740992, i64] MEM[%293]
%294 = load i64, i64 tmp_dword2
%295 = load i53, i53 mem_index
store i64 %294, [9007199254740992, i64] MEM[%295]
br label %bb28
bb34:
%199 = i64 Lshr i64 %169, 48
%200 = Extract i16 of i64 %199 <15, 0>
%202 = load i64, i64 tmp_dword1
%203 = Zext i16 %200 to i64
%204 = i64 And i64 %202, -65536
%205 = i64 Shl i64 %203, 0
%201 = i64 Or i64 %204, %205
store i64 %201, i64 tmp_dword1
%206 = i64 Lshr i64 %169, 0
%207 = Extract i48 of i64 %206 <47, 0>
%209 = load i64, i64 tmp_dword2
%210 = Zext i48 %207 to i64
%211 = i64 And i64 %209, 65535
%212 = i64 Shl i64 %210, 16
%208 = i64 Or i64 %211, %212
store i64 %208, i64 tmp_dword2
br label %bb33
bb35:
%213 = Extract i3 of i64 %167 <2, 0>
%214 = i1 Eq i3 %213, 3
br i1 %214, label %bb37, label %bb38
bb36:
%159 = load i64, i64 PC
store i64 %159, i64 PC
store i64 0, [32, i64] XREG[0]
%297 = load i64, i64 PC
store i64 %297, i64 prev_pc
%304 = load i64, [32, i64] XREG[16]
%303 = i64 Add i64 %304, 2
store i64 %303, [32, i64] XREG[16]
%298 = load i64, i64 PC
%300 = load i64, i64 prev_pc
%299 = i1 Eq i64 %298, %300
br i1 %299, label %bb45, label %bb46
bb37:
%215 = i64 Lshr i64 %169, 40
%216 = Extract i24 of i64 %215 <23, 0>
%218 = load i64, i64 tmp_dword1
%219 = Zext i24 %216 to i64
%220 = i64 And i64 %218, -16777216
%221 = i64 Shl i64 %219, 0
%217 = i64 Or i64 %220, %221
store i64 %217, i64 tmp_dword1
%222 = i64 Lshr i64 %169, 0
%223 = Extract i40 of i64 %222 <39, 0>
%225 = load i64, i64 tmp_dword2
%226 = Zext i40 %223 to i64
%227 = i64 And i64 %225, 16777215
%228 = i64 Shl i64 %226, 24
%224 = i64 Or i64 %227, %228
store i64 %224, i64 tmp_dword2
br label %bb33
bb38:
%229 = Extract i3 of i64 %167 <2, 0>
%230 = i1 Eq i3 %229, -4
br i1 %230, label %bb39, label %bb40
bb39:
%231 = i64 Lshr i64 %169, 32
%232 = Extract i32 of i64 %231 <31, 0>
%234 = load i64, i64 tmp_dword1
%235 = Zext i32 %232 to i64
%236 = i64 And i64 %234, -4294967296
%237 = i64 Shl i64 %235, 0
%233 = i64 Or i64 %236, %237
store i64 %233, i64 tmp_dword1
%238 = i64 Lshr i64 %169, 0
%239 = Extract i32 of i64 %238 <31, 0>
%241 = load i64, i64 tmp_dword2
%242 = Zext i32 %239 to i64
%243 = i64 And i64 %241, 4294967295
%244 = i64 Shl i64 %242, 32
%240 = i64 Or i64 %243, %244
store i64 %240, i64 tmp_dword2
br label %bb33
bb40:
%245 = Extract i3 of i64 %167 <2, 0>
%246 = i1 Eq i3 %245, -3
br i1 %246, label %bb41, label %bb42
bb41:
%247 = i64 Lshr i64 %169, 24
%248 = Extract i40 of i64 %247 <39, 0>
%250 = load i64, i64 tmp_dword1
%251 = Zext i40 %248 to i64
%252 = i64 And i64 %250, -1099511627776
%253 = i64 Shl i64 %251, 0
%249 = i64 Or i64 %252, %253
store i64 %249, i64 tmp_dword1
%254 = i64 Lshr i64 %169, 0
%255 = Extract i24 of i64 %254 <23, 0>
%257 = load i64, i64 tmp_dword2
%258 = Zext i24 %255 to i64
%259 = i64 And i64 %257, 1099511627775
%260 = i64 Shl i64 %258, 40
%256 = i64 Or i64 %259, %260
store i64 %256, i64 tmp_dword2
br label %bb33
bb42:
%261 = Extract i3 of i64 %167 <2, 0>
%262 = i1 Eq i3 %261, -2
br i1 %262, label %bb43, label %bb44
bb43:
%263 = i64 Lshr i64 %169, 16
%264 = Extract i48 of i64 %263 <47, 0>
%266 = load i64, i64 tmp_dword1
%267 = Zext i48 %264 to i64
%268 = i64 And i64 %266, -281474976710656
%269 = i64 Shl i64 %267, 0
%265 = i64 Or i64 %268, %269
store i64 %265, i64 tmp_dword1
%270 = i64 Lshr i64 %169, 0
%271 = Extract i16 of i64 %270 <15, 0>
%273 = load i64, i64 tmp_dword2
%274 = Zext i16 %271 to i64
%275 = i64 And i64 %273, 281474976710655
%276 = i64 Shl i64 %274, 48
%272 = i64 Or i64 %275, %276
store i64 %272, i64 tmp_dword2
br label %bb33
bb44:
%277 = i64 Lshr i64 %169, 8
%278 = Extract i56 of i64 %277 <55, 0>
%280 = load i64, i64 tmp_dword1
%281 = Zext i56 %278 to i64
%282 = i64 And i64 %280, -72057594037927936
%283 = i64 Shl i64 %281, 0
%279 = i64 Or i64 %282, %283
store i64 %279, i64 tmp_dword1
%284 = i64 Lshr i64 %169, 0
%285 = Extract i8 of i64 %284 <7, 0>
%287 = load i64, i64 tmp_dword2
%288 = Zext i8 %285 to i64
%289 = i64 And i64 %287, 72057594037927935
%290 = i64 Shl i64 %288, 56
%286 = i64 Or i64 %289, %290
store i64 %286, i64 tmp_dword2
br label %bb33
bb45:
%301 = load i64, i64 PC
%302 = i64 Add i64 %301, 4
store i64 %302, i64 PC
br label %bb47
bb46:
br label %bb47
bb47:
%296 = load i64, i64 PC
store i64 %296, i64 PC
store i64 0, [32, i64] XREG[0]
%306 = load i64, i64 PC
store i64 %306, i64 prev_pc
%313 = load i64, [32, i64] XREG[12]
%312 = i64 Add i64 %313, 16
store i64 %312, [32, i64] XREG[12]
%307 = load i64, i64 PC
%309 = load i64, i64 prev_pc
%308 = i1 Eq i64 %307, %309
br i1 %308, label %bb48, label %bb49
bb48:
%310 = load i64, i64 PC
%311 = i64 Add i64 %310, 4
store i64 %311, i64 PC
br label %bb50
bb49:
br label %bb50
bb50:
%305 = load i64, i64 PC
store i64 %305, i64 PC
store i64 0, [32, i64] XREG[0]
%315 = load i64, i64 PC
store i64 %315, i64 prev_pc
%324 = load i64, [32, i64] XREG[16]
%325 = load i64, [32, i64] XREG[13]
%321 = i1 Ne i64 %324, %325
br i1 %321, label %bb51, label %bb52
bb51:
%322 = load i64, i64 PC
%323 = i64 Add i64 %322, -24
store i64 %323, i64 PC
br label %bb53
bb52:
br label %bb53
bb53:
%316 = load i64, i64 PC
%318 = load i64, i64 prev_pc
%317 = i1 Eq i64 %316, %318
br i1 %317, label %bb54, label %bb55
bb54:
%319 = load i64, i64 PC
%320 = i64 Add i64 %319, 4
store i64 %320, i64 PC
br label %bb56
bb55:
br label %bb56
bb56:
%314 = load i64, i64 PC
store i64 %314, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%10 = load i64, [32, i64] XREG!2[15]
%11 = load i64, [32, i64] XREG!2[14]
%9 = i64 Add i64 %10, %11
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!25 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %5 PC!25 PC!1
%2 = load i64, i64 PC!2
PC!3 = store i64 %2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%13 = load i64, i64 PC!3
prev_pc!3 = store i64 %13, i64 prev_pc!2
%20 = load i64, [32, i64] XREG!4[14]
%21 = load i64, [32, i64] XREG!4[15]
%19 = i64 Add i64 %20, %21
XREG!5 = store i64 %19, [32, i64] XREG!4[14]
%14 = load i64, i64 PC!3
%16 = load i64, i64 prev_pc!3
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb4, label %bb5
bb4:
%17 = load i64, i64 PC!3
%18 = i64 Add i64 %17, 4
PC!24 = store i64 %18, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %15 PC!24 PC!3
%12 = load i64, i64 PC!4
PC!5 = store i64 %12, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
%23 = load i64, i64 PC!5
prev_pc!4 = store i64 %23, i64 prev_pc!3
%31 = load i64, [32, i64] XREG!6[12]
%29 = i64 Add i64 %31, 0
tmp_address!2 = store i64 %29, i64 tmp_address!1
%30 = load i64, i64 tmp_address!2
%33 = load i64, [32, i64] XREG!6[15]
rs2_var!2 = store i64 %33, i64 rs2_var!1
%32 = load i64, i64 rs2_var!2
%34 = i64 Lshr i64 %30, 3
%35 = Extract i53 of i64 %34 <52, 0>
mem_index!2 = store i53 %35, i53 mem_index!1
%36 = Extract i3 of i64 %30 <2, 0>
%37 = i1 Eq i3 %36, 0
br i1 %37, label %bb7, label %bb8
bb7:
%38 = load i53, i53 mem_index!2
MEM!2 = store i64 %32, [9007199254740992, i64] MEM!1[%38]
br label %bb9
bb8:
%39 = load i53, i53 mem_index!2
%40 = i53 Add i53 %39, 1
%41 = load i64, [9007199254740992, i64] MEM!1[%40]
tmp_dword1!2 = store i64 %41, i64 tmp_dword1!1
%42 = load i53, i53 mem_index!2
%43 = load i64, [9007199254740992, i64] MEM!1[%42]
tmp_dword2!2 = store i64 %43, i64 tmp_dword2!1
%44 = Extract i3 of i64 %30 <2, 0>
%45 = i1 Eq i3 %44, 1
br i1 %45, label %bb10, label %bb11
bb9:
MEM!5 = phi ite %37 MEM!2 MEM!4
tmp_dword2!11 = phi ite %37 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %37 tmp_dword1!1 tmp_dword1!3
%24 = load i64, i64 PC!5
%26 = load i64, i64 prev_pc!4
%25 = i1 Eq i64 %24, %26
br i1 %25, label %bb12, label %bb13
bb10:
%46 = i64 Lshr i64 %32, 56
%47 = Extract i8 of i64 %46 <7, 0>
%49 = load i64, i64 tmp_dword1!2
%50 = Zext i8 %47 to i64
%51 = i64 And i64 %49, -256
%52 = i64 Shl i64 %50, 0
%48 = i64 Or i64 %51, %52
tmp_dword1!4 = store i64 %48, i64 tmp_dword1!2
%53 = i64 Lshr i64 %32, 0
%54 = Extract i56 of i64 %53 <55, 0>
%56 = load i64, i64 tmp_dword2!2
%57 = Zext i56 %54 to i64
%58 = i64 And i64 %56, 255
%59 = i64 Shl i64 %57, 8
%55 = i64 Or i64 %58, %59
tmp_dword2!4 = store i64 %55, i64 tmp_dword2!2
br label %bb14
bb11:
%60 = Extract i3 of i64 %30 <2, 0>
%61 = i1 Eq i3 %60, 2
br i1 %61, label %bb15, label %bb16
bb12:
%27 = load i64, i64 PC!5
%28 = i64 Add i64 %27, 4
PC!6 = store i64 %28, i64 PC!5
br label %bb17
bb13:
br label %bb17
bb14:
tmp_dword2!3 = phi ite %45 tmp_dword2!4 ite %61 tmp_dword2!5 ite %77 tmp_dword2!6 ite %93 tmp_dword2!7 ite %109 tmp_dword2!8 ite %125 tmp_dword2!9 tmp_dword2!10
tmp_dword1!3 = phi ite %45 tmp_dword1!4 ite %61 tmp_dword1!5 ite %77 tmp_dword1!6 ite %93 tmp_dword1!7 ite %109 tmp_dword1!8 ite %125 tmp_dword1!9 tmp_dword1!10
%154 = load i64, i64 tmp_dword1!3
%155 = load i53, i53 mem_index!2
%156 = i53 Add i53 %155, 1
MEM!3 = store i64 %154, [9007199254740992, i64] MEM!1[%156]
%157 = load i64, i64 tmp_dword2!3
%158 = load i53, i53 mem_index!2
MEM!4 = store i64 %157, [9007199254740992, i64] MEM!3[%158]
br label %bb9
bb15:
%62 = i64 Lshr i64 %32, 48
%63 = Extract i16 of i64 %62 <15, 0>
%65 = load i64, i64 tmp_dword1!2
%66 = Zext i16 %63 to i64
%67 = i64 And i64 %65, -65536
%68 = i64 Shl i64 %66, 0
%64 = i64 Or i64 %67, %68
tmp_dword1!5 = store i64 %64, i64 tmp_dword1!2
%69 = i64 Lshr i64 %32, 0
%70 = Extract i48 of i64 %69 <47, 0>
%72 = load i64, i64 tmp_dword2!2
%73 = Zext i48 %70 to i64
%74 = i64 And i64 %72, 65535
%75 = i64 Shl i64 %73, 16
%71 = i64 Or i64 %74, %75
tmp_dword2!5 = store i64 %71, i64 tmp_dword2!2
br label %bb14
bb16:
%76 = Extract i3 of i64 %30 <2, 0>
%77 = i1 Eq i3 %76, 3
br i1 %77, label %bb18, label %bb19
bb17:
PC!7 = phi ite %25 PC!6 PC!5
%22 = load i64, i64 PC!7
PC!8 = store i64 %22, i64 PC!7
XREG!7 = store i64 0, [32, i64] XREG!6[0]
%160 = load i64, i64 PC!8
prev_pc!5 = store i64 %160, i64 prev_pc!4
%168 = load i64, [32, i64] XREG!7[12]
%166 = i64 Add i64 %168, 8
tmp_address!3 = store i64 %166, i64 tmp_address!2
%167 = load i64, i64 tmp_address!3
%170 = load i64, [32, i64] XREG!7[14]
rs2_var!3 = store i64 %170, i64 rs2_var!2
%169 = load i64, i64 rs2_var!3
%171 = i64 Lshr i64 %167, 3
%172 = Extract i53 of i64 %171 <52, 0>
mem_index!3 = store i53 %172, i53 mem_index!2
%173 = Extract i3 of i64 %167 <2, 0>
%174 = i1 Eq i3 %173, 0
br i1 %174, label %bb26, label %bb27
bb18:
%78 = i64 Lshr i64 %32, 40
%79 = Extract i24 of i64 %78 <23, 0>
%81 = load i64, i64 tmp_dword1!2
%82 = Zext i24 %79 to i64
%83 = i64 And i64 %81, -16777216
%84 = i64 Shl i64 %82, 0
%80 = i64 Or i64 %83, %84
tmp_dword1!6 = store i64 %80, i64 tmp_dword1!2
%85 = i64 Lshr i64 %32, 0
%86 = Extract i40 of i64 %85 <39, 0>
%88 = load i64, i64 tmp_dword2!2
%89 = Zext i40 %86 to i64
%90 = i64 And i64 %88, 16777215
%91 = i64 Shl i64 %89, 24
%87 = i64 Or i64 %90, %91
tmp_dword2!6 = store i64 %87, i64 tmp_dword2!2
br label %bb14
bb19:
%92 = Extract i3 of i64 %30 <2, 0>
%93 = i1 Eq i3 %92, -4
br i1 %93, label %bb20, label %bb21
bb20:
%94 = i64 Lshr i64 %32, 32
%95 = Extract i32 of i64 %94 <31, 0>
%97 = load i64, i64 tmp_dword1!2
%98 = Zext i32 %95 to i64
%99 = i64 And i64 %97, -4294967296
%100 = i64 Shl i64 %98, 0
%96 = i64 Or i64 %99, %100
tmp_dword1!7 = store i64 %96, i64 tmp_dword1!2
%101 = i64 Lshr i64 %32, 0
%102 = Extract i32 of i64 %101 <31, 0>
%104 = load i64, i64 tmp_dword2!2
%105 = Zext i32 %102 to i64
%106 = i64 And i64 %104, 4294967295
%107 = i64 Shl i64 %105, 32
%103 = i64 Or i64 %106, %107
tmp_dword2!7 = store i64 %103, i64 tmp_dword2!2
br label %bb14
bb21:
%108 = Extract i3 of i64 %30 <2, 0>
%109 = i1 Eq i3 %108, -3
br i1 %109, label %bb22, label %bb23
bb22:
%110 = i64 Lshr i64 %32, 24
%111 = Extract i40 of i64 %110 <39, 0>
%113 = load i64, i64 tmp_dword1!2
%114 = Zext i40 %111 to i64
%115 = i64 And i64 %113, -1099511627776
%116 = i64 Shl i64 %114, 0
%112 = i64 Or i64 %115, %116
tmp_dword1!8 = store i64 %112, i64 tmp_dword1!2
%117 = i64 Lshr i64 %32, 0
%118 = Extract i24 of i64 %117 <23, 0>
%120 = load i64, i64 tmp_dword2!2
%121 = Zext i24 %118 to i64
%122 = i64 And i64 %120, 1099511627775
%123 = i64 Shl i64 %121, 40
%119 = i64 Or i64 %122, %123
tmp_dword2!8 = store i64 %119, i64 tmp_dword2!2
br label %bb14
bb23:
%124 = Extract i3 of i64 %30 <2, 0>
%125 = i1 Eq i3 %124, -2
br i1 %125, label %bb24, label %bb25
bb24:
%126 = i64 Lshr i64 %32, 16
%127 = Extract i48 of i64 %126 <47, 0>
%129 = load i64, i64 tmp_dword1!2
%130 = Zext i48 %127 to i64
%131 = i64 And i64 %129, -281474976710656
%132 = i64 Shl i64 %130, 0
%128 = i64 Or i64 %131, %132
tmp_dword1!9 = store i64 %128, i64 tmp_dword1!2
%133 = i64 Lshr i64 %32, 0
%134 = Extract i16 of i64 %133 <15, 0>
%136 = load i64, i64 tmp_dword2!2
%137 = Zext i16 %134 to i64
%138 = i64 And i64 %136, 281474976710655
%139 = i64 Shl i64 %137, 48
%135 = i64 Or i64 %138, %139
tmp_dword2!9 = store i64 %135, i64 tmp_dword2!2
br label %bb14
bb25:
%140 = i64 Lshr i64 %32, 8
%141 = Extract i56 of i64 %140 <55, 0>
%143 = load i64, i64 tmp_dword1!2
%144 = Zext i56 %141 to i64
%145 = i64 And i64 %143, -72057594037927936
%146 = i64 Shl i64 %144, 0
%142 = i64 Or i64 %145, %146
tmp_dword1!10 = store i64 %142, i64 tmp_dword1!2
%147 = i64 Lshr i64 %32, 0
%148 = Extract i8 of i64 %147 <7, 0>
%150 = load i64, i64 tmp_dword2!2
%151 = Zext i8 %148 to i64
%152 = i64 And i64 %150, 72057594037927935
%153 = i64 Shl i64 %151, 56
%149 = i64 Or i64 %152, %153
tmp_dword2!10 = store i64 %149, i64 tmp_dword2!2
br label %bb14
bb26:
%175 = load i53, i53 mem_index!3
MEM!6 = store i64 %169, [9007199254740992, i64] MEM!5[%175]
br label %bb28
bb27:
%176 = load i53, i53 mem_index!3
%177 = i53 Add i53 %176, 1
%178 = load i64, [9007199254740992, i64] MEM!5[%177]
tmp_dword1!12 = store i64 %178, i64 tmp_dword1!11
%179 = load i53, i53 mem_index!3
%180 = load i64, [9007199254740992, i64] MEM!5[%179]
tmp_dword2!12 = store i64 %180, i64 tmp_dword2!11
%181 = Extract i3 of i64 %167 <2, 0>
%182 = i1 Eq i3 %181, 1
br i1 %182, label %bb29, label %bb30
bb28:
MEM!9 = phi ite %174 MEM!6 MEM!8
tmp_dword2!21 = phi ite %174 tmp_dword2!11 tmp_dword2!20
tmp_dword1!21 = phi ite %174 tmp_dword1!11 tmp_dword1!20
%161 = load i64, i64 PC!8
%163 = load i64, i64 prev_pc!5
%162 = i1 Eq i64 %161, %163
br i1 %162, label %bb31, label %bb32
bb29:
%183 = i64 Lshr i64 %169, 56
%184 = Extract i8 of i64 %183 <7, 0>
%186 = load i64, i64 tmp_dword1!12
%187 = Zext i8 %184 to i64
%188 = i64 And i64 %186, -256
%189 = i64 Shl i64 %187, 0
%185 = i64 Or i64 %188, %189
tmp_dword1!13 = store i64 %185, i64 tmp_dword1!12
%190 = i64 Lshr i64 %169, 0
%191 = Extract i56 of i64 %190 <55, 0>
%193 = load i64, i64 tmp_dword2!12
%194 = Zext i56 %191 to i64
%195 = i64 And i64 %193, 255
%196 = i64 Shl i64 %194, 8
%192 = i64 Or i64 %195, %196
tmp_dword2!13 = store i64 %192, i64 tmp_dword2!12
br label %bb33
bb30:
%197 = Extract i3 of i64 %167 <2, 0>
%198 = i1 Eq i3 %197, 2
br i1 %198, label %bb34, label %bb35
bb31:
%164 = load i64, i64 PC!8
%165 = i64 Add i64 %164, 4
PC!9 = store i64 %165, i64 PC!8
br label %bb36
bb32:
br label %bb36
bb33:
tmp_dword2!20 = phi ite %182 tmp_dword2!13 ite %198 tmp_dword2!14 ite %214 tmp_dword2!19 ite %230 tmp_dword2!15 ite %246 tmp_dword2!18 ite %262 tmp_dword2!17 tmp_dword2!16
tmp_dword1!20 = phi ite %182 tmp_dword1!13 ite %198 tmp_dword1!14 ite %214 tmp_dword1!19 ite %230 tmp_dword1!15 ite %246 tmp_dword1!18 ite %262 tmp_dword1!17 tmp_dword1!16
%291 = load i64, i64 tmp_dword1!20
%292 = load i53, i53 mem_index!3
%293 = i53 Add i53 %292, 1
MEM!7 = store i64 %291, [9007199254740992, i64] MEM!5[%293]
%294 = load i64, i64 tmp_dword2!20
%295 = load i53, i53 mem_index!3
MEM!8 = store i64 %294, [9007199254740992, i64] MEM!7[%295]
br label %bb28
bb34:
%199 = i64 Lshr i64 %169, 48
%200 = Extract i16 of i64 %199 <15, 0>
%202 = load i64, i64 tmp_dword1!12
%203 = Zext i16 %200 to i64
%204 = i64 And i64 %202, -65536
%205 = i64 Shl i64 %203, 0
%201 = i64 Or i64 %204, %205
tmp_dword1!14 = store i64 %201, i64 tmp_dword1!12
%206 = i64 Lshr i64 %169, 0
%207 = Extract i48 of i64 %206 <47, 0>
%209 = load i64, i64 tmp_dword2!12
%210 = Zext i48 %207 to i64
%211 = i64 And i64 %209, 65535
%212 = i64 Shl i64 %210, 16
%208 = i64 Or i64 %211, %212
tmp_dword2!14 = store i64 %208, i64 tmp_dword2!12
br label %bb33
bb35:
%213 = Extract i3 of i64 %167 <2, 0>
%214 = i1 Eq i3 %213, 3
br i1 %214, label %bb37, label %bb38
bb36:
PC!10 = phi ite %162 PC!9 PC!8
%159 = load i64, i64 PC!10
PC!11 = store i64 %159, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
%297 = load i64, i64 PC!11
prev_pc!6 = store i64 %297, i64 prev_pc!5
%304 = load i64, [32, i64] XREG!8[16]
%303 = i64 Add i64 %304, 2
XREG!9 = store i64 %303, [32, i64] XREG!8[16]
%298 = load i64, i64 PC!11
%300 = load i64, i64 prev_pc!6
%299 = i1 Eq i64 %298, %300
br i1 %299, label %bb45, label %bb46
bb37:
%215 = i64 Lshr i64 %169, 40
%216 = Extract i24 of i64 %215 <23, 0>
%218 = load i64, i64 tmp_dword1!12
%219 = Zext i24 %216 to i64
%220 = i64 And i64 %218, -16777216
%221 = i64 Shl i64 %219, 0
%217 = i64 Or i64 %220, %221
tmp_dword1!19 = store i64 %217, i64 tmp_dword1!12
%222 = i64 Lshr i64 %169, 0
%223 = Extract i40 of i64 %222 <39, 0>
%225 = load i64, i64 tmp_dword2!12
%226 = Zext i40 %223 to i64
%227 = i64 And i64 %225, 16777215
%228 = i64 Shl i64 %226, 24
%224 = i64 Or i64 %227, %228
tmp_dword2!19 = store i64 %224, i64 tmp_dword2!12
br label %bb33
bb38:
%229 = Extract i3 of i64 %167 <2, 0>
%230 = i1 Eq i3 %229, -4
br i1 %230, label %bb39, label %bb40
bb39:
%231 = i64 Lshr i64 %169, 32
%232 = Extract i32 of i64 %231 <31, 0>
%234 = load i64, i64 tmp_dword1!12
%235 = Zext i32 %232 to i64
%236 = i64 And i64 %234, -4294967296
%237 = i64 Shl i64 %235, 0
%233 = i64 Or i64 %236, %237
tmp_dword1!15 = store i64 %233, i64 tmp_dword1!12
%238 = i64 Lshr i64 %169, 0
%239 = Extract i32 of i64 %238 <31, 0>
%241 = load i64, i64 tmp_dword2!12
%242 = Zext i32 %239 to i64
%243 = i64 And i64 %241, 4294967295
%244 = i64 Shl i64 %242, 32
%240 = i64 Or i64 %243, %244
tmp_dword2!15 = store i64 %240, i64 tmp_dword2!12
br label %bb33
bb40:
%245 = Extract i3 of i64 %167 <2, 0>
%246 = i1 Eq i3 %245, -3
br i1 %246, label %bb41, label %bb42
bb41:
%247 = i64 Lshr i64 %169, 24
%248 = Extract i40 of i64 %247 <39, 0>
%250 = load i64, i64 tmp_dword1!12
%251 = Zext i40 %248 to i64
%252 = i64 And i64 %250, -1099511627776
%253 = i64 Shl i64 %251, 0
%249 = i64 Or i64 %252, %253
tmp_dword1!18 = store i64 %249, i64 tmp_dword1!12
%254 = i64 Lshr i64 %169, 0
%255 = Extract i24 of i64 %254 <23, 0>
%257 = load i64, i64 tmp_dword2!12
%258 = Zext i24 %255 to i64
%259 = i64 And i64 %257, 1099511627775
%260 = i64 Shl i64 %258, 40
%256 = i64 Or i64 %259, %260
tmp_dword2!18 = store i64 %256, i64 tmp_dword2!12
br label %bb33
bb42:
%261 = Extract i3 of i64 %167 <2, 0>
%262 = i1 Eq i3 %261, -2
br i1 %262, label %bb43, label %bb44
bb43:
%263 = i64 Lshr i64 %169, 16
%264 = Extract i48 of i64 %263 <47, 0>
%266 = load i64, i64 tmp_dword1!12
%267 = Zext i48 %264 to i64
%268 = i64 And i64 %266, -281474976710656
%269 = i64 Shl i64 %267, 0
%265 = i64 Or i64 %268, %269
tmp_dword1!17 = store i64 %265, i64 tmp_dword1!12
%270 = i64 Lshr i64 %169, 0
%271 = Extract i16 of i64 %270 <15, 0>
%273 = load i64, i64 tmp_dword2!12
%274 = Zext i16 %271 to i64
%275 = i64 And i64 %273, 281474976710655
%276 = i64 Shl i64 %274, 48
%272 = i64 Or i64 %275, %276
tmp_dword2!17 = store i64 %272, i64 tmp_dword2!12
br label %bb33
bb44:
%277 = i64 Lshr i64 %169, 8
%278 = Extract i56 of i64 %277 <55, 0>
%280 = load i64, i64 tmp_dword1!12
%281 = Zext i56 %278 to i64
%282 = i64 And i64 %280, -72057594037927936
%283 = i64 Shl i64 %281, 0
%279 = i64 Or i64 %282, %283
tmp_dword1!16 = store i64 %279, i64 tmp_dword1!12
%284 = i64 Lshr i64 %169, 0
%285 = Extract i8 of i64 %284 <7, 0>
%287 = load i64, i64 tmp_dword2!12
%288 = Zext i8 %285 to i64
%289 = i64 And i64 %287, 72057594037927935
%290 = i64 Shl i64 %288, 56
%286 = i64 Or i64 %289, %290
tmp_dword2!16 = store i64 %286, i64 tmp_dword2!12
br label %bb33
bb45:
%301 = load i64, i64 PC!11
%302 = i64 Add i64 %301, 4
PC!23 = store i64 %302, i64 PC!11
br label %bb47
bb46:
br label %bb47
bb47:
PC!12 = phi ite %299 PC!23 PC!11
%296 = load i64, i64 PC!12
PC!13 = store i64 %296, i64 PC!12
XREG!10 = store i64 0, [32, i64] XREG!9[0]
%306 = load i64, i64 PC!13
prev_pc!7 = store i64 %306, i64 prev_pc!6
%313 = load i64, [32, i64] XREG!10[12]
%312 = i64 Add i64 %313, 16
XREG!11 = store i64 %312, [32, i64] XREG!10[12]
%307 = load i64, i64 PC!13
%309 = load i64, i64 prev_pc!7
%308 = i1 Eq i64 %307, %309
br i1 %308, label %bb48, label %bb49
bb48:
%310 = load i64, i64 PC!13
%311 = i64 Add i64 %310, 4
PC!14 = store i64 %311, i64 PC!13
br label %bb50
bb49:
br label %bb50
bb50:
PC!15 = phi ite %308 PC!14 PC!13
%305 = load i64, i64 PC!15
PC!16 = store i64 %305, i64 PC!15
XREG!12 = store i64 0, [32, i64] XREG!11[0]
%315 = load i64, i64 PC!16
prev_pc!8 = store i64 %315, i64 prev_pc!7
%324 = load i64, [32, i64] XREG!12[16]
%325 = load i64, [32, i64] XREG!12[13]
%321 = i1 Ne i64 %324, %325
br i1 %321, label %bb51, label %bb52
bb51:
%322 = load i64, i64 PC!16
%323 = i64 Add i64 %322, -24
PC!22 = store i64 %323, i64 PC!16
br label %bb53
bb52:
br label %bb53
bb53:
PC!17 = phi ite %321 PC!22 PC!16
%316 = load i64, i64 PC!17
%318 = load i64, i64 prev_pc!8
%317 = i1 Eq i64 %316, %318
br i1 %317, label %bb54, label %bb55
bb54:
%319 = load i64, i64 PC!17
%320 = i64 Add i64 %319, 4
PC!18 = store i64 %320, i64 PC!17
br label %bb56
bb55:
br label %bb56
bb56:
PC!19 = phi ite %317 PC!18 PC!17
%314 = load i64, i64 PC!19
PC!20 = store i64 %314, i64 PC!19
%1 = load i64, i64 PC!20
PC!21 = store i64 %1, i64 PC!20
ret void

SSA forward
bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[14]
%2 = i64 Add i64 %3, %4
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!25 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%7 = load i64, [32, i64] XREG!4[14]
%8 = load i64, [32, i64] XREG!4[15]
%6 = i64 Add i64 %7, %8
XREG!5 = store i64 %6, [32, i64] XREG!4[14]
br label %bb3
bb3:
%5 = i64 Add i64 PC!2, 4
PC!24 = store i64 %5, i64 PC!3
br label %bb4
bb4:
store i64 %5, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[12]
%10 = i64 Add i64 %11, 0
tmp_address!2 = store i64 %10, i64 tmp_address!1
%12 = load i64, [32, i64] XREG!6[15]
rs2_var!2 = store i64 %12, i64 rs2_var!1
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb5, label %bb6
bb5:
MEM!2 = store i64 %12, [9007199254740992, i64] MEM!1[%14]
br label %bb7
bb6:
%17 = i53 Add i53 %14, 1
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword1!2 = store i64 %18, i64 tmp_dword1!1
%19 = load i64, [9007199254740992, i64] MEM!1[%14]
tmp_dword2!2 = store i64 %19, i64 tmp_dword2!1
%20 = Extract i3 of i64 %10 <2, 0>
%21 = i1 Eq i3 %20, 1
br i1 %21, label %bb8, label %bb9
bb7:
MEM!5 = phi ite %16 MEM!2 MEM!4
tmp_dword2!11 = phi ite %16 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %16 tmp_dword1!1 tmp_dword1!3
br label %bb10
bb8:
%22 = i64 Lshr i64 %12, 56
%23 = Extract i8 of i64 %22 <7, 0>
%25 = Zext i8 %23 to i64
%26 = i64 And i64 %18, -256
%27 = i64 Shl i64 %25, 0
%24 = i64 Or i64 %26, %27
tmp_dword1!4 = store i64 %24, i64 tmp_dword1!2
%28 = i64 Lshr i64 %12, 0
%29 = Extract i56 of i64 %28 <55, 0>
%31 = Zext i56 %29 to i64
%32 = i64 And i64 %19, 255
%33 = i64 Shl i64 %31, 8
%30 = i64 Or i64 %32, %33
tmp_dword2!4 = store i64 %30, i64 tmp_dword2!2
br label %bb11
bb9:
%34 = Extract i3 of i64 %10 <2, 0>
%35 = i1 Eq i3 %34, 2
br i1 %35, label %bb12, label %bb13
bb10:
%9 = i64 Add i64 PC!4, 4
PC!6 = store i64 %9, i64 PC!5
br label %bb14
bb11:
tmp_dword2!3 = phi ite %21 %30 ite %35 %44 ite %49 %58 ite %63 %72 ite %77 %86 ite %91 %100 %112
tmp_dword1!3 = phi ite %21 %24 ite %35 %38 ite %49 %52 ite %63 %66 ite %77 %80 ite %91 %94 %106
%116 = i53 Add i53 %14, 1
MEM!3 = store i64 tmp_dword1!3, [9007199254740992, i64] MEM!1[%116]
MEM!4 = store i64 tmp_dword2!3, [9007199254740992, i64] MEM!3[%14]
br label %bb7
bb12:
%36 = i64 Lshr i64 %12, 48
%37 = Extract i16 of i64 %36 <15, 0>
%39 = Zext i16 %37 to i64
%40 = i64 And i64 %18, -65536
%41 = i64 Shl i64 %39, 0
%38 = i64 Or i64 %40, %41
tmp_dword1!5 = store i64 %38, i64 tmp_dword1!2
%42 = i64 Lshr i64 %12, 0
%43 = Extract i48 of i64 %42 <47, 0>
%45 = Zext i48 %43 to i64
%46 = i64 And i64 %19, 65535
%47 = i64 Shl i64 %45, 16
%44 = i64 Or i64 %46, %47
tmp_dword2!5 = store i64 %44, i64 tmp_dword2!2
br label %bb11
bb13:
%48 = Extract i3 of i64 %10 <2, 0>
%49 = i1 Eq i3 %48, 3
br i1 %49, label %bb15, label %bb16
bb14:
store i64 %9, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!7 = store i64 0, [32, i64] XREG!6[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%119 = load i64, [32, i64] XREG!7[12]
%118 = i64 Add i64 %119, 8
tmp_address!3 = store i64 %118, i64 tmp_address!2
%120 = load i64, [32, i64] XREG!7[14]
rs2_var!3 = store i64 %120, i64 rs2_var!2
%121 = i64 Lshr i64 %118, 3
%122 = Extract i53 of i64 %121 <52, 0>
mem_index!3 = store i53 %122, i53 mem_index!2
%123 = Extract i3 of i64 %118 <2, 0>
%124 = i1 Eq i3 %123, 0
br i1 %124, label %bb17, label %bb18
bb15:
%50 = i64 Lshr i64 %12, 40
%51 = Extract i24 of i64 %50 <23, 0>
%53 = Zext i24 %51 to i64
%54 = i64 And i64 %18, -16777216
%55 = i64 Shl i64 %53, 0
%52 = i64 Or i64 %54, %55
tmp_dword1!6 = store i64 %52, i64 tmp_dword1!2
%56 = i64 Lshr i64 %12, 0
%57 = Extract i40 of i64 %56 <39, 0>
%59 = Zext i40 %57 to i64
%60 = i64 And i64 %19, 16777215
%61 = i64 Shl i64 %59, 24
%58 = i64 Or i64 %60, %61
tmp_dword2!6 = store i64 %58, i64 tmp_dword2!2
br label %bb11
bb16:
%62 = Extract i3 of i64 %10 <2, 0>
%63 = i1 Eq i3 %62, -4
br i1 %63, label %bb19, label %bb20
bb17:
MEM!6 = store i64 %120, [9007199254740992, i64] MEM!5[%122]
br label %bb21
bb18:
%125 = i53 Add i53 %122, 1
%126 = load i64, [9007199254740992, i64] MEM!5[%125]
tmp_dword1!12 = store i64 %126, i64 tmp_dword1!11
%127 = load i64, [9007199254740992, i64] MEM!5[%122]
tmp_dword2!12 = store i64 %127, i64 tmp_dword2!11
%128 = Extract i3 of i64 %118 <2, 0>
%129 = i1 Eq i3 %128, 1
br i1 %129, label %bb22, label %bb23
bb19:
%64 = i64 Lshr i64 %12, 32
%65 = Extract i32 of i64 %64 <31, 0>
%67 = Zext i32 %65 to i64
%68 = i64 And i64 %18, -4294967296
%69 = i64 Shl i64 %67, 0
%66 = i64 Or i64 %68, %69
tmp_dword1!7 = store i64 %66, i64 tmp_dword1!2
%70 = i64 Lshr i64 %12, 0
%71 = Extract i32 of i64 %70 <31, 0>
%73 = Zext i32 %71 to i64
%74 = i64 And i64 %19, 4294967295
%75 = i64 Shl i64 %73, 32
%72 = i64 Or i64 %74, %75
tmp_dword2!7 = store i64 %72, i64 tmp_dword2!2
br label %bb11
bb20:
%76 = Extract i3 of i64 %10 <2, 0>
%77 = i1 Eq i3 %76, -3
br i1 %77, label %bb24, label %bb25
bb21:
MEM!9 = phi ite %124 MEM!6 MEM!8
tmp_dword2!21 = phi ite %124 tmp_dword2!11 tmp_dword2!20
tmp_dword1!21 = phi ite %124 tmp_dword1!11 tmp_dword1!20
br label %bb26
bb22:
%130 = i64 Lshr i64 %120, 56
%131 = Extract i8 of i64 %130 <7, 0>
%133 = Zext i8 %131 to i64
%134 = i64 And i64 %126, -256
%135 = i64 Shl i64 %133, 0
%132 = i64 Or i64 %134, %135
tmp_dword1!13 = store i64 %132, i64 tmp_dword1!12
%136 = i64 Lshr i64 %120, 0
%137 = Extract i56 of i64 %136 <55, 0>
%139 = Zext i56 %137 to i64
%140 = i64 And i64 %127, 255
%141 = i64 Shl i64 %139, 8
%138 = i64 Or i64 %140, %141
tmp_dword2!13 = store i64 %138, i64 tmp_dword2!12
br label %bb27
bb23:
%142 = Extract i3 of i64 %118 <2, 0>
%143 = i1 Eq i3 %142, 2
br i1 %143, label %bb28, label %bb29
bb24:
%78 = i64 Lshr i64 %12, 24
%79 = Extract i40 of i64 %78 <39, 0>
%81 = Zext i40 %79 to i64
%82 = i64 And i64 %18, -1099511627776
%83 = i64 Shl i64 %81, 0
%80 = i64 Or i64 %82, %83
tmp_dword1!8 = store i64 %80, i64 tmp_dword1!2
%84 = i64 Lshr i64 %12, 0
%85 = Extract i24 of i64 %84 <23, 0>
%87 = Zext i24 %85 to i64
%88 = i64 And i64 %19, 1099511627775
%89 = i64 Shl i64 %87, 40
%86 = i64 Or i64 %88, %89
tmp_dword2!8 = store i64 %86, i64 tmp_dword2!2
br label %bb11
bb25:
%90 = Extract i3 of i64 %10 <2, 0>
%91 = i1 Eq i3 %90, -2
br i1 %91, label %bb30, label %bb31
bb26:
%117 = i64 Add i64 PC!7, 4
PC!9 = store i64 %117, i64 PC!8
br label %bb32
bb27:
tmp_dword2!20 = phi ite %129 %138 ite %143 %152 ite %157 %166 ite %171 %180 ite %185 %194 ite %199 %208 %220
tmp_dword1!20 = phi ite %129 %132 ite %143 %146 ite %157 %160 ite %171 %174 ite %185 %188 ite %199 %202 %214
%224 = i53 Add i53 %122, 1
MEM!7 = store i64 tmp_dword1!20, [9007199254740992, i64] MEM!5[%224]
MEM!8 = store i64 tmp_dword2!20, [9007199254740992, i64] MEM!7[%122]
br label %bb21
bb28:
%144 = i64 Lshr i64 %120, 48
%145 = Extract i16 of i64 %144 <15, 0>
%147 = Zext i16 %145 to i64
%148 = i64 And i64 %126, -65536
%149 = i64 Shl i64 %147, 0
%146 = i64 Or i64 %148, %149
tmp_dword1!14 = store i64 %146, i64 tmp_dword1!12
%150 = i64 Lshr i64 %120, 0
%151 = Extract i48 of i64 %150 <47, 0>
%153 = Zext i48 %151 to i64
%154 = i64 And i64 %127, 65535
%155 = i64 Shl i64 %153, 16
%152 = i64 Or i64 %154, %155
tmp_dword2!14 = store i64 %152, i64 tmp_dword2!12
br label %bb27
bb29:
%156 = Extract i3 of i64 %118 <2, 0>
%157 = i1 Eq i3 %156, 3
br i1 %157, label %bb33, label %bb34
bb30:
%92 = i64 Lshr i64 %12, 16
%93 = Extract i48 of i64 %92 <47, 0>
%95 = Zext i48 %93 to i64
%96 = i64 And i64 %18, -281474976710656
%97 = i64 Shl i64 %95, 0
%94 = i64 Or i64 %96, %97
tmp_dword1!9 = store i64 %94, i64 tmp_dword1!2
%98 = i64 Lshr i64 %12, 0
%99 = Extract i16 of i64 %98 <15, 0>
%101 = Zext i16 %99 to i64
%102 = i64 And i64 %19, 281474976710655
%103 = i64 Shl i64 %101, 48
%100 = i64 Or i64 %102, %103
tmp_dword2!9 = store i64 %100, i64 tmp_dword2!2
br label %bb11
bb31:
%104 = i64 Lshr i64 %12, 8
%105 = Extract i56 of i64 %104 <55, 0>
%107 = Zext i56 %105 to i64
%108 = i64 And i64 %18, -72057594037927936
%109 = i64 Shl i64 %107, 0
%106 = i64 Or i64 %108, %109
tmp_dword1!10 = store i64 %106, i64 tmp_dword1!2
%110 = i64 Lshr i64 %12, 0
%111 = Extract i8 of i64 %110 <7, 0>
%113 = Zext i8 %111 to i64
%114 = i64 And i64 %19, 72057594037927935
%115 = i64 Shl i64 %113, 56
%112 = i64 Or i64 %114, %115
tmp_dword2!10 = store i64 %112, i64 tmp_dword2!2
br label %bb11
bb32:
store i64 %117, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[16]
%226 = i64 Add i64 %227, 2
XREG!9 = store i64 %226, [32, i64] XREG!8[16]
br label %bb35
bb33:
%158 = i64 Lshr i64 %120, 40
%159 = Extract i24 of i64 %158 <23, 0>
%161 = Zext i24 %159 to i64
%162 = i64 And i64 %126, -16777216
%163 = i64 Shl i64 %161, 0
%160 = i64 Or i64 %162, %163
tmp_dword1!19 = store i64 %160, i64 tmp_dword1!12
%164 = i64 Lshr i64 %120, 0
%165 = Extract i40 of i64 %164 <39, 0>
%167 = Zext i40 %165 to i64
%168 = i64 And i64 %127, 16777215
%169 = i64 Shl i64 %167, 24
%166 = i64 Or i64 %168, %169
tmp_dword2!19 = store i64 %166, i64 tmp_dword2!12
br label %bb27
bb34:
%170 = Extract i3 of i64 %118 <2, 0>
%171 = i1 Eq i3 %170, -4
br i1 %171, label %bb36, label %bb37
bb35:
%225 = i64 Add i64 PC!10, 4
PC!23 = store i64 %225, i64 PC!11
br label %bb38
bb36:
%172 = i64 Lshr i64 %120, 32
%173 = Extract i32 of i64 %172 <31, 0>
%175 = Zext i32 %173 to i64
%176 = i64 And i64 %126, -4294967296
%177 = i64 Shl i64 %175, 0
%174 = i64 Or i64 %176, %177
tmp_dword1!15 = store i64 %174, i64 tmp_dword1!12
%178 = i64 Lshr i64 %120, 0
%179 = Extract i32 of i64 %178 <31, 0>
%181 = Zext i32 %179 to i64
%182 = i64 And i64 %127, 4294967295
%183 = i64 Shl i64 %181, 32
%180 = i64 Or i64 %182, %183
tmp_dword2!15 = store i64 %180, i64 tmp_dword2!12
br label %bb27
bb37:
%184 = Extract i3 of i64 %118 <2, 0>
%185 = i1 Eq i3 %184, -3
br i1 %185, label %bb39, label %bb40
bb38:
store i64 %225, i64 PC!12
PC!13 = store i64 PC!12, i64 PC!12
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!7 = store i64 PC!12, i64 prev_pc!6
%230 = load i64, [32, i64] XREG!10[12]
%229 = i64 Add i64 %230, 16
XREG!11 = store i64 %229, [32, i64] XREG!10[12]
br label %bb41
bb39:
%186 = i64 Lshr i64 %120, 24
%187 = Extract i40 of i64 %186 <39, 0>
%189 = Zext i40 %187 to i64
%190 = i64 And i64 %126, -1099511627776
%191 = i64 Shl i64 %189, 0
%188 = i64 Or i64 %190, %191
tmp_dword1!18 = store i64 %188, i64 tmp_dword1!12
%192 = i64 Lshr i64 %120, 0
%193 = Extract i24 of i64 %192 <23, 0>
%195 = Zext i24 %193 to i64
%196 = i64 And i64 %127, 1099511627775
%197 = i64 Shl i64 %195, 40
%194 = i64 Or i64 %196, %197
tmp_dword2!18 = store i64 %194, i64 tmp_dword2!12
br label %bb27
bb40:
%198 = Extract i3 of i64 %118 <2, 0>
%199 = i1 Eq i3 %198, -2
br i1 %199, label %bb42, label %bb43
bb41:
%228 = i64 Add i64 PC!12, 4
PC!14 = store i64 %228, i64 PC!13
br label %bb44
bb42:
%200 = i64 Lshr i64 %120, 16
%201 = Extract i48 of i64 %200 <47, 0>
%203 = Zext i48 %201 to i64
%204 = i64 And i64 %126, -281474976710656
%205 = i64 Shl i64 %203, 0
%202 = i64 Or i64 %204, %205
tmp_dword1!17 = store i64 %202, i64 tmp_dword1!12
%206 = i64 Lshr i64 %120, 0
%207 = Extract i16 of i64 %206 <15, 0>
%209 = Zext i16 %207 to i64
%210 = i64 And i64 %127, 281474976710655
%211 = i64 Shl i64 %209, 48
%208 = i64 Or i64 %210, %211
tmp_dword2!17 = store i64 %208, i64 tmp_dword2!12
br label %bb27
bb43:
%212 = i64 Lshr i64 %120, 8
%213 = Extract i56 of i64 %212 <55, 0>
%215 = Zext i56 %213 to i64
%216 = i64 And i64 %126, -72057594037927936
%217 = i64 Shl i64 %215, 0
%214 = i64 Or i64 %216, %217
tmp_dword1!16 = store i64 %214, i64 tmp_dword1!12
%218 = i64 Lshr i64 %120, 0
%219 = Extract i8 of i64 %218 <7, 0>
%221 = Zext i8 %219 to i64
%222 = i64 And i64 %127, 72057594037927935
%223 = i64 Shl i64 %221, 56
%220 = i64 Or i64 %222, %223
tmp_dword2!16 = store i64 %220, i64 tmp_dword2!12
br label %bb27
bb44:
store i64 %228, i64 PC!15
PC!16 = store i64 PC!15, i64 PC!15
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!8 = store i64 PC!15, i64 prev_pc!7
%235 = load i64, [32, i64] XREG!12[16]
%236 = load i64, [32, i64] XREG!12[13]
%233 = i1 Ne i64 %235, %236
br i1 %233, label %bb45, label %bb46
bb45:
%234 = i64 Add i64 PC!15, -24
PC!22 = store i64 %234, i64 PC!16
br label %bb47
bb46:
br label %bb47
bb47:
PC!17 = phi ite %233 %234 PC!15
%231 = i1 Eq i64 PC!17, PC!15
br i1 %231, label %bb48, label %bb49
bb48:
%232 = i64 Add i64 PC!17, 4
PC!18 = store i64 %232, i64 PC!17
br label %bb50
bb49:
br label %bb50
bb50:
PC!19 = phi ite %231 %232 PC!17
PC!20 = store i64 PC!19, i64 PC!19
PC!21 = store i64 PC!19, i64 PC!20
ret void

Nested SCCP
bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[14]
%2 = i64 Add i64 %3, %4
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!25 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%7 = load i64, [32, i64] XREG!4[14]
%8 = load i64, [32, i64] XREG!4[15]
%6 = i64 Add i64 %7, %8
XREG!5 = store i64 %6, [32, i64] XREG!4[14]
br label %bb3
bb3:
%5 = i64 Add i64 PC!2, 4
PC!24 = store i64 %5, i64 PC!3
br label %bb4
bb4:
store i64 %5, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[12]
%10 = i64 Add i64 %11, 0
tmp_address!2 = store i64 %10, i64 tmp_address!1
%12 = load i64, [32, i64] XREG!6[15]
rs2_var!2 = store i64 %12, i64 rs2_var!1
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb5, label %bb6
bb5:
MEM!2 = store i64 %12, [9007199254740992, i64] MEM!1[%14]
br label %bb7
bb6:
%17 = i53 Add i53 %14, 1
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword1!2 = store i64 %18, i64 tmp_dword1!1
%19 = load i64, [9007199254740992, i64] MEM!1[%14]
tmp_dword2!2 = store i64 %19, i64 tmp_dword2!1
%20 = Extract i3 of i64 %10 <2, 0>
%21 = i1 Eq i3 %20, 1
br i1 %21, label %bb8, label %bb9
bb7:
MEM!5 = phi ite %16 MEM!2 MEM!4
tmp_dword2!11 = phi ite %16 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %16 tmp_dword1!1 tmp_dword1!3
br label %bb10
bb8:
%22 = i64 Lshr i64 %12, 56
%23 = Extract i8 of i64 %22 <7, 0>
%25 = Zext i8 %23 to i64
%26 = i64 And i64 %18, -256
%27 = i64 Shl i64 %25, 0
%24 = i64 Or i64 %26, %27
tmp_dword1!4 = store i64 %24, i64 tmp_dword1!2
%28 = i64 Lshr i64 %12, 0
%29 = Extract i56 of i64 %28 <55, 0>
%31 = Zext i56 %29 to i64
%32 = i64 And i64 %19, 255
%33 = i64 Shl i64 %31, 8
%30 = i64 Or i64 %32, %33
tmp_dword2!4 = store i64 %30, i64 tmp_dword2!2
br label %bb11
bb9:
%34 = Extract i3 of i64 %10 <2, 0>
%35 = i1 Eq i3 %34, 2
br i1 %35, label %bb12, label %bb13
bb10:
%9 = i64 Add i64 PC!4, 4
PC!6 = store i64 %9, i64 PC!5
br label %bb14
bb11:
tmp_dword2!3 = phi ite %21 %30 ite %35 %44 ite %49 %58 ite %63 %72 ite %77 %86 ite %91 %100 %112
tmp_dword1!3 = phi ite %21 %24 ite %35 %38 ite %49 %52 ite %63 %66 ite %77 %80 ite %91 %94 %106
%116 = i53 Add i53 %14, 1
MEM!3 = store i64 tmp_dword1!3, [9007199254740992, i64] MEM!1[%116]
MEM!4 = store i64 tmp_dword2!3, [9007199254740992, i64] MEM!3[%14]
br label %bb7
bb12:
%36 = i64 Lshr i64 %12, 48
%37 = Extract i16 of i64 %36 <15, 0>
%39 = Zext i16 %37 to i64
%40 = i64 And i64 %18, -65536
%41 = i64 Shl i64 %39, 0
%38 = i64 Or i64 %40, %41
tmp_dword1!5 = store i64 %38, i64 tmp_dword1!2
%42 = i64 Lshr i64 %12, 0
%43 = Extract i48 of i64 %42 <47, 0>
%45 = Zext i48 %43 to i64
%46 = i64 And i64 %19, 65535
%47 = i64 Shl i64 %45, 16
%44 = i64 Or i64 %46, %47
tmp_dword2!5 = store i64 %44, i64 tmp_dword2!2
br label %bb11
bb13:
%48 = Extract i3 of i64 %10 <2, 0>
%49 = i1 Eq i3 %48, 3
br i1 %49, label %bb15, label %bb16
bb14:
store i64 %9, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!7 = store i64 0, [32, i64] XREG!6[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%119 = load i64, [32, i64] XREG!7[12]
%118 = i64 Add i64 %119, 8
tmp_address!3 = store i64 %118, i64 tmp_address!2
%120 = load i64, [32, i64] XREG!7[14]
rs2_var!3 = store i64 %120, i64 rs2_var!2
%121 = i64 Lshr i64 %118, 3
%122 = Extract i53 of i64 %121 <52, 0>
mem_index!3 = store i53 %122, i53 mem_index!2
%123 = Extract i3 of i64 %118 <2, 0>
%124 = i1 Eq i3 %123, 0
br i1 %124, label %bb17, label %bb18
bb15:
%50 = i64 Lshr i64 %12, 40
%51 = Extract i24 of i64 %50 <23, 0>
%53 = Zext i24 %51 to i64
%54 = i64 And i64 %18, -16777216
%55 = i64 Shl i64 %53, 0
%52 = i64 Or i64 %54, %55
tmp_dword1!6 = store i64 %52, i64 tmp_dword1!2
%56 = i64 Lshr i64 %12, 0
%57 = Extract i40 of i64 %56 <39, 0>
%59 = Zext i40 %57 to i64
%60 = i64 And i64 %19, 16777215
%61 = i64 Shl i64 %59, 24
%58 = i64 Or i64 %60, %61
tmp_dword2!6 = store i64 %58, i64 tmp_dword2!2
br label %bb11
bb16:
%62 = Extract i3 of i64 %10 <2, 0>
%63 = i1 Eq i3 %62, -4
br i1 %63, label %bb19, label %bb20
bb17:
MEM!6 = store i64 %120, [9007199254740992, i64] MEM!5[%122]
br label %bb21
bb18:
%125 = i53 Add i53 %122, 1
%126 = load i64, [9007199254740992, i64] MEM!5[%125]
tmp_dword1!12 = store i64 %126, i64 tmp_dword1!11
%127 = load i64, [9007199254740992, i64] MEM!5[%122]
tmp_dword2!12 = store i64 %127, i64 tmp_dword2!11
%128 = Extract i3 of i64 %118 <2, 0>
%129 = i1 Eq i3 %128, 1
br i1 %129, label %bb22, label %bb23
bb19:
%64 = i64 Lshr i64 %12, 32
%65 = Extract i32 of i64 %64 <31, 0>
%67 = Zext i32 %65 to i64
%68 = i64 And i64 %18, -4294967296
%69 = i64 Shl i64 %67, 0
%66 = i64 Or i64 %68, %69
tmp_dword1!7 = store i64 %66, i64 tmp_dword1!2
%70 = i64 Lshr i64 %12, 0
%71 = Extract i32 of i64 %70 <31, 0>
%73 = Zext i32 %71 to i64
%74 = i64 And i64 %19, 4294967295
%75 = i64 Shl i64 %73, 32
%72 = i64 Or i64 %74, %75
tmp_dword2!7 = store i64 %72, i64 tmp_dword2!2
br label %bb11
bb20:
%76 = Extract i3 of i64 %10 <2, 0>
%77 = i1 Eq i3 %76, -3
br i1 %77, label %bb24, label %bb25
bb21:
MEM!9 = phi ite %124 MEM!6 MEM!8
tmp_dword2!21 = phi ite %124 tmp_dword2!11 tmp_dword2!20
tmp_dword1!21 = phi ite %124 tmp_dword1!11 tmp_dword1!20
br label %bb26
bb22:
%130 = i64 Lshr i64 %120, 56
%131 = Extract i8 of i64 %130 <7, 0>
%133 = Zext i8 %131 to i64
%134 = i64 And i64 %126, -256
%135 = i64 Shl i64 %133, 0
%132 = i64 Or i64 %134, %135
tmp_dword1!13 = store i64 %132, i64 tmp_dword1!12
%136 = i64 Lshr i64 %120, 0
%137 = Extract i56 of i64 %136 <55, 0>
%139 = Zext i56 %137 to i64
%140 = i64 And i64 %127, 255
%141 = i64 Shl i64 %139, 8
%138 = i64 Or i64 %140, %141
tmp_dword2!13 = store i64 %138, i64 tmp_dword2!12
br label %bb27
bb23:
%142 = Extract i3 of i64 %118 <2, 0>
%143 = i1 Eq i3 %142, 2
br i1 %143, label %bb28, label %bb29
bb24:
%78 = i64 Lshr i64 %12, 24
%79 = Extract i40 of i64 %78 <39, 0>
%81 = Zext i40 %79 to i64
%82 = i64 And i64 %18, -1099511627776
%83 = i64 Shl i64 %81, 0
%80 = i64 Or i64 %82, %83
tmp_dword1!8 = store i64 %80, i64 tmp_dword1!2
%84 = i64 Lshr i64 %12, 0
%85 = Extract i24 of i64 %84 <23, 0>
%87 = Zext i24 %85 to i64
%88 = i64 And i64 %19, 1099511627775
%89 = i64 Shl i64 %87, 40
%86 = i64 Or i64 %88, %89
tmp_dword2!8 = store i64 %86, i64 tmp_dword2!2
br label %bb11
bb25:
%90 = Extract i3 of i64 %10 <2, 0>
%91 = i1 Eq i3 %90, -2
br i1 %91, label %bb30, label %bb31
bb26:
%117 = i64 Add i64 PC!7, 4
PC!9 = store i64 %117, i64 PC!8
br label %bb32
bb27:
tmp_dword2!20 = phi ite %129 %138 ite %143 %152 ite %157 %166 ite %171 %180 ite %185 %194 ite %199 %208 %220
tmp_dword1!20 = phi ite %129 %132 ite %143 %146 ite %157 %160 ite %171 %174 ite %185 %188 ite %199 %202 %214
%224 = i53 Add i53 %122, 1
MEM!7 = store i64 tmp_dword1!20, [9007199254740992, i64] MEM!5[%224]
MEM!8 = store i64 tmp_dword2!20, [9007199254740992, i64] MEM!7[%122]
br label %bb21
bb28:
%144 = i64 Lshr i64 %120, 48
%145 = Extract i16 of i64 %144 <15, 0>
%147 = Zext i16 %145 to i64
%148 = i64 And i64 %126, -65536
%149 = i64 Shl i64 %147, 0
%146 = i64 Or i64 %148, %149
tmp_dword1!14 = store i64 %146, i64 tmp_dword1!12
%150 = i64 Lshr i64 %120, 0
%151 = Extract i48 of i64 %150 <47, 0>
%153 = Zext i48 %151 to i64
%154 = i64 And i64 %127, 65535
%155 = i64 Shl i64 %153, 16
%152 = i64 Or i64 %154, %155
tmp_dword2!14 = store i64 %152, i64 tmp_dword2!12
br label %bb27
bb29:
%156 = Extract i3 of i64 %118 <2, 0>
%157 = i1 Eq i3 %156, 3
br i1 %157, label %bb33, label %bb34
bb30:
%92 = i64 Lshr i64 %12, 16
%93 = Extract i48 of i64 %92 <47, 0>
%95 = Zext i48 %93 to i64
%96 = i64 And i64 %18, -281474976710656
%97 = i64 Shl i64 %95, 0
%94 = i64 Or i64 %96, %97
tmp_dword1!9 = store i64 %94, i64 tmp_dword1!2
%98 = i64 Lshr i64 %12, 0
%99 = Extract i16 of i64 %98 <15, 0>
%101 = Zext i16 %99 to i64
%102 = i64 And i64 %19, 281474976710655
%103 = i64 Shl i64 %101, 48
%100 = i64 Or i64 %102, %103
tmp_dword2!9 = store i64 %100, i64 tmp_dword2!2
br label %bb11
bb31:
%104 = i64 Lshr i64 %12, 8
%105 = Extract i56 of i64 %104 <55, 0>
%107 = Zext i56 %105 to i64
%108 = i64 And i64 %18, -72057594037927936
%109 = i64 Shl i64 %107, 0
%106 = i64 Or i64 %108, %109
tmp_dword1!10 = store i64 %106, i64 tmp_dword1!2
%110 = i64 Lshr i64 %12, 0
%111 = Extract i8 of i64 %110 <7, 0>
%113 = Zext i8 %111 to i64
%114 = i64 And i64 %19, 72057594037927935
%115 = i64 Shl i64 %113, 56
%112 = i64 Or i64 %114, %115
tmp_dword2!10 = store i64 %112, i64 tmp_dword2!2
br label %bb11
bb32:
store i64 %117, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[16]
%226 = i64 Add i64 %227, 2
XREG!9 = store i64 %226, [32, i64] XREG!8[16]
br label %bb35
bb33:
%158 = i64 Lshr i64 %120, 40
%159 = Extract i24 of i64 %158 <23, 0>
%161 = Zext i24 %159 to i64
%162 = i64 And i64 %126, -16777216
%163 = i64 Shl i64 %161, 0
%160 = i64 Or i64 %162, %163
tmp_dword1!19 = store i64 %160, i64 tmp_dword1!12
%164 = i64 Lshr i64 %120, 0
%165 = Extract i40 of i64 %164 <39, 0>
%167 = Zext i40 %165 to i64
%168 = i64 And i64 %127, 16777215
%169 = i64 Shl i64 %167, 24
%166 = i64 Or i64 %168, %169
tmp_dword2!19 = store i64 %166, i64 tmp_dword2!12
br label %bb27
bb34:
%170 = Extract i3 of i64 %118 <2, 0>
%171 = i1 Eq i3 %170, -4
br i1 %171, label %bb36, label %bb37
bb35:
%225 = i64 Add i64 PC!10, 4
PC!23 = store i64 %225, i64 PC!11
br label %bb38
bb36:
%172 = i64 Lshr i64 %120, 32
%173 = Extract i32 of i64 %172 <31, 0>
%175 = Zext i32 %173 to i64
%176 = i64 And i64 %126, -4294967296
%177 = i64 Shl i64 %175, 0
%174 = i64 Or i64 %176, %177
tmp_dword1!15 = store i64 %174, i64 tmp_dword1!12
%178 = i64 Lshr i64 %120, 0
%179 = Extract i32 of i64 %178 <31, 0>
%181 = Zext i32 %179 to i64
%182 = i64 And i64 %127, 4294967295
%183 = i64 Shl i64 %181, 32
%180 = i64 Or i64 %182, %183
tmp_dword2!15 = store i64 %180, i64 tmp_dword2!12
br label %bb27
bb37:
%184 = Extract i3 of i64 %118 <2, 0>
%185 = i1 Eq i3 %184, -3
br i1 %185, label %bb39, label %bb40
bb38:
store i64 %225, i64 PC!12
PC!13 = store i64 PC!12, i64 PC!12
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!7 = store i64 PC!12, i64 prev_pc!6
%230 = load i64, [32, i64] XREG!10[12]
%229 = i64 Add i64 %230, 16
XREG!11 = store i64 %229, [32, i64] XREG!10[12]
br label %bb41
bb39:
%186 = i64 Lshr i64 %120, 24
%187 = Extract i40 of i64 %186 <39, 0>
%189 = Zext i40 %187 to i64
%190 = i64 And i64 %126, -1099511627776
%191 = i64 Shl i64 %189, 0
%188 = i64 Or i64 %190, %191
tmp_dword1!18 = store i64 %188, i64 tmp_dword1!12
%192 = i64 Lshr i64 %120, 0
%193 = Extract i24 of i64 %192 <23, 0>
%195 = Zext i24 %193 to i64
%196 = i64 And i64 %127, 1099511627775
%197 = i64 Shl i64 %195, 40
%194 = i64 Or i64 %196, %197
tmp_dword2!18 = store i64 %194, i64 tmp_dword2!12
br label %bb27
bb40:
%198 = Extract i3 of i64 %118 <2, 0>
%199 = i1 Eq i3 %198, -2
br i1 %199, label %bb42, label %bb43
bb41:
%228 = i64 Add i64 PC!12, 4
PC!14 = store i64 %228, i64 PC!13
br label %bb44
bb42:
%200 = i64 Lshr i64 %120, 16
%201 = Extract i48 of i64 %200 <47, 0>
%203 = Zext i48 %201 to i64
%204 = i64 And i64 %126, -281474976710656
%205 = i64 Shl i64 %203, 0
%202 = i64 Or i64 %204, %205
tmp_dword1!17 = store i64 %202, i64 tmp_dword1!12
%206 = i64 Lshr i64 %120, 0
%207 = Extract i16 of i64 %206 <15, 0>
%209 = Zext i16 %207 to i64
%210 = i64 And i64 %127, 281474976710655
%211 = i64 Shl i64 %209, 48
%208 = i64 Or i64 %210, %211
tmp_dword2!17 = store i64 %208, i64 tmp_dword2!12
br label %bb27
bb43:
%212 = i64 Lshr i64 %120, 8
%213 = Extract i56 of i64 %212 <55, 0>
%215 = Zext i56 %213 to i64
%216 = i64 And i64 %126, -72057594037927936
%217 = i64 Shl i64 %215, 0
%214 = i64 Or i64 %216, %217
tmp_dword1!16 = store i64 %214, i64 tmp_dword1!12
%218 = i64 Lshr i64 %120, 0
%219 = Extract i8 of i64 %218 <7, 0>
%221 = Zext i8 %219 to i64
%222 = i64 And i64 %127, 72057594037927935
%223 = i64 Shl i64 %221, 56
%220 = i64 Or i64 %222, %223
tmp_dword2!16 = store i64 %220, i64 tmp_dword2!12
br label %bb27
bb44:
store i64 %228, i64 PC!15
PC!16 = store i64 PC!15, i64 PC!15
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!8 = store i64 PC!15, i64 prev_pc!7
%235 = load i64, [32, i64] XREG!12[16]
%236 = load i64, [32, i64] XREG!12[13]
%233 = i1 Ne i64 %235, %236
br i1 %233, label %bb45, label %bb46
bb45:
%234 = i64 Add i64 PC!15, -24
PC!22 = store i64 %234, i64 PC!16
br label %bb47
bb46:
br label %bb47
bb47:
PC!17 = phi ite %233 %234 PC!15
%231 = i1 Eq i64 PC!17, PC!15
br i1 %231, label %bb48, label %bb49
bb48:
%232 = i64 Add i64 PC!17, 4
PC!18 = store i64 %232, i64 PC!17
br label %bb50
bb49:
br label %bb50
bb50:
PC!19 = phi ite %233 %234 %232
PC!20 = store i64 PC!19, i64 PC!19
PC!21 = store i64 PC!19, i64 PC!20
ret void

SCCP forward
bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[14]
%2 = i64 Add i64 %3, %4
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!25 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%7 = load i64, [32, i64] XREG!4[14]
%8 = load i64, [32, i64] XREG!4[15]
%6 = i64 Add i64 %7, %8
XREG!5 = store i64 %6, [32, i64] XREG!4[14]
br label %bb3
bb3:
%5 = i64 Add i64 PC!2, 4
PC!24 = store i64 %5, i64 PC!3
br label %bb4
bb4:
store i64 %5, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[12]
%10 = i64 Add i64 %11, 0
tmp_address!2 = store i64 %10, i64 tmp_address!1
%12 = load i64, [32, i64] XREG!6[15]
rs2_var!2 = store i64 %12, i64 rs2_var!1
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb5, label %bb6
bb5:
MEM!2 = store i64 %12, [9007199254740992, i64] MEM!1[%14]
br label %bb7
bb6:
%17 = i53 Add i53 %14, 1
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword1!2 = store i64 %18, i64 tmp_dword1!1
%19 = load i64, [9007199254740992, i64] MEM!1[%14]
tmp_dword2!2 = store i64 %19, i64 tmp_dword2!1
%20 = Extract i3 of i64 %10 <2, 0>
%21 = i1 Eq i3 %20, 1
br i1 %21, label %bb8, label %bb9
bb7:
MEM!5 = phi ite %16 MEM!2 MEM!4
tmp_dword2!11 = phi ite %16 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %16 tmp_dword1!1 tmp_dword1!3
br label %bb10
bb8:
%22 = i64 Lshr i64 %12, 56
%23 = Extract i8 of i64 %22 <7, 0>
%25 = Zext i8 %23 to i64
%26 = i64 And i64 %18, -256
%27 = i64 Shl i64 %25, 0
%24 = i64 Or i64 %26, %27
tmp_dword1!4 = store i64 %24, i64 tmp_dword1!2
%28 = i64 Lshr i64 %12, 0
%29 = Extract i56 of i64 %28 <55, 0>
%31 = Zext i56 %29 to i64
%32 = i64 And i64 %19, 255
%33 = i64 Shl i64 %31, 8
%30 = i64 Or i64 %32, %33
tmp_dword2!4 = store i64 %30, i64 tmp_dword2!2
br label %bb11
bb9:
%34 = Extract i3 of i64 %10 <2, 0>
%35 = i1 Eq i3 %34, 2
br i1 %35, label %bb12, label %bb13
bb10:
%9 = i64 Add i64 PC!4, 4
PC!6 = store i64 %9, i64 PC!5
br label %bb14
bb11:
tmp_dword2!3 = phi ite %21 %30 ite %35 %44 ite %49 %58 ite %63 %72 ite %77 %86 ite %91 %100 %112
tmp_dword1!3 = phi ite %21 %24 ite %35 %38 ite %49 %52 ite %63 %66 ite %77 %80 ite %91 %94 %106
%116 = i53 Add i53 %14, 1
MEM!3 = store i64 tmp_dword1!3, [9007199254740992, i64] MEM!1[%116]
MEM!4 = store i64 tmp_dword2!3, [9007199254740992, i64] MEM!3[%14]
br label %bb7
bb12:
%36 = i64 Lshr i64 %12, 48
%37 = Extract i16 of i64 %36 <15, 0>
%39 = Zext i16 %37 to i64
%40 = i64 And i64 %18, -65536
%41 = i64 Shl i64 %39, 0
%38 = i64 Or i64 %40, %41
tmp_dword1!5 = store i64 %38, i64 tmp_dword1!2
%42 = i64 Lshr i64 %12, 0
%43 = Extract i48 of i64 %42 <47, 0>
%45 = Zext i48 %43 to i64
%46 = i64 And i64 %19, 65535
%47 = i64 Shl i64 %45, 16
%44 = i64 Or i64 %46, %47
tmp_dword2!5 = store i64 %44, i64 tmp_dword2!2
br label %bb11
bb13:
%48 = Extract i3 of i64 %10 <2, 0>
%49 = i1 Eq i3 %48, 3
br i1 %49, label %bb15, label %bb16
bb14:
store i64 %9, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!7 = store i64 0, [32, i64] XREG!6[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%119 = load i64, [32, i64] XREG!7[12]
%118 = i64 Add i64 %119, 8
tmp_address!3 = store i64 %118, i64 tmp_address!2
%120 = load i64, [32, i64] XREG!7[14]
rs2_var!3 = store i64 %120, i64 rs2_var!2
%121 = i64 Lshr i64 %118, 3
%122 = Extract i53 of i64 %121 <52, 0>
mem_index!3 = store i53 %122, i53 mem_index!2
%123 = Extract i3 of i64 %118 <2, 0>
%124 = i1 Eq i3 %123, 0
br i1 %124, label %bb17, label %bb18
bb15:
%50 = i64 Lshr i64 %12, 40
%51 = Extract i24 of i64 %50 <23, 0>
%53 = Zext i24 %51 to i64
%54 = i64 And i64 %18, -16777216
%55 = i64 Shl i64 %53, 0
%52 = i64 Or i64 %54, %55
tmp_dword1!6 = store i64 %52, i64 tmp_dword1!2
%56 = i64 Lshr i64 %12, 0
%57 = Extract i40 of i64 %56 <39, 0>
%59 = Zext i40 %57 to i64
%60 = i64 And i64 %19, 16777215
%61 = i64 Shl i64 %59, 24
%58 = i64 Or i64 %60, %61
tmp_dword2!6 = store i64 %58, i64 tmp_dword2!2
br label %bb11
bb16:
%62 = Extract i3 of i64 %10 <2, 0>
%63 = i1 Eq i3 %62, -4
br i1 %63, label %bb19, label %bb20
bb17:
MEM!6 = store i64 %120, [9007199254740992, i64] MEM!5[%122]
br label %bb21
bb18:
%125 = i53 Add i53 %122, 1
%126 = load i64, [9007199254740992, i64] MEM!5[%125]
tmp_dword1!12 = store i64 %126, i64 tmp_dword1!11
%127 = load i64, [9007199254740992, i64] MEM!5[%122]
tmp_dword2!12 = store i64 %127, i64 tmp_dword2!11
%128 = Extract i3 of i64 %118 <2, 0>
%129 = i1 Eq i3 %128, 1
br i1 %129, label %bb22, label %bb23
bb19:
%64 = i64 Lshr i64 %12, 32
%65 = Extract i32 of i64 %64 <31, 0>
%67 = Zext i32 %65 to i64
%68 = i64 And i64 %18, -4294967296
%69 = i64 Shl i64 %67, 0
%66 = i64 Or i64 %68, %69
tmp_dword1!7 = store i64 %66, i64 tmp_dword1!2
%70 = i64 Lshr i64 %12, 0
%71 = Extract i32 of i64 %70 <31, 0>
%73 = Zext i32 %71 to i64
%74 = i64 And i64 %19, 4294967295
%75 = i64 Shl i64 %73, 32
%72 = i64 Or i64 %74, %75
tmp_dword2!7 = store i64 %72, i64 tmp_dword2!2
br label %bb11
bb20:
%76 = Extract i3 of i64 %10 <2, 0>
%77 = i1 Eq i3 %76, -3
br i1 %77, label %bb24, label %bb25
bb21:
MEM!9 = phi ite %124 MEM!6 MEM!8
tmp_dword2!21 = phi ite %124 tmp_dword2!11 tmp_dword2!20
tmp_dword1!21 = phi ite %124 tmp_dword1!11 tmp_dword1!20
br label %bb26
bb22:
%130 = i64 Lshr i64 %120, 56
%131 = Extract i8 of i64 %130 <7, 0>
%133 = Zext i8 %131 to i64
%134 = i64 And i64 %126, -256
%135 = i64 Shl i64 %133, 0
%132 = i64 Or i64 %134, %135
tmp_dword1!13 = store i64 %132, i64 tmp_dword1!12
%136 = i64 Lshr i64 %120, 0
%137 = Extract i56 of i64 %136 <55, 0>
%139 = Zext i56 %137 to i64
%140 = i64 And i64 %127, 255
%141 = i64 Shl i64 %139, 8
%138 = i64 Or i64 %140, %141
tmp_dword2!13 = store i64 %138, i64 tmp_dword2!12
br label %bb27
bb23:
%142 = Extract i3 of i64 %118 <2, 0>
%143 = i1 Eq i3 %142, 2
br i1 %143, label %bb28, label %bb29
bb24:
%78 = i64 Lshr i64 %12, 24
%79 = Extract i40 of i64 %78 <39, 0>
%81 = Zext i40 %79 to i64
%82 = i64 And i64 %18, -1099511627776
%83 = i64 Shl i64 %81, 0
%80 = i64 Or i64 %82, %83
tmp_dword1!8 = store i64 %80, i64 tmp_dword1!2
%84 = i64 Lshr i64 %12, 0
%85 = Extract i24 of i64 %84 <23, 0>
%87 = Zext i24 %85 to i64
%88 = i64 And i64 %19, 1099511627775
%89 = i64 Shl i64 %87, 40
%86 = i64 Or i64 %88, %89
tmp_dword2!8 = store i64 %86, i64 tmp_dword2!2
br label %bb11
bb25:
%90 = Extract i3 of i64 %10 <2, 0>
%91 = i1 Eq i3 %90, -2
br i1 %91, label %bb30, label %bb31
bb26:
%117 = i64 Add i64 PC!7, 4
PC!9 = store i64 %117, i64 PC!8
br label %bb32
bb27:
tmp_dword2!20 = phi ite %129 %138 ite %143 %152 ite %157 %166 ite %171 %180 ite %185 %194 ite %199 %208 %220
tmp_dword1!20 = phi ite %129 %132 ite %143 %146 ite %157 %160 ite %171 %174 ite %185 %188 ite %199 %202 %214
%224 = i53 Add i53 %122, 1
MEM!7 = store i64 tmp_dword1!20, [9007199254740992, i64] MEM!5[%224]
MEM!8 = store i64 tmp_dword2!20, [9007199254740992, i64] MEM!7[%122]
br label %bb21
bb28:
%144 = i64 Lshr i64 %120, 48
%145 = Extract i16 of i64 %144 <15, 0>
%147 = Zext i16 %145 to i64
%148 = i64 And i64 %126, -65536
%149 = i64 Shl i64 %147, 0
%146 = i64 Or i64 %148, %149
tmp_dword1!14 = store i64 %146, i64 tmp_dword1!12
%150 = i64 Lshr i64 %120, 0
%151 = Extract i48 of i64 %150 <47, 0>
%153 = Zext i48 %151 to i64
%154 = i64 And i64 %127, 65535
%155 = i64 Shl i64 %153, 16
%152 = i64 Or i64 %154, %155
tmp_dword2!14 = store i64 %152, i64 tmp_dword2!12
br label %bb27
bb29:
%156 = Extract i3 of i64 %118 <2, 0>
%157 = i1 Eq i3 %156, 3
br i1 %157, label %bb33, label %bb34
bb30:
%92 = i64 Lshr i64 %12, 16
%93 = Extract i48 of i64 %92 <47, 0>
%95 = Zext i48 %93 to i64
%96 = i64 And i64 %18, -281474976710656
%97 = i64 Shl i64 %95, 0
%94 = i64 Or i64 %96, %97
tmp_dword1!9 = store i64 %94, i64 tmp_dword1!2
%98 = i64 Lshr i64 %12, 0
%99 = Extract i16 of i64 %98 <15, 0>
%101 = Zext i16 %99 to i64
%102 = i64 And i64 %19, 281474976710655
%103 = i64 Shl i64 %101, 48
%100 = i64 Or i64 %102, %103
tmp_dword2!9 = store i64 %100, i64 tmp_dword2!2
br label %bb11
bb31:
%104 = i64 Lshr i64 %12, 8
%105 = Extract i56 of i64 %104 <55, 0>
%107 = Zext i56 %105 to i64
%108 = i64 And i64 %18, -72057594037927936
%109 = i64 Shl i64 %107, 0
%106 = i64 Or i64 %108, %109
tmp_dword1!10 = store i64 %106, i64 tmp_dword1!2
%110 = i64 Lshr i64 %12, 0
%111 = Extract i8 of i64 %110 <7, 0>
%113 = Zext i8 %111 to i64
%114 = i64 And i64 %19, 72057594037927935
%115 = i64 Shl i64 %113, 56
%112 = i64 Or i64 %114, %115
tmp_dword2!10 = store i64 %112, i64 tmp_dword2!2
br label %bb11
bb32:
store i64 %117, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[16]
%226 = i64 Add i64 %227, 2
XREG!9 = store i64 %226, [32, i64] XREG!8[16]
br label %bb35
bb33:
%158 = i64 Lshr i64 %120, 40
%159 = Extract i24 of i64 %158 <23, 0>
%161 = Zext i24 %159 to i64
%162 = i64 And i64 %126, -16777216
%163 = i64 Shl i64 %161, 0
%160 = i64 Or i64 %162, %163
tmp_dword1!19 = store i64 %160, i64 tmp_dword1!12
%164 = i64 Lshr i64 %120, 0
%165 = Extract i40 of i64 %164 <39, 0>
%167 = Zext i40 %165 to i64
%168 = i64 And i64 %127, 16777215
%169 = i64 Shl i64 %167, 24
%166 = i64 Or i64 %168, %169
tmp_dword2!19 = store i64 %166, i64 tmp_dword2!12
br label %bb27
bb34:
%170 = Extract i3 of i64 %118 <2, 0>
%171 = i1 Eq i3 %170, -4
br i1 %171, label %bb36, label %bb37
bb35:
%225 = i64 Add i64 PC!10, 4
PC!23 = store i64 %225, i64 PC!11
br label %bb38
bb36:
%172 = i64 Lshr i64 %120, 32
%173 = Extract i32 of i64 %172 <31, 0>
%175 = Zext i32 %173 to i64
%176 = i64 And i64 %126, -4294967296
%177 = i64 Shl i64 %175, 0
%174 = i64 Or i64 %176, %177
tmp_dword1!15 = store i64 %174, i64 tmp_dword1!12
%178 = i64 Lshr i64 %120, 0
%179 = Extract i32 of i64 %178 <31, 0>
%181 = Zext i32 %179 to i64
%182 = i64 And i64 %127, 4294967295
%183 = i64 Shl i64 %181, 32
%180 = i64 Or i64 %182, %183
tmp_dword2!15 = store i64 %180, i64 tmp_dword2!12
br label %bb27
bb37:
%184 = Extract i3 of i64 %118 <2, 0>
%185 = i1 Eq i3 %184, -3
br i1 %185, label %bb39, label %bb40
bb38:
store i64 %225, i64 PC!12
PC!13 = store i64 PC!12, i64 PC!12
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!7 = store i64 PC!12, i64 prev_pc!6
%230 = load i64, [32, i64] XREG!10[12]
%229 = i64 Add i64 %230, 16
XREG!11 = store i64 %229, [32, i64] XREG!10[12]
br label %bb41
bb39:
%186 = i64 Lshr i64 %120, 24
%187 = Extract i40 of i64 %186 <39, 0>
%189 = Zext i40 %187 to i64
%190 = i64 And i64 %126, -1099511627776
%191 = i64 Shl i64 %189, 0
%188 = i64 Or i64 %190, %191
tmp_dword1!18 = store i64 %188, i64 tmp_dword1!12
%192 = i64 Lshr i64 %120, 0
%193 = Extract i24 of i64 %192 <23, 0>
%195 = Zext i24 %193 to i64
%196 = i64 And i64 %127, 1099511627775
%197 = i64 Shl i64 %195, 40
%194 = i64 Or i64 %196, %197
tmp_dword2!18 = store i64 %194, i64 tmp_dword2!12
br label %bb27
bb40:
%198 = Extract i3 of i64 %118 <2, 0>
%199 = i1 Eq i3 %198, -2
br i1 %199, label %bb42, label %bb43
bb41:
%228 = i64 Add i64 PC!12, 4
PC!14 = store i64 %228, i64 PC!13
br label %bb44
bb42:
%200 = i64 Lshr i64 %120, 16
%201 = Extract i48 of i64 %200 <47, 0>
%203 = Zext i48 %201 to i64
%204 = i64 And i64 %126, -281474976710656
%205 = i64 Shl i64 %203, 0
%202 = i64 Or i64 %204, %205
tmp_dword1!17 = store i64 %202, i64 tmp_dword1!12
%206 = i64 Lshr i64 %120, 0
%207 = Extract i16 of i64 %206 <15, 0>
%209 = Zext i16 %207 to i64
%210 = i64 And i64 %127, 281474976710655
%211 = i64 Shl i64 %209, 48
%208 = i64 Or i64 %210, %211
tmp_dword2!17 = store i64 %208, i64 tmp_dword2!12
br label %bb27
bb43:
%212 = i64 Lshr i64 %120, 8
%213 = Extract i56 of i64 %212 <55, 0>
%215 = Zext i56 %213 to i64
%216 = i64 And i64 %126, -72057594037927936
%217 = i64 Shl i64 %215, 0
%214 = i64 Or i64 %216, %217
tmp_dword1!16 = store i64 %214, i64 tmp_dword1!12
%218 = i64 Lshr i64 %120, 0
%219 = Extract i8 of i64 %218 <7, 0>
%221 = Zext i8 %219 to i64
%222 = i64 And i64 %127, 72057594037927935
%223 = i64 Shl i64 %221, 56
%220 = i64 Or i64 %222, %223
tmp_dword2!16 = store i64 %220, i64 tmp_dword2!12
br label %bb27
bb44:
store i64 %228, i64 PC!15
PC!16 = store i64 PC!15, i64 PC!15
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!8 = store i64 PC!15, i64 prev_pc!7
%235 = load i64, [32, i64] XREG!12[16]
%236 = load i64, [32, i64] XREG!12[13]
%233 = i1 Ne i64 %235, %236
br i1 %233, label %bb45, label %bb46
bb45:
%234 = i64 Add i64 PC!15, -24
PC!22 = store i64 %234, i64 PC!16
br label %bb47
bb46:
br label %bb47
bb47:
PC!17 = phi ite %233 %234 PC!15
%231 = i1 Eq i64 PC!17, PC!15
br i1 %231, label %bb48, label %bb49
bb48:
%232 = i64 Add i64 PC!17, 4
PC!18 = store i64 %232, i64 PC!17
br label %bb50
bb49:
br label %bb50
bb50:
PC!19 = phi ite %233 %234 %232
PC!20 = store i64 PC!19, i64 PC!19
PC!21 = store i64 PC!19, i64 PC!20
ret void

cherry
bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[14]
%2 = i64 Add i64 %3, %4
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!25 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%7 = load i64, [32, i64] XREG!4[14]
%8 = load i64, [32, i64] XREG!4[15]
%6 = i64 Add i64 %7, %8
XREG!5 = store i64 %6, [32, i64] XREG!4[14]
%5 = i64 Add i64 PC!2, 4
PC!24 = store i64 %5, i64 PC!3
store i64 %5, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[12]
%10 = i64 Add i64 %11, 0
tmp_address!2 = store i64 %10, i64 tmp_address!1
%12 = load i64, [32, i64] XREG!6[15]
rs2_var!2 = store i64 %12, i64 rs2_var!1
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %12, [9007199254740992, i64] MEM!1[%14]
br label %bb3
bb2:
%17 = i53 Add i53 %14, 1
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword1!2 = store i64 %18, i64 tmp_dword1!1
%19 = load i64, [9007199254740992, i64] MEM!1[%14]
tmp_dword2!2 = store i64 %19, i64 tmp_dword2!1
%20 = Extract i3 of i64 %10 <2, 0>
%21 = i1 Eq i3 %20, 1
br i1 %21, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %16 MEM!2 MEM!4
tmp_dword2!11 = phi ite %16 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %16 tmp_dword1!1 tmp_dword1!3
%9 = i64 Add i64 PC!4, 4
PC!6 = store i64 %9, i64 PC!5
store i64 %9, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!7 = store i64 0, [32, i64] XREG!6[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%119 = load i64, [32, i64] XREG!7[12]
%118 = i64 Add i64 %119, 8
tmp_address!3 = store i64 %118, i64 tmp_address!2
%120 = load i64, [32, i64] XREG!7[14]
rs2_var!3 = store i64 %120, i64 rs2_var!2
%121 = i64 Lshr i64 %118, 3
%122 = Extract i53 of i64 %121 <52, 0>
mem_index!3 = store i53 %122, i53 mem_index!2
%123 = Extract i3 of i64 %118 <2, 0>
%124 = i1 Eq i3 %123, 0
br i1 %124, label %bb11, label %bb12
bb4:
%22 = i64 Lshr i64 %12, 56
%23 = Extract i8 of i64 %22 <7, 0>
%25 = Zext i8 %23 to i64
%26 = i64 And i64 %18, -256
%27 = i64 Shl i64 %25, 0
%24 = i64 Or i64 %26, %27
tmp_dword1!4 = store i64 %24, i64 tmp_dword1!2
%28 = i64 Lshr i64 %12, 0
%29 = Extract i56 of i64 %28 <55, 0>
%31 = Zext i56 %29 to i64
%32 = i64 And i64 %19, 255
%33 = i64 Shl i64 %31, 8
%30 = i64 Or i64 %32, %33
tmp_dword2!4 = store i64 %30, i64 tmp_dword2!2
br label %bb6
bb5:
%34 = Extract i3 of i64 %10 <2, 0>
%35 = i1 Eq i3 %34, 2
br i1 %35, label %bb7, label %bb8
bb6:
tmp_dword2!3 = phi ite %21 %30 ite %35 %44 ite %49 %58 ite %63 %72 ite %77 %86 ite %91 %100 %112
tmp_dword1!3 = phi ite %21 %24 ite %35 %38 ite %49 %52 ite %63 %66 ite %77 %80 ite %91 %94 %106
%116 = i53 Add i53 %14, 1
MEM!3 = store i64 tmp_dword1!3, [9007199254740992, i64] MEM!1[%116]
MEM!4 = store i64 tmp_dword2!3, [9007199254740992, i64] MEM!3[%14]
br label %bb3
bb7:
%36 = i64 Lshr i64 %12, 48
%37 = Extract i16 of i64 %36 <15, 0>
%39 = Zext i16 %37 to i64
%40 = i64 And i64 %18, -65536
%41 = i64 Shl i64 %39, 0
%38 = i64 Or i64 %40, %41
tmp_dword1!5 = store i64 %38, i64 tmp_dword1!2
%42 = i64 Lshr i64 %12, 0
%43 = Extract i48 of i64 %42 <47, 0>
%45 = Zext i48 %43 to i64
%46 = i64 And i64 %19, 65535
%47 = i64 Shl i64 %45, 16
%44 = i64 Or i64 %46, %47
tmp_dword2!5 = store i64 %44, i64 tmp_dword2!2
br label %bb6
bb8:
%48 = Extract i3 of i64 %10 <2, 0>
%49 = i1 Eq i3 %48, 3
br i1 %49, label %bb9, label %bb10
bb9:
%50 = i64 Lshr i64 %12, 40
%51 = Extract i24 of i64 %50 <23, 0>
%53 = Zext i24 %51 to i64
%54 = i64 And i64 %18, -16777216
%55 = i64 Shl i64 %53, 0
%52 = i64 Or i64 %54, %55
tmp_dword1!6 = store i64 %52, i64 tmp_dword1!2
%56 = i64 Lshr i64 %12, 0
%57 = Extract i40 of i64 %56 <39, 0>
%59 = Zext i40 %57 to i64
%60 = i64 And i64 %19, 16777215
%61 = i64 Shl i64 %59, 24
%58 = i64 Or i64 %60, %61
tmp_dword2!6 = store i64 %58, i64 tmp_dword2!2
br label %bb6
bb10:
%62 = Extract i3 of i64 %10 <2, 0>
%63 = i1 Eq i3 %62, -4
br i1 %63, label %bb13, label %bb14
bb11:
MEM!6 = store i64 %120, [9007199254740992, i64] MEM!5[%122]
br label %bb15
bb12:
%125 = i53 Add i53 %122, 1
%126 = load i64, [9007199254740992, i64] MEM!5[%125]
tmp_dword1!12 = store i64 %126, i64 tmp_dword1!11
%127 = load i64, [9007199254740992, i64] MEM!5[%122]
tmp_dword2!12 = store i64 %127, i64 tmp_dword2!11
%128 = Extract i3 of i64 %118 <2, 0>
%129 = i1 Eq i3 %128, 1
br i1 %129, label %bb16, label %bb17
bb13:
%64 = i64 Lshr i64 %12, 32
%65 = Extract i32 of i64 %64 <31, 0>
%67 = Zext i32 %65 to i64
%68 = i64 And i64 %18, -4294967296
%69 = i64 Shl i64 %67, 0
%66 = i64 Or i64 %68, %69
tmp_dword1!7 = store i64 %66, i64 tmp_dword1!2
%70 = i64 Lshr i64 %12, 0
%71 = Extract i32 of i64 %70 <31, 0>
%73 = Zext i32 %71 to i64
%74 = i64 And i64 %19, 4294967295
%75 = i64 Shl i64 %73, 32
%72 = i64 Or i64 %74, %75
tmp_dword2!7 = store i64 %72, i64 tmp_dword2!2
br label %bb6
bb14:
%76 = Extract i3 of i64 %10 <2, 0>
%77 = i1 Eq i3 %76, -3
br i1 %77, label %bb18, label %bb19
bb15:
MEM!9 = phi ite %124 MEM!6 MEM!8
tmp_dword2!21 = phi ite %124 tmp_dword2!11 tmp_dword2!20
tmp_dword1!21 = phi ite %124 tmp_dword1!11 tmp_dword1!20
%117 = i64 Add i64 PC!7, 4
PC!9 = store i64 %117, i64 PC!8
store i64 %117, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[16]
%226 = i64 Add i64 %227, 2
XREG!9 = store i64 %226, [32, i64] XREG!8[16]
%225 = i64 Add i64 PC!10, 4
PC!23 = store i64 %225, i64 PC!11
store i64 %225, i64 PC!12
PC!13 = store i64 PC!12, i64 PC!12
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!7 = store i64 PC!12, i64 prev_pc!6
%230 = load i64, [32, i64] XREG!10[12]
%229 = i64 Add i64 %230, 16
XREG!11 = store i64 %229, [32, i64] XREG!10[12]
%228 = i64 Add i64 PC!12, 4
PC!14 = store i64 %228, i64 PC!13
store i64 %228, i64 PC!15
PC!16 = store i64 PC!15, i64 PC!15
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!8 = store i64 PC!15, i64 prev_pc!7
%235 = load i64, [32, i64] XREG!12[16]
%236 = load i64, [32, i64] XREG!12[13]
%233 = i1 Ne i64 %235, %236
br i1 %233, label %bb33, label %bb34
bb16:
%130 = i64 Lshr i64 %120, 56
%131 = Extract i8 of i64 %130 <7, 0>
%133 = Zext i8 %131 to i64
%134 = i64 And i64 %126, -256
%135 = i64 Shl i64 %133, 0
%132 = i64 Or i64 %134, %135
tmp_dword1!13 = store i64 %132, i64 tmp_dword1!12
%136 = i64 Lshr i64 %120, 0
%137 = Extract i56 of i64 %136 <55, 0>
%139 = Zext i56 %137 to i64
%140 = i64 And i64 %127, 255
%141 = i64 Shl i64 %139, 8
%138 = i64 Or i64 %140, %141
tmp_dword2!13 = store i64 %138, i64 tmp_dword2!12
br label %bb20
bb17:
%142 = Extract i3 of i64 %118 <2, 0>
%143 = i1 Eq i3 %142, 2
br i1 %143, label %bb21, label %bb22
bb18:
%78 = i64 Lshr i64 %12, 24
%79 = Extract i40 of i64 %78 <39, 0>
%81 = Zext i40 %79 to i64
%82 = i64 And i64 %18, -1099511627776
%83 = i64 Shl i64 %81, 0
%80 = i64 Or i64 %82, %83
tmp_dword1!8 = store i64 %80, i64 tmp_dword1!2
%84 = i64 Lshr i64 %12, 0
%85 = Extract i24 of i64 %84 <23, 0>
%87 = Zext i24 %85 to i64
%88 = i64 And i64 %19, 1099511627775
%89 = i64 Shl i64 %87, 40
%86 = i64 Or i64 %88, %89
tmp_dword2!8 = store i64 %86, i64 tmp_dword2!2
br label %bb6
bb19:
%90 = Extract i3 of i64 %10 <2, 0>
%91 = i1 Eq i3 %90, -2
br i1 %91, label %bb23, label %bb24
bb20:
tmp_dword2!20 = phi ite %129 %138 ite %143 %152 ite %157 %166 ite %171 %180 ite %185 %194 ite %199 %208 %220
tmp_dword1!20 = phi ite %129 %132 ite %143 %146 ite %157 %160 ite %171 %174 ite %185 %188 ite %199 %202 %214
%224 = i53 Add i53 %122, 1
MEM!7 = store i64 tmp_dword1!20, [9007199254740992, i64] MEM!5[%224]
MEM!8 = store i64 tmp_dword2!20, [9007199254740992, i64] MEM!7[%122]
br label %bb15
bb21:
%144 = i64 Lshr i64 %120, 48
%145 = Extract i16 of i64 %144 <15, 0>
%147 = Zext i16 %145 to i64
%148 = i64 And i64 %126, -65536
%149 = i64 Shl i64 %147, 0
%146 = i64 Or i64 %148, %149
tmp_dword1!14 = store i64 %146, i64 tmp_dword1!12
%150 = i64 Lshr i64 %120, 0
%151 = Extract i48 of i64 %150 <47, 0>
%153 = Zext i48 %151 to i64
%154 = i64 And i64 %127, 65535
%155 = i64 Shl i64 %153, 16
%152 = i64 Or i64 %154, %155
tmp_dword2!14 = store i64 %152, i64 tmp_dword2!12
br label %bb20
bb22:
%156 = Extract i3 of i64 %118 <2, 0>
%157 = i1 Eq i3 %156, 3
br i1 %157, label %bb25, label %bb26
bb23:
%92 = i64 Lshr i64 %12, 16
%93 = Extract i48 of i64 %92 <47, 0>
%95 = Zext i48 %93 to i64
%96 = i64 And i64 %18, -281474976710656
%97 = i64 Shl i64 %95, 0
%94 = i64 Or i64 %96, %97
tmp_dword1!9 = store i64 %94, i64 tmp_dword1!2
%98 = i64 Lshr i64 %12, 0
%99 = Extract i16 of i64 %98 <15, 0>
%101 = Zext i16 %99 to i64
%102 = i64 And i64 %19, 281474976710655
%103 = i64 Shl i64 %101, 48
%100 = i64 Or i64 %102, %103
tmp_dword2!9 = store i64 %100, i64 tmp_dword2!2
br label %bb6
bb24:
%104 = i64 Lshr i64 %12, 8
%105 = Extract i56 of i64 %104 <55, 0>
%107 = Zext i56 %105 to i64
%108 = i64 And i64 %18, -72057594037927936
%109 = i64 Shl i64 %107, 0
%106 = i64 Or i64 %108, %109
tmp_dword1!10 = store i64 %106, i64 tmp_dword1!2
%110 = i64 Lshr i64 %12, 0
%111 = Extract i8 of i64 %110 <7, 0>
%113 = Zext i8 %111 to i64
%114 = i64 And i64 %19, 72057594037927935
%115 = i64 Shl i64 %113, 56
%112 = i64 Or i64 %114, %115
tmp_dword2!10 = store i64 %112, i64 tmp_dword2!2
br label %bb6
bb25:
%158 = i64 Lshr i64 %120, 40
%159 = Extract i24 of i64 %158 <23, 0>
%161 = Zext i24 %159 to i64
%162 = i64 And i64 %126, -16777216
%163 = i64 Shl i64 %161, 0
%160 = i64 Or i64 %162, %163
tmp_dword1!19 = store i64 %160, i64 tmp_dword1!12
%164 = i64 Lshr i64 %120, 0
%165 = Extract i40 of i64 %164 <39, 0>
%167 = Zext i40 %165 to i64
%168 = i64 And i64 %127, 16777215
%169 = i64 Shl i64 %167, 24
%166 = i64 Or i64 %168, %169
tmp_dword2!19 = store i64 %166, i64 tmp_dword2!12
br label %bb20
bb26:
%170 = Extract i3 of i64 %118 <2, 0>
%171 = i1 Eq i3 %170, -4
br i1 %171, label %bb27, label %bb28
bb27:
%172 = i64 Lshr i64 %120, 32
%173 = Extract i32 of i64 %172 <31, 0>
%175 = Zext i32 %173 to i64
%176 = i64 And i64 %126, -4294967296
%177 = i64 Shl i64 %175, 0
%174 = i64 Or i64 %176, %177
tmp_dword1!15 = store i64 %174, i64 tmp_dword1!12
%178 = i64 Lshr i64 %120, 0
%179 = Extract i32 of i64 %178 <31, 0>
%181 = Zext i32 %179 to i64
%182 = i64 And i64 %127, 4294967295
%183 = i64 Shl i64 %181, 32
%180 = i64 Or i64 %182, %183
tmp_dword2!15 = store i64 %180, i64 tmp_dword2!12
br label %bb20
bb28:
%184 = Extract i3 of i64 %118 <2, 0>
%185 = i1 Eq i3 %184, -3
br i1 %185, label %bb29, label %bb30
bb29:
%186 = i64 Lshr i64 %120, 24
%187 = Extract i40 of i64 %186 <39, 0>
%189 = Zext i40 %187 to i64
%190 = i64 And i64 %126, -1099511627776
%191 = i64 Shl i64 %189, 0
%188 = i64 Or i64 %190, %191
tmp_dword1!18 = store i64 %188, i64 tmp_dword1!12
%192 = i64 Lshr i64 %120, 0
%193 = Extract i24 of i64 %192 <23, 0>
%195 = Zext i24 %193 to i64
%196 = i64 And i64 %127, 1099511627775
%197 = i64 Shl i64 %195, 40
%194 = i64 Or i64 %196, %197
tmp_dword2!18 = store i64 %194, i64 tmp_dword2!12
br label %bb20
bb30:
%198 = Extract i3 of i64 %118 <2, 0>
%199 = i1 Eq i3 %198, -2
br i1 %199, label %bb31, label %bb32
bb31:
%200 = i64 Lshr i64 %120, 16
%201 = Extract i48 of i64 %200 <47, 0>
%203 = Zext i48 %201 to i64
%204 = i64 And i64 %126, -281474976710656
%205 = i64 Shl i64 %203, 0
%202 = i64 Or i64 %204, %205
tmp_dword1!17 = store i64 %202, i64 tmp_dword1!12
%206 = i64 Lshr i64 %120, 0
%207 = Extract i16 of i64 %206 <15, 0>
%209 = Zext i16 %207 to i64
%210 = i64 And i64 %127, 281474976710655
%211 = i64 Shl i64 %209, 48
%208 = i64 Or i64 %210, %211
tmp_dword2!17 = store i64 %208, i64 tmp_dword2!12
br label %bb20
bb32:
%212 = i64 Lshr i64 %120, 8
%213 = Extract i56 of i64 %212 <55, 0>
%215 = Zext i56 %213 to i64
%216 = i64 And i64 %126, -72057594037927936
%217 = i64 Shl i64 %215, 0
%214 = i64 Or i64 %216, %217
tmp_dword1!16 = store i64 %214, i64 tmp_dword1!12
%218 = i64 Lshr i64 %120, 0
%219 = Extract i8 of i64 %218 <7, 0>
%221 = Zext i8 %219 to i64
%222 = i64 And i64 %127, 72057594037927935
%223 = i64 Shl i64 %221, 56
%220 = i64 Or i64 %222, %223
tmp_dword2!16 = store i64 %220, i64 tmp_dword2!12
br label %bb20
bb33:
%234 = i64 Add i64 PC!15, -24
PC!22 = store i64 %234, i64 PC!16
br label %bb35
bb34:
br label %bb35
bb35:
PC!17 = phi ite %233 %234 PC!15
%231 = i1 Eq i64 PC!17, PC!15
br i1 %231, label %bb36, label %bb37
bb36:
%232 = i64 Add i64 PC!17, 4
PC!18 = store i64 %232, i64 PC!17
br label %bb38
bb37:
br label %bb38
bb38:
PC!19 = phi ite %233 %234 %232
PC!20 = store i64 PC!19, i64 PC!19
PC!21 = store i64 PC!19, i64 PC!20
ret void

bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[14]
%2 = i64 Add i64 %3, %4
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!25 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%7 = load i64, [32, i64] XREG!4[14]
%8 = load i64, [32, i64] XREG!4[15]
%6 = i64 Add i64 %7, %8
XREG!5 = store i64 %6, [32, i64] XREG!4[14]
%5 = i64 Add i64 PC!2, 4
PC!24 = store i64 %5, i64 PC!3
store i64 %5, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[12]
%10 = i64 Add i64 %11, 0
tmp_address!2 = store i64 %10, i64 tmp_address!1
%12 = load i64, [32, i64] XREG!6[15]
rs2_var!2 = store i64 %12, i64 rs2_var!1
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
MEM!2 = store i64 %12, [9007199254740992, i64] MEM!1[%14]
br label %bb3
bb2:
%17 = i53 Add i53 %14, 1
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword1!2 = store i64 %18, i64 tmp_dword1!1
%19 = load i64, [9007199254740992, i64] MEM!1[%14]
tmp_dword2!2 = store i64 %19, i64 tmp_dword2!1
%20 = Extract i3 of i64 %10 <2, 0>
%21 = i1 Eq i3 %20, 1
br i1 %21, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %16 MEM!2 MEM!4
tmp_dword2!11 = phi ite %16 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %16 tmp_dword1!1 tmp_dword1!3
%9 = i64 Add i64 PC!4, 4
PC!6 = store i64 %9, i64 PC!5
store i64 %9, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!7 = store i64 0, [32, i64] XREG!6[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%119 = load i64, [32, i64] XREG!7[12]
%118 = i64 Add i64 %119, 8
tmp_address!3 = store i64 %118, i64 tmp_address!2
%120 = load i64, [32, i64] XREG!7[14]
rs2_var!3 = store i64 %120, i64 rs2_var!2
%121 = i64 Lshr i64 %118, 3
%122 = Extract i53 of i64 %121 <52, 0>
mem_index!3 = store i53 %122, i53 mem_index!2
%123 = Extract i3 of i64 %118 <2, 0>
%124 = i1 Eq i3 %123, 0
br i1 %124, label %bb11, label %bb12
bb4:
%22 = i64 Lshr i64 %12, 56
%23 = Extract i8 of i64 %22 <7, 0>
%25 = Zext i8 %23 to i64
%26 = i64 And i64 %18, -256
%27 = i64 Shl i64 %25, 0
%24 = i64 Or i64 %26, %27
tmp_dword1!4 = store i64 %24, i64 tmp_dword1!2
%28 = i64 Lshr i64 %12, 0
%29 = Extract i56 of i64 %28 <55, 0>
%31 = Zext i56 %29 to i64
%32 = i64 And i64 %19, 255
%33 = i64 Shl i64 %31, 8
%30 = i64 Or i64 %32, %33
tmp_dword2!4 = store i64 %30, i64 tmp_dword2!2
br label %bb6
bb5:
%34 = Extract i3 of i64 %10 <2, 0>
%35 = i1 Eq i3 %34, 2
br i1 %35, label %bb7, label %bb8
bb6:
tmp_dword2!3 = phi ite %21 %30 ite %35 %44 ite %49 %58 ite %63 %72 ite %77 %86 ite %91 %100 %112
tmp_dword1!3 = phi ite %21 %24 ite %35 %38 ite %49 %52 ite %63 %66 ite %77 %80 ite %91 %94 %106
%116 = i53 Add i53 %14, 1
MEM!3 = store i64 tmp_dword1!3, [9007199254740992, i64] MEM!1[%116]
MEM!4 = store i64 tmp_dword2!3, [9007199254740992, i64] MEM!3[%14]
br label %bb3
bb7:
%36 = i64 Lshr i64 %12, 48
%37 = Extract i16 of i64 %36 <15, 0>
%39 = Zext i16 %37 to i64
%40 = i64 And i64 %18, -65536
%41 = i64 Shl i64 %39, 0
%38 = i64 Or i64 %40, %41
tmp_dword1!5 = store i64 %38, i64 tmp_dword1!2
%42 = i64 Lshr i64 %12, 0
%43 = Extract i48 of i64 %42 <47, 0>
%45 = Zext i48 %43 to i64
%46 = i64 And i64 %19, 65535
%47 = i64 Shl i64 %45, 16
%44 = i64 Or i64 %46, %47
tmp_dword2!5 = store i64 %44, i64 tmp_dword2!2
br label %bb6
bb8:
%48 = Extract i3 of i64 %10 <2, 0>
%49 = i1 Eq i3 %48, 3
br i1 %49, label %bb9, label %bb10
bb9:
%50 = i64 Lshr i64 %12, 40
%51 = Extract i24 of i64 %50 <23, 0>
%53 = Zext i24 %51 to i64
%54 = i64 And i64 %18, -16777216
%55 = i64 Shl i64 %53, 0
%52 = i64 Or i64 %54, %55
tmp_dword1!6 = store i64 %52, i64 tmp_dword1!2
%56 = i64 Lshr i64 %12, 0
%57 = Extract i40 of i64 %56 <39, 0>
%59 = Zext i40 %57 to i64
%60 = i64 And i64 %19, 16777215
%61 = i64 Shl i64 %59, 24
%58 = i64 Or i64 %60, %61
tmp_dword2!6 = store i64 %58, i64 tmp_dword2!2
br label %bb6
bb10:
%62 = Extract i3 of i64 %10 <2, 0>
%63 = i1 Eq i3 %62, -4
br i1 %63, label %bb13, label %bb14
bb11:
MEM!6 = store i64 %120, [9007199254740992, i64] MEM!5[%122]
br label %bb15
bb12:
%125 = i53 Add i53 %122, 1
%126 = load i64, [9007199254740992, i64] MEM!5[%125]
tmp_dword1!12 = store i64 %126, i64 tmp_dword1!11
%127 = load i64, [9007199254740992, i64] MEM!5[%122]
tmp_dword2!12 = store i64 %127, i64 tmp_dword2!11
%128 = Extract i3 of i64 %118 <2, 0>
%129 = i1 Eq i3 %128, 1
br i1 %129, label %bb16, label %bb17
bb13:
%64 = i64 Lshr i64 %12, 32
%65 = Extract i32 of i64 %64 <31, 0>
%67 = Zext i32 %65 to i64
%68 = i64 And i64 %18, -4294967296
%69 = i64 Shl i64 %67, 0
%66 = i64 Or i64 %68, %69
tmp_dword1!7 = store i64 %66, i64 tmp_dword1!2
%70 = i64 Lshr i64 %12, 0
%71 = Extract i32 of i64 %70 <31, 0>
%73 = Zext i32 %71 to i64
%74 = i64 And i64 %19, 4294967295
%75 = i64 Shl i64 %73, 32
%72 = i64 Or i64 %74, %75
tmp_dword2!7 = store i64 %72, i64 tmp_dword2!2
br label %bb6
bb14:
%76 = Extract i3 of i64 %10 <2, 0>
%77 = i1 Eq i3 %76, -3
br i1 %77, label %bb18, label %bb19
bb15:
MEM!9 = phi ite %124 MEM!6 MEM!8
tmp_dword2!21 = phi ite %124 tmp_dword2!11 tmp_dword2!20
tmp_dword1!21 = phi ite %124 tmp_dword1!11 tmp_dword1!20
%117 = i64 Add i64 PC!7, 4
PC!9 = store i64 %117, i64 PC!8
store i64 %117, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[16]
%226 = i64 Add i64 %227, 2
XREG!9 = store i64 %226, [32, i64] XREG!8[16]
%225 = i64 Add i64 PC!10, 4
PC!23 = store i64 %225, i64 PC!11
store i64 %225, i64 PC!12
PC!13 = store i64 PC!12, i64 PC!12
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!7 = store i64 PC!12, i64 prev_pc!6
%230 = load i64, [32, i64] XREG!10[12]
%229 = i64 Add i64 %230, 16
XREG!11 = store i64 %229, [32, i64] XREG!10[12]
%228 = i64 Add i64 PC!12, 4
PC!14 = store i64 %228, i64 PC!13
store i64 %228, i64 PC!15
PC!16 = store i64 PC!15, i64 PC!15
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!8 = store i64 PC!15, i64 prev_pc!7
%235 = load i64, [32, i64] XREG!12[16]
%236 = load i64, [32, i64] XREG!12[13]
%233 = i1 Ne i64 %235, %236
br i1 %233, label %bb33, label %bb34
bb16:
%130 = i64 Lshr i64 %120, 56
%131 = Extract i8 of i64 %130 <7, 0>
%133 = Zext i8 %131 to i64
%134 = i64 And i64 %126, -256
%135 = i64 Shl i64 %133, 0
%132 = i64 Or i64 %134, %135
tmp_dword1!13 = store i64 %132, i64 tmp_dword1!12
%136 = i64 Lshr i64 %120, 0
%137 = Extract i56 of i64 %136 <55, 0>
%139 = Zext i56 %137 to i64
%140 = i64 And i64 %127, 255
%141 = i64 Shl i64 %139, 8
%138 = i64 Or i64 %140, %141
tmp_dword2!13 = store i64 %138, i64 tmp_dword2!12
br label %bb20
bb17:
%142 = Extract i3 of i64 %118 <2, 0>
%143 = i1 Eq i3 %142, 2
br i1 %143, label %bb21, label %bb22
bb18:
%78 = i64 Lshr i64 %12, 24
%79 = Extract i40 of i64 %78 <39, 0>
%81 = Zext i40 %79 to i64
%82 = i64 And i64 %18, -1099511627776
%83 = i64 Shl i64 %81, 0
%80 = i64 Or i64 %82, %83
tmp_dword1!8 = store i64 %80, i64 tmp_dword1!2
%84 = i64 Lshr i64 %12, 0
%85 = Extract i24 of i64 %84 <23, 0>
%87 = Zext i24 %85 to i64
%88 = i64 And i64 %19, 1099511627775
%89 = i64 Shl i64 %87, 40
%86 = i64 Or i64 %88, %89
tmp_dword2!8 = store i64 %86, i64 tmp_dword2!2
br label %bb6
bb19:
%90 = Extract i3 of i64 %10 <2, 0>
%91 = i1 Eq i3 %90, -2
br i1 %91, label %bb23, label %bb24
bb20:
tmp_dword2!20 = phi ite %129 %138 ite %143 %152 ite %157 %166 ite %171 %180 ite %185 %194 ite %199 %208 %220
tmp_dword1!20 = phi ite %129 %132 ite %143 %146 ite %157 %160 ite %171 %174 ite %185 %188 ite %199 %202 %214
%224 = i53 Add i53 %122, 1
MEM!7 = store i64 tmp_dword1!20, [9007199254740992, i64] MEM!5[%224]
MEM!8 = store i64 tmp_dword2!20, [9007199254740992, i64] MEM!7[%122]
br label %bb15
bb21:
%144 = i64 Lshr i64 %120, 48
%145 = Extract i16 of i64 %144 <15, 0>
%147 = Zext i16 %145 to i64
%148 = i64 And i64 %126, -65536
%149 = i64 Shl i64 %147, 0
%146 = i64 Or i64 %148, %149
tmp_dword1!14 = store i64 %146, i64 tmp_dword1!12
%150 = i64 Lshr i64 %120, 0
%151 = Extract i48 of i64 %150 <47, 0>
%153 = Zext i48 %151 to i64
%154 = i64 And i64 %127, 65535
%155 = i64 Shl i64 %153, 16
%152 = i64 Or i64 %154, %155
tmp_dword2!14 = store i64 %152, i64 tmp_dword2!12
br label %bb20
bb22:
%156 = Extract i3 of i64 %118 <2, 0>
%157 = i1 Eq i3 %156, 3
br i1 %157, label %bb25, label %bb26
bb23:
%92 = i64 Lshr i64 %12, 16
%93 = Extract i48 of i64 %92 <47, 0>
%95 = Zext i48 %93 to i64
%96 = i64 And i64 %18, -281474976710656
%97 = i64 Shl i64 %95, 0
%94 = i64 Or i64 %96, %97
tmp_dword1!9 = store i64 %94, i64 tmp_dword1!2
%98 = i64 Lshr i64 %12, 0
%99 = Extract i16 of i64 %98 <15, 0>
%101 = Zext i16 %99 to i64
%102 = i64 And i64 %19, 281474976710655
%103 = i64 Shl i64 %101, 48
%100 = i64 Or i64 %102, %103
tmp_dword2!9 = store i64 %100, i64 tmp_dword2!2
br label %bb6
bb24:
%104 = i64 Lshr i64 %12, 8
%105 = Extract i56 of i64 %104 <55, 0>
%107 = Zext i56 %105 to i64
%108 = i64 And i64 %18, -72057594037927936
%109 = i64 Shl i64 %107, 0
%106 = i64 Or i64 %108, %109
tmp_dword1!10 = store i64 %106, i64 tmp_dword1!2
%110 = i64 Lshr i64 %12, 0
%111 = Extract i8 of i64 %110 <7, 0>
%113 = Zext i8 %111 to i64
%114 = i64 And i64 %19, 72057594037927935
%115 = i64 Shl i64 %113, 56
%112 = i64 Or i64 %114, %115
tmp_dword2!10 = store i64 %112, i64 tmp_dword2!2
br label %bb6
bb25:
%158 = i64 Lshr i64 %120, 40
%159 = Extract i24 of i64 %158 <23, 0>
%161 = Zext i24 %159 to i64
%162 = i64 And i64 %126, -16777216
%163 = i64 Shl i64 %161, 0
%160 = i64 Or i64 %162, %163
tmp_dword1!19 = store i64 %160, i64 tmp_dword1!12
%164 = i64 Lshr i64 %120, 0
%165 = Extract i40 of i64 %164 <39, 0>
%167 = Zext i40 %165 to i64
%168 = i64 And i64 %127, 16777215
%169 = i64 Shl i64 %167, 24
%166 = i64 Or i64 %168, %169
tmp_dword2!19 = store i64 %166, i64 tmp_dword2!12
br label %bb20
bb26:
%170 = Extract i3 of i64 %118 <2, 0>
%171 = i1 Eq i3 %170, -4
br i1 %171, label %bb27, label %bb28
bb27:
%172 = i64 Lshr i64 %120, 32
%173 = Extract i32 of i64 %172 <31, 0>
%175 = Zext i32 %173 to i64
%176 = i64 And i64 %126, -4294967296
%177 = i64 Shl i64 %175, 0
%174 = i64 Or i64 %176, %177
tmp_dword1!15 = store i64 %174, i64 tmp_dword1!12
%178 = i64 Lshr i64 %120, 0
%179 = Extract i32 of i64 %178 <31, 0>
%181 = Zext i32 %179 to i64
%182 = i64 And i64 %127, 4294967295
%183 = i64 Shl i64 %181, 32
%180 = i64 Or i64 %182, %183
tmp_dword2!15 = store i64 %180, i64 tmp_dword2!12
br label %bb20
bb28:
%184 = Extract i3 of i64 %118 <2, 0>
%185 = i1 Eq i3 %184, -3
br i1 %185, label %bb29, label %bb30
bb29:
%186 = i64 Lshr i64 %120, 24
%187 = Extract i40 of i64 %186 <39, 0>
%189 = Zext i40 %187 to i64
%190 = i64 And i64 %126, -1099511627776
%191 = i64 Shl i64 %189, 0
%188 = i64 Or i64 %190, %191
tmp_dword1!18 = store i64 %188, i64 tmp_dword1!12
%192 = i64 Lshr i64 %120, 0
%193 = Extract i24 of i64 %192 <23, 0>
%195 = Zext i24 %193 to i64
%196 = i64 And i64 %127, 1099511627775
%197 = i64 Shl i64 %195, 40
%194 = i64 Or i64 %196, %197
tmp_dword2!18 = store i64 %194, i64 tmp_dword2!12
br label %bb20
bb30:
%198 = Extract i3 of i64 %118 <2, 0>
%199 = i1 Eq i3 %198, -2
br i1 %199, label %bb31, label %bb32
bb31:
%200 = i64 Lshr i64 %120, 16
%201 = Extract i48 of i64 %200 <47, 0>
%203 = Zext i48 %201 to i64
%204 = i64 And i64 %126, -281474976710656
%205 = i64 Shl i64 %203, 0
%202 = i64 Or i64 %204, %205
tmp_dword1!17 = store i64 %202, i64 tmp_dword1!12
%206 = i64 Lshr i64 %120, 0
%207 = Extract i16 of i64 %206 <15, 0>
%209 = Zext i16 %207 to i64
%210 = i64 And i64 %127, 281474976710655
%211 = i64 Shl i64 %209, 48
%208 = i64 Or i64 %210, %211
tmp_dword2!17 = store i64 %208, i64 tmp_dword2!12
br label %bb20
bb32:
%212 = i64 Lshr i64 %120, 8
%213 = Extract i56 of i64 %212 <55, 0>
%215 = Zext i56 %213 to i64
%216 = i64 And i64 %126, -72057594037927936
%217 = i64 Shl i64 %215, 0
%214 = i64 Or i64 %216, %217
tmp_dword1!16 = store i64 %214, i64 tmp_dword1!12
%218 = i64 Lshr i64 %120, 0
%219 = Extract i8 of i64 %218 <7, 0>
%221 = Zext i8 %219 to i64
%222 = i64 And i64 %127, 72057594037927935
%223 = i64 Shl i64 %221, 56
%220 = i64 Or i64 %222, %223
tmp_dword2!16 = store i64 %220, i64 tmp_dword2!12
br label %bb20
bb33:
%234 = i64 Add i64 PC!15, -24
PC!22 = store i64 %234, i64 PC!16
br label %bb35
bb34:
br label %bb35
bb35:
PC!17 = phi ite %233 %234 PC!15
%231 = i1 Eq i64 PC!17, PC!15
br i1 %231, label %bb36, label %bb37
bb36:
%232 = i64 Add i64 PC!17, 4
PC!18 = store i64 %232, i64 PC!17
br label %bb38
bb37:
br label %bb38
bb38:
PC!19 = phi ite %233 %234 %232
PC!20 = store i64 PC!19, i64 PC!19
PC!21 = store i64 PC!19, i64 PC!20
ret void

COMPILE
bb_4 func void []
bb0:
call void insn_21.action %0 ()
call void insn_22.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_4 func void []
bb0:
br label %bb6
bb1:
br label %bb12
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[13]
%9 = i64 Shl i64 %10, 3
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb8:
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%19 = load i64, [32, i64] XREG[10]
%20 = load i64, [32, i64] XREG[15]
%18 = i64 Add i64 %19, %20
store i64 %18, [32, i64] XREG[15]
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb9:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%11 = load i64, i64 PC
store i64 %11, i64 PC
br label %bb7
bb12:
br label %bb8

propagate
bb_4 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[13]
%9 = i64 Shl i64 %10, 3
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%19 = load i64, [32, i64] XREG[10]
%20 = load i64, [32, i64] XREG[15]
%18 = i64 Add i64 %19, %20
store i64 %18, [32, i64] XREG[15]
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb9:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%11 = load i64, i64 PC
store i64 %11, i64 PC
br label %bb12
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_4 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[13]
%9 = i64 Shl i64 %10, 3
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%19 = load i64, [32, i64] XREG[10]
%20 = load i64, [32, i64] XREG[15]
%18 = i64 Add i64 %19, %20
store i64 %18, [32, i64] XREG[15]
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%11 = load i64, i64 PC
store i64 %11, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%10 = load i64, [32, i64] XREG!2[13]
%9 = i64 Shl i64 %10, 3
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!2 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %5 PC!2 PC!1
%2 = load i64, i64 PC!3
PC!4 = store i64 %2, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%12 = load i64, i64 PC!4
prev_pc!3 = store i64 %12, i64 prev_pc!2
%19 = load i64, [32, i64] XREG!4[10]
%20 = load i64, [32, i64] XREG!4[15]
%18 = i64 Add i64 %19, %20
XREG!5 = store i64 %18, [32, i64] XREG!4[15]
%13 = load i64, i64 PC!4
%15 = load i64, i64 prev_pc!3
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC!4
%17 = i64 Add i64 %16, 4
PC!8 = store i64 %17, i64 PC!4
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %14 PC!8 PC!4
%11 = load i64, i64 PC!5
PC!6 = store i64 %11, i64 PC!5
%1 = load i64, i64 PC!6
PC!7 = store i64 %1, i64 PC!6
ret void

SSA forward
bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[13]
%2 = i64 Shl i64 %3, 3
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[10]
%7 = load i64, [32, i64] XREG!4[15]
%5 = i64 Add i64 %6, %7
XREG!5 = store i64 %5, [32, i64] XREG!4[15]
br label %bb3
bb3:
%4 = i64 Add i64 PC!3, 4
PC!8 = store i64 %4, i64 PC!4
br label %bb4
bb4:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

Nested SCCP
bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[13]
%2 = i64 Shl i64 %3, 3
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[10]
%7 = load i64, [32, i64] XREG!4[15]
%5 = i64 Add i64 %6, %7
XREG!5 = store i64 %5, [32, i64] XREG!4[15]
br label %bb3
bb3:
%4 = i64 Add i64 PC!3, 4
PC!8 = store i64 %4, i64 PC!4
br label %bb4
bb4:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

SCCP forward
bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[13]
%2 = i64 Shl i64 %3, 3
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[10]
%7 = load i64, [32, i64] XREG!4[15]
%5 = i64 Add i64 %6, %7
XREG!5 = store i64 %5, [32, i64] XREG!4[15]
br label %bb3
bb3:
%4 = i64 Add i64 PC!3, 4
PC!8 = store i64 %4, i64 PC!4
br label %bb4
bb4:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

cherry
bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[13]
%2 = i64 Shl i64 %3, 3
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[10]
%7 = load i64, [32, i64] XREG!4[15]
%5 = i64 Add i64 %6, %7
XREG!5 = store i64 %5, [32, i64] XREG!4[15]
%4 = i64 Add i64 PC!3, 4
PC!8 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[13]
%2 = i64 Shl i64 %3, 3
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[10]
%7 = load i64, [32, i64] XREG!4[15]
%5 = i64 Add i64 %6, %7
XREG!5 = store i64 %5, [32, i64] XREG!4[15]
%4 = i64 Add i64 PC!3, 4
PC!8 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

COMPILE
bb_5 func void []
bb0:
call void insn_23.action %0 ()
call void insn_24.action %0 ()
call void insn_25.action %0 ()
call void insn_26.action %0 ()
call void insn_27.action %0 ()
call void insn_28.action %0 ()
call void insn_29.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_5 func void []
bb0:
br label %bb21
bb1:
br label %bb42
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 4080 to i64
%12 = load i64, [32, i64] XREG[15]
%10 = i64 Add i64 %12, %9
store i64 %10, i64 tmp_address
%11 = load i64, i64 tmp_address
%14 = i64 Lshr i64 %11, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %11 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb3, label %bb4
bb3:
%18 = load i53, i53 mem_index
%19 = load i64, [9007199254740992, i64] MEM[%18]
store i64 %19, i64 tmp_dword
br label %bb5
bb4:
%20 = load i53, i53 mem_index
%21 = i53 Add i53 %20, 1
%22 = load i64, [9007199254740992, i64] MEM[%21]
store i64 %22, i64 tmp_dword1
%23 = load i53, i53 mem_index
%24 = load i64, [9007199254740992, i64] MEM[%23]
store i64 %24, i64 tmp_dword2
%25 = Extract i3 of i64 %11 <2, 0>
%26 = i1 Eq i3 %25, 1
br i1 %26, label %bb6, label %bb7
bb5:
%72 = load i64, i64 tmp_dword
store i64 %72, i64 rd_var
%13 = load i64, i64 rd_var
store i64 %13, [32, i64] XREG[14]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb10, label %bb11
bb6:
%28 = load i64, i64 tmp_dword1
%29 = Extract i8 of i64 %28 <7, 0>
%30 = load i64, i64 tmp_dword2
%31 = Extract i56 of i64 %30 <63, 8>
%27 = Concat i64 i8 %29, i56 %31
store i64 %27, i64 tmp_dword
br label %bb5
bb7:
%32 = Extract i3 of i64 %11 <2, 0>
%33 = i1 Eq i3 %32, 2
br i1 %33, label %bb8, label %bb9
bb8:
%35 = load i64, i64 tmp_dword1
%36 = Extract i16 of i64 %35 <15, 0>
%37 = load i64, i64 tmp_dword2
%38 = Extract i48 of i64 %37 <63, 16>
%34 = Concat i64 i16 %36, i48 %38
store i64 %34, i64 tmp_dword
br label %bb5
bb9:
%39 = Extract i3 of i64 %11 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb12, label %bb13
bb10:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb14
bb11:
br label %bb14
bb12:
%42 = load i64, i64 tmp_dword1
%43 = Extract i24 of i64 %42 <23, 0>
%44 = load i64, i64 tmp_dword2
%45 = Extract i40 of i64 %44 <63, 24>
%41 = Concat i64 i24 %43, i40 %45
store i64 %41, i64 tmp_dword
br label %bb5
bb13:
%46 = Extract i3 of i64 %11 <2, 0>
%47 = i1 Eq i3 %46, -4
br i1 %47, label %bb15, label %bb16
bb14:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb15:
%49 = load i64, i64 tmp_dword1
%50 = Extract i32 of i64 %49 <31, 0>
%51 = load i64, i64 tmp_dword2
%52 = Extract i32 of i64 %51 <63, 32>
%48 = Concat i64 i32 %50, i32 %52
store i64 %48, i64 tmp_dword
br label %bb5
bb16:
%53 = Extract i3 of i64 %11 <2, 0>
%54 = i1 Eq i3 %53, -3
br i1 %54, label %bb17, label %bb18
bb17:
%56 = load i64, i64 tmp_dword1
%57 = Extract i40 of i64 %56 <39, 0>
%58 = load i64, i64 tmp_dword2
%59 = Extract i24 of i64 %58 <63, 40>
%55 = Concat i64 i40 %57, i24 %59
store i64 %55, i64 tmp_dword
br label %bb5
bb18:
%60 = Extract i3 of i64 %11 <2, 0>
%61 = i1 Eq i3 %60, -2
br i1 %61, label %bb19, label %bb20
bb19:
%63 = load i64, i64 tmp_dword1
%64 = Extract i48 of i64 %63 <47, 0>
%65 = load i64, i64 tmp_dword2
%66 = Extract i16 of i64 %65 <63, 48>
%62 = Concat i64 i48 %64, i16 %66
store i64 %62, i64 tmp_dword
br label %bb5
bb20:
%68 = load i64, i64 tmp_dword1
%69 = Extract i56 of i64 %68 <55, 0>
%70 = load i64, i64 tmp_dword2
%71 = Extract i8 of i64 %70 <63, 56>
%67 = Concat i64 i56 %69, i8 %71
store i64 %67, i64 tmp_dword
br label %bb5
bb21:
br label %bb2
bb22:
br label %bb48
bb23:
store i64 0, [32, i64] XREG[0]
%74 = load i64, i64 PC
store i64 %74, i64 prev_pc
%80 = Sext i12 4088 to i64
%83 = load i64, [32, i64] XREG[15]
%81 = i64 Add i64 %83, %80
store i64 %81, i64 tmp_address
%82 = load i64, i64 tmp_address
%85 = i64 Lshr i64 %82, 3
%86 = Extract i53 of i64 %85 <52, 0>
store i53 %86, i53 mem_index
%87 = Extract i3 of i64 %82 <2, 0>
%88 = i1 Eq i3 %87, 0
br i1 %88, label %bb24, label %bb25
bb24:
%89 = load i53, i53 mem_index
%90 = load i64, [9007199254740992, i64] MEM[%89]
store i64 %90, i64 tmp_dword
br label %bb26
bb25:
%91 = load i53, i53 mem_index
%92 = i53 Add i53 %91, 1
%93 = load i64, [9007199254740992, i64] MEM[%92]
store i64 %93, i64 tmp_dword1
%94 = load i53, i53 mem_index
%95 = load i64, [9007199254740992, i64] MEM[%94]
store i64 %95, i64 tmp_dword2
%96 = Extract i3 of i64 %82 <2, 0>
%97 = i1 Eq i3 %96, 1
br i1 %97, label %bb27, label %bb28
bb26:
%143 = load i64, i64 tmp_dword
store i64 %143, i64 rd_var
%84 = load i64, i64 rd_var
store i64 %84, [32, i64] XREG[12]
%75 = load i64, i64 PC
%77 = load i64, i64 prev_pc
%76 = i1 Eq i64 %75, %77
br i1 %76, label %bb31, label %bb32
bb27:
%99 = load i64, i64 tmp_dword1
%100 = Extract i8 of i64 %99 <7, 0>
%101 = load i64, i64 tmp_dword2
%102 = Extract i56 of i64 %101 <63, 8>
%98 = Concat i64 i8 %100, i56 %102
store i64 %98, i64 tmp_dword
br label %bb26
bb28:
%103 = Extract i3 of i64 %82 <2, 0>
%104 = i1 Eq i3 %103, 2
br i1 %104, label %bb29, label %bb30
bb29:
%106 = load i64, i64 tmp_dword1
%107 = Extract i16 of i64 %106 <15, 0>
%108 = load i64, i64 tmp_dword2
%109 = Extract i48 of i64 %108 <63, 16>
%105 = Concat i64 i16 %107, i48 %109
store i64 %105, i64 tmp_dword
br label %bb26
bb30:
%110 = Extract i3 of i64 %82 <2, 0>
%111 = i1 Eq i3 %110, 3
br i1 %111, label %bb33, label %bb34
bb31:
%78 = load i64, i64 PC
%79 = i64 Add i64 %78, 4
store i64 %79, i64 PC
br label %bb35
bb32:
br label %bb35
bb33:
%113 = load i64, i64 tmp_dword1
%114 = Extract i24 of i64 %113 <23, 0>
%115 = load i64, i64 tmp_dword2
%116 = Extract i40 of i64 %115 <63, 24>
%112 = Concat i64 i24 %114, i40 %116
store i64 %112, i64 tmp_dword
br label %bb26
bb34:
%117 = Extract i3 of i64 %82 <2, 0>
%118 = i1 Eq i3 %117, -4
br i1 %118, label %bb36, label %bb37
bb35:
%73 = load i64, i64 PC
store i64 %73, i64 PC
br label %bb22
bb36:
%120 = load i64, i64 tmp_dword1
%121 = Extract i32 of i64 %120 <31, 0>
%122 = load i64, i64 tmp_dword2
%123 = Extract i32 of i64 %122 <63, 32>
%119 = Concat i64 i32 %121, i32 %123
store i64 %119, i64 tmp_dword
br label %bb26
bb37:
%124 = Extract i3 of i64 %82 <2, 0>
%125 = i1 Eq i3 %124, -3
br i1 %125, label %bb38, label %bb39
bb38:
%127 = load i64, i64 tmp_dword1
%128 = Extract i40 of i64 %127 <39, 0>
%129 = load i64, i64 tmp_dword2
%130 = Extract i24 of i64 %129 <63, 40>
%126 = Concat i64 i40 %128, i24 %130
store i64 %126, i64 tmp_dword
br label %bb26
bb39:
%131 = Extract i3 of i64 %82 <2, 0>
%132 = i1 Eq i3 %131, -2
br i1 %132, label %bb40, label %bb41
bb40:
%134 = load i64, i64 tmp_dword1
%135 = Extract i48 of i64 %134 <47, 0>
%136 = load i64, i64 tmp_dword2
%137 = Extract i16 of i64 %136 <63, 48>
%133 = Concat i64 i48 %135, i16 %137
store i64 %133, i64 tmp_dword
br label %bb26
bb41:
%139 = load i64, i64 tmp_dword1
%140 = Extract i56 of i64 %139 <55, 0>
%141 = load i64, i64 tmp_dword2
%142 = Extract i8 of i64 %141 <63, 56>
%138 = Concat i64 i56 %140, i8 %142
store i64 %138, i64 tmp_dword
br label %bb26
bb42:
br label %bb23
bb43:
br label %bb54
bb44:
store i64 0, [32, i64] XREG[0]
%145 = load i64, i64 PC
store i64 %145, i64 prev_pc
%151 = Sext i12 8 to i64
%153 = load i64, [32, i64] XREG[15]
%152 = i64 Add i64 %153, %151
store i64 %152, [32, i64] XREG[15]
%146 = load i64, i64 PC
%148 = load i64, i64 prev_pc
%147 = i1 Eq i64 %146, %148
br i1 %147, label %bb45, label %bb46
bb45:
%149 = load i64, i64 PC
%150 = i64 Add i64 %149, 4
store i64 %150, i64 PC
br label %bb47
bb46:
br label %bb47
bb47:
%144 = load i64, i64 PC
store i64 %144, i64 PC
br label %bb43
bb48:
br label %bb44
bb49:
br label %bb60
bb50:
store i64 0, [32, i64] XREG[0]
%155 = load i64, i64 PC
store i64 %155, i64 prev_pc
%161 = Sext i12 1 to i64
%163 = load i64, [32, i64] XREG[13]
%162 = i64 Add i64 %163, %161
store i64 %162, [32, i64] XREG[13]
%156 = load i64, i64 PC
%158 = load i64, i64 prev_pc
%157 = i1 Eq i64 %156, %158
br i1 %157, label %bb51, label %bb52
bb51:
%159 = load i64, i64 PC
%160 = i64 Add i64 %159, 4
store i64 %160, i64 PC
br label %bb53
bb52:
br label %bb53
bb53:
%154 = load i64, i64 PC
store i64 %154, i64 PC
br label %bb49
bb54:
br label %bb50
bb55:
br label %bb82
bb56:
store i64 0, [32, i64] XREG[0]
%165 = load i64, i64 PC
store i64 %165, i64 prev_pc
%172 = load i64, [32, i64] XREG[14]
%173 = load i64, [32, i64] XREG[12]
%171 = i64 Add i64 %172, %173
store i64 %171, [32, i64] XREG[14]
%166 = load i64, i64 PC
%168 = load i64, i64 prev_pc
%167 = i1 Eq i64 %166, %168
br i1 %167, label %bb57, label %bb58
bb57:
%169 = load i64, i64 PC
%170 = i64 Add i64 %169, 4
store i64 %170, i64 PC
br label %bb59
bb58:
br label %bb59
bb59:
%164 = load i64, i64 PC
store i64 %164, i64 PC
br label %bb55
bb60:
br label %bb56
bb61:
br label %bb91
bb62:
store i64 0, [32, i64] XREG[0]
%175 = load i64, i64 PC
store i64 %175, i64 prev_pc
%181 = Sext i12 4088 to i64
%184 = load i64, [32, i64] XREG[15]
%182 = i64 Add i64 %184, %181
store i64 %182, i64 tmp_address
%183 = load i64, i64 tmp_address
%186 = load i64, [32, i64] XREG[14]
store i64 %186, i64 rs2_var
%185 = load i64, i64 rs2_var
%187 = i64 Lshr i64 %183, 3
%188 = Extract i53 of i64 %187 <52, 0>
store i53 %188, i53 mem_index
%189 = Extract i3 of i64 %183 <2, 0>
%190 = i1 Eq i3 %189, 0
br i1 %190, label %bb63, label %bb64
bb63:
%191 = load i53, i53 mem_index
store i64 %185, [9007199254740992, i64] MEM[%191]
br label %bb65
bb64:
%192 = load i53, i53 mem_index
%193 = i53 Add i53 %192, 1
%194 = load i64, [9007199254740992, i64] MEM[%193]
store i64 %194, i64 tmp_dword1
%195 = load i53, i53 mem_index
%196 = load i64, [9007199254740992, i64] MEM[%195]
store i64 %196, i64 tmp_dword2
%197 = Extract i3 of i64 %183 <2, 0>
%198 = i1 Eq i3 %197, 1
br i1 %198, label %bb66, label %bb67
bb65:
%176 = load i64, i64 PC
%178 = load i64, i64 prev_pc
%177 = i1 Eq i64 %176, %178
br i1 %177, label %bb71, label %bb72
bb66:
%199 = i64 Lshr i64 %185, 56
%200 = Extract i8 of i64 %199 <7, 0>
%202 = load i64, i64 tmp_dword1
%203 = Zext i8 %200 to i64
%204 = i64 And i64 %202, -256
%205 = i64 Shl i64 %203, 0
%201 = i64 Or i64 %204, %205
store i64 %201, i64 tmp_dword1
%206 = i64 Lshr i64 %185, 0
%207 = Extract i56 of i64 %206 <55, 0>
%209 = load i64, i64 tmp_dword2
%210 = Zext i56 %207 to i64
%211 = i64 And i64 %209, 255
%212 = i64 Shl i64 %210, 8
%208 = i64 Or i64 %211, %212
store i64 %208, i64 tmp_dword2
br label %bb68
bb67:
%213 = Extract i3 of i64 %183 <2, 0>
%214 = i1 Eq i3 %213, 2
br i1 %214, label %bb69, label %bb70
bb68:
%307 = load i64, i64 tmp_dword1
%308 = load i53, i53 mem_index
%309 = i53 Add i53 %308, 1
store i64 %307, [9007199254740992, i64] MEM[%309]
%310 = load i64, i64 tmp_dword2
%311 = load i53, i53 mem_index
store i64 %310, [9007199254740992, i64] MEM[%311]
br label %bb65
bb69:
%215 = i64 Lshr i64 %185, 48
%216 = Extract i16 of i64 %215 <15, 0>
%218 = load i64, i64 tmp_dword1
%219 = Zext i16 %216 to i64
%220 = i64 And i64 %218, -65536
%221 = i64 Shl i64 %219, 0
%217 = i64 Or i64 %220, %221
store i64 %217, i64 tmp_dword1
%222 = i64 Lshr i64 %185, 0
%223 = Extract i48 of i64 %222 <47, 0>
%225 = load i64, i64 tmp_dword2
%226 = Zext i48 %223 to i64
%227 = i64 And i64 %225, 65535
%228 = i64 Shl i64 %226, 16
%224 = i64 Or i64 %227, %228
store i64 %224, i64 tmp_dword2
br label %bb68
bb70:
%229 = Extract i3 of i64 %183 <2, 0>
%230 = i1 Eq i3 %229, 3
br i1 %230, label %bb73, label %bb74
bb71:
%179 = load i64, i64 PC
%180 = i64 Add i64 %179, 4
store i64 %180, i64 PC
br label %bb75
bb72:
br label %bb75
bb73:
%231 = i64 Lshr i64 %185, 40
%232 = Extract i24 of i64 %231 <23, 0>
%234 = load i64, i64 tmp_dword1
%235 = Zext i24 %232 to i64
%236 = i64 And i64 %234, -16777216
%237 = i64 Shl i64 %235, 0
%233 = i64 Or i64 %236, %237
store i64 %233, i64 tmp_dword1
%238 = i64 Lshr i64 %185, 0
%239 = Extract i40 of i64 %238 <39, 0>
%241 = load i64, i64 tmp_dword2
%242 = Zext i40 %239 to i64
%243 = i64 And i64 %241, 16777215
%244 = i64 Shl i64 %242, 24
%240 = i64 Or i64 %243, %244
store i64 %240, i64 tmp_dword2
br label %bb68
bb74:
%245 = Extract i3 of i64 %183 <2, 0>
%246 = i1 Eq i3 %245, -4
br i1 %246, label %bb76, label %bb77
bb75:
%174 = load i64, i64 PC
store i64 %174, i64 PC
br label %bb61
bb76:
%247 = i64 Lshr i64 %185, 32
%248 = Extract i32 of i64 %247 <31, 0>
%250 = load i64, i64 tmp_dword1
%251 = Zext i32 %248 to i64
%252 = i64 And i64 %250, -4294967296
%253 = i64 Shl i64 %251, 0
%249 = i64 Or i64 %252, %253
store i64 %249, i64 tmp_dword1
%254 = i64 Lshr i64 %185, 0
%255 = Extract i32 of i64 %254 <31, 0>
%257 = load i64, i64 tmp_dword2
%258 = Zext i32 %255 to i64
%259 = i64 And i64 %257, 4294967295
%260 = i64 Shl i64 %258, 32
%256 = i64 Or i64 %259, %260
store i64 %256, i64 tmp_dword2
br label %bb68
bb77:
%261 = Extract i3 of i64 %183 <2, 0>
%262 = i1 Eq i3 %261, -3
br i1 %262, label %bb78, label %bb79
bb78:
%263 = i64 Lshr i64 %185, 24
%264 = Extract i40 of i64 %263 <39, 0>
%266 = load i64, i64 tmp_dword1
%267 = Zext i40 %264 to i64
%268 = i64 And i64 %266, -1099511627776
%269 = i64 Shl i64 %267, 0
%265 = i64 Or i64 %268, %269
store i64 %265, i64 tmp_dword1
%270 = i64 Lshr i64 %185, 0
%271 = Extract i24 of i64 %270 <23, 0>
%273 = load i64, i64 tmp_dword2
%274 = Zext i24 %271 to i64
%275 = i64 And i64 %273, 1099511627775
%276 = i64 Shl i64 %274, 40
%272 = i64 Or i64 %275, %276
store i64 %272, i64 tmp_dword2
br label %bb68
bb79:
%277 = Extract i3 of i64 %183 <2, 0>
%278 = i1 Eq i3 %277, -2
br i1 %278, label %bb80, label %bb81
bb80:
%279 = i64 Lshr i64 %185, 16
%280 = Extract i48 of i64 %279 <47, 0>
%282 = load i64, i64 tmp_dword1
%283 = Zext i48 %280 to i64
%284 = i64 And i64 %282, -281474976710656
%285 = i64 Shl i64 %283, 0
%281 = i64 Or i64 %284, %285
store i64 %281, i64 tmp_dword1
%286 = i64 Lshr i64 %185, 0
%287 = Extract i16 of i64 %286 <15, 0>
%289 = load i64, i64 tmp_dword2
%290 = Zext i16 %287 to i64
%291 = i64 And i64 %289, 281474976710655
%292 = i64 Shl i64 %290, 48
%288 = i64 Or i64 %291, %292
store i64 %288, i64 tmp_dword2
br label %bb68
bb81:
%293 = i64 Lshr i64 %185, 8
%294 = Extract i56 of i64 %293 <55, 0>
%296 = load i64, i64 tmp_dword1
%297 = Zext i56 %294 to i64
%298 = i64 And i64 %296, -72057594037927936
%299 = i64 Shl i64 %297, 0
%295 = i64 Or i64 %298, %299
store i64 %295, i64 tmp_dword1
%300 = i64 Lshr i64 %185, 0
%301 = Extract i8 of i64 %300 <7, 0>
%303 = load i64, i64 tmp_dword2
%304 = Zext i8 %301 to i64
%305 = i64 And i64 %303, 72057594037927935
%306 = i64 Shl i64 %304, 56
%302 = i64 Or i64 %305, %306
store i64 %302, i64 tmp_dword2
br label %bb68
bb82:
br label %bb62
bb83:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb84:
store i64 0, [32, i64] XREG[0]
%313 = load i64, i64 PC
store i64 %313, i64 prev_pc
%324 = load i64, [32, i64] XREG[13]
%325 = load i64, [32, i64] XREG[11]
%319 = i1 Ult i64 %324, %325
br i1 %319, label %bb85, label %bb86
bb85:
%320 = Sext i12 4084 to i64
%321 = i64 Shl i64 %320, 1
%322 = load i64, i64 PC
%323 = i64 Add i64 %322, %321
store i64 %323, i64 PC
br label %bb87
bb86:
br label %bb87
bb87:
%314 = load i64, i64 PC
%316 = load i64, i64 prev_pc
%315 = i1 Eq i64 %314, %316
br i1 %315, label %bb88, label %bb89
bb88:
%317 = load i64, i64 PC
%318 = i64 Add i64 %317, 4
store i64 %318, i64 PC
br label %bb90
bb89:
br label %bb90
bb90:
%312 = load i64, i64 PC
store i64 %312, i64 PC
br label %bb83
bb91:
br label %bb84

propagate
bb_5 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, -16
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb3, label %bb4
bb3:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb5
bb4:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb6, label %bb7
bb5:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[14]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb8, label %bb9
bb6:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb5
bb7:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb10, label %bb11
bb8:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb5
bb11:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb13, label %bb14
bb12:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb15
bb13:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb5
bb14:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb16, label %bb17
bb15:
br label %bb18
bb16:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb5
bb17:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb19, label %bb20
bb18:
br label %bb21
bb19:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb5
bb20:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb22, label %bb23
bb21:
store i64 0, [32, i64] XREG[0]
%73 = load i64, i64 PC
store i64 %73, i64 prev_pc
%81 = load i64, [32, i64] XREG[15]
%79 = i64 Add i64 %81, -8
store i64 %79, i64 tmp_address
%80 = load i64, i64 tmp_address
%83 = i64 Lshr i64 %80, 3
%84 = Extract i53 of i64 %83 <52, 0>
store i53 %84, i53 mem_index
%85 = Extract i3 of i64 %80 <2, 0>
%86 = i1 Eq i3 %85, 0
br i1 %86, label %bb24, label %bb25
bb22:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb5
bb23:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb5
bb24:
%87 = load i53, i53 mem_index
%88 = load i64, [9007199254740992, i64] MEM[%87]
store i64 %88, i64 tmp_dword
br label %bb26
bb25:
%89 = load i53, i53 mem_index
%90 = i53 Add i53 %89, 1
%91 = load i64, [9007199254740992, i64] MEM[%90]
store i64 %91, i64 tmp_dword1
%92 = load i53, i53 mem_index
%93 = load i64, [9007199254740992, i64] MEM[%92]
store i64 %93, i64 tmp_dword2
%94 = Extract i3 of i64 %80 <2, 0>
%95 = i1 Eq i3 %94, 1
br i1 %95, label %bb27, label %bb28
bb26:
%141 = load i64, i64 tmp_dword
store i64 %141, i64 rd_var
%82 = load i64, i64 rd_var
store i64 %82, [32, i64] XREG[12]
%74 = load i64, i64 PC
%76 = load i64, i64 prev_pc
%75 = i1 Eq i64 %74, %76
br i1 %75, label %bb29, label %bb30
bb27:
%97 = load i64, i64 tmp_dword1
%98 = Extract i8 of i64 %97 <7, 0>
%99 = load i64, i64 tmp_dword2
%100 = Extract i56 of i64 %99 <63, 8>
%96 = Concat i64 i8 %98, i56 %100
store i64 %96, i64 tmp_dword
br label %bb26
bb28:
%101 = Extract i3 of i64 %80 <2, 0>
%102 = i1 Eq i3 %101, 2
br i1 %102, label %bb31, label %bb32
bb29:
%77 = load i64, i64 PC
%78 = i64 Add i64 %77, 4
store i64 %78, i64 PC
br label %bb33
bb30:
br label %bb33
bb31:
%104 = load i64, i64 tmp_dword1
%105 = Extract i16 of i64 %104 <15, 0>
%106 = load i64, i64 tmp_dword2
%107 = Extract i48 of i64 %106 <63, 16>
%103 = Concat i64 i16 %105, i48 %107
store i64 %103, i64 tmp_dword
br label %bb26
bb32:
%108 = Extract i3 of i64 %80 <2, 0>
%109 = i1 Eq i3 %108, 3
br i1 %109, label %bb34, label %bb35
bb33:
%72 = load i64, i64 PC
store i64 %72, i64 PC
br label %bb36
bb34:
%111 = load i64, i64 tmp_dword1
%112 = Extract i24 of i64 %111 <23, 0>
%113 = load i64, i64 tmp_dword2
%114 = Extract i40 of i64 %113 <63, 24>
%110 = Concat i64 i24 %112, i40 %114
store i64 %110, i64 tmp_dword
br label %bb26
bb35:
%115 = Extract i3 of i64 %80 <2, 0>
%116 = i1 Eq i3 %115, -4
br i1 %116, label %bb37, label %bb38
bb36:
br label %bb39
bb37:
%118 = load i64, i64 tmp_dword1
%119 = Extract i32 of i64 %118 <31, 0>
%120 = load i64, i64 tmp_dword2
%121 = Extract i32 of i64 %120 <63, 32>
%117 = Concat i64 i32 %119, i32 %121
store i64 %117, i64 tmp_dword
br label %bb26
bb38:
%122 = Extract i3 of i64 %80 <2, 0>
%123 = i1 Eq i3 %122, -3
br i1 %123, label %bb40, label %bb41
bb39:
br label %bb42
bb40:
%125 = load i64, i64 tmp_dword1
%126 = Extract i40 of i64 %125 <39, 0>
%127 = load i64, i64 tmp_dword2
%128 = Extract i24 of i64 %127 <63, 40>
%124 = Concat i64 i40 %126, i24 %128
store i64 %124, i64 tmp_dword
br label %bb26
bb41:
%129 = Extract i3 of i64 %80 <2, 0>
%130 = i1 Eq i3 %129, -2
br i1 %130, label %bb43, label %bb44
bb42:
store i64 0, [32, i64] XREG[0]
%143 = load i64, i64 PC
store i64 %143, i64 prev_pc
%150 = load i64, [32, i64] XREG[15]
%149 = i64 Add i64 %150, 8
store i64 %149, [32, i64] XREG[15]
%144 = load i64, i64 PC
%146 = load i64, i64 prev_pc
%145 = i1 Eq i64 %144, %146
br i1 %145, label %bb45, label %bb46
bb43:
%132 = load i64, i64 tmp_dword1
%133 = Extract i48 of i64 %132 <47, 0>
%134 = load i64, i64 tmp_dword2
%135 = Extract i16 of i64 %134 <63, 48>
%131 = Concat i64 i48 %133, i16 %135
store i64 %131, i64 tmp_dword
br label %bb26
bb44:
%137 = load i64, i64 tmp_dword1
%138 = Extract i56 of i64 %137 <55, 0>
%139 = load i64, i64 tmp_dword2
%140 = Extract i8 of i64 %139 <63, 56>
%136 = Concat i64 i56 %138, i8 %140
store i64 %136, i64 tmp_dword
br label %bb26
bb45:
%147 = load i64, i64 PC
%148 = i64 Add i64 %147, 4
store i64 %148, i64 PC
br label %bb47
bb46:
br label %bb47
bb47:
%142 = load i64, i64 PC
store i64 %142, i64 PC
br label %bb48
bb48:
br label %bb49
bb49:
br label %bb50
bb50:
store i64 0, [32, i64] XREG[0]
%152 = load i64, i64 PC
store i64 %152, i64 prev_pc
%159 = load i64, [32, i64] XREG[13]
%158 = i64 Add i64 %159, 1
store i64 %158, [32, i64] XREG[13]
%153 = load i64, i64 PC
%155 = load i64, i64 prev_pc
%154 = i1 Eq i64 %153, %155
br i1 %154, label %bb51, label %bb52
bb51:
%156 = load i64, i64 PC
%157 = i64 Add i64 %156, 4
store i64 %157, i64 PC
br label %bb53
bb52:
br label %bb53
bb53:
%151 = load i64, i64 PC
store i64 %151, i64 PC
br label %bb54
bb54:
br label %bb55
bb55:
br label %bb56
bb56:
store i64 0, [32, i64] XREG[0]
%161 = load i64, i64 PC
store i64 %161, i64 prev_pc
%168 = load i64, [32, i64] XREG[14]
%169 = load i64, [32, i64] XREG[12]
%167 = i64 Add i64 %168, %169
store i64 %167, [32, i64] XREG[14]
%162 = load i64, i64 PC
%164 = load i64, i64 prev_pc
%163 = i1 Eq i64 %162, %164
br i1 %163, label %bb57, label %bb58
bb57:
%165 = load i64, i64 PC
%166 = i64 Add i64 %165, 4
store i64 %166, i64 PC
br label %bb59
bb58:
br label %bb59
bb59:
%160 = load i64, i64 PC
store i64 %160, i64 PC
br label %bb60
bb60:
br label %bb61
bb61:
br label %bb62
bb62:
store i64 0, [32, i64] XREG[0]
%171 = load i64, i64 PC
store i64 %171, i64 prev_pc
%179 = load i64, [32, i64] XREG[15]
%177 = i64 Add i64 %179, -8
store i64 %177, i64 tmp_address
%178 = load i64, i64 tmp_address
%181 = load i64, [32, i64] XREG[14]
store i64 %181, i64 rs2_var
%180 = load i64, i64 rs2_var
%182 = i64 Lshr i64 %178, 3
%183 = Extract i53 of i64 %182 <52, 0>
store i53 %183, i53 mem_index
%184 = Extract i3 of i64 %178 <2, 0>
%185 = i1 Eq i3 %184, 0
br i1 %185, label %bb63, label %bb64
bb63:
%186 = load i53, i53 mem_index
store i64 %180, [9007199254740992, i64] MEM[%186]
br label %bb65
bb64:
%187 = load i53, i53 mem_index
%188 = i53 Add i53 %187, 1
%189 = load i64, [9007199254740992, i64] MEM[%188]
store i64 %189, i64 tmp_dword1
%190 = load i53, i53 mem_index
%191 = load i64, [9007199254740992, i64] MEM[%190]
store i64 %191, i64 tmp_dword2
%192 = Extract i3 of i64 %178 <2, 0>
%193 = i1 Eq i3 %192, 1
br i1 %193, label %bb66, label %bb67
bb65:
%172 = load i64, i64 PC
%174 = load i64, i64 prev_pc
%173 = i1 Eq i64 %172, %174
br i1 %173, label %bb68, label %bb69
bb66:
%194 = i64 Lshr i64 %180, 56
%195 = Extract i8 of i64 %194 <7, 0>
%197 = load i64, i64 tmp_dword1
%198 = Zext i8 %195 to i64
%199 = i64 And i64 %197, -256
%200 = i64 Shl i64 %198, 0
%196 = i64 Or i64 %199, %200
store i64 %196, i64 tmp_dword1
%201 = i64 Lshr i64 %180, 0
%202 = Extract i56 of i64 %201 <55, 0>
%204 = load i64, i64 tmp_dword2
%205 = Zext i56 %202 to i64
%206 = i64 And i64 %204, 255
%207 = i64 Shl i64 %205, 8
%203 = i64 Or i64 %206, %207
store i64 %203, i64 tmp_dword2
br label %bb70
bb67:
%208 = Extract i3 of i64 %178 <2, 0>
%209 = i1 Eq i3 %208, 2
br i1 %209, label %bb71, label %bb72
bb68:
%175 = load i64, i64 PC
%176 = i64 Add i64 %175, 4
store i64 %176, i64 PC
br label %bb73
bb69:
br label %bb73
bb70:
%302 = load i64, i64 tmp_dword1
%303 = load i53, i53 mem_index
%304 = i53 Add i53 %303, 1
store i64 %302, [9007199254740992, i64] MEM[%304]
%305 = load i64, i64 tmp_dword2
%306 = load i53, i53 mem_index
store i64 %305, [9007199254740992, i64] MEM[%306]
br label %bb65
bb71:
%210 = i64 Lshr i64 %180, 48
%211 = Extract i16 of i64 %210 <15, 0>
%213 = load i64, i64 tmp_dword1
%214 = Zext i16 %211 to i64
%215 = i64 And i64 %213, -65536
%216 = i64 Shl i64 %214, 0
%212 = i64 Or i64 %215, %216
store i64 %212, i64 tmp_dword1
%217 = i64 Lshr i64 %180, 0
%218 = Extract i48 of i64 %217 <47, 0>
%220 = load i64, i64 tmp_dword2
%221 = Zext i48 %218 to i64
%222 = i64 And i64 %220, 65535
%223 = i64 Shl i64 %221, 16
%219 = i64 Or i64 %222, %223
store i64 %219, i64 tmp_dword2
br label %bb70
bb72:
%224 = Extract i3 of i64 %178 <2, 0>
%225 = i1 Eq i3 %224, 3
br i1 %225, label %bb74, label %bb75
bb73:
%170 = load i64, i64 PC
store i64 %170, i64 PC
br label %bb76
bb74:
%226 = i64 Lshr i64 %180, 40
%227 = Extract i24 of i64 %226 <23, 0>
%229 = load i64, i64 tmp_dword1
%230 = Zext i24 %227 to i64
%231 = i64 And i64 %229, -16777216
%232 = i64 Shl i64 %230, 0
%228 = i64 Or i64 %231, %232
store i64 %228, i64 tmp_dword1
%233 = i64 Lshr i64 %180, 0
%234 = Extract i40 of i64 %233 <39, 0>
%236 = load i64, i64 tmp_dword2
%237 = Zext i40 %234 to i64
%238 = i64 And i64 %236, 16777215
%239 = i64 Shl i64 %237, 24
%235 = i64 Or i64 %238, %239
store i64 %235, i64 tmp_dword2
br label %bb70
bb75:
%240 = Extract i3 of i64 %178 <2, 0>
%241 = i1 Eq i3 %240, -4
br i1 %241, label %bb77, label %bb78
bb76:
br label %bb79
bb77:
%242 = i64 Lshr i64 %180, 32
%243 = Extract i32 of i64 %242 <31, 0>
%245 = load i64, i64 tmp_dword1
%246 = Zext i32 %243 to i64
%247 = i64 And i64 %245, -4294967296
%248 = i64 Shl i64 %246, 0
%244 = i64 Or i64 %247, %248
store i64 %244, i64 tmp_dword1
%249 = i64 Lshr i64 %180, 0
%250 = Extract i32 of i64 %249 <31, 0>
%252 = load i64, i64 tmp_dword2
%253 = Zext i32 %250 to i64
%254 = i64 And i64 %252, 4294967295
%255 = i64 Shl i64 %253, 32
%251 = i64 Or i64 %254, %255
store i64 %251, i64 tmp_dword2
br label %bb70
bb78:
%256 = Extract i3 of i64 %178 <2, 0>
%257 = i1 Eq i3 %256, -3
br i1 %257, label %bb80, label %bb81
bb79:
br label %bb82
bb80:
%258 = i64 Lshr i64 %180, 24
%259 = Extract i40 of i64 %258 <39, 0>
%261 = load i64, i64 tmp_dword1
%262 = Zext i40 %259 to i64
%263 = i64 And i64 %261, -1099511627776
%264 = i64 Shl i64 %262, 0
%260 = i64 Or i64 %263, %264
store i64 %260, i64 tmp_dword1
%265 = i64 Lshr i64 %180, 0
%266 = Extract i24 of i64 %265 <23, 0>
%268 = load i64, i64 tmp_dword2
%269 = Zext i24 %266 to i64
%270 = i64 And i64 %268, 1099511627775
%271 = i64 Shl i64 %269, 40
%267 = i64 Or i64 %270, %271
store i64 %267, i64 tmp_dword2
br label %bb70
bb81:
%272 = Extract i3 of i64 %178 <2, 0>
%273 = i1 Eq i3 %272, -2
br i1 %273, label %bb83, label %bb84
bb82:
store i64 0, [32, i64] XREG[0]
%308 = load i64, i64 PC
store i64 %308, i64 prev_pc
%317 = load i64, [32, i64] XREG[13]
%318 = load i64, [32, i64] XREG[11]
%314 = i1 Ult i64 %317, %318
br i1 %314, label %bb85, label %bb86
bb83:
%274 = i64 Lshr i64 %180, 16
%275 = Extract i48 of i64 %274 <47, 0>
%277 = load i64, i64 tmp_dword1
%278 = Zext i48 %275 to i64
%279 = i64 And i64 %277, -281474976710656
%280 = i64 Shl i64 %278, 0
%276 = i64 Or i64 %279, %280
store i64 %276, i64 tmp_dword1
%281 = i64 Lshr i64 %180, 0
%282 = Extract i16 of i64 %281 <15, 0>
%284 = load i64, i64 tmp_dword2
%285 = Zext i16 %282 to i64
%286 = i64 And i64 %284, 281474976710655
%287 = i64 Shl i64 %285, 48
%283 = i64 Or i64 %286, %287
store i64 %283, i64 tmp_dword2
br label %bb70
bb84:
%288 = i64 Lshr i64 %180, 8
%289 = Extract i56 of i64 %288 <55, 0>
%291 = load i64, i64 tmp_dword1
%292 = Zext i56 %289 to i64
%293 = i64 And i64 %291, -72057594037927936
%294 = i64 Shl i64 %292, 0
%290 = i64 Or i64 %293, %294
store i64 %290, i64 tmp_dword1
%295 = i64 Lshr i64 %180, 0
%296 = Extract i8 of i64 %295 <7, 0>
%298 = load i64, i64 tmp_dword2
%299 = Zext i8 %296 to i64
%300 = i64 And i64 %298, 72057594037927935
%301 = i64 Shl i64 %299, 56
%297 = i64 Or i64 %300, %301
store i64 %297, i64 tmp_dword2
br label %bb70
bb85:
%315 = load i64, i64 PC
%316 = i64 Add i64 %315, -24
store i64 %316, i64 PC
br label %bb87
bb86:
br label %bb87
bb87:
%309 = load i64, i64 PC
%311 = load i64, i64 prev_pc
%310 = i1 Eq i64 %309, %311
br i1 %310, label %bb88, label %bb89
bb88:
%312 = load i64, i64 PC
%313 = i64 Add i64 %312, 4
store i64 %313, i64 PC
br label %bb90
bb89:
br label %bb90
bb90:
%307 = load i64, i64 PC
store i64 %307, i64 PC
br label %bb91
bb91:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_5 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, -16
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[14]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb6, label %bb7
bb4:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb8, label %bb9
bb6:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb10
bb7:
br label %bb10
bb8:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb3
bb9:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb11, label %bb12
bb10:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%73 = load i64, i64 PC
store i64 %73, i64 prev_pc
%81 = load i64, [32, i64] XREG[15]
%79 = i64 Add i64 %81, -8
store i64 %79, i64 tmp_address
%80 = load i64, i64 tmp_address
%83 = i64 Lshr i64 %80, 3
%84 = Extract i53 of i64 %83 <52, 0>
store i53 %84, i53 mem_index
%85 = Extract i3 of i64 %80 <2, 0>
%86 = i1 Eq i3 %85, 0
br i1 %86, label %bb19, label %bb20
bb11:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb3
bb12:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb13:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb3
bb19:
%87 = load i53, i53 mem_index
%88 = load i64, [9007199254740992, i64] MEM[%87]
store i64 %88, i64 tmp_dword
br label %bb21
bb20:
%89 = load i53, i53 mem_index
%90 = i53 Add i53 %89, 1
%91 = load i64, [9007199254740992, i64] MEM[%90]
store i64 %91, i64 tmp_dword1
%92 = load i53, i53 mem_index
%93 = load i64, [9007199254740992, i64] MEM[%92]
store i64 %93, i64 tmp_dword2
%94 = Extract i3 of i64 %80 <2, 0>
%95 = i1 Eq i3 %94, 1
br i1 %95, label %bb22, label %bb23
bb21:
%141 = load i64, i64 tmp_dword
store i64 %141, i64 rd_var
%82 = load i64, i64 rd_var
store i64 %82, [32, i64] XREG[12]
%74 = load i64, i64 PC
%76 = load i64, i64 prev_pc
%75 = i1 Eq i64 %74, %76
br i1 %75, label %bb24, label %bb25
bb22:
%97 = load i64, i64 tmp_dword1
%98 = Extract i8 of i64 %97 <7, 0>
%99 = load i64, i64 tmp_dword2
%100 = Extract i56 of i64 %99 <63, 8>
%96 = Concat i64 i8 %98, i56 %100
store i64 %96, i64 tmp_dword
br label %bb21
bb23:
%101 = Extract i3 of i64 %80 <2, 0>
%102 = i1 Eq i3 %101, 2
br i1 %102, label %bb26, label %bb27
bb24:
%77 = load i64, i64 PC
%78 = i64 Add i64 %77, 4
store i64 %78, i64 PC
br label %bb28
bb25:
br label %bb28
bb26:
%104 = load i64, i64 tmp_dword1
%105 = Extract i16 of i64 %104 <15, 0>
%106 = load i64, i64 tmp_dword2
%107 = Extract i48 of i64 %106 <63, 16>
%103 = Concat i64 i16 %105, i48 %107
store i64 %103, i64 tmp_dword
br label %bb21
bb27:
%108 = Extract i3 of i64 %80 <2, 0>
%109 = i1 Eq i3 %108, 3
br i1 %109, label %bb29, label %bb30
bb28:
%72 = load i64, i64 PC
store i64 %72, i64 PC
store i64 0, [32, i64] XREG[0]
%143 = load i64, i64 PC
store i64 %143, i64 prev_pc
%150 = load i64, [32, i64] XREG[15]
%149 = i64 Add i64 %150, 8
store i64 %149, [32, i64] XREG[15]
%144 = load i64, i64 PC
%146 = load i64, i64 prev_pc
%145 = i1 Eq i64 %144, %146
br i1 %145, label %bb37, label %bb38
bb29:
%111 = load i64, i64 tmp_dword1
%112 = Extract i24 of i64 %111 <23, 0>
%113 = load i64, i64 tmp_dword2
%114 = Extract i40 of i64 %113 <63, 24>
%110 = Concat i64 i24 %112, i40 %114
store i64 %110, i64 tmp_dword
br label %bb21
bb30:
%115 = Extract i3 of i64 %80 <2, 0>
%116 = i1 Eq i3 %115, -4
br i1 %116, label %bb31, label %bb32
bb31:
%118 = load i64, i64 tmp_dword1
%119 = Extract i32 of i64 %118 <31, 0>
%120 = load i64, i64 tmp_dword2
%121 = Extract i32 of i64 %120 <63, 32>
%117 = Concat i64 i32 %119, i32 %121
store i64 %117, i64 tmp_dword
br label %bb21
bb32:
%122 = Extract i3 of i64 %80 <2, 0>
%123 = i1 Eq i3 %122, -3
br i1 %123, label %bb33, label %bb34
bb33:
%125 = load i64, i64 tmp_dword1
%126 = Extract i40 of i64 %125 <39, 0>
%127 = load i64, i64 tmp_dword2
%128 = Extract i24 of i64 %127 <63, 40>
%124 = Concat i64 i40 %126, i24 %128
store i64 %124, i64 tmp_dword
br label %bb21
bb34:
%129 = Extract i3 of i64 %80 <2, 0>
%130 = i1 Eq i3 %129, -2
br i1 %130, label %bb35, label %bb36
bb35:
%132 = load i64, i64 tmp_dword1
%133 = Extract i48 of i64 %132 <47, 0>
%134 = load i64, i64 tmp_dword2
%135 = Extract i16 of i64 %134 <63, 48>
%131 = Concat i64 i48 %133, i16 %135
store i64 %131, i64 tmp_dword
br label %bb21
bb36:
%137 = load i64, i64 tmp_dword1
%138 = Extract i56 of i64 %137 <55, 0>
%139 = load i64, i64 tmp_dword2
%140 = Extract i8 of i64 %139 <63, 56>
%136 = Concat i64 i56 %138, i8 %140
store i64 %136, i64 tmp_dword
br label %bb21
bb37:
%147 = load i64, i64 PC
%148 = i64 Add i64 %147, 4
store i64 %148, i64 PC
br label %bb39
bb38:
br label %bb39
bb39:
%142 = load i64, i64 PC
store i64 %142, i64 PC
store i64 0, [32, i64] XREG[0]
%152 = load i64, i64 PC
store i64 %152, i64 prev_pc
%159 = load i64, [32, i64] XREG[13]
%158 = i64 Add i64 %159, 1
store i64 %158, [32, i64] XREG[13]
%153 = load i64, i64 PC
%155 = load i64, i64 prev_pc
%154 = i1 Eq i64 %153, %155
br i1 %154, label %bb40, label %bb41
bb40:
%156 = load i64, i64 PC
%157 = i64 Add i64 %156, 4
store i64 %157, i64 PC
br label %bb42
bb41:
br label %bb42
bb42:
%151 = load i64, i64 PC
store i64 %151, i64 PC
store i64 0, [32, i64] XREG[0]
%161 = load i64, i64 PC
store i64 %161, i64 prev_pc
%168 = load i64, [32, i64] XREG[14]
%169 = load i64, [32, i64] XREG[12]
%167 = i64 Add i64 %168, %169
store i64 %167, [32, i64] XREG[14]
%162 = load i64, i64 PC
%164 = load i64, i64 prev_pc
%163 = i1 Eq i64 %162, %164
br i1 %163, label %bb43, label %bb44
bb43:
%165 = load i64, i64 PC
%166 = i64 Add i64 %165, 4
store i64 %166, i64 PC
br label %bb45
bb44:
br label %bb45
bb45:
%160 = load i64, i64 PC
store i64 %160, i64 PC
store i64 0, [32, i64] XREG[0]
%171 = load i64, i64 PC
store i64 %171, i64 prev_pc
%179 = load i64, [32, i64] XREG[15]
%177 = i64 Add i64 %179, -8
store i64 %177, i64 tmp_address
%178 = load i64, i64 tmp_address
%181 = load i64, [32, i64] XREG[14]
store i64 %181, i64 rs2_var
%180 = load i64, i64 rs2_var
%182 = i64 Lshr i64 %178, 3
%183 = Extract i53 of i64 %182 <52, 0>
store i53 %183, i53 mem_index
%184 = Extract i3 of i64 %178 <2, 0>
%185 = i1 Eq i3 %184, 0
br i1 %185, label %bb46, label %bb47
bb46:
%186 = load i53, i53 mem_index
store i64 %180, [9007199254740992, i64] MEM[%186]
br label %bb48
bb47:
%187 = load i53, i53 mem_index
%188 = i53 Add i53 %187, 1
%189 = load i64, [9007199254740992, i64] MEM[%188]
store i64 %189, i64 tmp_dword1
%190 = load i53, i53 mem_index
%191 = load i64, [9007199254740992, i64] MEM[%190]
store i64 %191, i64 tmp_dword2
%192 = Extract i3 of i64 %178 <2, 0>
%193 = i1 Eq i3 %192, 1
br i1 %193, label %bb49, label %bb50
bb48:
%172 = load i64, i64 PC
%174 = load i64, i64 prev_pc
%173 = i1 Eq i64 %172, %174
br i1 %173, label %bb51, label %bb52
bb49:
%194 = i64 Lshr i64 %180, 56
%195 = Extract i8 of i64 %194 <7, 0>
%197 = load i64, i64 tmp_dword1
%198 = Zext i8 %195 to i64
%199 = i64 And i64 %197, -256
%200 = i64 Shl i64 %198, 0
%196 = i64 Or i64 %199, %200
store i64 %196, i64 tmp_dword1
%201 = i64 Lshr i64 %180, 0
%202 = Extract i56 of i64 %201 <55, 0>
%204 = load i64, i64 tmp_dword2
%205 = Zext i56 %202 to i64
%206 = i64 And i64 %204, 255
%207 = i64 Shl i64 %205, 8
%203 = i64 Or i64 %206, %207
store i64 %203, i64 tmp_dword2
br label %bb53
bb50:
%208 = Extract i3 of i64 %178 <2, 0>
%209 = i1 Eq i3 %208, 2
br i1 %209, label %bb54, label %bb55
bb51:
%175 = load i64, i64 PC
%176 = i64 Add i64 %175, 4
store i64 %176, i64 PC
br label %bb56
bb52:
br label %bb56
bb53:
%302 = load i64, i64 tmp_dword1
%303 = load i53, i53 mem_index
%304 = i53 Add i53 %303, 1
store i64 %302, [9007199254740992, i64] MEM[%304]
%305 = load i64, i64 tmp_dword2
%306 = load i53, i53 mem_index
store i64 %305, [9007199254740992, i64] MEM[%306]
br label %bb48
bb54:
%210 = i64 Lshr i64 %180, 48
%211 = Extract i16 of i64 %210 <15, 0>
%213 = load i64, i64 tmp_dword1
%214 = Zext i16 %211 to i64
%215 = i64 And i64 %213, -65536
%216 = i64 Shl i64 %214, 0
%212 = i64 Or i64 %215, %216
store i64 %212, i64 tmp_dword1
%217 = i64 Lshr i64 %180, 0
%218 = Extract i48 of i64 %217 <47, 0>
%220 = load i64, i64 tmp_dword2
%221 = Zext i48 %218 to i64
%222 = i64 And i64 %220, 65535
%223 = i64 Shl i64 %221, 16
%219 = i64 Or i64 %222, %223
store i64 %219, i64 tmp_dword2
br label %bb53
bb55:
%224 = Extract i3 of i64 %178 <2, 0>
%225 = i1 Eq i3 %224, 3
br i1 %225, label %bb57, label %bb58
bb56:
%170 = load i64, i64 PC
store i64 %170, i64 PC
store i64 0, [32, i64] XREG[0]
%308 = load i64, i64 PC
store i64 %308, i64 prev_pc
%317 = load i64, [32, i64] XREG[13]
%318 = load i64, [32, i64] XREG[11]
%314 = i1 Ult i64 %317, %318
br i1 %314, label %bb65, label %bb66
bb57:
%226 = i64 Lshr i64 %180, 40
%227 = Extract i24 of i64 %226 <23, 0>
%229 = load i64, i64 tmp_dword1
%230 = Zext i24 %227 to i64
%231 = i64 And i64 %229, -16777216
%232 = i64 Shl i64 %230, 0
%228 = i64 Or i64 %231, %232
store i64 %228, i64 tmp_dword1
%233 = i64 Lshr i64 %180, 0
%234 = Extract i40 of i64 %233 <39, 0>
%236 = load i64, i64 tmp_dword2
%237 = Zext i40 %234 to i64
%238 = i64 And i64 %236, 16777215
%239 = i64 Shl i64 %237, 24
%235 = i64 Or i64 %238, %239
store i64 %235, i64 tmp_dword2
br label %bb53
bb58:
%240 = Extract i3 of i64 %178 <2, 0>
%241 = i1 Eq i3 %240, -4
br i1 %241, label %bb59, label %bb60
bb59:
%242 = i64 Lshr i64 %180, 32
%243 = Extract i32 of i64 %242 <31, 0>
%245 = load i64, i64 tmp_dword1
%246 = Zext i32 %243 to i64
%247 = i64 And i64 %245, -4294967296
%248 = i64 Shl i64 %246, 0
%244 = i64 Or i64 %247, %248
store i64 %244, i64 tmp_dword1
%249 = i64 Lshr i64 %180, 0
%250 = Extract i32 of i64 %249 <31, 0>
%252 = load i64, i64 tmp_dword2
%253 = Zext i32 %250 to i64
%254 = i64 And i64 %252, 4294967295
%255 = i64 Shl i64 %253, 32
%251 = i64 Or i64 %254, %255
store i64 %251, i64 tmp_dword2
br label %bb53
bb60:
%256 = Extract i3 of i64 %178 <2, 0>
%257 = i1 Eq i3 %256, -3
br i1 %257, label %bb61, label %bb62
bb61:
%258 = i64 Lshr i64 %180, 24
%259 = Extract i40 of i64 %258 <39, 0>
%261 = load i64, i64 tmp_dword1
%262 = Zext i40 %259 to i64
%263 = i64 And i64 %261, -1099511627776
%264 = i64 Shl i64 %262, 0
%260 = i64 Or i64 %263, %264
store i64 %260, i64 tmp_dword1
%265 = i64 Lshr i64 %180, 0
%266 = Extract i24 of i64 %265 <23, 0>
%268 = load i64, i64 tmp_dword2
%269 = Zext i24 %266 to i64
%270 = i64 And i64 %268, 1099511627775
%271 = i64 Shl i64 %269, 40
%267 = i64 Or i64 %270, %271
store i64 %267, i64 tmp_dword2
br label %bb53
bb62:
%272 = Extract i3 of i64 %178 <2, 0>
%273 = i1 Eq i3 %272, -2
br i1 %273, label %bb63, label %bb64
bb63:
%274 = i64 Lshr i64 %180, 16
%275 = Extract i48 of i64 %274 <47, 0>
%277 = load i64, i64 tmp_dword1
%278 = Zext i48 %275 to i64
%279 = i64 And i64 %277, -281474976710656
%280 = i64 Shl i64 %278, 0
%276 = i64 Or i64 %279, %280
store i64 %276, i64 tmp_dword1
%281 = i64 Lshr i64 %180, 0
%282 = Extract i16 of i64 %281 <15, 0>
%284 = load i64, i64 tmp_dword2
%285 = Zext i16 %282 to i64
%286 = i64 And i64 %284, 281474976710655
%287 = i64 Shl i64 %285, 48
%283 = i64 Or i64 %286, %287
store i64 %283, i64 tmp_dword2
br label %bb53
bb64:
%288 = i64 Lshr i64 %180, 8
%289 = Extract i56 of i64 %288 <55, 0>
%291 = load i64, i64 tmp_dword1
%292 = Zext i56 %289 to i64
%293 = i64 And i64 %291, -72057594037927936
%294 = i64 Shl i64 %292, 0
%290 = i64 Or i64 %293, %294
store i64 %290, i64 tmp_dword1
%295 = i64 Lshr i64 %180, 0
%296 = Extract i8 of i64 %295 <7, 0>
%298 = load i64, i64 tmp_dword2
%299 = Zext i8 %296 to i64
%300 = i64 And i64 %298, 72057594037927935
%301 = i64 Shl i64 %299, 56
%297 = i64 Or i64 %300, %301
store i64 %297, i64 tmp_dword2
br label %bb53
bb65:
%315 = load i64, i64 PC
%316 = i64 Add i64 %315, -24
store i64 %316, i64 PC
br label %bb67
bb66:
br label %bb67
bb67:
%309 = load i64, i64 PC
%311 = load i64, i64 prev_pc
%310 = i1 Eq i64 %309, %311
br i1 %310, label %bb68, label %bb69
bb68:
%312 = load i64, i64 PC
%313 = i64 Add i64 %312, 4
store i64 %313, i64 PC
br label %bb70
bb69:
br label %bb70
bb70:
%307 = load i64, i64 PC
store i64 %307, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_5 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%11 = load i64, [32, i64] XREG!2[15]
%9 = i64 Add i64 %11, -16
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index!2
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword!19 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!15 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!15 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %16 tmp_dword!19 ite %25 tmp_dword!12 ite %32 tmp_dword!18 ite %39 tmp_dword!17 ite %46 tmp_dword!16 ite %53 tmp_dword!15 ite %60 tmp_dword!13 tmp_dword!14
tmp_dword2!2 = phi ite %16 tmp_dword2!1 tmp_dword2!15
tmp_dword1!2 = phi ite %16 tmp_dword1!1 tmp_dword1!15
%71 = load i64, i64 tmp_dword!2
rd_var!2 = store i64 %71, i64 rd_var!1
%12 = load i64, i64 rd_var!2
XREG!3 = store i64 %12, [32, i64] XREG!2[14]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb6, label %bb7
bb4:
%27 = load i64, i64 tmp_dword1!15
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2!15
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
tmp_dword!12 = store i64 %26, i64 tmp_dword!1
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb8, label %bb9
bb6:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!25 = store i64 %8, i64 PC!1
br label %bb10
bb7:
br label %bb10
bb8:
%34 = load i64, i64 tmp_dword1!15
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2!15
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
tmp_dword!18 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb9:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb11, label %bb12
bb10:
PC!2 = phi ite %5 PC!25 PC!1
%2 = load i64, i64 PC!2
PC!3 = store i64 %2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%73 = load i64, i64 PC!3
prev_pc!3 = store i64 %73, i64 prev_pc!2
%81 = load i64, [32, i64] XREG!4[15]
%79 = i64 Add i64 %81, -8
tmp_address!3 = store i64 %79, i64 tmp_address!2
%80 = load i64, i64 tmp_address!3
%83 = i64 Lshr i64 %80, 3
%84 = Extract i53 of i64 %83 <52, 0>
mem_index!3 = store i53 %84, i53 mem_index!2
%85 = Extract i3 of i64 %80 <2, 0>
%86 = i1 Eq i3 %85, 0
br i1 %86, label %bb19, label %bb20
bb11:
%41 = load i64, i64 tmp_dword1!15
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2!15
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
tmp_dword!17 = store i64 %40, i64 tmp_dword!1
br label %bb3
bb12:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb13:
%48 = load i64, i64 tmp_dword1!15
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2!15
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
tmp_dword!16 = store i64 %47, i64 tmp_dword!1
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1!15
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2!15
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
tmp_dword!15 = store i64 %54, i64 tmp_dword!1
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1!15
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2!15
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
tmp_dword!13 = store i64 %61, i64 tmp_dword!1
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1!15
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2!15
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
tmp_dword!14 = store i64 %66, i64 tmp_dword!1
br label %bb3
bb19:
%87 = load i53, i53 mem_index!3
%88 = load i64, [9007199254740992, i64] MEM!1[%87]
tmp_dword!3 = store i64 %88, i64 tmp_dword!2
br label %bb21
bb20:
%89 = load i53, i53 mem_index!3
%90 = i53 Add i53 %89, 1
%91 = load i64, [9007199254740992, i64] MEM!1[%90]
tmp_dword1!3 = store i64 %91, i64 tmp_dword1!2
%92 = load i53, i53 mem_index!3
%93 = load i64, [9007199254740992, i64] MEM!1[%92]
tmp_dword2!3 = store i64 %93, i64 tmp_dword2!2
%94 = Extract i3 of i64 %80 <2, 0>
%95 = i1 Eq i3 %94, 1
br i1 %95, label %bb22, label %bb23
bb21:
tmp_dword!11 = phi ite %86 tmp_dword!3 ite %95 tmp_dword!10 ite %102 tmp_dword!9 ite %109 tmp_dword!8 ite %116 tmp_dword!7 ite %123 tmp_dword!4 ite %130 tmp_dword!6 tmp_dword!5
tmp_dword2!4 = phi ite %86 tmp_dword2!2 tmp_dword2!3
tmp_dword1!4 = phi ite %86 tmp_dword1!2 tmp_dword1!3
%141 = load i64, i64 tmp_dword!11
rd_var!3 = store i64 %141, i64 rd_var!2
%82 = load i64, i64 rd_var!3
XREG!5 = store i64 %82, [32, i64] XREG!4[12]
%74 = load i64, i64 PC!3
%76 = load i64, i64 prev_pc!3
%75 = i1 Eq i64 %74, %76
br i1 %75, label %bb24, label %bb25
bb22:
%97 = load i64, i64 tmp_dword1!3
%98 = Extract i8 of i64 %97 <7, 0>
%99 = load i64, i64 tmp_dword2!3
%100 = Extract i56 of i64 %99 <63, 8>
%96 = Concat i64 i8 %98, i56 %100
tmp_dword!10 = store i64 %96, i64 tmp_dword!2
br label %bb21
bb23:
%101 = Extract i3 of i64 %80 <2, 0>
%102 = i1 Eq i3 %101, 2
br i1 %102, label %bb26, label %bb27
bb24:
%77 = load i64, i64 PC!3
%78 = i64 Add i64 %77, 4
PC!24 = store i64 %78, i64 PC!3
br label %bb28
bb25:
br label %bb28
bb26:
%104 = load i64, i64 tmp_dword1!3
%105 = Extract i16 of i64 %104 <15, 0>
%106 = load i64, i64 tmp_dword2!3
%107 = Extract i48 of i64 %106 <63, 16>
%103 = Concat i64 i16 %105, i48 %107
tmp_dword!9 = store i64 %103, i64 tmp_dword!2
br label %bb21
bb27:
%108 = Extract i3 of i64 %80 <2, 0>
%109 = i1 Eq i3 %108, 3
br i1 %109, label %bb29, label %bb30
bb28:
PC!4 = phi ite %75 PC!24 PC!3
%72 = load i64, i64 PC!4
PC!5 = store i64 %72, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
%143 = load i64, i64 PC!5
prev_pc!4 = store i64 %143, i64 prev_pc!3
%150 = load i64, [32, i64] XREG!6[15]
%149 = i64 Add i64 %150, 8
XREG!7 = store i64 %149, [32, i64] XREG!6[15]
%144 = load i64, i64 PC!5
%146 = load i64, i64 prev_pc!4
%145 = i1 Eq i64 %144, %146
br i1 %145, label %bb37, label %bb38
bb29:
%111 = load i64, i64 tmp_dword1!3
%112 = Extract i24 of i64 %111 <23, 0>
%113 = load i64, i64 tmp_dword2!3
%114 = Extract i40 of i64 %113 <63, 24>
%110 = Concat i64 i24 %112, i40 %114
tmp_dword!8 = store i64 %110, i64 tmp_dword!2
br label %bb21
bb30:
%115 = Extract i3 of i64 %80 <2, 0>
%116 = i1 Eq i3 %115, -4
br i1 %116, label %bb31, label %bb32
bb31:
%118 = load i64, i64 tmp_dword1!3
%119 = Extract i32 of i64 %118 <31, 0>
%120 = load i64, i64 tmp_dword2!3
%121 = Extract i32 of i64 %120 <63, 32>
%117 = Concat i64 i32 %119, i32 %121
tmp_dword!7 = store i64 %117, i64 tmp_dword!2
br label %bb21
bb32:
%122 = Extract i3 of i64 %80 <2, 0>
%123 = i1 Eq i3 %122, -3
br i1 %123, label %bb33, label %bb34
bb33:
%125 = load i64, i64 tmp_dword1!3
%126 = Extract i40 of i64 %125 <39, 0>
%127 = load i64, i64 tmp_dword2!3
%128 = Extract i24 of i64 %127 <63, 40>
%124 = Concat i64 i40 %126, i24 %128
tmp_dword!4 = store i64 %124, i64 tmp_dword!2
br label %bb21
bb34:
%129 = Extract i3 of i64 %80 <2, 0>
%130 = i1 Eq i3 %129, -2
br i1 %130, label %bb35, label %bb36
bb35:
%132 = load i64, i64 tmp_dword1!3
%133 = Extract i48 of i64 %132 <47, 0>
%134 = load i64, i64 tmp_dword2!3
%135 = Extract i16 of i64 %134 <63, 48>
%131 = Concat i64 i48 %133, i16 %135
tmp_dword!6 = store i64 %131, i64 tmp_dword!2
br label %bb21
bb36:
%137 = load i64, i64 tmp_dword1!3
%138 = Extract i56 of i64 %137 <55, 0>
%139 = load i64, i64 tmp_dword2!3
%140 = Extract i8 of i64 %139 <63, 56>
%136 = Concat i64 i56 %138, i8 %140
tmp_dword!5 = store i64 %136, i64 tmp_dword!2
br label %bb21
bb37:
%147 = load i64, i64 PC!5
%148 = i64 Add i64 %147, 4
PC!6 = store i64 %148, i64 PC!5
br label %bb39
bb38:
br label %bb39
bb39:
PC!7 = phi ite %145 PC!6 PC!5
%142 = load i64, i64 PC!7
PC!8 = store i64 %142, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
%152 = load i64, i64 PC!8
prev_pc!5 = store i64 %152, i64 prev_pc!4
%159 = load i64, [32, i64] XREG!8[13]
%158 = i64 Add i64 %159, 1
XREG!9 = store i64 %158, [32, i64] XREG!8[13]
%153 = load i64, i64 PC!8
%155 = load i64, i64 prev_pc!5
%154 = i1 Eq i64 %153, %155
br i1 %154, label %bb40, label %bb41
bb40:
%156 = load i64, i64 PC!8
%157 = i64 Add i64 %156, 4
PC!9 = store i64 %157, i64 PC!8
br label %bb42
bb41:
br label %bb42
bb42:
PC!10 = phi ite %154 PC!9 PC!8
%151 = load i64, i64 PC!10
PC!11 = store i64 %151, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
%161 = load i64, i64 PC!11
prev_pc!6 = store i64 %161, i64 prev_pc!5
%168 = load i64, [32, i64] XREG!10[14]
%169 = load i64, [32, i64] XREG!10[12]
%167 = i64 Add i64 %168, %169
XREG!11 = store i64 %167, [32, i64] XREG!10[14]
%162 = load i64, i64 PC!11
%164 = load i64, i64 prev_pc!6
%163 = i1 Eq i64 %162, %164
br i1 %163, label %bb43, label %bb44
bb43:
%165 = load i64, i64 PC!11
%166 = i64 Add i64 %165, 4
PC!12 = store i64 %166, i64 PC!11
br label %bb45
bb44:
br label %bb45
bb45:
PC!13 = phi ite %163 PC!12 PC!11
%160 = load i64, i64 PC!13
PC!14 = store i64 %160, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
%171 = load i64, i64 PC!14
prev_pc!7 = store i64 %171, i64 prev_pc!6
%179 = load i64, [32, i64] XREG!12[15]
%177 = i64 Add i64 %179, -8
tmp_address!4 = store i64 %177, i64 tmp_address!3
%178 = load i64, i64 tmp_address!4
%181 = load i64, [32, i64] XREG!12[14]
rs2_var!2 = store i64 %181, i64 rs2_var!1
%180 = load i64, i64 rs2_var!2
%182 = i64 Lshr i64 %178, 3
%183 = Extract i53 of i64 %182 <52, 0>
mem_index!4 = store i53 %183, i53 mem_index!3
%184 = Extract i3 of i64 %178 <2, 0>
%185 = i1 Eq i3 %184, 0
br i1 %185, label %bb46, label %bb47
bb46:
%186 = load i53, i53 mem_index!4
MEM!3 = store i64 %180, [9007199254740992, i64] MEM!1[%186]
br label %bb48
bb47:
%187 = load i53, i53 mem_index!4
%188 = i53 Add i53 %187, 1
%189 = load i64, [9007199254740992, i64] MEM!1[%188]
tmp_dword1!6 = store i64 %189, i64 tmp_dword1!4
%190 = load i53, i53 mem_index!4
%191 = load i64, [9007199254740992, i64] MEM!1[%190]
tmp_dword2!6 = store i64 %191, i64 tmp_dword2!4
%192 = Extract i3 of i64 %178 <2, 0>
%193 = i1 Eq i3 %192, 1
br i1 %193, label %bb49, label %bb50
bb48:
MEM!2 = phi ite %185 MEM!3 MEM!5
tmp_dword2!5 = phi ite %185 tmp_dword2!4 tmp_dword2!8
tmp_dword1!5 = phi ite %185 tmp_dword1!4 tmp_dword1!8
%172 = load i64, i64 PC!14
%174 = load i64, i64 prev_pc!7
%173 = i1 Eq i64 %172, %174
br i1 %173, label %bb51, label %bb52
bb49:
%194 = i64 Lshr i64 %180, 56
%195 = Extract i8 of i64 %194 <7, 0>
%197 = load i64, i64 tmp_dword1!6
%198 = Zext i8 %195 to i64
%199 = i64 And i64 %197, -256
%200 = i64 Shl i64 %198, 0
%196 = i64 Or i64 %199, %200
tmp_dword1!7 = store i64 %196, i64 tmp_dword1!6
%201 = i64 Lshr i64 %180, 0
%202 = Extract i56 of i64 %201 <55, 0>
%204 = load i64, i64 tmp_dword2!6
%205 = Zext i56 %202 to i64
%206 = i64 And i64 %204, 255
%207 = i64 Shl i64 %205, 8
%203 = i64 Or i64 %206, %207
tmp_dword2!7 = store i64 %203, i64 tmp_dword2!6
br label %bb53
bb50:
%208 = Extract i3 of i64 %178 <2, 0>
%209 = i1 Eq i3 %208, 2
br i1 %209, label %bb54, label %bb55
bb51:
%175 = load i64, i64 PC!14
%176 = i64 Add i64 %175, 4
PC!15 = store i64 %176, i64 PC!14
br label %bb56
bb52:
br label %bb56
bb53:
tmp_dword2!8 = phi ite %193 tmp_dword2!7 ite %209 tmp_dword2!14 ite %225 tmp_dword2!13 ite %241 tmp_dword2!12 ite %257 tmp_dword2!9 ite %273 tmp_dword2!11 tmp_dword2!10
tmp_dword1!8 = phi ite %193 tmp_dword1!7 ite %209 tmp_dword1!14 ite %225 tmp_dword1!13 ite %241 tmp_dword1!12 ite %257 tmp_dword1!9 ite %273 tmp_dword1!11 tmp_dword1!10
%302 = load i64, i64 tmp_dword1!8
%303 = load i53, i53 mem_index!4
%304 = i53 Add i53 %303, 1
MEM!4 = store i64 %302, [9007199254740992, i64] MEM!1[%304]
%305 = load i64, i64 tmp_dword2!8
%306 = load i53, i53 mem_index!4
MEM!5 = store i64 %305, [9007199254740992, i64] MEM!4[%306]
br label %bb48
bb54:
%210 = i64 Lshr i64 %180, 48
%211 = Extract i16 of i64 %210 <15, 0>
%213 = load i64, i64 tmp_dword1!6
%214 = Zext i16 %211 to i64
%215 = i64 And i64 %213, -65536
%216 = i64 Shl i64 %214, 0
%212 = i64 Or i64 %215, %216
tmp_dword1!14 = store i64 %212, i64 tmp_dword1!6
%217 = i64 Lshr i64 %180, 0
%218 = Extract i48 of i64 %217 <47, 0>
%220 = load i64, i64 tmp_dword2!6
%221 = Zext i48 %218 to i64
%222 = i64 And i64 %220, 65535
%223 = i64 Shl i64 %221, 16
%219 = i64 Or i64 %222, %223
tmp_dword2!14 = store i64 %219, i64 tmp_dword2!6
br label %bb53
bb55:
%224 = Extract i3 of i64 %178 <2, 0>
%225 = i1 Eq i3 %224, 3
br i1 %225, label %bb57, label %bb58
bb56:
PC!16 = phi ite %173 PC!15 PC!14
%170 = load i64, i64 PC!16
PC!17 = store i64 %170, i64 PC!16
XREG!13 = store i64 0, [32, i64] XREG!12[0]
%308 = load i64, i64 PC!17
prev_pc!8 = store i64 %308, i64 prev_pc!7
%317 = load i64, [32, i64] XREG!13[13]
%318 = load i64, [32, i64] XREG!13[11]
%314 = i1 Ult i64 %317, %318
br i1 %314, label %bb65, label %bb66
bb57:
%226 = i64 Lshr i64 %180, 40
%227 = Extract i24 of i64 %226 <23, 0>
%229 = load i64, i64 tmp_dword1!6
%230 = Zext i24 %227 to i64
%231 = i64 And i64 %229, -16777216
%232 = i64 Shl i64 %230, 0
%228 = i64 Or i64 %231, %232
tmp_dword1!13 = store i64 %228, i64 tmp_dword1!6
%233 = i64 Lshr i64 %180, 0
%234 = Extract i40 of i64 %233 <39, 0>
%236 = load i64, i64 tmp_dword2!6
%237 = Zext i40 %234 to i64
%238 = i64 And i64 %236, 16777215
%239 = i64 Shl i64 %237, 24
%235 = i64 Or i64 %238, %239
tmp_dword2!13 = store i64 %235, i64 tmp_dword2!6
br label %bb53
bb58:
%240 = Extract i3 of i64 %178 <2, 0>
%241 = i1 Eq i3 %240, -4
br i1 %241, label %bb59, label %bb60
bb59:
%242 = i64 Lshr i64 %180, 32
%243 = Extract i32 of i64 %242 <31, 0>
%245 = load i64, i64 tmp_dword1!6
%246 = Zext i32 %243 to i64
%247 = i64 And i64 %245, -4294967296
%248 = i64 Shl i64 %246, 0
%244 = i64 Or i64 %247, %248
tmp_dword1!12 = store i64 %244, i64 tmp_dword1!6
%249 = i64 Lshr i64 %180, 0
%250 = Extract i32 of i64 %249 <31, 0>
%252 = load i64, i64 tmp_dword2!6
%253 = Zext i32 %250 to i64
%254 = i64 And i64 %252, 4294967295
%255 = i64 Shl i64 %253, 32
%251 = i64 Or i64 %254, %255
tmp_dword2!12 = store i64 %251, i64 tmp_dword2!6
br label %bb53
bb60:
%256 = Extract i3 of i64 %178 <2, 0>
%257 = i1 Eq i3 %256, -3
br i1 %257, label %bb61, label %bb62
bb61:
%258 = i64 Lshr i64 %180, 24
%259 = Extract i40 of i64 %258 <39, 0>
%261 = load i64, i64 tmp_dword1!6
%262 = Zext i40 %259 to i64
%263 = i64 And i64 %261, -1099511627776
%264 = i64 Shl i64 %262, 0
%260 = i64 Or i64 %263, %264
tmp_dword1!9 = store i64 %260, i64 tmp_dword1!6
%265 = i64 Lshr i64 %180, 0
%266 = Extract i24 of i64 %265 <23, 0>
%268 = load i64, i64 tmp_dword2!6
%269 = Zext i24 %266 to i64
%270 = i64 And i64 %268, 1099511627775
%271 = i64 Shl i64 %269, 40
%267 = i64 Or i64 %270, %271
tmp_dword2!9 = store i64 %267, i64 tmp_dword2!6
br label %bb53
bb62:
%272 = Extract i3 of i64 %178 <2, 0>
%273 = i1 Eq i3 %272, -2
br i1 %273, label %bb63, label %bb64
bb63:
%274 = i64 Lshr i64 %180, 16
%275 = Extract i48 of i64 %274 <47, 0>
%277 = load i64, i64 tmp_dword1!6
%278 = Zext i48 %275 to i64
%279 = i64 And i64 %277, -281474976710656
%280 = i64 Shl i64 %278, 0
%276 = i64 Or i64 %279, %280
tmp_dword1!11 = store i64 %276, i64 tmp_dword1!6
%281 = i64 Lshr i64 %180, 0
%282 = Extract i16 of i64 %281 <15, 0>
%284 = load i64, i64 tmp_dword2!6
%285 = Zext i16 %282 to i64
%286 = i64 And i64 %284, 281474976710655
%287 = i64 Shl i64 %285, 48
%283 = i64 Or i64 %286, %287
tmp_dword2!11 = store i64 %283, i64 tmp_dword2!6
br label %bb53
bb64:
%288 = i64 Lshr i64 %180, 8
%289 = Extract i56 of i64 %288 <55, 0>
%291 = load i64, i64 tmp_dword1!6
%292 = Zext i56 %289 to i64
%293 = i64 And i64 %291, -72057594037927936
%294 = i64 Shl i64 %292, 0
%290 = i64 Or i64 %293, %294
tmp_dword1!10 = store i64 %290, i64 tmp_dword1!6
%295 = i64 Lshr i64 %180, 0
%296 = Extract i8 of i64 %295 <7, 0>
%298 = load i64, i64 tmp_dword2!6
%299 = Zext i8 %296 to i64
%300 = i64 And i64 %298, 72057594037927935
%301 = i64 Shl i64 %299, 56
%297 = i64 Or i64 %300, %301
tmp_dword2!10 = store i64 %297, i64 tmp_dword2!6
br label %bb53
bb65:
%315 = load i64, i64 PC!17
%316 = i64 Add i64 %315, -24
PC!18 = store i64 %316, i64 PC!17
br label %bb67
bb66:
br label %bb67
bb67:
PC!19 = phi ite %314 PC!18 PC!17
%309 = load i64, i64 PC!19
%311 = load i64, i64 prev_pc!8
%310 = i1 Eq i64 %309, %311
br i1 %310, label %bb68, label %bb69
bb68:
%312 = load i64, i64 PC!19
%313 = i64 Add i64 %312, 4
PC!23 = store i64 %313, i64 PC!19
br label %bb70
bb69:
br label %bb70
bb70:
PC!20 = phi ite %310 PC!23 PC!19
%307 = load i64, i64 PC!20
PC!21 = store i64 %307, i64 PC!20
%1 = load i64, i64 PC!21
PC!22 = store i64 %1, i64 PC!21
ret void

SSA forward
bb_5 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%2 = i64 Add i64 %3, -16
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
%8 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!19 = store i64 %8, i64 tmp_dword!1
br label %bb3
bb2:
%9 = i53 Add i53 %5, 1
%10 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword1!15 = store i64 %10, i64 tmp_dword1!1
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!15 = store i64 %11, i64 tmp_dword2!1
%12 = Extract i3 of i64 %2 <2, 0>
%13 = i1 Eq i3 %12, 1
br i1 %13, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %7 %8 ite %13 %14 ite %18 %19 ite %23 %24 ite %28 %29 ite %33 %34 ite %38 %39 %42
tmp_dword2!2 = phi ite %7 tmp_dword2!1 %11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 %10
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[14]
br label %bb6
bb4:
%15 = Extract i8 of i64 %10 <7, 0>
%16 = Extract i56 of i64 %11 <63, 8>
%14 = Concat i64 i8 %15, i56 %16
tmp_dword!12 = store i64 %14, i64 tmp_dword!1
br label %bb3
bb5:
%17 = Extract i3 of i64 %2 <2, 0>
%18 = i1 Eq i3 %17, 2
br i1 %18, label %bb7, label %bb8
bb6:
%1 = i64 Add i64 PC!1, 4
PC!25 = store i64 %1, i64 PC!1
br label %bb9
bb7:
%20 = Extract i16 of i64 %10 <15, 0>
%21 = Extract i48 of i64 %11 <63, 16>
%19 = Concat i64 i16 %20, i48 %21
tmp_dword!18 = store i64 %19, i64 tmp_dword!1
br label %bb3
bb8:
%22 = Extract i3 of i64 %2 <2, 0>
%23 = i1 Eq i3 %22, 3
br i1 %23, label %bb10, label %bb11
bb9:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%47 = load i64, [32, i64] XREG!4[15]
%46 = i64 Add i64 %47, -8
tmp_address!3 = store i64 %46, i64 tmp_address!2
%48 = i64 Lshr i64 %46, 3
%49 = Extract i53 of i64 %48 <52, 0>
mem_index!3 = store i53 %49, i53 mem_index!2
%50 = Extract i3 of i64 %46 <2, 0>
%51 = i1 Eq i3 %50, 0
br i1 %51, label %bb12, label %bb13
bb10:
%25 = Extract i24 of i64 %10 <23, 0>
%26 = Extract i40 of i64 %11 <63, 24>
%24 = Concat i64 i24 %25, i40 %26
tmp_dword!17 = store i64 %24, i64 tmp_dword!1
br label %bb3
bb11:
%27 = Extract i3 of i64 %2 <2, 0>
%28 = i1 Eq i3 %27, -4
br i1 %28, label %bb14, label %bb15
bb12:
%52 = load i64, [9007199254740992, i64] MEM!1[%49]
tmp_dword!3 = store i64 %52, i64 tmp_dword!2
br label %bb16
bb13:
%53 = i53 Add i53 %49, 1
%54 = load i64, [9007199254740992, i64] MEM!1[%53]
tmp_dword1!3 = store i64 %54, i64 tmp_dword1!2
%55 = load i64, [9007199254740992, i64] MEM!1[%49]
tmp_dword2!3 = store i64 %55, i64 tmp_dword2!2
%56 = Extract i3 of i64 %46 <2, 0>
%57 = i1 Eq i3 %56, 1
br i1 %57, label %bb17, label %bb18
bb14:
%30 = Extract i32 of i64 %10 <31, 0>
%31 = Extract i32 of i64 %11 <63, 32>
%29 = Concat i64 i32 %30, i32 %31
tmp_dword!16 = store i64 %29, i64 tmp_dword!1
br label %bb3
bb15:
%32 = Extract i3 of i64 %2 <2, 0>
%33 = i1 Eq i3 %32, -3
br i1 %33, label %bb19, label %bb20
bb16:
tmp_dword!11 = phi ite %51 %52 ite %57 %58 ite %62 %63 ite %67 %68 ite %72 %73 ite %77 %78 ite %82 %83 %86
tmp_dword2!4 = phi ite %51 tmp_dword2!2 %55
tmp_dword1!4 = phi ite %51 tmp_dword1!2 %54
rd_var!3 = store i64 tmp_dword!11, i64 rd_var!2
XREG!5 = store i64 tmp_dword!11, [32, i64] XREG!4[12]
br label %bb21
bb17:
%59 = Extract i8 of i64 %54 <7, 0>
%60 = Extract i56 of i64 %55 <63, 8>
%58 = Concat i64 i8 %59, i56 %60
tmp_dword!10 = store i64 %58, i64 tmp_dword!2
br label %bb16
bb18:
%61 = Extract i3 of i64 %46 <2, 0>
%62 = i1 Eq i3 %61, 2
br i1 %62, label %bb22, label %bb23
bb19:
%35 = Extract i40 of i64 %10 <39, 0>
%36 = Extract i24 of i64 %11 <63, 40>
%34 = Concat i64 i40 %35, i24 %36
tmp_dword!15 = store i64 %34, i64 tmp_dword!1
br label %bb3
bb20:
%37 = Extract i3 of i64 %2 <2, 0>
%38 = i1 Eq i3 %37, -2
br i1 %38, label %bb24, label %bb25
bb21:
%45 = i64 Add i64 PC!2, 4
PC!24 = store i64 %45, i64 PC!3
br label %bb26
bb22:
%64 = Extract i16 of i64 %54 <15, 0>
%65 = Extract i48 of i64 %55 <63, 16>
%63 = Concat i64 i16 %64, i48 %65
tmp_dword!9 = store i64 %63, i64 tmp_dword!2
br label %bb16
bb23:
%66 = Extract i3 of i64 %46 <2, 0>
%67 = i1 Eq i3 %66, 3
br i1 %67, label %bb27, label %bb28
bb24:
%40 = Extract i48 of i64 %10 <47, 0>
%41 = Extract i16 of i64 %11 <63, 48>
%39 = Concat i64 i48 %40, i16 %41
tmp_dword!13 = store i64 %39, i64 tmp_dword!1
br label %bb3
bb25:
%43 = Extract i56 of i64 %10 <55, 0>
%44 = Extract i8 of i64 %11 <63, 56>
%42 = Concat i64 i56 %43, i8 %44
tmp_dword!14 = store i64 %42, i64 tmp_dword!1
br label %bb3
bb26:
store i64 %45, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%91 = load i64, [32, i64] XREG!6[15]
%90 = i64 Add i64 %91, 8
XREG!7 = store i64 %90, [32, i64] XREG!6[15]
br label %bb29
bb27:
%69 = Extract i24 of i64 %54 <23, 0>
%70 = Extract i40 of i64 %55 <63, 24>
%68 = Concat i64 i24 %69, i40 %70
tmp_dword!8 = store i64 %68, i64 tmp_dword!2
br label %bb16
bb28:
%71 = Extract i3 of i64 %46 <2, 0>
%72 = i1 Eq i3 %71, -4
br i1 %72, label %bb30, label %bb31
bb29:
%89 = i64 Add i64 PC!4, 4
PC!6 = store i64 %89, i64 PC!5
br label %bb32
bb30:
%74 = Extract i32 of i64 %54 <31, 0>
%75 = Extract i32 of i64 %55 <63, 32>
%73 = Concat i64 i32 %74, i32 %75
tmp_dword!7 = store i64 %73, i64 tmp_dword!2
br label %bb16
bb31:
%76 = Extract i3 of i64 %46 <2, 0>
%77 = i1 Eq i3 %76, -3
br i1 %77, label %bb33, label %bb34
bb32:
store i64 %89, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%94 = load i64, [32, i64] XREG!8[13]
%93 = i64 Add i64 %94, 1
XREG!9 = store i64 %93, [32, i64] XREG!8[13]
br label %bb35
bb33:
%79 = Extract i40 of i64 %54 <39, 0>
%80 = Extract i24 of i64 %55 <63, 40>
%78 = Concat i64 i40 %79, i24 %80
tmp_dword!4 = store i64 %78, i64 tmp_dword!2
br label %bb16
bb34:
%81 = Extract i3 of i64 %46 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb36, label %bb37
bb35:
%92 = i64 Add i64 PC!7, 4
PC!9 = store i64 %92, i64 PC!8
br label %bb38
bb36:
%84 = Extract i48 of i64 %54 <47, 0>
%85 = Extract i16 of i64 %55 <63, 48>
%83 = Concat i64 i48 %84, i16 %85
tmp_dword!6 = store i64 %83, i64 tmp_dword!2
br label %bb16
bb37:
%87 = Extract i56 of i64 %54 <55, 0>
%88 = Extract i8 of i64 %55 <63, 56>
%86 = Concat i64 i56 %87, i8 %88
tmp_dword!5 = store i64 %86, i64 tmp_dword!2
br label %bb16
bb38:
store i64 %92, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%97 = load i64, [32, i64] XREG!10[14]
%98 = load i64, [32, i64] XREG!10[12]
%96 = i64 Add i64 %97, %98
XREG!11 = store i64 %96, [32, i64] XREG!10[14]
br label %bb39
bb39:
%95 = i64 Add i64 PC!10, 4
PC!12 = store i64 %95, i64 PC!11
br label %bb40
bb40:
store i64 %95, i64 PC!13
PC!14 = store i64 PC!13, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!13, i64 prev_pc!6
%101 = load i64, [32, i64] XREG!12[15]
%100 = i64 Add i64 %101, -8
tmp_address!4 = store i64 %100, i64 tmp_address!3
%102 = load i64, [32, i64] XREG!12[14]
rs2_var!2 = store i64 %102, i64 rs2_var!1
%103 = i64 Lshr i64 %100, 3
%104 = Extract i53 of i64 %103 <52, 0>
mem_index!4 = store i53 %104, i53 mem_index!3
%105 = Extract i3 of i64 %100 <2, 0>
%106 = i1 Eq i3 %105, 0
br i1 %106, label %bb41, label %bb42
bb41:
MEM!3 = store i64 %102, [9007199254740992, i64] MEM!1[%104]
br label %bb43
bb42:
%107 = i53 Add i53 %104, 1
%108 = load i64, [9007199254740992, i64] MEM!1[%107]
tmp_dword1!6 = store i64 %108, i64 tmp_dword1!4
%109 = load i64, [9007199254740992, i64] MEM!1[%104]
tmp_dword2!6 = store i64 %109, i64 tmp_dword2!4
%110 = Extract i3 of i64 %100 <2, 0>
%111 = i1 Eq i3 %110, 1
br i1 %111, label %bb44, label %bb45
bb43:
MEM!2 = phi ite %106 MEM!3 MEM!5
tmp_dword2!5 = phi ite %106 tmp_dword2!4 tmp_dword2!8
tmp_dword1!5 = phi ite %106 tmp_dword1!4 tmp_dword1!8
br label %bb46
bb44:
%112 = i64 Lshr i64 %102, 56
%113 = Extract i8 of i64 %112 <7, 0>
%115 = Zext i8 %113 to i64
%116 = i64 And i64 %108, -256
%117 = i64 Shl i64 %115, 0
%114 = i64 Or i64 %116, %117
tmp_dword1!7 = store i64 %114, i64 tmp_dword1!6
%118 = i64 Lshr i64 %102, 0
%119 = Extract i56 of i64 %118 <55, 0>
%121 = Zext i56 %119 to i64
%122 = i64 And i64 %109, 255
%123 = i64 Shl i64 %121, 8
%120 = i64 Or i64 %122, %123
tmp_dword2!7 = store i64 %120, i64 tmp_dword2!6
br label %bb47
bb45:
%124 = Extract i3 of i64 %100 <2, 0>
%125 = i1 Eq i3 %124, 2
br i1 %125, label %bb48, label %bb49
bb46:
%99 = i64 Add i64 PC!13, 4
PC!15 = store i64 %99, i64 PC!14
br label %bb50
bb47:
tmp_dword2!8 = phi ite %111 %120 ite %125 %134 ite %139 %148 ite %153 %162 ite %167 %176 ite %181 %190 %202
tmp_dword1!8 = phi ite %111 %114 ite %125 %128 ite %139 %142 ite %153 %156 ite %167 %170 ite %181 %184 %196
%206 = i53 Add i53 %104, 1
MEM!4 = store i64 tmp_dword1!8, [9007199254740992, i64] MEM!1[%206]
MEM!5 = store i64 tmp_dword2!8, [9007199254740992, i64] MEM!4[%104]
br label %bb43
bb48:
%126 = i64 Lshr i64 %102, 48
%127 = Extract i16 of i64 %126 <15, 0>
%129 = Zext i16 %127 to i64
%130 = i64 And i64 %108, -65536
%131 = i64 Shl i64 %129, 0
%128 = i64 Or i64 %130, %131
tmp_dword1!14 = store i64 %128, i64 tmp_dword1!6
%132 = i64 Lshr i64 %102, 0
%133 = Extract i48 of i64 %132 <47, 0>
%135 = Zext i48 %133 to i64
%136 = i64 And i64 %109, 65535
%137 = i64 Shl i64 %135, 16
%134 = i64 Or i64 %136, %137
tmp_dword2!14 = store i64 %134, i64 tmp_dword2!6
br label %bb47
bb49:
%138 = Extract i3 of i64 %100 <2, 0>
%139 = i1 Eq i3 %138, 3
br i1 %139, label %bb51, label %bb52
bb50:
store i64 %99, i64 PC!16
PC!17 = store i64 PC!16, i64 PC!16
XREG!13 = store i64 0, [32, i64] XREG!12[0]
prev_pc!8 = store i64 PC!16, i64 prev_pc!7
%211 = load i64, [32, i64] XREG!13[13]
%212 = load i64, [32, i64] XREG!13[11]
%209 = i1 Ult i64 %211, %212
br i1 %209, label %bb53, label %bb54
bb51:
%140 = i64 Lshr i64 %102, 40
%141 = Extract i24 of i64 %140 <23, 0>
%143 = Zext i24 %141 to i64
%144 = i64 And i64 %108, -16777216
%145 = i64 Shl i64 %143, 0
%142 = i64 Or i64 %144, %145
tmp_dword1!13 = store i64 %142, i64 tmp_dword1!6
%146 = i64 Lshr i64 %102, 0
%147 = Extract i40 of i64 %146 <39, 0>
%149 = Zext i40 %147 to i64
%150 = i64 And i64 %109, 16777215
%151 = i64 Shl i64 %149, 24
%148 = i64 Or i64 %150, %151
tmp_dword2!13 = store i64 %148, i64 tmp_dword2!6
br label %bb47
bb52:
%152 = Extract i3 of i64 %100 <2, 0>
%153 = i1 Eq i3 %152, -4
br i1 %153, label %bb55, label %bb56
bb53:
%210 = i64 Add i64 PC!16, -24
PC!18 = store i64 %210, i64 PC!17
br label %bb57
bb54:
br label %bb57
bb55:
%154 = i64 Lshr i64 %102, 32
%155 = Extract i32 of i64 %154 <31, 0>
%157 = Zext i32 %155 to i64
%158 = i64 And i64 %108, -4294967296
%159 = i64 Shl i64 %157, 0
%156 = i64 Or i64 %158, %159
tmp_dword1!12 = store i64 %156, i64 tmp_dword1!6
%160 = i64 Lshr i64 %102, 0
%161 = Extract i32 of i64 %160 <31, 0>
%163 = Zext i32 %161 to i64
%164 = i64 And i64 %109, 4294967295
%165 = i64 Shl i64 %163, 32
%162 = i64 Or i64 %164, %165
tmp_dword2!12 = store i64 %162, i64 tmp_dword2!6
br label %bb47
bb56:
%166 = Extract i3 of i64 %100 <2, 0>
%167 = i1 Eq i3 %166, -3
br i1 %167, label %bb58, label %bb59
bb57:
PC!19 = phi ite %209 %210 PC!16
%207 = i1 Eq i64 PC!19, PC!16
br i1 %207, label %bb60, label %bb61
bb58:
%168 = i64 Lshr i64 %102, 24
%169 = Extract i40 of i64 %168 <39, 0>
%171 = Zext i40 %169 to i64
%172 = i64 And i64 %108, -1099511627776
%173 = i64 Shl i64 %171, 0
%170 = i64 Or i64 %172, %173
tmp_dword1!9 = store i64 %170, i64 tmp_dword1!6
%174 = i64 Lshr i64 %102, 0
%175 = Extract i24 of i64 %174 <23, 0>
%177 = Zext i24 %175 to i64
%178 = i64 And i64 %109, 1099511627775
%179 = i64 Shl i64 %177, 40
%176 = i64 Or i64 %178, %179
tmp_dword2!9 = store i64 %176, i64 tmp_dword2!6
br label %bb47
bb59:
%180 = Extract i3 of i64 %100 <2, 0>
%181 = i1 Eq i3 %180, -2
br i1 %181, label %bb62, label %bb63
bb60:
%208 = i64 Add i64 PC!19, 4
PC!23 = store i64 %208, i64 PC!19
br label %bb64
bb61:
br label %bb64
bb62:
%182 = i64 Lshr i64 %102, 16
%183 = Extract i48 of i64 %182 <47, 0>
%185 = Zext i48 %183 to i64
%186 = i64 And i64 %108, -281474976710656
%187 = i64 Shl i64 %185, 0
%184 = i64 Or i64 %186, %187
tmp_dword1!11 = store i64 %184, i64 tmp_dword1!6
%188 = i64 Lshr i64 %102, 0
%189 = Extract i16 of i64 %188 <15, 0>
%191 = Zext i16 %189 to i64
%192 = i64 And i64 %109, 281474976710655
%193 = i64 Shl i64 %191, 48
%190 = i64 Or i64 %192, %193
tmp_dword2!11 = store i64 %190, i64 tmp_dword2!6
br label %bb47
bb63:
%194 = i64 Lshr i64 %102, 8
%195 = Extract i56 of i64 %194 <55, 0>
%197 = Zext i56 %195 to i64
%198 = i64 And i64 %108, -72057594037927936
%199 = i64 Shl i64 %197, 0
%196 = i64 Or i64 %198, %199
tmp_dword1!10 = store i64 %196, i64 tmp_dword1!6
%200 = i64 Lshr i64 %102, 0
%201 = Extract i8 of i64 %200 <7, 0>
%203 = Zext i8 %201 to i64
%204 = i64 And i64 %109, 72057594037927935
%205 = i64 Shl i64 %203, 56
%202 = i64 Or i64 %204, %205
tmp_dword2!10 = store i64 %202, i64 tmp_dword2!6
br label %bb47
bb64:
PC!20 = phi ite %207 %208 PC!19
PC!21 = store i64 PC!20, i64 PC!20
PC!22 = store i64 PC!20, i64 PC!21
ret void

Nested SCCP
bb_5 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%2 = i64 Add i64 %3, -16
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
%8 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!19 = store i64 %8, i64 tmp_dword!1
br label %bb3
bb2:
%9 = i53 Add i53 %5, 1
%10 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword1!15 = store i64 %10, i64 tmp_dword1!1
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!15 = store i64 %11, i64 tmp_dword2!1
%12 = Extract i3 of i64 %2 <2, 0>
%13 = i1 Eq i3 %12, 1
br i1 %13, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %7 %8 ite %13 %14 ite %18 %19 ite %23 %24 ite %28 %29 ite %33 %34 ite %38 %39 %42
tmp_dword2!2 = phi ite %7 tmp_dword2!1 %11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 %10
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[14]
br label %bb6
bb4:
%15 = Extract i8 of i64 %10 <7, 0>
%16 = Extract i56 of i64 %11 <63, 8>
%14 = Concat i64 i8 %15, i56 %16
tmp_dword!12 = store i64 %14, i64 tmp_dword!1
br label %bb3
bb5:
%17 = Extract i3 of i64 %2 <2, 0>
%18 = i1 Eq i3 %17, 2
br i1 %18, label %bb7, label %bb8
bb6:
%1 = i64 Add i64 PC!1, 4
PC!25 = store i64 %1, i64 PC!1
br label %bb9
bb7:
%20 = Extract i16 of i64 %10 <15, 0>
%21 = Extract i48 of i64 %11 <63, 16>
%19 = Concat i64 i16 %20, i48 %21
tmp_dword!18 = store i64 %19, i64 tmp_dword!1
br label %bb3
bb8:
%22 = Extract i3 of i64 %2 <2, 0>
%23 = i1 Eq i3 %22, 3
br i1 %23, label %bb10, label %bb11
bb9:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%47 = load i64, [32, i64] XREG!4[15]
%46 = i64 Add i64 %47, -8
tmp_address!3 = store i64 %46, i64 tmp_address!2
%48 = i64 Lshr i64 %46, 3
%49 = Extract i53 of i64 %48 <52, 0>
mem_index!3 = store i53 %49, i53 mem_index!2
%50 = Extract i3 of i64 %46 <2, 0>
%51 = i1 Eq i3 %50, 0
br i1 %51, label %bb12, label %bb13
bb10:
%25 = Extract i24 of i64 %10 <23, 0>
%26 = Extract i40 of i64 %11 <63, 24>
%24 = Concat i64 i24 %25, i40 %26
tmp_dword!17 = store i64 %24, i64 tmp_dword!1
br label %bb3
bb11:
%27 = Extract i3 of i64 %2 <2, 0>
%28 = i1 Eq i3 %27, -4
br i1 %28, label %bb14, label %bb15
bb12:
%52 = load i64, [9007199254740992, i64] MEM!1[%49]
tmp_dword!3 = store i64 %52, i64 tmp_dword!2
br label %bb16
bb13:
%53 = i53 Add i53 %49, 1
%54 = load i64, [9007199254740992, i64] MEM!1[%53]
tmp_dword1!3 = store i64 %54, i64 tmp_dword1!2
%55 = load i64, [9007199254740992, i64] MEM!1[%49]
tmp_dword2!3 = store i64 %55, i64 tmp_dword2!2
%56 = Extract i3 of i64 %46 <2, 0>
%57 = i1 Eq i3 %56, 1
br i1 %57, label %bb17, label %bb18
bb14:
%30 = Extract i32 of i64 %10 <31, 0>
%31 = Extract i32 of i64 %11 <63, 32>
%29 = Concat i64 i32 %30, i32 %31
tmp_dword!16 = store i64 %29, i64 tmp_dword!1
br label %bb3
bb15:
%32 = Extract i3 of i64 %2 <2, 0>
%33 = i1 Eq i3 %32, -3
br i1 %33, label %bb19, label %bb20
bb16:
tmp_dword!11 = phi ite %51 %52 ite %57 %58 ite %62 %63 ite %67 %68 ite %72 %73 ite %77 %78 ite %82 %83 %86
tmp_dword2!4 = phi ite %51 tmp_dword2!2 %55
tmp_dword1!4 = phi ite %51 tmp_dword1!2 %54
rd_var!3 = store i64 tmp_dword!11, i64 rd_var!2
XREG!5 = store i64 tmp_dword!11, [32, i64] XREG!4[12]
br label %bb21
bb17:
%59 = Extract i8 of i64 %54 <7, 0>
%60 = Extract i56 of i64 %55 <63, 8>
%58 = Concat i64 i8 %59, i56 %60
tmp_dword!10 = store i64 %58, i64 tmp_dword!2
br label %bb16
bb18:
%61 = Extract i3 of i64 %46 <2, 0>
%62 = i1 Eq i3 %61, 2
br i1 %62, label %bb22, label %bb23
bb19:
%35 = Extract i40 of i64 %10 <39, 0>
%36 = Extract i24 of i64 %11 <63, 40>
%34 = Concat i64 i40 %35, i24 %36
tmp_dword!15 = store i64 %34, i64 tmp_dword!1
br label %bb3
bb20:
%37 = Extract i3 of i64 %2 <2, 0>
%38 = i1 Eq i3 %37, -2
br i1 %38, label %bb24, label %bb25
bb21:
%45 = i64 Add i64 PC!2, 4
PC!24 = store i64 %45, i64 PC!3
br label %bb26
bb22:
%64 = Extract i16 of i64 %54 <15, 0>
%65 = Extract i48 of i64 %55 <63, 16>
%63 = Concat i64 i16 %64, i48 %65
tmp_dword!9 = store i64 %63, i64 tmp_dword!2
br label %bb16
bb23:
%66 = Extract i3 of i64 %46 <2, 0>
%67 = i1 Eq i3 %66, 3
br i1 %67, label %bb27, label %bb28
bb24:
%40 = Extract i48 of i64 %10 <47, 0>
%41 = Extract i16 of i64 %11 <63, 48>
%39 = Concat i64 i48 %40, i16 %41
tmp_dword!13 = store i64 %39, i64 tmp_dword!1
br label %bb3
bb25:
%43 = Extract i56 of i64 %10 <55, 0>
%44 = Extract i8 of i64 %11 <63, 56>
%42 = Concat i64 i56 %43, i8 %44
tmp_dword!14 = store i64 %42, i64 tmp_dword!1
br label %bb3
bb26:
store i64 %45, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%91 = load i64, [32, i64] XREG!6[15]
%90 = i64 Add i64 %91, 8
XREG!7 = store i64 %90, [32, i64] XREG!6[15]
br label %bb29
bb27:
%69 = Extract i24 of i64 %54 <23, 0>
%70 = Extract i40 of i64 %55 <63, 24>
%68 = Concat i64 i24 %69, i40 %70
tmp_dword!8 = store i64 %68, i64 tmp_dword!2
br label %bb16
bb28:
%71 = Extract i3 of i64 %46 <2, 0>
%72 = i1 Eq i3 %71, -4
br i1 %72, label %bb30, label %bb31
bb29:
%89 = i64 Add i64 PC!4, 4
PC!6 = store i64 %89, i64 PC!5
br label %bb32
bb30:
%74 = Extract i32 of i64 %54 <31, 0>
%75 = Extract i32 of i64 %55 <63, 32>
%73 = Concat i64 i32 %74, i32 %75
tmp_dword!7 = store i64 %73, i64 tmp_dword!2
br label %bb16
bb31:
%76 = Extract i3 of i64 %46 <2, 0>
%77 = i1 Eq i3 %76, -3
br i1 %77, label %bb33, label %bb34
bb32:
store i64 %89, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%94 = load i64, [32, i64] XREG!8[13]
%93 = i64 Add i64 %94, 1
XREG!9 = store i64 %93, [32, i64] XREG!8[13]
br label %bb35
bb33:
%79 = Extract i40 of i64 %54 <39, 0>
%80 = Extract i24 of i64 %55 <63, 40>
%78 = Concat i64 i40 %79, i24 %80
tmp_dword!4 = store i64 %78, i64 tmp_dword!2
br label %bb16
bb34:
%81 = Extract i3 of i64 %46 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb36, label %bb37
bb35:
%92 = i64 Add i64 PC!7, 4
PC!9 = store i64 %92, i64 PC!8
br label %bb38
bb36:
%84 = Extract i48 of i64 %54 <47, 0>
%85 = Extract i16 of i64 %55 <63, 48>
%83 = Concat i64 i48 %84, i16 %85
tmp_dword!6 = store i64 %83, i64 tmp_dword!2
br label %bb16
bb37:
%87 = Extract i56 of i64 %54 <55, 0>
%88 = Extract i8 of i64 %55 <63, 56>
%86 = Concat i64 i56 %87, i8 %88
tmp_dword!5 = store i64 %86, i64 tmp_dword!2
br label %bb16
bb38:
store i64 %92, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%97 = load i64, [32, i64] XREG!10[14]
%98 = load i64, [32, i64] XREG!10[12]
%96 = i64 Add i64 %97, %98
XREG!11 = store i64 %96, [32, i64] XREG!10[14]
br label %bb39
bb39:
%95 = i64 Add i64 PC!10, 4
PC!12 = store i64 %95, i64 PC!11
br label %bb40
bb40:
store i64 %95, i64 PC!13
PC!14 = store i64 PC!13, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!13, i64 prev_pc!6
%101 = load i64, [32, i64] XREG!12[15]
%100 = i64 Add i64 %101, -8
tmp_address!4 = store i64 %100, i64 tmp_address!3
%102 = load i64, [32, i64] XREG!12[14]
rs2_var!2 = store i64 %102, i64 rs2_var!1
%103 = i64 Lshr i64 %100, 3
%104 = Extract i53 of i64 %103 <52, 0>
mem_index!4 = store i53 %104, i53 mem_index!3
%105 = Extract i3 of i64 %100 <2, 0>
%106 = i1 Eq i3 %105, 0
br i1 %106, label %bb41, label %bb42
bb41:
MEM!3 = store i64 %102, [9007199254740992, i64] MEM!1[%104]
br label %bb43
bb42:
%107 = i53 Add i53 %104, 1
%108 = load i64, [9007199254740992, i64] MEM!1[%107]
tmp_dword1!6 = store i64 %108, i64 tmp_dword1!4
%109 = load i64, [9007199254740992, i64] MEM!1[%104]
tmp_dword2!6 = store i64 %109, i64 tmp_dword2!4
%110 = Extract i3 of i64 %100 <2, 0>
%111 = i1 Eq i3 %110, 1
br i1 %111, label %bb44, label %bb45
bb43:
MEM!2 = phi ite %106 MEM!3 MEM!5
tmp_dword2!5 = phi ite %106 tmp_dword2!4 tmp_dword2!8
tmp_dword1!5 = phi ite %106 tmp_dword1!4 tmp_dword1!8
br label %bb46
bb44:
%112 = i64 Lshr i64 %102, 56
%113 = Extract i8 of i64 %112 <7, 0>
%115 = Zext i8 %113 to i64
%116 = i64 And i64 %108, -256
%117 = i64 Shl i64 %115, 0
%114 = i64 Or i64 %116, %117
tmp_dword1!7 = store i64 %114, i64 tmp_dword1!6
%118 = i64 Lshr i64 %102, 0
%119 = Extract i56 of i64 %118 <55, 0>
%121 = Zext i56 %119 to i64
%122 = i64 And i64 %109, 255
%123 = i64 Shl i64 %121, 8
%120 = i64 Or i64 %122, %123
tmp_dword2!7 = store i64 %120, i64 tmp_dword2!6
br label %bb47
bb45:
%124 = Extract i3 of i64 %100 <2, 0>
%125 = i1 Eq i3 %124, 2
br i1 %125, label %bb48, label %bb49
bb46:
%99 = i64 Add i64 PC!13, 4
PC!15 = store i64 %99, i64 PC!14
br label %bb50
bb47:
tmp_dword2!8 = phi ite %111 %120 ite %125 %134 ite %139 %148 ite %153 %162 ite %167 %176 ite %181 %190 %202
tmp_dword1!8 = phi ite %111 %114 ite %125 %128 ite %139 %142 ite %153 %156 ite %167 %170 ite %181 %184 %196
%206 = i53 Add i53 %104, 1
MEM!4 = store i64 tmp_dword1!8, [9007199254740992, i64] MEM!1[%206]
MEM!5 = store i64 tmp_dword2!8, [9007199254740992, i64] MEM!4[%104]
br label %bb43
bb48:
%126 = i64 Lshr i64 %102, 48
%127 = Extract i16 of i64 %126 <15, 0>
%129 = Zext i16 %127 to i64
%130 = i64 And i64 %108, -65536
%131 = i64 Shl i64 %129, 0
%128 = i64 Or i64 %130, %131
tmp_dword1!14 = store i64 %128, i64 tmp_dword1!6
%132 = i64 Lshr i64 %102, 0
%133 = Extract i48 of i64 %132 <47, 0>
%135 = Zext i48 %133 to i64
%136 = i64 And i64 %109, 65535
%137 = i64 Shl i64 %135, 16
%134 = i64 Or i64 %136, %137
tmp_dword2!14 = store i64 %134, i64 tmp_dword2!6
br label %bb47
bb49:
%138 = Extract i3 of i64 %100 <2, 0>
%139 = i1 Eq i3 %138, 3
br i1 %139, label %bb51, label %bb52
bb50:
store i64 %99, i64 PC!16
PC!17 = store i64 PC!16, i64 PC!16
XREG!13 = store i64 0, [32, i64] XREG!12[0]
prev_pc!8 = store i64 PC!16, i64 prev_pc!7
%211 = load i64, [32, i64] XREG!13[13]
%212 = load i64, [32, i64] XREG!13[11]
%209 = i1 Ult i64 %211, %212
br i1 %209, label %bb53, label %bb54
bb51:
%140 = i64 Lshr i64 %102, 40
%141 = Extract i24 of i64 %140 <23, 0>
%143 = Zext i24 %141 to i64
%144 = i64 And i64 %108, -16777216
%145 = i64 Shl i64 %143, 0
%142 = i64 Or i64 %144, %145
tmp_dword1!13 = store i64 %142, i64 tmp_dword1!6
%146 = i64 Lshr i64 %102, 0
%147 = Extract i40 of i64 %146 <39, 0>
%149 = Zext i40 %147 to i64
%150 = i64 And i64 %109, 16777215
%151 = i64 Shl i64 %149, 24
%148 = i64 Or i64 %150, %151
tmp_dword2!13 = store i64 %148, i64 tmp_dword2!6
br label %bb47
bb52:
%152 = Extract i3 of i64 %100 <2, 0>
%153 = i1 Eq i3 %152, -4
br i1 %153, label %bb55, label %bb56
bb53:
%210 = i64 Add i64 PC!16, -24
PC!18 = store i64 %210, i64 PC!17
br label %bb57
bb54:
br label %bb57
bb55:
%154 = i64 Lshr i64 %102, 32
%155 = Extract i32 of i64 %154 <31, 0>
%157 = Zext i32 %155 to i64
%158 = i64 And i64 %108, -4294967296
%159 = i64 Shl i64 %157, 0
%156 = i64 Or i64 %158, %159
tmp_dword1!12 = store i64 %156, i64 tmp_dword1!6
%160 = i64 Lshr i64 %102, 0
%161 = Extract i32 of i64 %160 <31, 0>
%163 = Zext i32 %161 to i64
%164 = i64 And i64 %109, 4294967295
%165 = i64 Shl i64 %163, 32
%162 = i64 Or i64 %164, %165
tmp_dword2!12 = store i64 %162, i64 tmp_dword2!6
br label %bb47
bb56:
%166 = Extract i3 of i64 %100 <2, 0>
%167 = i1 Eq i3 %166, -3
br i1 %167, label %bb58, label %bb59
bb57:
PC!19 = phi ite %209 %210 PC!16
%207 = i1 Eq i64 PC!19, PC!16
br i1 %207, label %bb60, label %bb61
bb58:
%168 = i64 Lshr i64 %102, 24
%169 = Extract i40 of i64 %168 <39, 0>
%171 = Zext i40 %169 to i64
%172 = i64 And i64 %108, -1099511627776
%173 = i64 Shl i64 %171, 0
%170 = i64 Or i64 %172, %173
tmp_dword1!9 = store i64 %170, i64 tmp_dword1!6
%174 = i64 Lshr i64 %102, 0
%175 = Extract i24 of i64 %174 <23, 0>
%177 = Zext i24 %175 to i64
%178 = i64 And i64 %109, 1099511627775
%179 = i64 Shl i64 %177, 40
%176 = i64 Or i64 %178, %179
tmp_dword2!9 = store i64 %176, i64 tmp_dword2!6
br label %bb47
bb59:
%180 = Extract i3 of i64 %100 <2, 0>
%181 = i1 Eq i3 %180, -2
br i1 %181, label %bb62, label %bb63
bb60:
%208 = i64 Add i64 PC!19, 4
PC!23 = store i64 %208, i64 PC!19
br label %bb64
bb61:
br label %bb64
bb62:
%182 = i64 Lshr i64 %102, 16
%183 = Extract i48 of i64 %182 <47, 0>
%185 = Zext i48 %183 to i64
%186 = i64 And i64 %108, -281474976710656
%187 = i64 Shl i64 %185, 0
%184 = i64 Or i64 %186, %187
tmp_dword1!11 = store i64 %184, i64 tmp_dword1!6
%188 = i64 Lshr i64 %102, 0
%189 = Extract i16 of i64 %188 <15, 0>
%191 = Zext i16 %189 to i64
%192 = i64 And i64 %109, 281474976710655
%193 = i64 Shl i64 %191, 48
%190 = i64 Or i64 %192, %193
tmp_dword2!11 = store i64 %190, i64 tmp_dword2!6
br label %bb47
bb63:
%194 = i64 Lshr i64 %102, 8
%195 = Extract i56 of i64 %194 <55, 0>
%197 = Zext i56 %195 to i64
%198 = i64 And i64 %108, -72057594037927936
%199 = i64 Shl i64 %197, 0
%196 = i64 Or i64 %198, %199
tmp_dword1!10 = store i64 %196, i64 tmp_dword1!6
%200 = i64 Lshr i64 %102, 0
%201 = Extract i8 of i64 %200 <7, 0>
%203 = Zext i8 %201 to i64
%204 = i64 And i64 %109, 72057594037927935
%205 = i64 Shl i64 %203, 56
%202 = i64 Or i64 %204, %205
tmp_dword2!10 = store i64 %202, i64 tmp_dword2!6
br label %bb47
bb64:
PC!20 = phi ite %209 %210 %208
PC!21 = store i64 PC!20, i64 PC!20
PC!22 = store i64 PC!20, i64 PC!21
ret void

SCCP forward
bb_5 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%2 = i64 Add i64 %3, -16
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
%8 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!19 = store i64 %8, i64 tmp_dword!1
br label %bb3
bb2:
%9 = i53 Add i53 %5, 1
%10 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword1!15 = store i64 %10, i64 tmp_dword1!1
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!15 = store i64 %11, i64 tmp_dword2!1
%12 = Extract i3 of i64 %2 <2, 0>
%13 = i1 Eq i3 %12, 1
br i1 %13, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %7 %8 ite %13 %14 ite %18 %19 ite %23 %24 ite %28 %29 ite %33 %34 ite %38 %39 %42
tmp_dword2!2 = phi ite %7 tmp_dword2!1 %11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 %10
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[14]
br label %bb6
bb4:
%15 = Extract i8 of i64 %10 <7, 0>
%16 = Extract i56 of i64 %11 <63, 8>
%14 = Concat i64 i8 %15, i56 %16
tmp_dword!12 = store i64 %14, i64 tmp_dword!1
br label %bb3
bb5:
%17 = Extract i3 of i64 %2 <2, 0>
%18 = i1 Eq i3 %17, 2
br i1 %18, label %bb7, label %bb8
bb6:
%1 = i64 Add i64 PC!1, 4
PC!25 = store i64 %1, i64 PC!1
br label %bb9
bb7:
%20 = Extract i16 of i64 %10 <15, 0>
%21 = Extract i48 of i64 %11 <63, 16>
%19 = Concat i64 i16 %20, i48 %21
tmp_dword!18 = store i64 %19, i64 tmp_dword!1
br label %bb3
bb8:
%22 = Extract i3 of i64 %2 <2, 0>
%23 = i1 Eq i3 %22, 3
br i1 %23, label %bb10, label %bb11
bb9:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%47 = load i64, [32, i64] XREG!4[15]
%46 = i64 Add i64 %47, -8
tmp_address!3 = store i64 %46, i64 tmp_address!2
%48 = i64 Lshr i64 %46, 3
%49 = Extract i53 of i64 %48 <52, 0>
mem_index!3 = store i53 %49, i53 mem_index!2
%50 = Extract i3 of i64 %46 <2, 0>
%51 = i1 Eq i3 %50, 0
br i1 %51, label %bb12, label %bb13
bb10:
%25 = Extract i24 of i64 %10 <23, 0>
%26 = Extract i40 of i64 %11 <63, 24>
%24 = Concat i64 i24 %25, i40 %26
tmp_dword!17 = store i64 %24, i64 tmp_dword!1
br label %bb3
bb11:
%27 = Extract i3 of i64 %2 <2, 0>
%28 = i1 Eq i3 %27, -4
br i1 %28, label %bb14, label %bb15
bb12:
%52 = load i64, [9007199254740992, i64] MEM!1[%49]
tmp_dword!3 = store i64 %52, i64 tmp_dword!2
br label %bb16
bb13:
%53 = i53 Add i53 %49, 1
%54 = load i64, [9007199254740992, i64] MEM!1[%53]
tmp_dword1!3 = store i64 %54, i64 tmp_dword1!2
%55 = load i64, [9007199254740992, i64] MEM!1[%49]
tmp_dword2!3 = store i64 %55, i64 tmp_dword2!2
%56 = Extract i3 of i64 %46 <2, 0>
%57 = i1 Eq i3 %56, 1
br i1 %57, label %bb17, label %bb18
bb14:
%30 = Extract i32 of i64 %10 <31, 0>
%31 = Extract i32 of i64 %11 <63, 32>
%29 = Concat i64 i32 %30, i32 %31
tmp_dword!16 = store i64 %29, i64 tmp_dword!1
br label %bb3
bb15:
%32 = Extract i3 of i64 %2 <2, 0>
%33 = i1 Eq i3 %32, -3
br i1 %33, label %bb19, label %bb20
bb16:
tmp_dword!11 = phi ite %51 %52 ite %57 %58 ite %62 %63 ite %67 %68 ite %72 %73 ite %77 %78 ite %82 %83 %86
tmp_dword2!4 = phi ite %51 tmp_dword2!2 %55
tmp_dword1!4 = phi ite %51 tmp_dword1!2 %54
rd_var!3 = store i64 tmp_dword!11, i64 rd_var!2
XREG!5 = store i64 tmp_dword!11, [32, i64] XREG!4[12]
br label %bb21
bb17:
%59 = Extract i8 of i64 %54 <7, 0>
%60 = Extract i56 of i64 %55 <63, 8>
%58 = Concat i64 i8 %59, i56 %60
tmp_dword!10 = store i64 %58, i64 tmp_dword!2
br label %bb16
bb18:
%61 = Extract i3 of i64 %46 <2, 0>
%62 = i1 Eq i3 %61, 2
br i1 %62, label %bb22, label %bb23
bb19:
%35 = Extract i40 of i64 %10 <39, 0>
%36 = Extract i24 of i64 %11 <63, 40>
%34 = Concat i64 i40 %35, i24 %36
tmp_dword!15 = store i64 %34, i64 tmp_dword!1
br label %bb3
bb20:
%37 = Extract i3 of i64 %2 <2, 0>
%38 = i1 Eq i3 %37, -2
br i1 %38, label %bb24, label %bb25
bb21:
%45 = i64 Add i64 PC!2, 4
PC!24 = store i64 %45, i64 PC!3
br label %bb26
bb22:
%64 = Extract i16 of i64 %54 <15, 0>
%65 = Extract i48 of i64 %55 <63, 16>
%63 = Concat i64 i16 %64, i48 %65
tmp_dword!9 = store i64 %63, i64 tmp_dword!2
br label %bb16
bb23:
%66 = Extract i3 of i64 %46 <2, 0>
%67 = i1 Eq i3 %66, 3
br i1 %67, label %bb27, label %bb28
bb24:
%40 = Extract i48 of i64 %10 <47, 0>
%41 = Extract i16 of i64 %11 <63, 48>
%39 = Concat i64 i48 %40, i16 %41
tmp_dword!13 = store i64 %39, i64 tmp_dword!1
br label %bb3
bb25:
%43 = Extract i56 of i64 %10 <55, 0>
%44 = Extract i8 of i64 %11 <63, 56>
%42 = Concat i64 i56 %43, i8 %44
tmp_dword!14 = store i64 %42, i64 tmp_dword!1
br label %bb3
bb26:
store i64 %45, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%91 = load i64, [32, i64] XREG!6[15]
%90 = i64 Add i64 %91, 8
XREG!7 = store i64 %90, [32, i64] XREG!6[15]
br label %bb29
bb27:
%69 = Extract i24 of i64 %54 <23, 0>
%70 = Extract i40 of i64 %55 <63, 24>
%68 = Concat i64 i24 %69, i40 %70
tmp_dword!8 = store i64 %68, i64 tmp_dword!2
br label %bb16
bb28:
%71 = Extract i3 of i64 %46 <2, 0>
%72 = i1 Eq i3 %71, -4
br i1 %72, label %bb30, label %bb31
bb29:
%89 = i64 Add i64 PC!4, 4
PC!6 = store i64 %89, i64 PC!5
br label %bb32
bb30:
%74 = Extract i32 of i64 %54 <31, 0>
%75 = Extract i32 of i64 %55 <63, 32>
%73 = Concat i64 i32 %74, i32 %75
tmp_dword!7 = store i64 %73, i64 tmp_dword!2
br label %bb16
bb31:
%76 = Extract i3 of i64 %46 <2, 0>
%77 = i1 Eq i3 %76, -3
br i1 %77, label %bb33, label %bb34
bb32:
store i64 %89, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%94 = load i64, [32, i64] XREG!8[13]
%93 = i64 Add i64 %94, 1
XREG!9 = store i64 %93, [32, i64] XREG!8[13]
br label %bb35
bb33:
%79 = Extract i40 of i64 %54 <39, 0>
%80 = Extract i24 of i64 %55 <63, 40>
%78 = Concat i64 i40 %79, i24 %80
tmp_dword!4 = store i64 %78, i64 tmp_dword!2
br label %bb16
bb34:
%81 = Extract i3 of i64 %46 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb36, label %bb37
bb35:
%92 = i64 Add i64 PC!7, 4
PC!9 = store i64 %92, i64 PC!8
br label %bb38
bb36:
%84 = Extract i48 of i64 %54 <47, 0>
%85 = Extract i16 of i64 %55 <63, 48>
%83 = Concat i64 i48 %84, i16 %85
tmp_dword!6 = store i64 %83, i64 tmp_dword!2
br label %bb16
bb37:
%87 = Extract i56 of i64 %54 <55, 0>
%88 = Extract i8 of i64 %55 <63, 56>
%86 = Concat i64 i56 %87, i8 %88
tmp_dword!5 = store i64 %86, i64 tmp_dword!2
br label %bb16
bb38:
store i64 %92, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%97 = load i64, [32, i64] XREG!10[14]
%98 = load i64, [32, i64] XREG!10[12]
%96 = i64 Add i64 %97, %98
XREG!11 = store i64 %96, [32, i64] XREG!10[14]
br label %bb39
bb39:
%95 = i64 Add i64 PC!10, 4
PC!12 = store i64 %95, i64 PC!11
br label %bb40
bb40:
store i64 %95, i64 PC!13
PC!14 = store i64 PC!13, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!13, i64 prev_pc!6
%101 = load i64, [32, i64] XREG!12[15]
%100 = i64 Add i64 %101, -8
tmp_address!4 = store i64 %100, i64 tmp_address!3
%102 = load i64, [32, i64] XREG!12[14]
rs2_var!2 = store i64 %102, i64 rs2_var!1
%103 = i64 Lshr i64 %100, 3
%104 = Extract i53 of i64 %103 <52, 0>
mem_index!4 = store i53 %104, i53 mem_index!3
%105 = Extract i3 of i64 %100 <2, 0>
%106 = i1 Eq i3 %105, 0
br i1 %106, label %bb41, label %bb42
bb41:
MEM!3 = store i64 %102, [9007199254740992, i64] MEM!1[%104]
br label %bb43
bb42:
%107 = i53 Add i53 %104, 1
%108 = load i64, [9007199254740992, i64] MEM!1[%107]
tmp_dword1!6 = store i64 %108, i64 tmp_dword1!4
%109 = load i64, [9007199254740992, i64] MEM!1[%104]
tmp_dword2!6 = store i64 %109, i64 tmp_dword2!4
%110 = Extract i3 of i64 %100 <2, 0>
%111 = i1 Eq i3 %110, 1
br i1 %111, label %bb44, label %bb45
bb43:
MEM!2 = phi ite %106 MEM!3 MEM!5
tmp_dword2!5 = phi ite %106 tmp_dword2!4 tmp_dword2!8
tmp_dword1!5 = phi ite %106 tmp_dword1!4 tmp_dword1!8
br label %bb46
bb44:
%112 = i64 Lshr i64 %102, 56
%113 = Extract i8 of i64 %112 <7, 0>
%115 = Zext i8 %113 to i64
%116 = i64 And i64 %108, -256
%117 = i64 Shl i64 %115, 0
%114 = i64 Or i64 %116, %117
tmp_dword1!7 = store i64 %114, i64 tmp_dword1!6
%118 = i64 Lshr i64 %102, 0
%119 = Extract i56 of i64 %118 <55, 0>
%121 = Zext i56 %119 to i64
%122 = i64 And i64 %109, 255
%123 = i64 Shl i64 %121, 8
%120 = i64 Or i64 %122, %123
tmp_dword2!7 = store i64 %120, i64 tmp_dword2!6
br label %bb47
bb45:
%124 = Extract i3 of i64 %100 <2, 0>
%125 = i1 Eq i3 %124, 2
br i1 %125, label %bb48, label %bb49
bb46:
%99 = i64 Add i64 PC!13, 4
PC!15 = store i64 %99, i64 PC!14
br label %bb50
bb47:
tmp_dword2!8 = phi ite %111 %120 ite %125 %134 ite %139 %148 ite %153 %162 ite %167 %176 ite %181 %190 %202
tmp_dword1!8 = phi ite %111 %114 ite %125 %128 ite %139 %142 ite %153 %156 ite %167 %170 ite %181 %184 %196
%206 = i53 Add i53 %104, 1
MEM!4 = store i64 tmp_dword1!8, [9007199254740992, i64] MEM!1[%206]
MEM!5 = store i64 tmp_dword2!8, [9007199254740992, i64] MEM!4[%104]
br label %bb43
bb48:
%126 = i64 Lshr i64 %102, 48
%127 = Extract i16 of i64 %126 <15, 0>
%129 = Zext i16 %127 to i64
%130 = i64 And i64 %108, -65536
%131 = i64 Shl i64 %129, 0
%128 = i64 Or i64 %130, %131
tmp_dword1!14 = store i64 %128, i64 tmp_dword1!6
%132 = i64 Lshr i64 %102, 0
%133 = Extract i48 of i64 %132 <47, 0>
%135 = Zext i48 %133 to i64
%136 = i64 And i64 %109, 65535
%137 = i64 Shl i64 %135, 16
%134 = i64 Or i64 %136, %137
tmp_dword2!14 = store i64 %134, i64 tmp_dword2!6
br label %bb47
bb49:
%138 = Extract i3 of i64 %100 <2, 0>
%139 = i1 Eq i3 %138, 3
br i1 %139, label %bb51, label %bb52
bb50:
store i64 %99, i64 PC!16
PC!17 = store i64 PC!16, i64 PC!16
XREG!13 = store i64 0, [32, i64] XREG!12[0]
prev_pc!8 = store i64 PC!16, i64 prev_pc!7
%211 = load i64, [32, i64] XREG!13[13]
%212 = load i64, [32, i64] XREG!13[11]
%209 = i1 Ult i64 %211, %212
br i1 %209, label %bb53, label %bb54
bb51:
%140 = i64 Lshr i64 %102, 40
%141 = Extract i24 of i64 %140 <23, 0>
%143 = Zext i24 %141 to i64
%144 = i64 And i64 %108, -16777216
%145 = i64 Shl i64 %143, 0
%142 = i64 Or i64 %144, %145
tmp_dword1!13 = store i64 %142, i64 tmp_dword1!6
%146 = i64 Lshr i64 %102, 0
%147 = Extract i40 of i64 %146 <39, 0>
%149 = Zext i40 %147 to i64
%150 = i64 And i64 %109, 16777215
%151 = i64 Shl i64 %149, 24
%148 = i64 Or i64 %150, %151
tmp_dword2!13 = store i64 %148, i64 tmp_dword2!6
br label %bb47
bb52:
%152 = Extract i3 of i64 %100 <2, 0>
%153 = i1 Eq i3 %152, -4
br i1 %153, label %bb55, label %bb56
bb53:
%210 = i64 Add i64 PC!16, -24
PC!18 = store i64 %210, i64 PC!17
br label %bb57
bb54:
br label %bb57
bb55:
%154 = i64 Lshr i64 %102, 32
%155 = Extract i32 of i64 %154 <31, 0>
%157 = Zext i32 %155 to i64
%158 = i64 And i64 %108, -4294967296
%159 = i64 Shl i64 %157, 0
%156 = i64 Or i64 %158, %159
tmp_dword1!12 = store i64 %156, i64 tmp_dword1!6
%160 = i64 Lshr i64 %102, 0
%161 = Extract i32 of i64 %160 <31, 0>
%163 = Zext i32 %161 to i64
%164 = i64 And i64 %109, 4294967295
%165 = i64 Shl i64 %163, 32
%162 = i64 Or i64 %164, %165
tmp_dword2!12 = store i64 %162, i64 tmp_dword2!6
br label %bb47
bb56:
%166 = Extract i3 of i64 %100 <2, 0>
%167 = i1 Eq i3 %166, -3
br i1 %167, label %bb58, label %bb59
bb57:
PC!19 = phi ite %209 %210 PC!16
%207 = i1 Eq i64 PC!19, PC!16
br i1 %207, label %bb60, label %bb61
bb58:
%168 = i64 Lshr i64 %102, 24
%169 = Extract i40 of i64 %168 <39, 0>
%171 = Zext i40 %169 to i64
%172 = i64 And i64 %108, -1099511627776
%173 = i64 Shl i64 %171, 0
%170 = i64 Or i64 %172, %173
tmp_dword1!9 = store i64 %170, i64 tmp_dword1!6
%174 = i64 Lshr i64 %102, 0
%175 = Extract i24 of i64 %174 <23, 0>
%177 = Zext i24 %175 to i64
%178 = i64 And i64 %109, 1099511627775
%179 = i64 Shl i64 %177, 40
%176 = i64 Or i64 %178, %179
tmp_dword2!9 = store i64 %176, i64 tmp_dword2!6
br label %bb47
bb59:
%180 = Extract i3 of i64 %100 <2, 0>
%181 = i1 Eq i3 %180, -2
br i1 %181, label %bb62, label %bb63
bb60:
%208 = i64 Add i64 PC!19, 4
PC!23 = store i64 %208, i64 PC!19
br label %bb64
bb61:
br label %bb64
bb62:
%182 = i64 Lshr i64 %102, 16
%183 = Extract i48 of i64 %182 <47, 0>
%185 = Zext i48 %183 to i64
%186 = i64 And i64 %108, -281474976710656
%187 = i64 Shl i64 %185, 0
%184 = i64 Or i64 %186, %187
tmp_dword1!11 = store i64 %184, i64 tmp_dword1!6
%188 = i64 Lshr i64 %102, 0
%189 = Extract i16 of i64 %188 <15, 0>
%191 = Zext i16 %189 to i64
%192 = i64 And i64 %109, 281474976710655
%193 = i64 Shl i64 %191, 48
%190 = i64 Or i64 %192, %193
tmp_dword2!11 = store i64 %190, i64 tmp_dword2!6
br label %bb47
bb63:
%194 = i64 Lshr i64 %102, 8
%195 = Extract i56 of i64 %194 <55, 0>
%197 = Zext i56 %195 to i64
%198 = i64 And i64 %108, -72057594037927936
%199 = i64 Shl i64 %197, 0
%196 = i64 Or i64 %198, %199
tmp_dword1!10 = store i64 %196, i64 tmp_dword1!6
%200 = i64 Lshr i64 %102, 0
%201 = Extract i8 of i64 %200 <7, 0>
%203 = Zext i8 %201 to i64
%204 = i64 And i64 %109, 72057594037927935
%205 = i64 Shl i64 %203, 56
%202 = i64 Or i64 %204, %205
tmp_dword2!10 = store i64 %202, i64 tmp_dword2!6
br label %bb47
bb64:
PC!20 = phi ite %209 %210 %208
PC!21 = store i64 PC!20, i64 PC!20
PC!22 = store i64 PC!20, i64 PC!21
ret void

cherry
bb_5 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%2 = i64 Add i64 %3, -16
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
%8 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!19 = store i64 %8, i64 tmp_dword!1
br label %bb3
bb2:
%9 = i53 Add i53 %5, 1
%10 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword1!15 = store i64 %10, i64 tmp_dword1!1
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!15 = store i64 %11, i64 tmp_dword2!1
%12 = Extract i3 of i64 %2 <2, 0>
%13 = i1 Eq i3 %12, 1
br i1 %13, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %7 %8 ite %13 %14 ite %18 %19 ite %23 %24 ite %28 %29 ite %33 %34 ite %38 %39 %42
tmp_dword2!2 = phi ite %7 tmp_dword2!1 %11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 %10
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[14]
%1 = i64 Add i64 PC!1, 4
PC!25 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%47 = load i64, [32, i64] XREG!4[15]
%46 = i64 Add i64 %47, -8
tmp_address!3 = store i64 %46, i64 tmp_address!2
%48 = i64 Lshr i64 %46, 3
%49 = Extract i53 of i64 %48 <52, 0>
mem_index!3 = store i53 %49, i53 mem_index!2
%50 = Extract i3 of i64 %46 <2, 0>
%51 = i1 Eq i3 %50, 0
br i1 %51, label %bb10, label %bb11
bb4:
%15 = Extract i8 of i64 %10 <7, 0>
%16 = Extract i56 of i64 %11 <63, 8>
%14 = Concat i64 i8 %15, i56 %16
tmp_dword!12 = store i64 %14, i64 tmp_dword!1
br label %bb3
bb5:
%17 = Extract i3 of i64 %2 <2, 0>
%18 = i1 Eq i3 %17, 2
br i1 %18, label %bb6, label %bb7
bb6:
%20 = Extract i16 of i64 %10 <15, 0>
%21 = Extract i48 of i64 %11 <63, 16>
%19 = Concat i64 i16 %20, i48 %21
tmp_dword!18 = store i64 %19, i64 tmp_dword!1
br label %bb3
bb7:
%22 = Extract i3 of i64 %2 <2, 0>
%23 = i1 Eq i3 %22, 3
br i1 %23, label %bb8, label %bb9
bb8:
%25 = Extract i24 of i64 %10 <23, 0>
%26 = Extract i40 of i64 %11 <63, 24>
%24 = Concat i64 i24 %25, i40 %26
tmp_dword!17 = store i64 %24, i64 tmp_dword!1
br label %bb3
bb9:
%27 = Extract i3 of i64 %2 <2, 0>
%28 = i1 Eq i3 %27, -4
br i1 %28, label %bb12, label %bb13
bb10:
%52 = load i64, [9007199254740992, i64] MEM!1[%49]
tmp_dword!3 = store i64 %52, i64 tmp_dword!2
br label %bb14
bb11:
%53 = i53 Add i53 %49, 1
%54 = load i64, [9007199254740992, i64] MEM!1[%53]
tmp_dword1!3 = store i64 %54, i64 tmp_dword1!2
%55 = load i64, [9007199254740992, i64] MEM!1[%49]
tmp_dword2!3 = store i64 %55, i64 tmp_dword2!2
%56 = Extract i3 of i64 %46 <2, 0>
%57 = i1 Eq i3 %56, 1
br i1 %57, label %bb15, label %bb16
bb12:
%30 = Extract i32 of i64 %10 <31, 0>
%31 = Extract i32 of i64 %11 <63, 32>
%29 = Concat i64 i32 %30, i32 %31
tmp_dword!16 = store i64 %29, i64 tmp_dword!1
br label %bb3
bb13:
%32 = Extract i3 of i64 %2 <2, 0>
%33 = i1 Eq i3 %32, -3
br i1 %33, label %bb17, label %bb18
bb14:
tmp_dword!11 = phi ite %51 %52 ite %57 %58 ite %62 %63 ite %67 %68 ite %72 %73 ite %77 %78 ite %82 %83 %86
tmp_dword2!4 = phi ite %51 tmp_dword2!2 %55
tmp_dword1!4 = phi ite %51 tmp_dword1!2 %54
rd_var!3 = store i64 tmp_dword!11, i64 rd_var!2
XREG!5 = store i64 tmp_dword!11, [32, i64] XREG!4[12]
%45 = i64 Add i64 PC!2, 4
PC!24 = store i64 %45, i64 PC!3
store i64 %45, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%91 = load i64, [32, i64] XREG!6[15]
%90 = i64 Add i64 %91, 8
XREG!7 = store i64 %90, [32, i64] XREG!6[15]
%89 = i64 Add i64 PC!4, 4
PC!6 = store i64 %89, i64 PC!5
store i64 %89, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%94 = load i64, [32, i64] XREG!8[13]
%93 = i64 Add i64 %94, 1
XREG!9 = store i64 %93, [32, i64] XREG!8[13]
%92 = i64 Add i64 PC!7, 4
PC!9 = store i64 %92, i64 PC!8
store i64 %92, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%97 = load i64, [32, i64] XREG!10[14]
%98 = load i64, [32, i64] XREG!10[12]
%96 = i64 Add i64 %97, %98
XREG!11 = store i64 %96, [32, i64] XREG!10[14]
%95 = i64 Add i64 PC!10, 4
PC!12 = store i64 %95, i64 PC!11
store i64 %95, i64 PC!13
PC!14 = store i64 PC!13, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!13, i64 prev_pc!6
%101 = load i64, [32, i64] XREG!12[15]
%100 = i64 Add i64 %101, -8
tmp_address!4 = store i64 %100, i64 tmp_address!3
%102 = load i64, [32, i64] XREG!12[14]
rs2_var!2 = store i64 %102, i64 rs2_var!1
%103 = i64 Lshr i64 %100, 3
%104 = Extract i53 of i64 %103 <52, 0>
mem_index!4 = store i53 %104, i53 mem_index!3
%105 = Extract i3 of i64 %100 <2, 0>
%106 = i1 Eq i3 %105, 0
br i1 %106, label %bb31, label %bb32
bb15:
%59 = Extract i8 of i64 %54 <7, 0>
%60 = Extract i56 of i64 %55 <63, 8>
%58 = Concat i64 i8 %59, i56 %60
tmp_dword!10 = store i64 %58, i64 tmp_dword!2
br label %bb14
bb16:
%61 = Extract i3 of i64 %46 <2, 0>
%62 = i1 Eq i3 %61, 2
br i1 %62, label %bb19, label %bb20
bb17:
%35 = Extract i40 of i64 %10 <39, 0>
%36 = Extract i24 of i64 %11 <63, 40>
%34 = Concat i64 i40 %35, i24 %36
tmp_dword!15 = store i64 %34, i64 tmp_dword!1
br label %bb3
bb18:
%37 = Extract i3 of i64 %2 <2, 0>
%38 = i1 Eq i3 %37, -2
br i1 %38, label %bb21, label %bb22
bb19:
%64 = Extract i16 of i64 %54 <15, 0>
%65 = Extract i48 of i64 %55 <63, 16>
%63 = Concat i64 i16 %64, i48 %65
tmp_dword!9 = store i64 %63, i64 tmp_dword!2
br label %bb14
bb20:
%66 = Extract i3 of i64 %46 <2, 0>
%67 = i1 Eq i3 %66, 3
br i1 %67, label %bb23, label %bb24
bb21:
%40 = Extract i48 of i64 %10 <47, 0>
%41 = Extract i16 of i64 %11 <63, 48>
%39 = Concat i64 i48 %40, i16 %41
tmp_dword!13 = store i64 %39, i64 tmp_dword!1
br label %bb3
bb22:
%43 = Extract i56 of i64 %10 <55, 0>
%44 = Extract i8 of i64 %11 <63, 56>
%42 = Concat i64 i56 %43, i8 %44
tmp_dword!14 = store i64 %42, i64 tmp_dword!1
br label %bb3
bb23:
%69 = Extract i24 of i64 %54 <23, 0>
%70 = Extract i40 of i64 %55 <63, 24>
%68 = Concat i64 i24 %69, i40 %70
tmp_dword!8 = store i64 %68, i64 tmp_dword!2
br label %bb14
bb24:
%71 = Extract i3 of i64 %46 <2, 0>
%72 = i1 Eq i3 %71, -4
br i1 %72, label %bb25, label %bb26
bb25:
%74 = Extract i32 of i64 %54 <31, 0>
%75 = Extract i32 of i64 %55 <63, 32>
%73 = Concat i64 i32 %74, i32 %75
tmp_dword!7 = store i64 %73, i64 tmp_dword!2
br label %bb14
bb26:
%76 = Extract i3 of i64 %46 <2, 0>
%77 = i1 Eq i3 %76, -3
br i1 %77, label %bb27, label %bb28
bb27:
%79 = Extract i40 of i64 %54 <39, 0>
%80 = Extract i24 of i64 %55 <63, 40>
%78 = Concat i64 i40 %79, i24 %80
tmp_dword!4 = store i64 %78, i64 tmp_dword!2
br label %bb14
bb28:
%81 = Extract i3 of i64 %46 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb29, label %bb30
bb29:
%84 = Extract i48 of i64 %54 <47, 0>
%85 = Extract i16 of i64 %55 <63, 48>
%83 = Concat i64 i48 %84, i16 %85
tmp_dword!6 = store i64 %83, i64 tmp_dword!2
br label %bb14
bb30:
%87 = Extract i56 of i64 %54 <55, 0>
%88 = Extract i8 of i64 %55 <63, 56>
%86 = Concat i64 i56 %87, i8 %88
tmp_dword!5 = store i64 %86, i64 tmp_dword!2
br label %bb14
bb31:
MEM!3 = store i64 %102, [9007199254740992, i64] MEM!1[%104]
br label %bb33
bb32:
%107 = i53 Add i53 %104, 1
%108 = load i64, [9007199254740992, i64] MEM!1[%107]
tmp_dword1!6 = store i64 %108, i64 tmp_dword1!4
%109 = load i64, [9007199254740992, i64] MEM!1[%104]
tmp_dword2!6 = store i64 %109, i64 tmp_dword2!4
%110 = Extract i3 of i64 %100 <2, 0>
%111 = i1 Eq i3 %110, 1
br i1 %111, label %bb34, label %bb35
bb33:
MEM!2 = phi ite %106 MEM!3 MEM!5
tmp_dword2!5 = phi ite %106 tmp_dword2!4 tmp_dword2!8
tmp_dword1!5 = phi ite %106 tmp_dword1!4 tmp_dword1!8
%99 = i64 Add i64 PC!13, 4
PC!15 = store i64 %99, i64 PC!14
store i64 %99, i64 PC!16
PC!17 = store i64 PC!16, i64 PC!16
XREG!13 = store i64 0, [32, i64] XREG!12[0]
prev_pc!8 = store i64 PC!16, i64 prev_pc!7
%211 = load i64, [32, i64] XREG!13[13]
%212 = load i64, [32, i64] XREG!13[11]
%209 = i1 Ult i64 %211, %212
br i1 %209, label %bb41, label %bb42
bb34:
%112 = i64 Lshr i64 %102, 56
%113 = Extract i8 of i64 %112 <7, 0>
%115 = Zext i8 %113 to i64
%116 = i64 And i64 %108, -256
%117 = i64 Shl i64 %115, 0
%114 = i64 Or i64 %116, %117
tmp_dword1!7 = store i64 %114, i64 tmp_dword1!6
%118 = i64 Lshr i64 %102, 0
%119 = Extract i56 of i64 %118 <55, 0>
%121 = Zext i56 %119 to i64
%122 = i64 And i64 %109, 255
%123 = i64 Shl i64 %121, 8
%120 = i64 Or i64 %122, %123
tmp_dword2!7 = store i64 %120, i64 tmp_dword2!6
br label %bb36
bb35:
%124 = Extract i3 of i64 %100 <2, 0>
%125 = i1 Eq i3 %124, 2
br i1 %125, label %bb37, label %bb38
bb36:
tmp_dword2!8 = phi ite %111 %120 ite %125 %134 ite %139 %148 ite %153 %162 ite %167 %176 ite %181 %190 %202
tmp_dword1!8 = phi ite %111 %114 ite %125 %128 ite %139 %142 ite %153 %156 ite %167 %170 ite %181 %184 %196
%206 = i53 Add i53 %104, 1
MEM!4 = store i64 tmp_dword1!8, [9007199254740992, i64] MEM!1[%206]
MEM!5 = store i64 tmp_dword2!8, [9007199254740992, i64] MEM!4[%104]
br label %bb33
bb37:
%126 = i64 Lshr i64 %102, 48
%127 = Extract i16 of i64 %126 <15, 0>
%129 = Zext i16 %127 to i64
%130 = i64 And i64 %108, -65536
%131 = i64 Shl i64 %129, 0
%128 = i64 Or i64 %130, %131
tmp_dword1!14 = store i64 %128, i64 tmp_dword1!6
%132 = i64 Lshr i64 %102, 0
%133 = Extract i48 of i64 %132 <47, 0>
%135 = Zext i48 %133 to i64
%136 = i64 And i64 %109, 65535
%137 = i64 Shl i64 %135, 16
%134 = i64 Or i64 %136, %137
tmp_dword2!14 = store i64 %134, i64 tmp_dword2!6
br label %bb36
bb38:
%138 = Extract i3 of i64 %100 <2, 0>
%139 = i1 Eq i3 %138, 3
br i1 %139, label %bb39, label %bb40
bb39:
%140 = i64 Lshr i64 %102, 40
%141 = Extract i24 of i64 %140 <23, 0>
%143 = Zext i24 %141 to i64
%144 = i64 And i64 %108, -16777216
%145 = i64 Shl i64 %143, 0
%142 = i64 Or i64 %144, %145
tmp_dword1!13 = store i64 %142, i64 tmp_dword1!6
%146 = i64 Lshr i64 %102, 0
%147 = Extract i40 of i64 %146 <39, 0>
%149 = Zext i40 %147 to i64
%150 = i64 And i64 %109, 16777215
%151 = i64 Shl i64 %149, 24
%148 = i64 Or i64 %150, %151
tmp_dword2!13 = store i64 %148, i64 tmp_dword2!6
br label %bb36
bb40:
%152 = Extract i3 of i64 %100 <2, 0>
%153 = i1 Eq i3 %152, -4
br i1 %153, label %bb43, label %bb44
bb41:
%210 = i64 Add i64 PC!16, -24
PC!18 = store i64 %210, i64 PC!17
br label %bb45
bb42:
br label %bb45
bb43:
%154 = i64 Lshr i64 %102, 32
%155 = Extract i32 of i64 %154 <31, 0>
%157 = Zext i32 %155 to i64
%158 = i64 And i64 %108, -4294967296
%159 = i64 Shl i64 %157, 0
%156 = i64 Or i64 %158, %159
tmp_dword1!12 = store i64 %156, i64 tmp_dword1!6
%160 = i64 Lshr i64 %102, 0
%161 = Extract i32 of i64 %160 <31, 0>
%163 = Zext i32 %161 to i64
%164 = i64 And i64 %109, 4294967295
%165 = i64 Shl i64 %163, 32
%162 = i64 Or i64 %164, %165
tmp_dword2!12 = store i64 %162, i64 tmp_dword2!6
br label %bb36
bb44:
%166 = Extract i3 of i64 %100 <2, 0>
%167 = i1 Eq i3 %166, -3
br i1 %167, label %bb46, label %bb47
bb45:
PC!19 = phi ite %209 %210 PC!16
%207 = i1 Eq i64 PC!19, PC!16
br i1 %207, label %bb48, label %bb49
bb46:
%168 = i64 Lshr i64 %102, 24
%169 = Extract i40 of i64 %168 <39, 0>
%171 = Zext i40 %169 to i64
%172 = i64 And i64 %108, -1099511627776
%173 = i64 Shl i64 %171, 0
%170 = i64 Or i64 %172, %173
tmp_dword1!9 = store i64 %170, i64 tmp_dword1!6
%174 = i64 Lshr i64 %102, 0
%175 = Extract i24 of i64 %174 <23, 0>
%177 = Zext i24 %175 to i64
%178 = i64 And i64 %109, 1099511627775
%179 = i64 Shl i64 %177, 40
%176 = i64 Or i64 %178, %179
tmp_dword2!9 = store i64 %176, i64 tmp_dword2!6
br label %bb36
bb47:
%180 = Extract i3 of i64 %100 <2, 0>
%181 = i1 Eq i3 %180, -2
br i1 %181, label %bb50, label %bb51
bb48:
%208 = i64 Add i64 PC!19, 4
PC!23 = store i64 %208, i64 PC!19
br label %bb52
bb49:
br label %bb52
bb50:
%182 = i64 Lshr i64 %102, 16
%183 = Extract i48 of i64 %182 <47, 0>
%185 = Zext i48 %183 to i64
%186 = i64 And i64 %108, -281474976710656
%187 = i64 Shl i64 %185, 0
%184 = i64 Or i64 %186, %187
tmp_dword1!11 = store i64 %184, i64 tmp_dword1!6
%188 = i64 Lshr i64 %102, 0
%189 = Extract i16 of i64 %188 <15, 0>
%191 = Zext i16 %189 to i64
%192 = i64 And i64 %109, 281474976710655
%193 = i64 Shl i64 %191, 48
%190 = i64 Or i64 %192, %193
tmp_dword2!11 = store i64 %190, i64 tmp_dword2!6
br label %bb36
bb51:
%194 = i64 Lshr i64 %102, 8
%195 = Extract i56 of i64 %194 <55, 0>
%197 = Zext i56 %195 to i64
%198 = i64 And i64 %108, -72057594037927936
%199 = i64 Shl i64 %197, 0
%196 = i64 Or i64 %198, %199
tmp_dword1!10 = store i64 %196, i64 tmp_dword1!6
%200 = i64 Lshr i64 %102, 0
%201 = Extract i8 of i64 %200 <7, 0>
%203 = Zext i8 %201 to i64
%204 = i64 And i64 %109, 72057594037927935
%205 = i64 Shl i64 %203, 56
%202 = i64 Or i64 %204, %205
tmp_dword2!10 = store i64 %202, i64 tmp_dword2!6
br label %bb36
bb52:
PC!20 = phi ite %209 %210 %208
PC!21 = store i64 PC!20, i64 PC!20
PC!22 = store i64 PC!20, i64 PC!21
ret void

bb_5 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%2 = i64 Add i64 %3, -16
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
%8 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!19 = store i64 %8, i64 tmp_dword!1
br label %bb3
bb2:
%9 = i53 Add i53 %5, 1
%10 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword1!15 = store i64 %10, i64 tmp_dword1!1
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!15 = store i64 %11, i64 tmp_dword2!1
%12 = Extract i3 of i64 %2 <2, 0>
%13 = i1 Eq i3 %12, 1
br i1 %13, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %7 %8 ite %13 %14 ite %18 %19 ite %23 %24 ite %28 %29 ite %33 %34 ite %38 %39 %42
tmp_dword2!2 = phi ite %7 tmp_dword2!1 %11
tmp_dword1!2 = phi ite %7 tmp_dword1!1 %10
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[14]
%1 = i64 Add i64 PC!1, 4
PC!25 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%47 = load i64, [32, i64] XREG!4[15]
%46 = i64 Add i64 %47, -8
tmp_address!3 = store i64 %46, i64 tmp_address!2
%48 = i64 Lshr i64 %46, 3
%49 = Extract i53 of i64 %48 <52, 0>
mem_index!3 = store i53 %49, i53 mem_index!2
%50 = Extract i3 of i64 %46 <2, 0>
%51 = i1 Eq i3 %50, 0
br i1 %51, label %bb10, label %bb11
bb4:
%15 = Extract i8 of i64 %10 <7, 0>
%16 = Extract i56 of i64 %11 <63, 8>
%14 = Concat i64 i8 %15, i56 %16
tmp_dword!12 = store i64 %14, i64 tmp_dword!1
br label %bb3
bb5:
%17 = Extract i3 of i64 %2 <2, 0>
%18 = i1 Eq i3 %17, 2
br i1 %18, label %bb6, label %bb7
bb6:
%20 = Extract i16 of i64 %10 <15, 0>
%21 = Extract i48 of i64 %11 <63, 16>
%19 = Concat i64 i16 %20, i48 %21
tmp_dword!18 = store i64 %19, i64 tmp_dword!1
br label %bb3
bb7:
%22 = Extract i3 of i64 %2 <2, 0>
%23 = i1 Eq i3 %22, 3
br i1 %23, label %bb8, label %bb9
bb8:
%25 = Extract i24 of i64 %10 <23, 0>
%26 = Extract i40 of i64 %11 <63, 24>
%24 = Concat i64 i24 %25, i40 %26
tmp_dword!17 = store i64 %24, i64 tmp_dword!1
br label %bb3
bb9:
%27 = Extract i3 of i64 %2 <2, 0>
%28 = i1 Eq i3 %27, -4
br i1 %28, label %bb12, label %bb13
bb10:
%52 = load i64, [9007199254740992, i64] MEM!1[%49]
tmp_dword!3 = store i64 %52, i64 tmp_dword!2
br label %bb14
bb11:
%53 = i53 Add i53 %49, 1
%54 = load i64, [9007199254740992, i64] MEM!1[%53]
tmp_dword1!3 = store i64 %54, i64 tmp_dword1!2
%55 = load i64, [9007199254740992, i64] MEM!1[%49]
tmp_dword2!3 = store i64 %55, i64 tmp_dword2!2
%56 = Extract i3 of i64 %46 <2, 0>
%57 = i1 Eq i3 %56, 1
br i1 %57, label %bb15, label %bb16
bb12:
%30 = Extract i32 of i64 %10 <31, 0>
%31 = Extract i32 of i64 %11 <63, 32>
%29 = Concat i64 i32 %30, i32 %31
tmp_dword!16 = store i64 %29, i64 tmp_dword!1
br label %bb3
bb13:
%32 = Extract i3 of i64 %2 <2, 0>
%33 = i1 Eq i3 %32, -3
br i1 %33, label %bb17, label %bb18
bb14:
tmp_dword!11 = phi ite %51 %52 ite %57 %58 ite %62 %63 ite %67 %68 ite %72 %73 ite %77 %78 ite %82 %83 %86
tmp_dword2!4 = phi ite %51 tmp_dword2!2 %55
tmp_dword1!4 = phi ite %51 tmp_dword1!2 %54
rd_var!3 = store i64 tmp_dword!11, i64 rd_var!2
XREG!5 = store i64 tmp_dword!11, [32, i64] XREG!4[12]
%45 = i64 Add i64 PC!2, 4
PC!24 = store i64 %45, i64 PC!3
store i64 %45, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%91 = load i64, [32, i64] XREG!6[15]
%90 = i64 Add i64 %91, 8
XREG!7 = store i64 %90, [32, i64] XREG!6[15]
%89 = i64 Add i64 PC!4, 4
PC!6 = store i64 %89, i64 PC!5
store i64 %89, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%94 = load i64, [32, i64] XREG!8[13]
%93 = i64 Add i64 %94, 1
XREG!9 = store i64 %93, [32, i64] XREG!8[13]
%92 = i64 Add i64 PC!7, 4
PC!9 = store i64 %92, i64 PC!8
store i64 %92, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%97 = load i64, [32, i64] XREG!10[14]
%98 = load i64, [32, i64] XREG!10[12]
%96 = i64 Add i64 %97, %98
XREG!11 = store i64 %96, [32, i64] XREG!10[14]
%95 = i64 Add i64 PC!10, 4
PC!12 = store i64 %95, i64 PC!11
store i64 %95, i64 PC!13
PC!14 = store i64 PC!13, i64 PC!13
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!13, i64 prev_pc!6
%101 = load i64, [32, i64] XREG!12[15]
%100 = i64 Add i64 %101, -8
tmp_address!4 = store i64 %100, i64 tmp_address!3
%102 = load i64, [32, i64] XREG!12[14]
rs2_var!2 = store i64 %102, i64 rs2_var!1
%103 = i64 Lshr i64 %100, 3
%104 = Extract i53 of i64 %103 <52, 0>
mem_index!4 = store i53 %104, i53 mem_index!3
%105 = Extract i3 of i64 %100 <2, 0>
%106 = i1 Eq i3 %105, 0
br i1 %106, label %bb31, label %bb32
bb15:
%59 = Extract i8 of i64 %54 <7, 0>
%60 = Extract i56 of i64 %55 <63, 8>
%58 = Concat i64 i8 %59, i56 %60
tmp_dword!10 = store i64 %58, i64 tmp_dword!2
br label %bb14
bb16:
%61 = Extract i3 of i64 %46 <2, 0>
%62 = i1 Eq i3 %61, 2
br i1 %62, label %bb19, label %bb20
bb17:
%35 = Extract i40 of i64 %10 <39, 0>
%36 = Extract i24 of i64 %11 <63, 40>
%34 = Concat i64 i40 %35, i24 %36
tmp_dword!15 = store i64 %34, i64 tmp_dword!1
br label %bb3
bb18:
%37 = Extract i3 of i64 %2 <2, 0>
%38 = i1 Eq i3 %37, -2
br i1 %38, label %bb21, label %bb22
bb19:
%64 = Extract i16 of i64 %54 <15, 0>
%65 = Extract i48 of i64 %55 <63, 16>
%63 = Concat i64 i16 %64, i48 %65
tmp_dword!9 = store i64 %63, i64 tmp_dword!2
br label %bb14
bb20:
%66 = Extract i3 of i64 %46 <2, 0>
%67 = i1 Eq i3 %66, 3
br i1 %67, label %bb23, label %bb24
bb21:
%40 = Extract i48 of i64 %10 <47, 0>
%41 = Extract i16 of i64 %11 <63, 48>
%39 = Concat i64 i48 %40, i16 %41
tmp_dword!13 = store i64 %39, i64 tmp_dword!1
br label %bb3
bb22:
%43 = Extract i56 of i64 %10 <55, 0>
%44 = Extract i8 of i64 %11 <63, 56>
%42 = Concat i64 i56 %43, i8 %44
tmp_dword!14 = store i64 %42, i64 tmp_dword!1
br label %bb3
bb23:
%69 = Extract i24 of i64 %54 <23, 0>
%70 = Extract i40 of i64 %55 <63, 24>
%68 = Concat i64 i24 %69, i40 %70
tmp_dword!8 = store i64 %68, i64 tmp_dword!2
br label %bb14
bb24:
%71 = Extract i3 of i64 %46 <2, 0>
%72 = i1 Eq i3 %71, -4
br i1 %72, label %bb25, label %bb26
bb25:
%74 = Extract i32 of i64 %54 <31, 0>
%75 = Extract i32 of i64 %55 <63, 32>
%73 = Concat i64 i32 %74, i32 %75
tmp_dword!7 = store i64 %73, i64 tmp_dword!2
br label %bb14
bb26:
%76 = Extract i3 of i64 %46 <2, 0>
%77 = i1 Eq i3 %76, -3
br i1 %77, label %bb27, label %bb28
bb27:
%79 = Extract i40 of i64 %54 <39, 0>
%80 = Extract i24 of i64 %55 <63, 40>
%78 = Concat i64 i40 %79, i24 %80
tmp_dword!4 = store i64 %78, i64 tmp_dword!2
br label %bb14
bb28:
%81 = Extract i3 of i64 %46 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb29, label %bb30
bb29:
%84 = Extract i48 of i64 %54 <47, 0>
%85 = Extract i16 of i64 %55 <63, 48>
%83 = Concat i64 i48 %84, i16 %85
tmp_dword!6 = store i64 %83, i64 tmp_dword!2
br label %bb14
bb30:
%87 = Extract i56 of i64 %54 <55, 0>
%88 = Extract i8 of i64 %55 <63, 56>
%86 = Concat i64 i56 %87, i8 %88
tmp_dword!5 = store i64 %86, i64 tmp_dword!2
br label %bb14
bb31:
MEM!3 = store i64 %102, [9007199254740992, i64] MEM!1[%104]
br label %bb33
bb32:
%107 = i53 Add i53 %104, 1
%108 = load i64, [9007199254740992, i64] MEM!1[%107]
tmp_dword1!6 = store i64 %108, i64 tmp_dword1!4
%109 = load i64, [9007199254740992, i64] MEM!1[%104]
tmp_dword2!6 = store i64 %109, i64 tmp_dword2!4
%110 = Extract i3 of i64 %100 <2, 0>
%111 = i1 Eq i3 %110, 1
br i1 %111, label %bb34, label %bb35
bb33:
MEM!2 = phi ite %106 MEM!3 MEM!5
tmp_dword2!5 = phi ite %106 tmp_dword2!4 tmp_dword2!8
tmp_dword1!5 = phi ite %106 tmp_dword1!4 tmp_dword1!8
%99 = i64 Add i64 PC!13, 4
PC!15 = store i64 %99, i64 PC!14
store i64 %99, i64 PC!16
PC!17 = store i64 PC!16, i64 PC!16
XREG!13 = store i64 0, [32, i64] XREG!12[0]
prev_pc!8 = store i64 PC!16, i64 prev_pc!7
%211 = load i64, [32, i64] XREG!13[13]
%212 = load i64, [32, i64] XREG!13[11]
%209 = i1 Ult i64 %211, %212
br i1 %209, label %bb41, label %bb42
bb34:
%112 = i64 Lshr i64 %102, 56
%113 = Extract i8 of i64 %112 <7, 0>
%115 = Zext i8 %113 to i64
%116 = i64 And i64 %108, -256
%117 = i64 Shl i64 %115, 0
%114 = i64 Or i64 %116, %117
tmp_dword1!7 = store i64 %114, i64 tmp_dword1!6
%118 = i64 Lshr i64 %102, 0
%119 = Extract i56 of i64 %118 <55, 0>
%121 = Zext i56 %119 to i64
%122 = i64 And i64 %109, 255
%123 = i64 Shl i64 %121, 8
%120 = i64 Or i64 %122, %123
tmp_dword2!7 = store i64 %120, i64 tmp_dword2!6
br label %bb36
bb35:
%124 = Extract i3 of i64 %100 <2, 0>
%125 = i1 Eq i3 %124, 2
br i1 %125, label %bb37, label %bb38
bb36:
tmp_dword2!8 = phi ite %111 %120 ite %125 %134 ite %139 %148 ite %153 %162 ite %167 %176 ite %181 %190 %202
tmp_dword1!8 = phi ite %111 %114 ite %125 %128 ite %139 %142 ite %153 %156 ite %167 %170 ite %181 %184 %196
%206 = i53 Add i53 %104, 1
MEM!4 = store i64 tmp_dword1!8, [9007199254740992, i64] MEM!1[%206]
MEM!5 = store i64 tmp_dword2!8, [9007199254740992, i64] MEM!4[%104]
br label %bb33
bb37:
%126 = i64 Lshr i64 %102, 48
%127 = Extract i16 of i64 %126 <15, 0>
%129 = Zext i16 %127 to i64
%130 = i64 And i64 %108, -65536
%131 = i64 Shl i64 %129, 0
%128 = i64 Or i64 %130, %131
tmp_dword1!14 = store i64 %128, i64 tmp_dword1!6
%132 = i64 Lshr i64 %102, 0
%133 = Extract i48 of i64 %132 <47, 0>
%135 = Zext i48 %133 to i64
%136 = i64 And i64 %109, 65535
%137 = i64 Shl i64 %135, 16
%134 = i64 Or i64 %136, %137
tmp_dword2!14 = store i64 %134, i64 tmp_dword2!6
br label %bb36
bb38:
%138 = Extract i3 of i64 %100 <2, 0>
%139 = i1 Eq i3 %138, 3
br i1 %139, label %bb39, label %bb40
bb39:
%140 = i64 Lshr i64 %102, 40
%141 = Extract i24 of i64 %140 <23, 0>
%143 = Zext i24 %141 to i64
%144 = i64 And i64 %108, -16777216
%145 = i64 Shl i64 %143, 0
%142 = i64 Or i64 %144, %145
tmp_dword1!13 = store i64 %142, i64 tmp_dword1!6
%146 = i64 Lshr i64 %102, 0
%147 = Extract i40 of i64 %146 <39, 0>
%149 = Zext i40 %147 to i64
%150 = i64 And i64 %109, 16777215
%151 = i64 Shl i64 %149, 24
%148 = i64 Or i64 %150, %151
tmp_dword2!13 = store i64 %148, i64 tmp_dword2!6
br label %bb36
bb40:
%152 = Extract i3 of i64 %100 <2, 0>
%153 = i1 Eq i3 %152, -4
br i1 %153, label %bb43, label %bb44
bb41:
%210 = i64 Add i64 PC!16, -24
PC!18 = store i64 %210, i64 PC!17
br label %bb45
bb42:
br label %bb45
bb43:
%154 = i64 Lshr i64 %102, 32
%155 = Extract i32 of i64 %154 <31, 0>
%157 = Zext i32 %155 to i64
%158 = i64 And i64 %108, -4294967296
%159 = i64 Shl i64 %157, 0
%156 = i64 Or i64 %158, %159
tmp_dword1!12 = store i64 %156, i64 tmp_dword1!6
%160 = i64 Lshr i64 %102, 0
%161 = Extract i32 of i64 %160 <31, 0>
%163 = Zext i32 %161 to i64
%164 = i64 And i64 %109, 4294967295
%165 = i64 Shl i64 %163, 32
%162 = i64 Or i64 %164, %165
tmp_dword2!12 = store i64 %162, i64 tmp_dword2!6
br label %bb36
bb44:
%166 = Extract i3 of i64 %100 <2, 0>
%167 = i1 Eq i3 %166, -3
br i1 %167, label %bb46, label %bb47
bb45:
PC!19 = phi ite %209 %210 PC!16
%207 = i1 Eq i64 PC!19, PC!16
br i1 %207, label %bb48, label %bb49
bb46:
%168 = i64 Lshr i64 %102, 24
%169 = Extract i40 of i64 %168 <39, 0>
%171 = Zext i40 %169 to i64
%172 = i64 And i64 %108, -1099511627776
%173 = i64 Shl i64 %171, 0
%170 = i64 Or i64 %172, %173
tmp_dword1!9 = store i64 %170, i64 tmp_dword1!6
%174 = i64 Lshr i64 %102, 0
%175 = Extract i24 of i64 %174 <23, 0>
%177 = Zext i24 %175 to i64
%178 = i64 And i64 %109, 1099511627775
%179 = i64 Shl i64 %177, 40
%176 = i64 Or i64 %178, %179
tmp_dword2!9 = store i64 %176, i64 tmp_dword2!6
br label %bb36
bb47:
%180 = Extract i3 of i64 %100 <2, 0>
%181 = i1 Eq i3 %180, -2
br i1 %181, label %bb50, label %bb51
bb48:
%208 = i64 Add i64 PC!19, 4
PC!23 = store i64 %208, i64 PC!19
br label %bb52
bb49:
br label %bb52
bb50:
%182 = i64 Lshr i64 %102, 16
%183 = Extract i48 of i64 %182 <47, 0>
%185 = Zext i48 %183 to i64
%186 = i64 And i64 %108, -281474976710656
%187 = i64 Shl i64 %185, 0
%184 = i64 Or i64 %186, %187
tmp_dword1!11 = store i64 %184, i64 tmp_dword1!6
%188 = i64 Lshr i64 %102, 0
%189 = Extract i16 of i64 %188 <15, 0>
%191 = Zext i16 %189 to i64
%192 = i64 And i64 %109, 281474976710655
%193 = i64 Shl i64 %191, 48
%190 = i64 Or i64 %192, %193
tmp_dword2!11 = store i64 %190, i64 tmp_dword2!6
br label %bb36
bb51:
%194 = i64 Lshr i64 %102, 8
%195 = Extract i56 of i64 %194 <55, 0>
%197 = Zext i56 %195 to i64
%198 = i64 And i64 %108, -72057594037927936
%199 = i64 Shl i64 %197, 0
%196 = i64 Or i64 %198, %199
tmp_dword1!10 = store i64 %196, i64 tmp_dword1!6
%200 = i64 Lshr i64 %102, 0
%201 = Extract i8 of i64 %200 <7, 0>
%203 = Zext i8 %201 to i64
%204 = i64 And i64 %109, 72057594037927935
%205 = i64 Shl i64 %203, 56
%202 = i64 Or i64 %204, %205
tmp_dword2!10 = store i64 %202, i64 tmp_dword2!6
br label %bb36
bb52:
PC!20 = phi ite %209 %210 %208
PC!21 = store i64 PC!20, i64 PC!20
PC!22 = store i64 PC!20, i64 PC!21
ret void

COMPILE
bb_6 func void []
bb0:
call void insn_30.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_6 func void []
bb0:
br label %bb6
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = load i64, i64 PC
%10 = i64 Add i64 %9, 4
store i64 %10, [32, i64] XREG[0]
%11 = Sext i12 0 to i64
%12 = i64 Lshr i64 %11, 1
%13 = i64 Shl i64 %12, 1
%15 = load i64, [32, i64] XREG[1]
%14 = i64 Add i64 %15, %13
store i64 %14, i64 PC
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2

propagate
bb_6 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = load i64, i64 PC
%10 = i64 Add i64 %9, 4
store i64 %10, [32, i64] XREG[0]
%12 = load i64, [32, i64] XREG[1]
%11 = i64 Add i64 %12, 0
store i64 %11, i64 PC
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_6 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = load i64, i64 PC
%10 = i64 Add i64 %9, 4
store i64 %10, [32, i64] XREG[0]
%12 = load i64, [32, i64] XREG[1]
%11 = i64 Add i64 %12, 0
store i64 %11, i64 PC
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_6 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%9 = load i64, i64 PC!1
%10 = i64 Add i64 %9, 4
XREG!3 = store i64 %10, [32, i64] XREG!2[0]
%12 = load i64, [32, i64] XREG!3[1]
%11 = i64 Add i64 %12, 0
PC!2 = store i64 %11, i64 PC!1
%4 = load i64, i64 PC!2
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!2
%8 = i64 Add i64 %7, 4
PC!6 = store i64 %8, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %5 PC!6 PC!2
%2 = load i64, i64 PC!3
PC!4 = store i64 %2, i64 PC!3
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
bb_6 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = i64 Add i64 PC!1, 4
XREG!3 = store i64 %3, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!3[1]
%4 = i64 Add i64 %5, 0
PC!2 = store i64 %4, i64 PC!1
%1 = i1 Eq i64 %4, PC!1
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %4, 4
PC!6 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %4
PC!4 = store i64 PC!3, i64 PC!3
PC!5 = store i64 PC!3, i64 PC!4
ret void

Nested SCCP
bb_6 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = i64 Add i64 PC!1, 4
XREG!3 = store i64 %3, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!3[1]
%4 = i64 Add i64 %5, 0
PC!2 = store i64 %4, i64 PC!1
%1 = i1 Eq i64 %4, PC!1
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %4, 4
PC!6 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %4
PC!4 = store i64 PC!3, i64 PC!3
PC!5 = store i64 PC!3, i64 PC!4
ret void

SCCP forward
bb_6 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = i64 Add i64 PC!1, 4
XREG!3 = store i64 %3, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!3[1]
%4 = i64 Add i64 %5, 0
PC!2 = store i64 %4, i64 PC!1
%1 = i1 Eq i64 %4, PC!1
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %4, 4
PC!6 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %4
PC!4 = store i64 PC!3, i64 PC!3
PC!5 = store i64 PC!3, i64 PC!4
ret void

cherry
bb_6 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = i64 Add i64 PC!1, 4
XREG!3 = store i64 %3, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!3[1]
%4 = i64 Add i64 %5, 0
PC!2 = store i64 %4, i64 PC!1
%1 = i1 Eq i64 %4, PC!1
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %4, 4
PC!6 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %4
PC!4 = store i64 PC!3, i64 PC!3
PC!5 = store i64 PC!3, i64 PC!4
ret void

bb_6 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = i64 Add i64 PC!1, 4
XREG!3 = store i64 %3, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!3[1]
%4 = i64 Add i64 %5, 0
PC!2 = store i64 %4, i64 PC!1
%1 = i1 Eq i64 %4, PC!1
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %4, 4
PC!6 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %4
PC!4 = store i64 PC!3, i64 PC!3
PC!5 = store i64 PC!3, i64 PC!4
ret void

COMPILE
bb_7 func void []
bb0:
call void insn_31.action %0 ()
call void insn_32.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_7 func void []
bb0:
br label %bb6
bb1:
br label %bb12
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 2 to i64
%11 = load i64, [32, i64] XREG[0]
%10 = i64 Add i64 %11, %9
store i64 %10, [32, i64] XREG[13]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb8:
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%19 = load i64, i64 PC
%20 = i64 Add i64 %19, 4
store i64 %20, [32, i64] XREG[0]
%21 = Sext i20 1048554 to i64
%22 = i64 Shl i64 %21, 1
%23 = load i64, i64 PC
%24 = i64 Add i64 %23, %22
store i64 %24, i64 PC
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb9, label %bb10
bb9:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%12 = load i64, i64 PC
store i64 %12, i64 PC
br label %bb7
bb12:
br label %bb8

propagate
bb_7 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, 2
store i64 %9, [32, i64] XREG[13]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%18 = load i64, i64 PC
%19 = i64 Add i64 %18, 4
store i64 %19, [32, i64] XREG[0]
%20 = load i64, i64 PC
%21 = i64 Add i64 %20, -44
store i64 %21, i64 PC
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb9:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%11 = load i64, i64 PC
store i64 %11, i64 PC
br label %bb12
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_7 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, 2
store i64 %9, [32, i64] XREG[13]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%18 = load i64, i64 PC
%19 = i64 Add i64 %18, 4
store i64 %19, [32, i64] XREG[0]
%20 = load i64, i64 PC
%21 = i64 Add i64 %20, -44
store i64 %21, i64 PC
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%11 = load i64, i64 PC
store i64 %11, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_7 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, 2
XREG!3 = store i64 %9, [32, i64] XREG!2[13]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!9 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %5 PC!9 PC!1
%2 = load i64, i64 PC!2
PC!3 = store i64 %2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%12 = load i64, i64 PC!3
prev_pc!3 = store i64 %12, i64 prev_pc!2
%18 = load i64, i64 PC!3
%19 = i64 Add i64 %18, 4
XREG!5 = store i64 %19, [32, i64] XREG!4[0]
%20 = load i64, i64 PC!3
%21 = i64 Add i64 %20, -44
PC!4 = store i64 %21, i64 PC!3
%13 = load i64, i64 PC!4
%15 = load i64, i64 prev_pc!3
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC!4
%17 = i64 Add i64 %16, 4
PC!8 = store i64 %17, i64 PC!4
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %14 PC!8 PC!4
%11 = load i64, i64 PC!5
PC!6 = store i64 %11, i64 PC!5
%1 = load i64, i64 PC!6
PC!7 = store i64 %1, i64 PC!6
ret void

SSA forward
bb_7 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 2
XREG!3 = store i64 %2, [32, i64] XREG!2[13]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!9 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%4 = i64 Add i64 PC!2, 4
XREG!5 = store i64 %4, [32, i64] XREG!4[0]
%5 = i64 Add i64 PC!2, -44
PC!4 = store i64 %5, i64 PC!3
br label %bb3
bb3:
br label %bb4
bb4:
store i64 %5, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

Nested SCCP
bb_7 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 2
XREG!3 = store i64 %2, [32, i64] XREG!2[13]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!9 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%4 = i64 Add i64 PC!2, 4
XREG!5 = store i64 %4, [32, i64] XREG!4[0]
%5 = i64 Add i64 PC!2, -44
PC!4 = store i64 %5, i64 PC!3
br label %bb3
bb3:
br label %bb4
bb4:
store i64 %5, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

SCCP forward
bb_7 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 2
XREG!3 = store i64 %2, [32, i64] XREG!2[13]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!9 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%4 = i64 Add i64 PC!2, 4
XREG!5 = store i64 %4, [32, i64] XREG!4[0]
%5 = i64 Add i64 PC!2, -44
PC!4 = store i64 %5, i64 PC!3
br label %bb3
bb3:
br label %bb4
bb4:
store i64 %5, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

cherry
bb_7 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 2
XREG!3 = store i64 %2, [32, i64] XREG!2[13]
%1 = i64 Add i64 PC!1, 4
PC!9 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%4 = i64 Add i64 PC!2, 4
XREG!5 = store i64 %4, [32, i64] XREG!4[0]
%5 = i64 Add i64 PC!2, -44
PC!4 = store i64 %5, i64 PC!3
store i64 %5, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

bb_7 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 2
XREG!3 = store i64 %2, [32, i64] XREG!2[13]
%1 = i64 Add i64 PC!1, 4
PC!9 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%4 = i64 Add i64 PC!2, 4
XREG!5 = store i64 %4, [32, i64] XREG!4[0]
%5 = i64 Add i64 PC!2, -44
PC!4 = store i64 %5, i64 PC!3
store i64 %5, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

COMPILE
bb_8 func void []
bb0:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_8 func void []
bb0:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

propagate
bb_8 func void []
bb0:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_8 func void []
bb0:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_8 func void []
bb0:
%1 = load i64, i64 PC!1
PC!2 = store i64 %1, i64 PC!1
ret void

SSA forward
bb_8 func void []
bb0:
PC!2 = store i64 PC!1, i64 PC!1
ret void

Nested SCCP
bb_8 func void []
bb0:
PC!2 = store i64 PC!1, i64 PC!1
ret void

SCCP forward
bb_8 func void []
bb0:
PC!2 = store i64 PC!1, i64 PC!1
ret void

cherry
bb_8 func void []
bb0:
PC!2 = store i64 PC!1, i64 PC!1
ret void

bb_8 func void []
bb0:
PC!2 = store i64 PC!1, i64 PC!1
ret void

Created file: fibonacci.bin.smt2
