idiv.bin func void []
bb0:
PC!1 = i64 Use i64 PC
XREG!1 = [32, i64] Use [32, i64] XREG
br label %bb1
bb1:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[10]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[0]
%5 = i64 Add i64 %6, 0
XREG!5 = store i64 %5, [32, i64] XREG!4[10]
%4 = i64 Add i64 PC!3, 4
PC!5 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!6
PC!7 = store i64 PC!6, i64 PC!6
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!6, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[15]
%12 = load i64, [32, i64] XREG!6[11]
%9 = i1 Slt i64 %11, %12
br i1 %9, label %bb2, label %bb3
bb2:
%10 = i64 Add i64 PC!6, 16
PC!13 = store i64 %10, i64 PC!7
br label %bb4
bb3:
br label %bb4
bb4:
PC!8 = phi ite %9 %10 PC!6
%7 = i1 Eq i64 PC!8, PC!6
br i1 %7, label %bb5, label %bb6
bb5:
%8 = i64 Add i64 PC!8, 4
PC!12 = store i64 %8, i64 PC!8
br label %bb7
bb6:
br label %bb7
bb7:
PC!9 = phi ite %9 %10 %8
PC!10 = store i64 PC!9, i64 PC!9
PC!11 = store i64 PC!9, i64 PC!10
br label %bb8
bb8:
PC = i64 Use i64 PC!11
XREG = [32, i64] Use [32, i64] XREG!6
PC!14 = i64 Use i64 PC
XREG!7 = [32, i64] Use [32, i64] XREG
br label %bb9
bb9:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%6 = load i64, [32, i64] XREG!2[15]
%2 = Extract i32 of i64 %6 <31, 0>
%7 = load i64, [32, i64] XREG!2[11]
%4 = Extract i32 of i64 %7 <31, 0>
%3 = i32 Sub i32 %2, %4
%5 = Sext i32 %3 to i64
XREG!3 = store i64 %5, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!13 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%12 = load i64, [32, i64] XREG!4[10]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, 1
%11 = Sext i32 %10 to i64
XREG!5 = store i64 %11, [32, i64] XREG!4[10]
%8 = i64 Add i64 PC!2, 4
PC!12 = store i64 %8, i64 PC!3
store i64 %8, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%17 = load i64, [32, i64] XREG!6[15]
%18 = load i64, [32, i64] XREG!6[11]
%15 = i1 Sge i64 %17, %18
br i1 %15, label %bb10, label %bb11
bb10:
%16 = i64 Add i64 PC!4, -8
PC!11 = store i64 %16, i64 PC!5
br label %bb12
bb11:
br label %bb12
bb12:
PC!6 = phi ite %15 %16 PC!4
%13 = i1 Eq i64 PC!6, PC!4
br i1 %13, label %bb13, label %bb14
bb13:
%14 = i64 Add i64 PC!6, 4
PC!7 = store i64 %14, i64 PC!6
br label %bb15
bb14:
br label %bb15
bb15:
PC!8 = phi ite %15 %16 %14
PC!9 = store i64 PC!8, i64 PC!8
PC!10 = store i64 PC!8, i64 PC!9
br label %bb16
bb16:
PC = i64 Use i64 PC!23
XREG = [32, i64] Use [32, i64] XREG!12
MEM!1 = [9007199254740992, i64] Use [9007199254740992, i64] MEM
PC!27 = i64 Use i64 PC
XREG!13 = [32, i64] Use [32, i64] XREG
br label %bb17
bb17:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[12]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %4, i64 rs2_var!1
%5 = i64 Lshr i64 %2, 3
%6 = Extract i53 of i64 %5 <52, 0>
mem_index!2 = store i53 %6, i53 mem_index!1
%7 = Extract i3 of i64 %2 <2, 0>
%8 = Zext i3 %7 to i6
%9 = i6 Mul i6 %8, 8
tmp_bit_offset!2 = store i6 %9, i6 tmp_bit_offset!1
%10 = Extract i3 of i64 %2 <2, 0>
%11 = i1 Ult i3 %10, -3
br i1 %11, label %bb18, label %bb19
bb18:
%12 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword!3 = store i64 %12, i64 tmp_dword!1
%13 = Extract i32 of i64 %4 <31, 0>
%15 = Zext i32 %13 to i64
%16 = Zext i6 %9 to i64
%17 = Zext i6 %9 to i64
%18 = i64 Shl i64 4294967295, %17
%19 = i64 Xor i64 %18, -1
%20 = i64 And i64 %12, %19
%21 = i64 Shl i64 %15, %16
%14 = i64 Or i64 %20, %21
tmp_dword!4 = store i64 %14, i64 tmp_dword!3
MEM!5 = store i64 %14, [9007199254740992, i64] MEM!1[%6]
br label %bb20
bb19:
%22 = i53 Add i53 %6, 1
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword1!3 = store i64 %23, i64 tmp_dword1!1
%24 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword2!3 = store i64 %24, i64 tmp_dword2!1
%25 = Extract i2 of i64 %2 <1, 0>
%26 = i1 Eq i2 %25, 1
br i1 %26, label %bb21, label %bb22
bb20:
MEM!2 = phi ite %11 MEM!5 MEM!4
tmp_dword!2 = phi ite %11 %14 tmp_dword!1
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!7
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!7
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!3 = store i64 0, [32, i64] XREG!2[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%71 = i64 Add i64 PC!3, 4
XREG!4 = store i64 %71, [32, i64] XREG!3[0]
%73 = load i64, [32, i64] XREG!4[1]
%72 = i64 Add i64 %73, 0
PC!5 = store i64 %72, i64 PC!4
%69 = i1 Eq i64 %72, PC!3
br i1 %69, label %bb26, label %bb27
bb21:
%27 = Extract i32 of i64 %4 <31, 0>
%28 = i32 Lshr i32 %27, 24
%29 = Extract i8 of i32 %28 <7, 0>
%31 = Zext i8 %29 to i64
%32 = i64 And i64 %23, -256
%33 = i64 Shl i64 %31, 0
%30 = i64 Or i64 %32, %33
tmp_dword1!4 = store i64 %30, i64 tmp_dword1!3
%34 = i32 Lshr i32 %27, 0
%35 = Extract i24 of i32 %34 <23, 0>
%37 = Zext i24 %35 to i64
%38 = i64 And i64 %24, 1099511627775
%39 = i64 Shl i64 %37, 40
%36 = i64 Or i64 %38, %39
tmp_dword2!4 = store i64 %36, i64 tmp_dword2!3
br label %bb23
bb22:
%40 = Extract i2 of i64 %2 <1, 0>
%41 = i1 Eq i2 %40, -2
br i1 %41, label %bb24, label %bb25
bb23:
tmp_dword2!7 = phi ite %26 %36 ite %41 %51 %64
tmp_dword1!7 = phi ite %26 %30 ite %41 %45 %58
%68 = i53 Add i53 %6, 1
MEM!3 = store i64 tmp_dword1!7, [9007199254740992, i64] MEM!1[%68]
MEM!4 = store i64 tmp_dword2!7, [9007199254740992, i64] MEM!3[%6]
br label %bb20
bb24:
%42 = Extract i32 of i64 %4 <31, 0>
%43 = i32 Lshr i32 %42, 16
%44 = Extract i16 of i32 %43 <15, 0>
%46 = Zext i16 %44 to i64
%47 = i64 And i64 %23, -65536
%48 = i64 Shl i64 %46, 0
%45 = i64 Or i64 %47, %48
tmp_dword1!5 = store i64 %45, i64 tmp_dword1!3
%49 = i32 Lshr i32 %42, 0
%50 = Extract i16 of i32 %49 <15, 0>
%52 = Zext i16 %50 to i64
%53 = i64 And i64 %24, 281474976710655
%54 = i64 Shl i64 %52, 48
%51 = i64 Or i64 %53, %54
tmp_dword2!5 = store i64 %51, i64 tmp_dword2!3
br label %bb23
bb25:
%55 = Extract i32 of i64 %4 <31, 0>
%56 = i32 Lshr i32 %55, 8
%57 = Extract i24 of i32 %56 <23, 0>
%59 = Zext i24 %57 to i64
%60 = i64 And i64 %23, -16777216
%61 = i64 Shl i64 %59, 0
%58 = i64 Or i64 %60, %61
tmp_dword1!6 = store i64 %58, i64 tmp_dword1!3
%62 = i32 Lshr i32 %55, 0
%63 = Extract i8 of i32 %62 <7, 0>
%65 = Zext i8 %63 to i64
%66 = i64 And i64 %24, 72057594037927935
%67 = i64 Shl i64 %65, 56
%64 = i64 Or i64 %66, %67
tmp_dword2!6 = store i64 %64, i64 tmp_dword2!3
br label %bb23
bb26:
%70 = i64 Add i64 %72, 4
PC!9 = store i64 %70, i64 PC!5
br label %bb28
bb27:
br label %bb28
bb28:
PC!6 = phi ite %69 %70 %72
PC!7 = store i64 PC!6, i64 PC!6
PC!8 = store i64 PC!6, i64 PC!7
br label %bb29
bb29:
MEM = [9007199254740992, i64] Use [9007199254740992, i64] MEM!2
PC = i64 Use i64 PC!34
XREG = [32, i64] Use [32, i64] XREG!16
ret void
