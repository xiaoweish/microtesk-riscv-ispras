Analyzing file: idiv.bin...
addi a5, a0, 0
addi a0, zero, 0
blt a5, a1, 8
subw a5, a5, a1
addiw a0, a0, 1
bge a5, a1, -4
sw a5, 0(a2)
jalr zero, ra, 0
COMPILE
insn_0.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 10} X, i12 0} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_0.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 10} X, i12 0} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_0.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_0.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_1.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 10} X, func void [i5] {i5 0} X, i12 0} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_1.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 10} X, func void [i5] {i5 0} X, i12 0} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_1.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_1.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_2.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 15} X, func void [i5] {i5 11} X, func void [i12] {i12 8} BRANCH_IMM} blt} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_2.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb10
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i12]]] {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 15} X, func void [i5] {i5 11} X, func void [i12] {i12 8} BRANCH_IMM} blt} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
%20 = Disclose i5 of func i64 [i5] %10 i32 0
%21 = load i64, [32, i64] XREG[%20]
%12 = i1 Slt i64 %19, %21
br i1 %12, label %bb8, label %bb9
bb8:
br label %bb13
bb9:
br label %bb6
bb10:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7
bb11:
%14 = Sext i12 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb12:
%13 = i12 Use i12 %22
br label %bb11
bb13:
%22 = Disclose void of func i12 [] %11 i32 0
br label %bb12

propagate
insn_2.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Slt i64 %13, %14
br i1 %8, label %bb5, label %bb6
bb5:
br label %bb7
bb6:
br label %bb8
bb7:
br label %bb9
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb10, label %bb11
bb9:
br label %bb12
bb10:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb11:
br label %bb13
bb12:
%9 = Sext i12 8 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_2.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Slt i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 8 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_3.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 15} X, func void [i5] {i5 15} X, func void [i5] {i5 11} X} subw} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_3.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i5]]] {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 15} X, func void [i5] {i5 15} X, func void [i5] {i5 11} X} subw} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%16 = Disclose i5 of func i64 [i5] %10 i32 0
%17 = load i64, [32, i64] XREG[%16]
%12 = Extract i32 of i64 %17 <31, 0>
%18 = Disclose i5 of func i64 [i5] %11 i32 0
%19 = load i64, [32, i64] XREG[%18]
%14 = Extract i32 of i64 %19 <31, 0>
%13 = i32 Sub i32 %12, %14
%15 = Sext i32 %13 to i64
%20 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %15, [32, i64] XREG[%20]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_3.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%12 = load i64, [32, i64] XREG[15]
%8 = Extract i32 of i64 %12 <31, 0>
%13 = load i64, [32, i64] XREG[11]
%10 = Extract i32 of i64 %13 <31, 0>
%9 = i32 Sub i32 %8, %10
%11 = Sext i32 %9 to i64
store i64 %11, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_3.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%12 = load i64, [32, i64] XREG[15]
%8 = Extract i32 of i64 %12 <31, 0>
%13 = load i64, [32, i64] XREG[11]
%10 = Extract i32 of i64 %13 <31, 0>
%9 = i32 Sub i32 %8, %10
%11 = Sext i32 %9 to i64
store i64 %11, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_4.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 10} X, func void [i5] {i5 10} X, i12 1} addiw} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_4.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 10} X, func void [i5] {i5 10} X, i12 1} addiw} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i32
%16 = Disclose i5 of func i64 [i5] %10 i32 0
%17 = load i64, [32, i64] XREG[%16]
%13 = Extract i32 of i64 %17 <31, 0>
%14 = i32 Add i32 %13, %12
%15 = Sext i32 %14 to i64
%18 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %15, [32, i64] XREG[%18]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_4.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 1 to i32
%12 = load i64, [32, i64] XREG[10]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, %8
%11 = Sext i32 %10 to i64
store i64 %11, [32, i64] XREG[10]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_4.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 1 to i32
%12 = load i64, [32, i64] XREG[10]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, %8
%11 = Sext i32 %10 to i64
store i64 %11, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_5.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 15} X, func void [i5] {i5 11} X, func void [i12] {i12 4092} BRANCH_IMM} bge} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_5.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb10
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i12]]] {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 15} X, func void [i5] {i5 11} X, func void [i12] {i12 4092} BRANCH_IMM} bge} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
%20 = Disclose i5 of func i64 [i5] %10 i32 0
%21 = load i64, [32, i64] XREG[%20]
%12 = i1 Sge i64 %19, %21
br i1 %12, label %bb8, label %bb9
bb8:
br label %bb13
bb9:
br label %bb6
bb10:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7
bb11:
%14 = Sext i12 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb12:
%13 = i12 Use i12 %22
br label %bb11
bb13:
%22 = Disclose void of func i12 [] %11 i32 0
br label %bb12

propagate
insn_5.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Sge i64 %13, %14
br i1 %8, label %bb5, label %bb6
bb5:
br label %bb7
bb6:
br label %bb8
bb7:
br label %bb9
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb10, label %bb11
bb9:
br label %bb12
bb10:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb11:
br label %bb13
bb12:
%9 = Sext i12 4092 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_5.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Sge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4092 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_6.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 12} X, i12 0} sw} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_6.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb16
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 12} X, i12 0} sw} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
store i64 %19, i64 rs2_var
%17 = load i64, i64 rs2_var
%20 = i64 Lshr i64 %14, 3
%21 = Extract i53 of i64 %20 <52, 0>
store i53 %21, i53 mem_index
%22 = Extract i3 of i64 %14 <2, 0>
%23 = Zext i3 %22 to i6
%24 = i6 Mul i6 %23, 8
store i6 %24, i6 tmp_bit_offset
%25 = Extract i3 of i64 %14 <2, 0>
%26 = i1 Ult i3 %25, -3
br i1 %26, label %bb8, label %bb9
bb8:
%27 = load i53, i53 mem_index
%28 = load i64, [9007199254740992, i64] MEM[%27]
store i64 %28, i64 tmp_dword
%29 = Extract i32 of i64 %17 <31, 0>
%30 = load i6, i6 tmp_bit_offset
%32 = load i64, i64 tmp_dword
%33 = Zext i32 %29 to i64
%34 = Zext i6 %30 to i64
%35 = Zext i6 %30 to i64
%36 = i64 Shl i64 4294967295, %35
%37 = i64 Xor i64 %36, -1
%38 = i64 And i64 %32, %37
%39 = i64 Shl i64 %33, %34
%31 = i64 Or i64 %38, %39
store i64 %31, i64 tmp_dword
%40 = load i64, i64 tmp_dword
%41 = load i53, i53 mem_index
store i64 %40, [9007199254740992, i64] MEM[%41]
br label %bb10
bb9:
%42 = load i53, i53 mem_index
%43 = i53 Add i53 %42, 1
%44 = load i64, [9007199254740992, i64] MEM[%43]
store i64 %44, i64 tmp_dword1
%45 = load i53, i53 mem_index
%46 = load i64, [9007199254740992, i64] MEM[%45]
store i64 %46, i64 tmp_dword2
%47 = Extract i2 of i64 %14 <1, 0>
%48 = i1 Eq i2 %47, 1
br i1 %48, label %bb11, label %bb12
bb10:
br label %bb6
bb11:
%49 = Extract i32 of i64 %17 <31, 0>
%50 = i32 Lshr i32 %49, 24
%51 = Extract i8 of i32 %50 <7, 0>
%53 = load i64, i64 tmp_dword1
%54 = Zext i8 %51 to i64
%55 = i64 And i64 %53, -256
%56 = i64 Shl i64 %54, 0
%52 = i64 Or i64 %55, %56
store i64 %52, i64 tmp_dword1
%57 = i32 Lshr i32 %49, 0
%58 = Extract i24 of i32 %57 <23, 0>
%60 = load i64, i64 tmp_dword2
%61 = Zext i24 %58 to i64
%62 = i64 And i64 %60, 1099511627775
%63 = i64 Shl i64 %61, 40
%59 = i64 Or i64 %62, %63
store i64 %59, i64 tmp_dword2
br label %bb13
bb12:
%64 = Extract i2 of i64 %14 <1, 0>
%65 = i1 Eq i2 %64, -2
br i1 %65, label %bb14, label %bb15
bb13:
%96 = load i64, i64 tmp_dword1
%97 = load i53, i53 mem_index
%98 = i53 Add i53 %97, 1
store i64 %96, [9007199254740992, i64] MEM[%98]
%99 = load i64, i64 tmp_dword2
%100 = load i53, i53 mem_index
store i64 %99, [9007199254740992, i64] MEM[%100]
br label %bb10
bb14:
%66 = Extract i32 of i64 %17 <31, 0>
%67 = i32 Lshr i32 %66, 16
%68 = Extract i16 of i32 %67 <15, 0>
%70 = load i64, i64 tmp_dword1
%71 = Zext i16 %68 to i64
%72 = i64 And i64 %70, -65536
%73 = i64 Shl i64 %71, 0
%69 = i64 Or i64 %72, %73
store i64 %69, i64 tmp_dword1
%74 = i32 Lshr i32 %66, 0
%75 = Extract i16 of i32 %74 <15, 0>
%77 = load i64, i64 tmp_dword2
%78 = Zext i16 %75 to i64
%79 = i64 And i64 %77, 281474976710655
%80 = i64 Shl i64 %78, 48
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword2
br label %bb13
bb15:
%81 = Extract i32 of i64 %17 <31, 0>
%82 = i32 Lshr i32 %81, 8
%83 = Extract i24 of i32 %82 <23, 0>
%85 = load i64, i64 tmp_dword1
%86 = Zext i24 %83 to i64
%87 = i64 And i64 %85, -16777216
%88 = i64 Shl i64 %86, 0
%84 = i64 Or i64 %87, %88
store i64 %84, i64 tmp_dword1
%89 = i32 Lshr i32 %81, 0
%90 = Extract i8 of i32 %89 <7, 0>
%92 = load i64, i64 tmp_dword2
%93 = Zext i8 %90 to i64
%94 = i64 And i64 %92, 72057594037927935
%95 = i64 Shl i64 %93, 56
%91 = i64 Or i64 %94, %95
store i64 %91, i64 tmp_dword2
br label %bb13
bb16:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_6.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = Zext i3 %16 to i6
%18 = i6 Mul i6 %17, 8
store i6 %18, i6 tmp_bit_offset
%19 = Extract i3 of i64 %10 <2, 0>
%20 = i1 Ult i3 %19, -3
br i1 %20, label %bb5, label %bb6
bb5:
%21 = load i53, i53 mem_index
%22 = load i64, [9007199254740992, i64] MEM[%21]
store i64 %22, i64 tmp_dword
%23 = Extract i32 of i64 %12 <31, 0>
%24 = load i6, i6 tmp_bit_offset
%26 = load i64, i64 tmp_dword
%27 = Zext i32 %23 to i64
%28 = Zext i6 %24 to i64
%29 = Zext i6 %24 to i64
%30 = i64 Shl i64 4294967295, %29
%31 = i64 Xor i64 %30, -1
%32 = i64 And i64 %26, %31
%33 = i64 Shl i64 %27, %28
%25 = i64 Or i64 %32, %33
store i64 %25, i64 tmp_dword
%34 = load i64, i64 tmp_dword
%35 = load i53, i53 mem_index
store i64 %34, [9007199254740992, i64] MEM[%35]
br label %bb7
bb6:
%36 = load i53, i53 mem_index
%37 = i53 Add i53 %36, 1
%38 = load i64, [9007199254740992, i64] MEM[%37]
store i64 %38, i64 tmp_dword1
%39 = load i53, i53 mem_index
%40 = load i64, [9007199254740992, i64] MEM[%39]
store i64 %40, i64 tmp_dword2
%41 = Extract i2 of i64 %10 <1, 0>
%42 = i1 Eq i2 %41, 1
br i1 %42, label %bb8, label %bb9
bb7:
br label %bb10
bb8:
%43 = Extract i32 of i64 %12 <31, 0>
%44 = i32 Lshr i32 %43, 24
%45 = Extract i8 of i32 %44 <7, 0>
%47 = load i64, i64 tmp_dword1
%48 = Zext i8 %45 to i64
%49 = i64 And i64 %47, -256
%50 = i64 Shl i64 %48, 0
%46 = i64 Or i64 %49, %50
store i64 %46, i64 tmp_dword1
%51 = i32 Lshr i32 %43, 0
%52 = Extract i24 of i32 %51 <23, 0>
%54 = load i64, i64 tmp_dword2
%55 = Zext i24 %52 to i64
%56 = i64 And i64 %54, 1099511627775
%57 = i64 Shl i64 %55, 40
%53 = i64 Or i64 %56, %57
store i64 %53, i64 tmp_dword2
br label %bb11
bb9:
%58 = Extract i2 of i64 %10 <1, 0>
%59 = i1 Eq i2 %58, -2
br i1 %59, label %bb12, label %bb13
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb14, label %bb15
bb11:
%90 = load i64, i64 tmp_dword1
%91 = load i53, i53 mem_index
%92 = i53 Add i53 %91, 1
store i64 %90, [9007199254740992, i64] MEM[%92]
%93 = load i64, i64 tmp_dword2
%94 = load i53, i53 mem_index
store i64 %93, [9007199254740992, i64] MEM[%94]
br label %bb7
bb12:
%60 = Extract i32 of i64 %12 <31, 0>
%61 = i32 Lshr i32 %60, 16
%62 = Extract i16 of i32 %61 <15, 0>
%64 = load i64, i64 tmp_dword1
%65 = Zext i16 %62 to i64
%66 = i64 And i64 %64, -65536
%67 = i64 Shl i64 %65, 0
%63 = i64 Or i64 %66, %67
store i64 %63, i64 tmp_dword1
%68 = i32 Lshr i32 %60, 0
%69 = Extract i16 of i32 %68 <15, 0>
%71 = load i64, i64 tmp_dword2
%72 = Zext i16 %69 to i64
%73 = i64 And i64 %71, 281474976710655
%74 = i64 Shl i64 %72, 48
%70 = i64 Or i64 %73, %74
store i64 %70, i64 tmp_dword2
br label %bb11
bb13:
%75 = Extract i32 of i64 %12 <31, 0>
%76 = i32 Lshr i32 %75, 8
%77 = Extract i24 of i32 %76 <23, 0>
%79 = load i64, i64 tmp_dword1
%80 = Zext i24 %77 to i64
%81 = i64 And i64 %79, -16777216
%82 = i64 Shl i64 %80, 0
%78 = i64 Or i64 %81, %82
store i64 %78, i64 tmp_dword1
%83 = i32 Lshr i32 %75, 0
%84 = Extract i8 of i32 %83 <7, 0>
%86 = load i64, i64 tmp_dword2
%87 = Zext i8 %84 to i64
%88 = i64 And i64 %86, 72057594037927935
%89 = i64 Shl i64 %87, 56
%85 = i64 Or i64 %88, %89
store i64 %85, i64 tmp_dword2
br label %bb11
bb14:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb16
bb15:
br label %bb16
bb16:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_6.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = Zext i3 %16 to i6
%18 = i6 Mul i6 %17, 8
store i6 %18, i6 tmp_bit_offset
%19 = Extract i3 of i64 %10 <2, 0>
%20 = i1 Ult i3 %19, -3
br i1 %20, label %bb1, label %bb2
bb1:
%21 = load i53, i53 mem_index
%22 = load i64, [9007199254740992, i64] MEM[%21]
store i64 %22, i64 tmp_dword
%23 = Extract i32 of i64 %12 <31, 0>
%24 = load i6, i6 tmp_bit_offset
%26 = load i64, i64 tmp_dword
%27 = Zext i32 %23 to i64
%28 = Zext i6 %24 to i64
%29 = Zext i6 %24 to i64
%30 = i64 Shl i64 4294967295, %29
%31 = i64 Xor i64 %30, -1
%32 = i64 And i64 %26, %31
%33 = i64 Shl i64 %27, %28
%25 = i64 Or i64 %32, %33
store i64 %25, i64 tmp_dword
%34 = load i64, i64 tmp_dword
%35 = load i53, i53 mem_index
store i64 %34, [9007199254740992, i64] MEM[%35]
br label %bb3
bb2:
%36 = load i53, i53 mem_index
%37 = i53 Add i53 %36, 1
%38 = load i64, [9007199254740992, i64] MEM[%37]
store i64 %38, i64 tmp_dword1
%39 = load i53, i53 mem_index
%40 = load i64, [9007199254740992, i64] MEM[%39]
store i64 %40, i64 tmp_dword2
%41 = Extract i2 of i64 %10 <1, 0>
%42 = i1 Eq i2 %41, 1
br i1 %42, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%43 = Extract i32 of i64 %12 <31, 0>
%44 = i32 Lshr i32 %43, 24
%45 = Extract i8 of i32 %44 <7, 0>
%47 = load i64, i64 tmp_dword1
%48 = Zext i8 %45 to i64
%49 = i64 And i64 %47, -256
%50 = i64 Shl i64 %48, 0
%46 = i64 Or i64 %49, %50
store i64 %46, i64 tmp_dword1
%51 = i32 Lshr i32 %43, 0
%52 = Extract i24 of i32 %51 <23, 0>
%54 = load i64, i64 tmp_dword2
%55 = Zext i24 %52 to i64
%56 = i64 And i64 %54, 1099511627775
%57 = i64 Shl i64 %55, 40
%53 = i64 Or i64 %56, %57
store i64 %53, i64 tmp_dword2
br label %bb6
bb5:
%58 = Extract i2 of i64 %10 <1, 0>
%59 = i1 Eq i2 %58, -2
br i1 %59, label %bb7, label %bb8
bb6:
%90 = load i64, i64 tmp_dword1
%91 = load i53, i53 mem_index
%92 = i53 Add i53 %91, 1
store i64 %90, [9007199254740992, i64] MEM[%92]
%93 = load i64, i64 tmp_dword2
%94 = load i53, i53 mem_index
store i64 %93, [9007199254740992, i64] MEM[%94]
br label %bb3
bb7:
%60 = Extract i32 of i64 %12 <31, 0>
%61 = i32 Lshr i32 %60, 16
%62 = Extract i16 of i32 %61 <15, 0>
%64 = load i64, i64 tmp_dword1
%65 = Zext i16 %62 to i64
%66 = i64 And i64 %64, -65536
%67 = i64 Shl i64 %65, 0
%63 = i64 Or i64 %66, %67
store i64 %63, i64 tmp_dword1
%68 = i32 Lshr i32 %60, 0
%69 = Extract i16 of i32 %68 <15, 0>
%71 = load i64, i64 tmp_dword2
%72 = Zext i16 %69 to i64
%73 = i64 And i64 %71, 281474976710655
%74 = i64 Shl i64 %72, 48
%70 = i64 Or i64 %73, %74
store i64 %70, i64 tmp_dword2
br label %bb6
bb8:
%75 = Extract i32 of i64 %12 <31, 0>
%76 = i32 Lshr i32 %75, 8
%77 = Extract i24 of i32 %76 <23, 0>
%79 = load i64, i64 tmp_dword1
%80 = Zext i24 %77 to i64
%81 = i64 And i64 %79, -16777216
%82 = i64 Shl i64 %80, 0
%78 = i64 Or i64 %81, %82
store i64 %78, i64 tmp_dword1
%83 = i32 Lshr i32 %75, 0
%84 = Extract i8 of i32 %83 <7, 0>
%86 = load i64, i64 tmp_dword2
%87 = Zext i8 %84 to i64
%88 = i64 And i64 %86, 72057594037927935
%89 = i64 Shl i64 %87, 56
%85 = i64 Or i64 %88, %89
store i64 %85, i64 tmp_dword2
br label %bb6
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_7.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 0} X, func void [i5] {i5 1} X, i12 0} jalr} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_7.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 0} X, func void [i5] {i5 1} X, i12 0} jalr} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, 4
%18 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%18]
%14 = Sext i12 %11 to i64
%15 = i64 Lshr i64 %14, 1
%16 = i64 Shl i64 %15, 1
%19 = Disclose i5 of func i64 [i5] %10 i32 0
%20 = load i64, [32, i64] XREG[%19]
%17 = i64 Add i64 %20, %16
store i64 %17, i64 PC
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_7.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_7.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_0.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG!2[10]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_1.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[10]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_2.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Slt i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 8 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%13 = load i64, [32, i64] XREG!2[15]
%14 = load i64, [32, i64] XREG!2[11]
%8 = i1 Slt i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 8 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC!1
%12 = i64 Add i64 %11, %10
PC!2 = store i64 %12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %8 PC!2 PC!1
%3 = load i64, i64 PC!3
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC!3
%7 = i64 Add i64 %6, 4
PC!6 = store i64 %7, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %4 PC!6 PC!3
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[15]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Slt i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!2 = store i64 16, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 16 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!3, 4
PC!6 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %1 %2 PC!3
PC!5 = store i64 PC!4, i64 PC!4
ret void

Nested SCCP
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[15]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Slt i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!2 = store i64 16, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 16 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 0, 4
PC!6 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %3 16 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

SCCP forward
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Slt i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!2 = store i64 16, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %2 16 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!6 = store i64 4, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 16 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

cherry
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Slt i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!2 = store i64 16, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %2 16 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!6 = store i64 4, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 16 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

COMPILE
insn_3.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%12 = load i64, [32, i64] XREG[15]
%8 = Extract i32 of i64 %12 <31, 0>
%13 = load i64, [32, i64] XREG[11]
%10 = Extract i32 of i64 %13 <31, 0>
%9 = i32 Sub i32 %8, %10
%11 = Sext i32 %9 to i64
store i64 %11, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%12 = load i64, [32, i64] XREG!2[15]
%8 = Extract i32 of i64 %12 <31, 0>
%13 = load i64, [32, i64] XREG!2[11]
%10 = Extract i32 of i64 %13 <31, 0>
%9 = i32 Sub i32 %8, %10
%11 = Sext i32 %9 to i64
XREG!3 = store i64 %11, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[15]
%1 = Extract i32 of i64 %5 <31, 0>
%6 = load i64, [32, i64] XREG!2[11]
%3 = Extract i32 of i64 %6 <31, 0>
%2 = i32 Sub i32 %1, %3
%4 = Sext i32 %2 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[15]
%1 = Extract i32 of i64 %5 <31, 0>
%6 = load i64, [32, i64] XREG!2[11]
%3 = Extract i32 of i64 %6 <31, 0>
%2 = i32 Sub i32 %1, %3
%4 = Sext i32 %2 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[15]
%1 = Extract i32 of i64 %5 <31, 0>
%6 = load i64, [32, i64] XREG!2[11]
%3 = Extract i32 of i64 %6 <31, 0>
%2 = i32 Sub i32 %1, %3
%4 = Sext i32 %2 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[15]
%1 = Extract i32 of i64 %5 <31, 0>
%6 = load i64, [32, i64] XREG!2[11]
%3 = Extract i32 of i64 %6 <31, 0>
%2 = i32 Sub i32 %1, %3
%4 = Sext i32 %2 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[15]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_4.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 1 to i32
%12 = load i64, [32, i64] XREG[10]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, %8
%11 = Sext i32 %10 to i64
store i64 %11, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 1 to i32
%12 = load i64, [32, i64] XREG!2[10]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, %8
%11 = Sext i32 %10 to i64
XREG!3 = store i64 %11, [32, i64] XREG!2[10]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[10]
%1 = Extract i32 of i64 %4 <31, 0>
%2 = i32 Add i32 %1, 1
%3 = Sext i32 %2 to i64
XREG!3 = store i64 %3, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[10]
%1 = Extract i32 of i64 %4 <31, 0>
%2 = i32 Add i32 %1, 1
%3 = Sext i32 %2 to i64
XREG!3 = store i64 %3, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[10]
%1 = Extract i32 of i64 %4 <31, 0>
%2 = i32 Add i32 %1, 1
%3 = Sext i32 %2 to i64
XREG!3 = store i64 %3, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[10]
%1 = Extract i32 of i64 %4 <31, 0>
%2 = i32 Add i32 %1, 1
%3 = Sext i32 %2 to i64
XREG!3 = store i64 %3, [32, i64] XREG!2[10]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_5.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Sge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4092 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%13 = load i64, [32, i64] XREG!2[15]
%14 = load i64, [32, i64] XREG!2[11]
%8 = i1 Sge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4092 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC!1
%12 = i64 Add i64 %11, %10
PC!6 = store i64 %12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %8 PC!6 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!5 = store i64 %7, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %4 PC!5 PC!2
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[15]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Sge i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!6 = store i64 -8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %3 -8 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!2, 4
PC!5 = store i64 %2, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %1 %2 PC!2
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[15]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Sge i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!6 = store i64 -8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %3 -8 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 0, 4
PC!5 = store i64 %2, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %3 -8 %2
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Sge i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!6 = store i64 -8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %2 -8 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!5 = store i64 4, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %2 -8 4
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Sge i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!6 = store i64 -8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %2 -8 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!5 = store i64 4, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!3 = phi ite %2 -8 4
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_6.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = Zext i3 %16 to i6
%18 = i6 Mul i6 %17, 8
store i6 %18, i6 tmp_bit_offset
%19 = Extract i3 of i64 %10 <2, 0>
%20 = i1 Ult i3 %19, -3
br i1 %20, label %bb1, label %bb2
bb1:
%21 = load i53, i53 mem_index
%22 = load i64, [9007199254740992, i64] MEM[%21]
store i64 %22, i64 tmp_dword
%23 = Extract i32 of i64 %12 <31, 0>
%24 = load i6, i6 tmp_bit_offset
%26 = load i64, i64 tmp_dword
%27 = Zext i32 %23 to i64
%28 = Zext i6 %24 to i64
%29 = Zext i6 %24 to i64
%30 = i64 Shl i64 4294967295, %29
%31 = i64 Xor i64 %30, -1
%32 = i64 And i64 %26, %31
%33 = i64 Shl i64 %27, %28
%25 = i64 Or i64 %32, %33
store i64 %25, i64 tmp_dword
%34 = load i64, i64 tmp_dword
%35 = load i53, i53 mem_index
store i64 %34, [9007199254740992, i64] MEM[%35]
br label %bb3
bb2:
%36 = load i53, i53 mem_index
%37 = i53 Add i53 %36, 1
%38 = load i64, [9007199254740992, i64] MEM[%37]
store i64 %38, i64 tmp_dword1
%39 = load i53, i53 mem_index
%40 = load i64, [9007199254740992, i64] MEM[%39]
store i64 %40, i64 tmp_dword2
%41 = Extract i2 of i64 %10 <1, 0>
%42 = i1 Eq i2 %41, 1
br i1 %42, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%43 = Extract i32 of i64 %12 <31, 0>
%44 = i32 Lshr i32 %43, 24
%45 = Extract i8 of i32 %44 <7, 0>
%47 = load i64, i64 tmp_dword1
%48 = Zext i8 %45 to i64
%49 = i64 And i64 %47, -256
%50 = i64 Shl i64 %48, 0
%46 = i64 Or i64 %49, %50
store i64 %46, i64 tmp_dword1
%51 = i32 Lshr i32 %43, 0
%52 = Extract i24 of i32 %51 <23, 0>
%54 = load i64, i64 tmp_dword2
%55 = Zext i24 %52 to i64
%56 = i64 And i64 %54, 1099511627775
%57 = i64 Shl i64 %55, 40
%53 = i64 Or i64 %56, %57
store i64 %53, i64 tmp_dword2
br label %bb6
bb5:
%58 = Extract i2 of i64 %10 <1, 0>
%59 = i1 Eq i2 %58, -2
br i1 %59, label %bb7, label %bb8
bb6:
%90 = load i64, i64 tmp_dword1
%91 = load i53, i53 mem_index
%92 = i53 Add i53 %91, 1
store i64 %90, [9007199254740992, i64] MEM[%92]
%93 = load i64, i64 tmp_dword2
%94 = load i53, i53 mem_index
store i64 %93, [9007199254740992, i64] MEM[%94]
br label %bb3
bb7:
%60 = Extract i32 of i64 %12 <31, 0>
%61 = i32 Lshr i32 %60, 16
%62 = Extract i16 of i32 %61 <15, 0>
%64 = load i64, i64 tmp_dword1
%65 = Zext i16 %62 to i64
%66 = i64 And i64 %64, -65536
%67 = i64 Shl i64 %65, 0
%63 = i64 Or i64 %66, %67
store i64 %63, i64 tmp_dword1
%68 = i32 Lshr i32 %60, 0
%69 = Extract i16 of i32 %68 <15, 0>
%71 = load i64, i64 tmp_dword2
%72 = Zext i16 %69 to i64
%73 = i64 And i64 %71, 281474976710655
%74 = i64 Shl i64 %72, 48
%70 = i64 Or i64 %73, %74
store i64 %70, i64 tmp_dword2
br label %bb6
bb8:
%75 = Extract i32 of i64 %12 <31, 0>
%76 = i32 Lshr i32 %75, 8
%77 = Extract i24 of i32 %76 <23, 0>
%79 = load i64, i64 tmp_dword1
%80 = Zext i24 %77 to i64
%81 = i64 And i64 %79, -16777216
%82 = i64 Shl i64 %80, 0
%78 = i64 Or i64 %81, %82
store i64 %78, i64 tmp_dword1
%83 = i32 Lshr i32 %75, 0
%84 = Extract i8 of i32 %83 <7, 0>
%86 = load i64, i64 tmp_dword2
%87 = Zext i8 %84 to i64
%88 = i64 And i64 %86, 72057594037927935
%89 = i64 Shl i64 %87, 56
%85 = i64 Or i64 %88, %89
store i64 %85, i64 tmp_dword2
br label %bb6
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG!2[12]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %13, i64 rs2_var!1
%12 = load i64, i64 rs2_var!2
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
mem_index!2 = store i53 %15, i53 mem_index!1
%16 = Extract i3 of i64 %10 <2, 0>
%17 = Zext i3 %16 to i6
%18 = i6 Mul i6 %17, 8
tmp_bit_offset!2 = store i6 %18, i6 tmp_bit_offset!1
%19 = Extract i3 of i64 %10 <2, 0>
%20 = i1 Ult i3 %19, -3
br i1 %20, label %bb1, label %bb2
bb1:
%21 = load i53, i53 mem_index!2
%22 = load i64, [9007199254740992, i64] MEM!1[%21]
tmp_dword!2 = store i64 %22, i64 tmp_dword!1
%23 = Extract i32 of i64 %12 <31, 0>
%24 = load i6, i6 tmp_bit_offset!2
%26 = load i64, i64 tmp_dword!2
%27 = Zext i32 %23 to i64
%28 = Zext i6 %24 to i64
%29 = Zext i6 %24 to i64
%30 = i64 Shl i64 4294967295, %29
%31 = i64 Xor i64 %30, -1
%32 = i64 And i64 %26, %31
%33 = i64 Shl i64 %27, %28
%25 = i64 Or i64 %32, %33
tmp_dword!3 = store i64 %25, i64 tmp_dword!2
%34 = load i64, i64 tmp_dword!3
%35 = load i53, i53 mem_index!2
MEM!4 = store i64 %34, [9007199254740992, i64] MEM!1[%35]
br label %bb3
bb2:
%36 = load i53, i53 mem_index!2
%37 = i53 Add i53 %36, 1
%38 = load i64, [9007199254740992, i64] MEM!1[%37]
tmp_dword1!2 = store i64 %38, i64 tmp_dword1!1
%39 = load i53, i53 mem_index!2
%40 = load i64, [9007199254740992, i64] MEM!1[%39]
tmp_dword2!2 = store i64 %40, i64 tmp_dword2!1
%41 = Extract i2 of i64 %10 <1, 0>
%42 = i1 Eq i2 %41, 1
br i1 %42, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %20 MEM!4 MEM!3
tmp_dword!4 = phi ite %20 tmp_dword!3 tmp_dword!1
tmp_dword2!7 = phi ite %20 tmp_dword2!1 tmp_dword2!6
tmp_dword1!7 = phi ite %20 tmp_dword1!1 tmp_dword1!6
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%43 = Extract i32 of i64 %12 <31, 0>
%44 = i32 Lshr i32 %43, 24
%45 = Extract i8 of i32 %44 <7, 0>
%47 = load i64, i64 tmp_dword1!2
%48 = Zext i8 %45 to i64
%49 = i64 And i64 %47, -256
%50 = i64 Shl i64 %48, 0
%46 = i64 Or i64 %49, %50
tmp_dword1!5 = store i64 %46, i64 tmp_dword1!2
%51 = i32 Lshr i32 %43, 0
%52 = Extract i24 of i32 %51 <23, 0>
%54 = load i64, i64 tmp_dword2!2
%55 = Zext i24 %52 to i64
%56 = i64 And i64 %54, 1099511627775
%57 = i64 Shl i64 %55, 40
%53 = i64 Or i64 %56, %57
tmp_dword2!5 = store i64 %53, i64 tmp_dword2!2
br label %bb6
bb5:
%58 = Extract i2 of i64 %10 <1, 0>
%59 = i1 Eq i2 %58, -2
br i1 %59, label %bb7, label %bb8
bb6:
tmp_dword2!6 = phi ite %42 tmp_dword2!5 ite %59 tmp_dword2!3 tmp_dword2!4
tmp_dword1!6 = phi ite %42 tmp_dword1!5 ite %59 tmp_dword1!3 tmp_dword1!4
%90 = load i64, i64 tmp_dword1!6
%91 = load i53, i53 mem_index!2
%92 = i53 Add i53 %91, 1
MEM!2 = store i64 %90, [9007199254740992, i64] MEM!1[%92]
%93 = load i64, i64 tmp_dword2!6
%94 = load i53, i53 mem_index!2
MEM!3 = store i64 %93, [9007199254740992, i64] MEM!2[%94]
br label %bb3
bb7:
%60 = Extract i32 of i64 %12 <31, 0>
%61 = i32 Lshr i32 %60, 16
%62 = Extract i16 of i32 %61 <15, 0>
%64 = load i64, i64 tmp_dword1!2
%65 = Zext i16 %62 to i64
%66 = i64 And i64 %64, -65536
%67 = i64 Shl i64 %65, 0
%63 = i64 Or i64 %66, %67
tmp_dword1!3 = store i64 %63, i64 tmp_dword1!2
%68 = i32 Lshr i32 %60, 0
%69 = Extract i16 of i32 %68 <15, 0>
%71 = load i64, i64 tmp_dword2!2
%72 = Zext i16 %69 to i64
%73 = i64 And i64 %71, 281474976710655
%74 = i64 Shl i64 %72, 48
%70 = i64 Or i64 %73, %74
tmp_dword2!3 = store i64 %70, i64 tmp_dword2!2
br label %bb6
bb8:
%75 = Extract i32 of i64 %12 <31, 0>
%76 = i32 Lshr i32 %75, 8
%77 = Extract i24 of i32 %76 <23, 0>
%79 = load i64, i64 tmp_dword1!2
%80 = Zext i24 %77 to i64
%81 = i64 And i64 %79, -16777216
%82 = i64 Shl i64 %80, 0
%78 = i64 Or i64 %81, %82
tmp_dword1!4 = store i64 %78, i64 tmp_dword1!2
%83 = i32 Lshr i32 %75, 0
%84 = Extract i8 of i32 %83 <7, 0>
%86 = load i64, i64 tmp_dword2!2
%87 = Zext i8 %84 to i64
%88 = i64 And i64 %86, 72057594037927935
%89 = i64 Shl i64 %87, 56
%85 = i64 Or i64 %88, %89
tmp_dword2!4 = store i64 %85, i64 tmp_dword2!2
br label %bb6
bb9:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb11
bb10:
br label %bb11
bb11:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = Zext i3 %6 to i6
%8 = i6 Mul i6 %7, 8
tmp_bit_offset!2 = store i6 %8, i6 tmp_bit_offset!1
%9 = Extract i3 of i64 %1 <2, 0>
%10 = i1 Ult i3 %9, -3
br i1 %10, label %bb1, label %bb2
bb1:
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!2 = store i64 %11, i64 tmp_dword!1
%12 = Extract i32 of i64 %3 <31, 0>
%14 = Zext i32 %12 to i64
%15 = Zext i6 %8 to i64
%16 = Zext i6 %8 to i64
%17 = i64 Shl i64 4294967295, %16
%18 = i64 Xor i64 %17, -1
%19 = i64 And i64 %11, %18
%20 = i64 Shl i64 %14, %15
%13 = i64 Or i64 %19, %20
tmp_dword!3 = store i64 %13, i64 tmp_dword!2
MEM!4 = store i64 %13, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%21 = i53 Add i53 %5, 1
%22 = load i64, [9007199254740992, i64] MEM!1[%21]
tmp_dword1!2 = store i64 %22, i64 tmp_dword1!1
%23 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i2 of i64 %1 <1, 0>
%25 = i1 Eq i2 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %10 MEM!4 MEM!3
tmp_dword!4 = phi ite %10 %13 tmp_dword!1
tmp_dword2!7 = phi ite %10 tmp_dword2!1 tmp_dword2!6
tmp_dword1!7 = phi ite %10 tmp_dword1!1 tmp_dword1!6
br label %bb6
bb4:
%26 = Extract i32 of i64 %3 <31, 0>
%27 = i32 Lshr i32 %26, 24
%28 = Extract i8 of i32 %27 <7, 0>
%30 = Zext i8 %28 to i64
%31 = i64 And i64 %22, -256
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!2
%33 = i32 Lshr i32 %26, 0
%34 = Extract i24 of i32 %33 <23, 0>
%36 = Zext i24 %34 to i64
%37 = i64 And i64 %23, 1099511627775
%38 = i64 Shl i64 %36, 40
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!2
br label %bb7
bb5:
%39 = Extract i2 of i64 %1 <1, 0>
%40 = i1 Eq i2 %39, -2
br i1 %40, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!6 = phi ite %25 %35 ite %40 %50 %63
tmp_dword1!6 = phi ite %25 %29 ite %40 %44 %57
%67 = i53 Add i53 %5, 1
MEM!2 = store i64 tmp_dword1!6, [9007199254740992, i64] MEM!1[%67]
MEM!3 = store i64 tmp_dword2!6, [9007199254740992, i64] MEM!2[%5]
br label %bb3
bb8:
%41 = Extract i32 of i64 %3 <31, 0>
%42 = i32 Lshr i32 %41, 16
%43 = Extract i16 of i32 %42 <15, 0>
%45 = Zext i16 %43 to i64
%46 = i64 And i64 %22, -65536
%47 = i64 Shl i64 %45, 0
%44 = i64 Or i64 %46, %47
tmp_dword1!3 = store i64 %44, i64 tmp_dword1!2
%48 = i32 Lshr i32 %41, 0
%49 = Extract i16 of i32 %48 <15, 0>
%51 = Zext i16 %49 to i64
%52 = i64 And i64 %23, 281474976710655
%53 = i64 Shl i64 %51, 48
%50 = i64 Or i64 %52, %53
tmp_dword2!3 = store i64 %50, i64 tmp_dword2!2
br label %bb7
bb9:
%54 = Extract i32 of i64 %3 <31, 0>
%55 = i32 Lshr i32 %54, 8
%56 = Extract i24 of i32 %55 <23, 0>
%58 = Zext i24 %56 to i64
%59 = i64 And i64 %22, -16777216
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!4 = store i64 %57, i64 tmp_dword1!2
%61 = i32 Lshr i32 %54, 0
%62 = Extract i8 of i32 %61 <7, 0>
%64 = Zext i8 %62 to i64
%65 = i64 And i64 %23, 72057594037927935
%66 = i64 Shl i64 %64, 56
%63 = i64 Or i64 %65, %66
tmp_dword2!4 = store i64 %63, i64 tmp_dword2!2
br label %bb7
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = Zext i3 %6 to i6
%8 = i6 Mul i6 %7, 8
tmp_bit_offset!2 = store i6 %8, i6 tmp_bit_offset!1
%9 = Extract i3 of i64 %1 <2, 0>
%10 = i1 Ult i3 %9, -3
br i1 %10, label %bb1, label %bb2
bb1:
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!2 = store i64 %11, i64 tmp_dword!1
%12 = Extract i32 of i64 %3 <31, 0>
%14 = Zext i32 %12 to i64
%15 = Zext i6 %8 to i64
%16 = Zext i6 %8 to i64
%17 = i64 Shl i64 4294967295, %16
%18 = i64 Xor i64 %17, -1
%19 = i64 And i64 %11, %18
%20 = i64 Shl i64 %14, %15
%13 = i64 Or i64 %19, %20
tmp_dword!3 = store i64 %13, i64 tmp_dword!2
MEM!4 = store i64 %13, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%21 = i53 Add i53 %5, 1
%22 = load i64, [9007199254740992, i64] MEM!1[%21]
tmp_dword1!2 = store i64 %22, i64 tmp_dword1!1
%23 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i2 of i64 %1 <1, 0>
%25 = i1 Eq i2 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %10 MEM!4 MEM!3
tmp_dword!4 = phi ite %10 %13 tmp_dword!1
tmp_dword2!7 = phi ite %10 tmp_dword2!1 tmp_dword2!6
tmp_dword1!7 = phi ite %10 tmp_dword1!1 tmp_dword1!6
br label %bb6
bb4:
%26 = Extract i32 of i64 %3 <31, 0>
%27 = i32 Lshr i32 %26, 24
%28 = Extract i8 of i32 %27 <7, 0>
%30 = Zext i8 %28 to i64
%31 = i64 And i64 %22, -256
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!2
%33 = i32 Lshr i32 %26, 0
%34 = Extract i24 of i32 %33 <23, 0>
%36 = Zext i24 %34 to i64
%37 = i64 And i64 %23, 1099511627775
%38 = i64 Shl i64 %36, 40
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!2
br label %bb7
bb5:
%39 = Extract i2 of i64 %1 <1, 0>
%40 = i1 Eq i2 %39, -2
br i1 %40, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!6 = phi ite %25 %35 ite %40 %50 %63
tmp_dword1!6 = phi ite %25 %29 ite %40 %44 %57
%67 = i53 Add i53 %5, 1
MEM!2 = store i64 tmp_dword1!6, [9007199254740992, i64] MEM!1[%67]
MEM!3 = store i64 tmp_dword2!6, [9007199254740992, i64] MEM!2[%5]
br label %bb3
bb8:
%41 = Extract i32 of i64 %3 <31, 0>
%42 = i32 Lshr i32 %41, 16
%43 = Extract i16 of i32 %42 <15, 0>
%45 = Zext i16 %43 to i64
%46 = i64 And i64 %22, -65536
%47 = i64 Shl i64 %45, 0
%44 = i64 Or i64 %46, %47
tmp_dword1!3 = store i64 %44, i64 tmp_dword1!2
%48 = i32 Lshr i32 %41, 0
%49 = Extract i16 of i32 %48 <15, 0>
%51 = Zext i16 %49 to i64
%52 = i64 And i64 %23, 281474976710655
%53 = i64 Shl i64 %51, 48
%50 = i64 Or i64 %52, %53
tmp_dword2!3 = store i64 %50, i64 tmp_dword2!2
br label %bb7
bb9:
%54 = Extract i32 of i64 %3 <31, 0>
%55 = i32 Lshr i32 %54, 8
%56 = Extract i24 of i32 %55 <23, 0>
%58 = Zext i24 %56 to i64
%59 = i64 And i64 %22, -16777216
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!4 = store i64 %57, i64 tmp_dword1!2
%61 = i32 Lshr i32 %54, 0
%62 = Extract i8 of i32 %61 <7, 0>
%64 = Zext i8 %62 to i64
%65 = i64 And i64 %23, 72057594037927935
%66 = i64 Shl i64 %64, 56
%63 = i64 Or i64 %65, %66
tmp_dword2!4 = store i64 %63, i64 tmp_dword2!2
br label %bb7
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = Zext i3 %6 to i6
%8 = i6 Mul i6 %7, 8
tmp_bit_offset!2 = store i6 %8, i6 tmp_bit_offset!1
%9 = Extract i3 of i64 %1 <2, 0>
%10 = i1 Ult i3 %9, -3
br i1 %10, label %bb1, label %bb2
bb1:
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!2 = store i64 %11, i64 tmp_dword!1
%12 = Extract i32 of i64 %3 <31, 0>
%14 = Zext i32 %12 to i64
%15 = Zext i6 %8 to i64
%16 = Zext i6 %8 to i64
%17 = i64 Shl i64 4294967295, %16
%18 = i64 Xor i64 %17, -1
%19 = i64 And i64 %11, %18
%20 = i64 Shl i64 %14, %15
%13 = i64 Or i64 %19, %20
tmp_dword!3 = store i64 %13, i64 tmp_dword!2
MEM!4 = store i64 %13, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%21 = i53 Add i53 %5, 1
%22 = load i64, [9007199254740992, i64] MEM!1[%21]
tmp_dword1!2 = store i64 %22, i64 tmp_dword1!1
%23 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i2 of i64 %1 <1, 0>
%25 = i1 Eq i2 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %10 MEM!4 MEM!3
tmp_dword!4 = phi ite %10 %13 tmp_dword!1
tmp_dword2!7 = phi ite %10 tmp_dword2!1 tmp_dword2!6
tmp_dword1!7 = phi ite %10 tmp_dword1!1 tmp_dword1!6
br label %bb6
bb4:
%26 = Extract i32 of i64 %3 <31, 0>
%27 = i32 Lshr i32 %26, 24
%28 = Extract i8 of i32 %27 <7, 0>
%30 = Zext i8 %28 to i64
%31 = i64 And i64 %22, -256
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!2
%33 = i32 Lshr i32 %26, 0
%34 = Extract i24 of i32 %33 <23, 0>
%36 = Zext i24 %34 to i64
%37 = i64 And i64 %23, 1099511627775
%38 = i64 Shl i64 %36, 40
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!2
br label %bb7
bb5:
%39 = Extract i2 of i64 %1 <1, 0>
%40 = i1 Eq i2 %39, -2
br i1 %40, label %bb8, label %bb9
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!6 = phi ite %25 %35 ite %40 %50 %63
tmp_dword1!6 = phi ite %25 %29 ite %40 %44 %57
%67 = i53 Add i53 %5, 1
MEM!2 = store i64 tmp_dword1!6, [9007199254740992, i64] MEM!1[%67]
MEM!3 = store i64 tmp_dword2!6, [9007199254740992, i64] MEM!2[%5]
br label %bb3
bb8:
%41 = Extract i32 of i64 %3 <31, 0>
%42 = i32 Lshr i32 %41, 16
%43 = Extract i16 of i32 %42 <15, 0>
%45 = Zext i16 %43 to i64
%46 = i64 And i64 %22, -65536
%47 = i64 Shl i64 %45, 0
%44 = i64 Or i64 %46, %47
tmp_dword1!3 = store i64 %44, i64 tmp_dword1!2
%48 = i32 Lshr i32 %41, 0
%49 = Extract i16 of i32 %48 <15, 0>
%51 = Zext i16 %49 to i64
%52 = i64 And i64 %23, 281474976710655
%53 = i64 Shl i64 %51, 48
%50 = i64 Or i64 %52, %53
tmp_dword2!3 = store i64 %50, i64 tmp_dword2!2
br label %bb7
bb9:
%54 = Extract i32 of i64 %3 <31, 0>
%55 = i32 Lshr i32 %54, 8
%56 = Extract i24 of i32 %55 <23, 0>
%58 = Zext i24 %56 to i64
%59 = i64 And i64 %22, -16777216
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!4 = store i64 %57, i64 tmp_dword1!2
%61 = i32 Lshr i32 %54, 0
%62 = Extract i8 of i32 %61 <7, 0>
%64 = Zext i8 %62 to i64
%65 = i64 And i64 %23, 72057594037927935
%66 = i64 Shl i64 %64, 56
%63 = i64 Or i64 %65, %66
tmp_dword2!4 = store i64 %63, i64 tmp_dword2!2
br label %bb7
bb10:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[12]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = Zext i3 %6 to i6
%8 = i6 Mul i6 %7, 8
tmp_bit_offset!2 = store i6 %8, i6 tmp_bit_offset!1
%9 = Extract i3 of i64 %1 <2, 0>
%10 = i1 Ult i3 %9, -3
br i1 %10, label %bb1, label %bb2
bb1:
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!2 = store i64 %11, i64 tmp_dword!1
%12 = Extract i32 of i64 %3 <31, 0>
%14 = Zext i32 %12 to i64
%15 = Zext i6 %8 to i64
%16 = Zext i6 %8 to i64
%17 = i64 Shl i64 4294967295, %16
%18 = i64 Xor i64 %17, -1
%19 = i64 And i64 %11, %18
%20 = i64 Shl i64 %14, %15
%13 = i64 Or i64 %19, %20
tmp_dword!3 = store i64 %13, i64 tmp_dword!2
MEM!4 = store i64 %13, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%21 = i53 Add i53 %5, 1
%22 = load i64, [9007199254740992, i64] MEM!1[%21]
tmp_dword1!2 = store i64 %22, i64 tmp_dword1!1
%23 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i2 of i64 %1 <1, 0>
%25 = i1 Eq i2 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %10 MEM!4 MEM!3
tmp_dword!4 = phi ite %10 %13 tmp_dword!1
tmp_dword2!7 = phi ite %10 tmp_dword2!1 tmp_dword2!6
tmp_dword1!7 = phi ite %10 tmp_dword1!1 tmp_dword1!6
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb4:
%26 = Extract i32 of i64 %3 <31, 0>
%27 = i32 Lshr i32 %26, 24
%28 = Extract i8 of i32 %27 <7, 0>
%30 = Zext i8 %28 to i64
%31 = i64 And i64 %22, -256
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!2
%33 = i32 Lshr i32 %26, 0
%34 = Extract i24 of i32 %33 <23, 0>
%36 = Zext i24 %34 to i64
%37 = i64 And i64 %23, 1099511627775
%38 = i64 Shl i64 %36, 40
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!2
br label %bb6
bb5:
%39 = Extract i2 of i64 %1 <1, 0>
%40 = i1 Eq i2 %39, -2
br i1 %40, label %bb7, label %bb8
bb6:
tmp_dword2!6 = phi ite %25 %35 ite %40 %50 %63
tmp_dword1!6 = phi ite %25 %29 ite %40 %44 %57
%67 = i53 Add i53 %5, 1
MEM!2 = store i64 tmp_dword1!6, [9007199254740992, i64] MEM!1[%67]
MEM!3 = store i64 tmp_dword2!6, [9007199254740992, i64] MEM!2[%5]
br label %bb3
bb7:
%41 = Extract i32 of i64 %3 <31, 0>
%42 = i32 Lshr i32 %41, 16
%43 = Extract i16 of i32 %42 <15, 0>
%45 = Zext i16 %43 to i64
%46 = i64 And i64 %22, -65536
%47 = i64 Shl i64 %45, 0
%44 = i64 Or i64 %46, %47
tmp_dword1!3 = store i64 %44, i64 tmp_dword1!2
%48 = i32 Lshr i32 %41, 0
%49 = Extract i16 of i32 %48 <15, 0>
%51 = Zext i16 %49 to i64
%52 = i64 And i64 %23, 281474976710655
%53 = i64 Shl i64 %51, 48
%50 = i64 Or i64 %52, %53
tmp_dword2!3 = store i64 %50, i64 tmp_dword2!2
br label %bb6
bb8:
%54 = Extract i32 of i64 %3 <31, 0>
%55 = i32 Lshr i32 %54, 8
%56 = Extract i24 of i32 %55 <23, 0>
%58 = Zext i24 %56 to i64
%59 = i64 And i64 %22, -16777216
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!4 = store i64 %57, i64 tmp_dword1!2
%61 = i32 Lshr i32 %54, 0
%62 = Extract i8 of i32 %61 <7, 0>
%64 = Zext i8 %62 to i64
%65 = i64 And i64 %23, 72057594037927935
%66 = i64 Shl i64 %64, 56
%63 = i64 Or i64 %65, %66
tmp_dword2!4 = store i64 %63, i64 tmp_dword2!2
br label %bb6

COMPILE
insn_7.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = load i64, i64 PC!1
%9 = i64 Add i64 %8, 4
XREG!3 = store i64 %9, [32, i64] XREG!2[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG!3[1]
%13 = i64 Add i64 %14, %12
PC!2 = store i64 %13, i64 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!3 = store i64 %7, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %4 PC!3 PC!2
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!3[1]
%3 = i64 Add i64 %4, 0
PC!2 = store i64 %3, i64 PC!1
%1 = i1 Eq i64 %3, 0
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %3, 4
PC!3 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 %2 %3
PC!5 = store i64 PC!4, i64 PC!4
ret void

Nested SCCP
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!3[1]
%3 = i64 Add i64 %4, 0
PC!2 = store i64 %3, i64 PC!1
%1 = i1 Eq i64 %3, 0
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 0, 4
PC!3 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 %2 %3
PC!5 = store i64 PC!4, i64 PC!4
ret void

SCCP forward
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%3 = load i64, [32, i64] XREG!3[1]
%2 = i64 Add i64 %3, 0
PC!2 = store i64 %2, i64 PC!1
%1 = i1 Eq i64 %2, 0
br i1 %1, label %bb1, label %bb2
bb1:
PC!3 = store i64 4, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 4 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

cherry
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%3 = load i64, [32, i64] XREG!3[1]
%2 = i64 Add i64 %3, 0
PC!2 = store i64 %2, i64 PC!1
%1 = i1 Eq i64 %2, 0
br i1 %1, label %bb1, label %bb2
bb1:
PC!3 = store i64 4, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 4 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

COMPILE
bb_0 func void []
bb0:
call void insn_0.action %0 ()
call void insn_1.action %0 ()
call void insn_2.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_0 func void []
bb0:
br label %bb6
bb1:
br label %bb12
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[10]
%10 = i64 Add i64 %11, %9
store i64 %10, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
br label %bb21
bb8:
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%19 = Sext i12 0 to i64
%21 = load i64, [32, i64] XREG[0]
%20 = i64 Add i64 %21, %19
store i64 %20, [32, i64] XREG[10]
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb9, label %bb10
bb9:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%12 = load i64, i64 PC
store i64 %12, i64 PC
br label %bb7
bb12:
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
store i64 0, [32, i64] XREG[0]
%23 = load i64, i64 PC
store i64 %23, i64 prev_pc
%34 = load i64, [32, i64] XREG[15]
%35 = load i64, [32, i64] XREG[11]
%29 = i1 Slt i64 %34, %35
br i1 %29, label %bb15, label %bb16
bb15:
%30 = Sext i12 8 to i64
%31 = i64 Shl i64 %30, 1
%32 = load i64, i64 PC
%33 = i64 Add i64 %32, %31
store i64 %33, i64 PC
br label %bb17
bb16:
br label %bb17
bb17:
%24 = load i64, i64 PC
%26 = load i64, i64 prev_pc
%25 = i1 Eq i64 %24, %26
br i1 %25, label %bb18, label %bb19
bb18:
%27 = load i64, i64 PC
%28 = i64 Add i64 %27, 4
store i64 %28, i64 PC
br label %bb20
bb19:
br label %bb20
bb20:
%22 = load i64, i64 PC
store i64 %22, i64 PC
br label %bb13
bb21:
br label %bb14

propagate
bb_0 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, 0
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%19 = load i64, [32, i64] XREG[0]
%18 = i64 Add i64 %19, 0
store i64 %18, [32, i64] XREG[10]
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb9:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%11 = load i64, i64 PC
store i64 %11, i64 PC
br label %bb12
bb12:
br label %bb13
bb13:
br label %bb14
bb14:
store i64 0, [32, i64] XREG[0]
%21 = load i64, i64 PC
store i64 %21, i64 prev_pc
%30 = load i64, [32, i64] XREG[15]
%31 = load i64, [32, i64] XREG[11]
%27 = i1 Slt i64 %30, %31
br i1 %27, label %bb15, label %bb16
bb15:
%28 = load i64, i64 PC
%29 = i64 Add i64 %28, 16
store i64 %29, i64 PC
br label %bb17
bb16:
br label %bb17
bb17:
%22 = load i64, i64 PC
%24 = load i64, i64 prev_pc
%23 = i1 Eq i64 %22, %24
br i1 %23, label %bb18, label %bb19
bb18:
%25 = load i64, i64 PC
%26 = i64 Add i64 %25, 4
store i64 %26, i64 PC
br label %bb20
bb19:
br label %bb20
bb20:
%20 = load i64, i64 PC
store i64 %20, i64 PC
br label %bb21
bb21:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_0 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, 0
store i64 %9, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%19 = load i64, [32, i64] XREG[0]
%18 = i64 Add i64 %19, 0
store i64 %18, [32, i64] XREG[10]
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%11 = load i64, i64 PC
store i64 %11, i64 PC
store i64 0, [32, i64] XREG[0]
%21 = load i64, i64 PC
store i64 %21, i64 prev_pc
%30 = load i64, [32, i64] XREG[15]
%31 = load i64, [32, i64] XREG[11]
%27 = i1 Slt i64 %30, %31
br i1 %27, label %bb7, label %bb8
bb7:
%28 = load i64, i64 PC
%29 = i64 Add i64 %28, 16
store i64 %29, i64 PC
br label %bb9
bb8:
br label %bb9
bb9:
%22 = load i64, i64 PC
%24 = load i64, i64 prev_pc
%23 = i1 Eq i64 %22, %24
br i1 %23, label %bb10, label %bb11
bb10:
%25 = load i64, i64 PC
%26 = i64 Add i64 %25, 4
store i64 %26, i64 PC
br label %bb12
bb11:
br label %bb12
bb12:
%20 = load i64, i64 PC
store i64 %20, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%10 = load i64, [32, i64] XREG!2[10]
%9 = i64 Add i64 %10, 0
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!2 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %5 PC!2 PC!1
%2 = load i64, i64 PC!3
PC!4 = store i64 %2, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%12 = load i64, i64 PC!4
prev_pc!3 = store i64 %12, i64 prev_pc!2
%19 = load i64, [32, i64] XREG!4[0]
%18 = i64 Add i64 %19, 0
XREG!5 = store i64 %18, [32, i64] XREG!4[10]
%13 = load i64, i64 PC!4
%15 = load i64, i64 prev_pc!3
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC!4
%17 = i64 Add i64 %16, 4
PC!5 = store i64 %17, i64 PC!4
br label %bb6
bb5:
br label %bb6
bb6:
PC!6 = phi ite %14 PC!5 PC!4
%11 = load i64, i64 PC!6
PC!7 = store i64 %11, i64 PC!6
XREG!6 = store i64 0, [32, i64] XREG!5[0]
%21 = load i64, i64 PC!7
prev_pc!4 = store i64 %21, i64 prev_pc!3
%30 = load i64, [32, i64] XREG!6[15]
%31 = load i64, [32, i64] XREG!6[11]
%27 = i1 Slt i64 %30, %31
br i1 %27, label %bb7, label %bb8
bb7:
%28 = load i64, i64 PC!7
%29 = i64 Add i64 %28, 16
PC!13 = store i64 %29, i64 PC!7
br label %bb9
bb8:
br label %bb9
bb9:
PC!8 = phi ite %27 PC!13 PC!7
%22 = load i64, i64 PC!8
%24 = load i64, i64 prev_pc!4
%23 = i1 Eq i64 %22, %24
br i1 %23, label %bb10, label %bb11
bb10:
%25 = load i64, i64 PC!8
%26 = i64 Add i64 %25, 4
PC!12 = store i64 %26, i64 PC!8
br label %bb12
bb11:
br label %bb12
bb12:
PC!9 = phi ite %23 PC!12 PC!8
%20 = load i64, i64 PC!9
PC!10 = store i64 %20, i64 PC!9
%1 = load i64, i64 PC!10
PC!11 = store i64 %1, i64 PC!10
ret void

SSA forward
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[10]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[0]
%5 = i64 Add i64 %6, 0
XREG!5 = store i64 %5, [32, i64] XREG!4[10]
br label %bb3
bb3:
%4 = i64 Add i64 PC!3, 4
PC!5 = store i64 %4, i64 PC!4
br label %bb4
bb4:
store i64 %4, i64 PC!6
PC!7 = store i64 PC!6, i64 PC!6
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!6, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[15]
%12 = load i64, [32, i64] XREG!6[11]
%9 = i1 Slt i64 %11, %12
br i1 %9, label %bb5, label %bb6
bb5:
%10 = i64 Add i64 PC!6, 16
PC!13 = store i64 %10, i64 PC!7
br label %bb7
bb6:
br label %bb7
bb7:
PC!8 = phi ite %9 %10 PC!6
%7 = i1 Eq i64 PC!8, PC!6
br i1 %7, label %bb8, label %bb9
bb8:
%8 = i64 Add i64 PC!8, 4
PC!12 = store i64 %8, i64 PC!8
br label %bb10
bb9:
br label %bb10
bb10:
PC!9 = phi ite %7 %8 PC!8
PC!10 = store i64 PC!9, i64 PC!9
PC!11 = store i64 PC!9, i64 PC!10
ret void

Nested SCCP
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[10]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[0]
%5 = i64 Add i64 %6, 0
XREG!5 = store i64 %5, [32, i64] XREG!4[10]
br label %bb3
bb3:
%4 = i64 Add i64 PC!3, 4
PC!5 = store i64 %4, i64 PC!4
br label %bb4
bb4:
store i64 %4, i64 PC!6
PC!7 = store i64 PC!6, i64 PC!6
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!6, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[15]
%12 = load i64, [32, i64] XREG!6[11]
%9 = i1 Slt i64 %11, %12
br i1 %9, label %bb5, label %bb6
bb5:
%10 = i64 Add i64 PC!6, 16
PC!13 = store i64 %10, i64 PC!7
br label %bb7
bb6:
br label %bb7
bb7:
PC!8 = phi ite %9 %10 PC!6
%7 = i1 Eq i64 PC!8, PC!6
br i1 %7, label %bb8, label %bb9
bb8:
%8 = i64 Add i64 PC!8, 4
PC!12 = store i64 %8, i64 PC!8
br label %bb10
bb9:
br label %bb10
bb10:
PC!9 = phi ite %9 %10 %8
PC!10 = store i64 PC!9, i64 PC!9
PC!11 = store i64 PC!9, i64 PC!10
ret void

SCCP forward
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[10]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[0]
%5 = i64 Add i64 %6, 0
XREG!5 = store i64 %5, [32, i64] XREG!4[10]
br label %bb3
bb3:
%4 = i64 Add i64 PC!3, 4
PC!5 = store i64 %4, i64 PC!4
br label %bb4
bb4:
store i64 %4, i64 PC!6
PC!7 = store i64 PC!6, i64 PC!6
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!6, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[15]
%12 = load i64, [32, i64] XREG!6[11]
%9 = i1 Slt i64 %11, %12
br i1 %9, label %bb5, label %bb6
bb5:
%10 = i64 Add i64 PC!6, 16
PC!13 = store i64 %10, i64 PC!7
br label %bb7
bb6:
br label %bb7
bb7:
PC!8 = phi ite %9 %10 PC!6
%7 = i1 Eq i64 PC!8, PC!6
br i1 %7, label %bb8, label %bb9
bb8:
%8 = i64 Add i64 PC!8, 4
PC!12 = store i64 %8, i64 PC!8
br label %bb10
bb9:
br label %bb10
bb10:
PC!9 = phi ite %9 %10 %8
PC!10 = store i64 PC!9, i64 PC!9
PC!11 = store i64 PC!9, i64 PC!10
ret void

cherry
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[10]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[0]
%5 = i64 Add i64 %6, 0
XREG!5 = store i64 %5, [32, i64] XREG!4[10]
%4 = i64 Add i64 PC!3, 4
PC!5 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!6
PC!7 = store i64 PC!6, i64 PC!6
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!6, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[15]
%12 = load i64, [32, i64] XREG!6[11]
%9 = i1 Slt i64 %11, %12
br i1 %9, label %bb1, label %bb2
bb1:
%10 = i64 Add i64 PC!6, 16
PC!13 = store i64 %10, i64 PC!7
br label %bb3
bb2:
br label %bb3
bb3:
PC!8 = phi ite %9 %10 PC!6
%7 = i1 Eq i64 PC!8, PC!6
br i1 %7, label %bb4, label %bb5
bb4:
%8 = i64 Add i64 PC!8, 4
PC!12 = store i64 %8, i64 PC!8
br label %bb6
bb5:
br label %bb6
bb6:
PC!9 = phi ite %9 %10 %8
PC!10 = store i64 PC!9, i64 PC!9
PC!11 = store i64 PC!9, i64 PC!10
ret void

bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[10]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[0]
%5 = i64 Add i64 %6, 0
XREG!5 = store i64 %5, [32, i64] XREG!4[10]
%4 = i64 Add i64 PC!3, 4
PC!5 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!6
PC!7 = store i64 PC!6, i64 PC!6
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!6, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[15]
%12 = load i64, [32, i64] XREG!6[11]
%9 = i1 Slt i64 %11, %12
br i1 %9, label %bb1, label %bb2
bb1:
%10 = i64 Add i64 PC!6, 16
PC!13 = store i64 %10, i64 PC!7
br label %bb3
bb2:
br label %bb3
bb3:
PC!8 = phi ite %9 %10 PC!6
%7 = i1 Eq i64 PC!8, PC!6
br i1 %7, label %bb4, label %bb5
bb4:
%8 = i64 Add i64 PC!8, 4
PC!12 = store i64 %8, i64 PC!8
br label %bb6
bb5:
br label %bb6
bb6:
PC!9 = phi ite %9 %10 %8
PC!10 = store i64 PC!9, i64 PC!9
PC!11 = store i64 PC!9, i64 PC!10
ret void

COMPILE
bb_1 func void []
bb0:
call void insn_3.action %0 ()
call void insn_4.action %0 ()
call void insn_5.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_1 func void []
bb0:
br label %bb6
bb1:
br label %bb12
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%9 = Extract i32 of i64 %13 <31, 0>
%14 = load i64, [32, i64] XREG[11]
%11 = Extract i32 of i64 %14 <31, 0>
%10 = i32 Sub i32 %9, %11
%12 = Sext i32 %10 to i64
store i64 %12, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
br label %bb21
bb8:
store i64 0, [32, i64] XREG[0]
%16 = load i64, i64 PC
store i64 %16, i64 prev_pc
%22 = Sext i12 1 to i32
%26 = load i64, [32, i64] XREG[10]
%23 = Extract i32 of i64 %26 <31, 0>
%24 = i32 Add i32 %23, %22
%25 = Sext i32 %24 to i64
store i64 %25, [32, i64] XREG[10]
%17 = load i64, i64 PC
%19 = load i64, i64 prev_pc
%18 = i1 Eq i64 %17, %19
br i1 %18, label %bb9, label %bb10
bb9:
%20 = load i64, i64 PC
%21 = i64 Add i64 %20, 4
store i64 %21, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%15 = load i64, i64 PC
store i64 %15, i64 PC
br label %bb7
bb12:
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
store i64 0, [32, i64] XREG[0]
%28 = load i64, i64 PC
store i64 %28, i64 prev_pc
%39 = load i64, [32, i64] XREG[15]
%40 = load i64, [32, i64] XREG[11]
%34 = i1 Sge i64 %39, %40
br i1 %34, label %bb15, label %bb16
bb15:
%35 = Sext i12 4092 to i64
%36 = i64 Shl i64 %35, 1
%37 = load i64, i64 PC
%38 = i64 Add i64 %37, %36
store i64 %38, i64 PC
br label %bb17
bb16:
br label %bb17
bb17:
%29 = load i64, i64 PC
%31 = load i64, i64 prev_pc
%30 = i1 Eq i64 %29, %31
br i1 %30, label %bb18, label %bb19
bb18:
%32 = load i64, i64 PC
%33 = i64 Add i64 %32, 4
store i64 %33, i64 PC
br label %bb20
bb19:
br label %bb20
bb20:
%27 = load i64, i64 PC
store i64 %27, i64 PC
br label %bb13
bb21:
br label %bb14

propagate
bb_1 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%9 = Extract i32 of i64 %13 <31, 0>
%14 = load i64, [32, i64] XREG[11]
%11 = Extract i32 of i64 %14 <31, 0>
%10 = i32 Sub i32 %9, %11
%12 = Sext i32 %10 to i64
store i64 %12, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%16 = load i64, i64 PC
store i64 %16, i64 prev_pc
%25 = load i64, [32, i64] XREG[10]
%22 = Extract i32 of i64 %25 <31, 0>
%23 = i32 Add i32 %22, 1
%24 = Sext i32 %23 to i64
store i64 %24, [32, i64] XREG[10]
%17 = load i64, i64 PC
%19 = load i64, i64 prev_pc
%18 = i1 Eq i64 %17, %19
br i1 %18, label %bb9, label %bb10
bb9:
%20 = load i64, i64 PC
%21 = i64 Add i64 %20, 4
store i64 %21, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%15 = load i64, i64 PC
store i64 %15, i64 PC
br label %bb12
bb12:
br label %bb13
bb13:
br label %bb14
bb14:
store i64 0, [32, i64] XREG[0]
%27 = load i64, i64 PC
store i64 %27, i64 prev_pc
%36 = load i64, [32, i64] XREG[15]
%37 = load i64, [32, i64] XREG[11]
%33 = i1 Sge i64 %36, %37
br i1 %33, label %bb15, label %bb16
bb15:
%34 = load i64, i64 PC
%35 = i64 Add i64 %34, -8
store i64 %35, i64 PC
br label %bb17
bb16:
br label %bb17
bb17:
%28 = load i64, i64 PC
%30 = load i64, i64 prev_pc
%29 = i1 Eq i64 %28, %30
br i1 %29, label %bb18, label %bb19
bb18:
%31 = load i64, i64 PC
%32 = i64 Add i64 %31, 4
store i64 %32, i64 PC
br label %bb20
bb19:
br label %bb20
bb20:
%26 = load i64, i64 PC
store i64 %26, i64 PC
br label %bb21
bb21:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_1 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%13 = load i64, [32, i64] XREG[15]
%9 = Extract i32 of i64 %13 <31, 0>
%14 = load i64, [32, i64] XREG[11]
%11 = Extract i32 of i64 %14 <31, 0>
%10 = i32 Sub i32 %9, %11
%12 = Sext i32 %10 to i64
store i64 %12, [32, i64] XREG[15]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%16 = load i64, i64 PC
store i64 %16, i64 prev_pc
%25 = load i64, [32, i64] XREG[10]
%22 = Extract i32 of i64 %25 <31, 0>
%23 = i32 Add i32 %22, 1
%24 = Sext i32 %23 to i64
store i64 %24, [32, i64] XREG[10]
%17 = load i64, i64 PC
%19 = load i64, i64 prev_pc
%18 = i1 Eq i64 %17, %19
br i1 %18, label %bb4, label %bb5
bb4:
%20 = load i64, i64 PC
%21 = i64 Add i64 %20, 4
store i64 %21, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%15 = load i64, i64 PC
store i64 %15, i64 PC
store i64 0, [32, i64] XREG[0]
%27 = load i64, i64 PC
store i64 %27, i64 prev_pc
%36 = load i64, [32, i64] XREG[15]
%37 = load i64, [32, i64] XREG[11]
%33 = i1 Sge i64 %36, %37
br i1 %33, label %bb7, label %bb8
bb7:
%34 = load i64, i64 PC
%35 = i64 Add i64 %34, -8
store i64 %35, i64 PC
br label %bb9
bb8:
br label %bb9
bb9:
%28 = load i64, i64 PC
%30 = load i64, i64 prev_pc
%29 = i1 Eq i64 %28, %30
br i1 %29, label %bb10, label %bb11
bb10:
%31 = load i64, i64 PC
%32 = i64 Add i64 %31, 4
store i64 %32, i64 PC
br label %bb12
bb11:
br label %bb12
bb12:
%26 = load i64, i64 PC
store i64 %26, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%13 = load i64, [32, i64] XREG!2[15]
%9 = Extract i32 of i64 %13 <31, 0>
%14 = load i64, [32, i64] XREG!2[11]
%11 = Extract i32 of i64 %14 <31, 0>
%10 = i32 Sub i32 %9, %11
%12 = Sext i32 %10 to i64
XREG!3 = store i64 %12, [32, i64] XREG!2[15]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!13 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %5 PC!13 PC!1
%2 = load i64, i64 PC!2
PC!3 = store i64 %2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%16 = load i64, i64 PC!3
prev_pc!3 = store i64 %16, i64 prev_pc!2
%25 = load i64, [32, i64] XREG!4[10]
%22 = Extract i32 of i64 %25 <31, 0>
%23 = i32 Add i32 %22, 1
%24 = Sext i32 %23 to i64
XREG!5 = store i64 %24, [32, i64] XREG!4[10]
%17 = load i64, i64 PC!3
%19 = load i64, i64 prev_pc!3
%18 = i1 Eq i64 %17, %19
br i1 %18, label %bb4, label %bb5
bb4:
%20 = load i64, i64 PC!3
%21 = i64 Add i64 %20, 4
PC!12 = store i64 %21, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %18 PC!12 PC!3
%15 = load i64, i64 PC!4
PC!5 = store i64 %15, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
%27 = load i64, i64 PC!5
prev_pc!4 = store i64 %27, i64 prev_pc!3
%36 = load i64, [32, i64] XREG!6[15]
%37 = load i64, [32, i64] XREG!6[11]
%33 = i1 Sge i64 %36, %37
br i1 %33, label %bb7, label %bb8
bb7:
%34 = load i64, i64 PC!5
%35 = i64 Add i64 %34, -8
PC!11 = store i64 %35, i64 PC!5
br label %bb9
bb8:
br label %bb9
bb9:
PC!6 = phi ite %33 PC!11 PC!5
%28 = load i64, i64 PC!6
%30 = load i64, i64 prev_pc!4
%29 = i1 Eq i64 %28, %30
br i1 %29, label %bb10, label %bb11
bb10:
%31 = load i64, i64 PC!6
%32 = i64 Add i64 %31, 4
PC!7 = store i64 %32, i64 PC!6
br label %bb12
bb11:
br label %bb12
bb12:
PC!8 = phi ite %29 PC!7 PC!6
%26 = load i64, i64 PC!8
PC!9 = store i64 %26, i64 PC!8
%1 = load i64, i64 PC!9
PC!10 = store i64 %1, i64 PC!9
ret void

SSA forward
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%6 = load i64, [32, i64] XREG!2[15]
%2 = Extract i32 of i64 %6 <31, 0>
%7 = load i64, [32, i64] XREG!2[11]
%4 = Extract i32 of i64 %7 <31, 0>
%3 = i32 Sub i32 %2, %4
%5 = Sext i32 %3 to i64
XREG!3 = store i64 %5, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!13 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%12 = load i64, [32, i64] XREG!4[10]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, 1
%11 = Sext i32 %10 to i64
XREG!5 = store i64 %11, [32, i64] XREG!4[10]
br label %bb3
bb3:
%8 = i64 Add i64 PC!2, 4
PC!12 = store i64 %8, i64 PC!3
br label %bb4
bb4:
store i64 %8, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%17 = load i64, [32, i64] XREG!6[15]
%18 = load i64, [32, i64] XREG!6[11]
%15 = i1 Sge i64 %17, %18
br i1 %15, label %bb5, label %bb6
bb5:
%16 = i64 Add i64 PC!4, -8
PC!11 = store i64 %16, i64 PC!5
br label %bb7
bb6:
br label %bb7
bb7:
PC!6 = phi ite %15 %16 PC!4
%13 = i1 Eq i64 PC!6, PC!4
br i1 %13, label %bb8, label %bb9
bb8:
%14 = i64 Add i64 PC!6, 4
PC!7 = store i64 %14, i64 PC!6
br label %bb10
bb9:
br label %bb10
bb10:
PC!8 = phi ite %13 %14 PC!6
PC!9 = store i64 PC!8, i64 PC!8
PC!10 = store i64 PC!8, i64 PC!9
ret void

Nested SCCP
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%6 = load i64, [32, i64] XREG!2[15]
%2 = Extract i32 of i64 %6 <31, 0>
%7 = load i64, [32, i64] XREG!2[11]
%4 = Extract i32 of i64 %7 <31, 0>
%3 = i32 Sub i32 %2, %4
%5 = Sext i32 %3 to i64
XREG!3 = store i64 %5, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!13 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%12 = load i64, [32, i64] XREG!4[10]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, 1
%11 = Sext i32 %10 to i64
XREG!5 = store i64 %11, [32, i64] XREG!4[10]
br label %bb3
bb3:
%8 = i64 Add i64 PC!2, 4
PC!12 = store i64 %8, i64 PC!3
br label %bb4
bb4:
store i64 %8, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%17 = load i64, [32, i64] XREG!6[15]
%18 = load i64, [32, i64] XREG!6[11]
%15 = i1 Sge i64 %17, %18
br i1 %15, label %bb5, label %bb6
bb5:
%16 = i64 Add i64 PC!4, -8
PC!11 = store i64 %16, i64 PC!5
br label %bb7
bb6:
br label %bb7
bb7:
PC!6 = phi ite %15 %16 PC!4
%13 = i1 Eq i64 PC!6, PC!4
br i1 %13, label %bb8, label %bb9
bb8:
%14 = i64 Add i64 PC!6, 4
PC!7 = store i64 %14, i64 PC!6
br label %bb10
bb9:
br label %bb10
bb10:
PC!8 = phi ite %15 %16 %14
PC!9 = store i64 PC!8, i64 PC!8
PC!10 = store i64 PC!8, i64 PC!9
ret void

SCCP forward
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%6 = load i64, [32, i64] XREG!2[15]
%2 = Extract i32 of i64 %6 <31, 0>
%7 = load i64, [32, i64] XREG!2[11]
%4 = Extract i32 of i64 %7 <31, 0>
%3 = i32 Sub i32 %2, %4
%5 = Sext i32 %3 to i64
XREG!3 = store i64 %5, [32, i64] XREG!2[15]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!13 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%12 = load i64, [32, i64] XREG!4[10]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, 1
%11 = Sext i32 %10 to i64
XREG!5 = store i64 %11, [32, i64] XREG!4[10]
br label %bb3
bb3:
%8 = i64 Add i64 PC!2, 4
PC!12 = store i64 %8, i64 PC!3
br label %bb4
bb4:
store i64 %8, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%17 = load i64, [32, i64] XREG!6[15]
%18 = load i64, [32, i64] XREG!6[11]
%15 = i1 Sge i64 %17, %18
br i1 %15, label %bb5, label %bb6
bb5:
%16 = i64 Add i64 PC!4, -8
PC!11 = store i64 %16, i64 PC!5
br label %bb7
bb6:
br label %bb7
bb7:
PC!6 = phi ite %15 %16 PC!4
%13 = i1 Eq i64 PC!6, PC!4
br i1 %13, label %bb8, label %bb9
bb8:
%14 = i64 Add i64 PC!6, 4
PC!7 = store i64 %14, i64 PC!6
br label %bb10
bb9:
br label %bb10
bb10:
PC!8 = phi ite %15 %16 %14
PC!9 = store i64 PC!8, i64 PC!8
PC!10 = store i64 PC!8, i64 PC!9
ret void

cherry
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%6 = load i64, [32, i64] XREG!2[15]
%2 = Extract i32 of i64 %6 <31, 0>
%7 = load i64, [32, i64] XREG!2[11]
%4 = Extract i32 of i64 %7 <31, 0>
%3 = i32 Sub i32 %2, %4
%5 = Sext i32 %3 to i64
XREG!3 = store i64 %5, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!13 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%12 = load i64, [32, i64] XREG!4[10]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, 1
%11 = Sext i32 %10 to i64
XREG!5 = store i64 %11, [32, i64] XREG!4[10]
%8 = i64 Add i64 PC!2, 4
PC!12 = store i64 %8, i64 PC!3
store i64 %8, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%17 = load i64, [32, i64] XREG!6[15]
%18 = load i64, [32, i64] XREG!6[11]
%15 = i1 Sge i64 %17, %18
br i1 %15, label %bb1, label %bb2
bb1:
%16 = i64 Add i64 PC!4, -8
PC!11 = store i64 %16, i64 PC!5
br label %bb3
bb2:
br label %bb3
bb3:
PC!6 = phi ite %15 %16 PC!4
%13 = i1 Eq i64 PC!6, PC!4
br i1 %13, label %bb4, label %bb5
bb4:
%14 = i64 Add i64 PC!6, 4
PC!7 = store i64 %14, i64 PC!6
br label %bb6
bb5:
br label %bb6
bb6:
PC!8 = phi ite %15 %16 %14
PC!9 = store i64 PC!8, i64 PC!8
PC!10 = store i64 PC!8, i64 PC!9
ret void

bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%6 = load i64, [32, i64] XREG!2[15]
%2 = Extract i32 of i64 %6 <31, 0>
%7 = load i64, [32, i64] XREG!2[11]
%4 = Extract i32 of i64 %7 <31, 0>
%3 = i32 Sub i32 %2, %4
%5 = Sext i32 %3 to i64
XREG!3 = store i64 %5, [32, i64] XREG!2[15]
%1 = i64 Add i64 PC!1, 4
PC!13 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%12 = load i64, [32, i64] XREG!4[10]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, 1
%11 = Sext i32 %10 to i64
XREG!5 = store i64 %11, [32, i64] XREG!4[10]
%8 = i64 Add i64 PC!2, 4
PC!12 = store i64 %8, i64 PC!3
store i64 %8, i64 PC!4
PC!5 = store i64 PC!4, i64 PC!4
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!4, i64 prev_pc!3
%17 = load i64, [32, i64] XREG!6[15]
%18 = load i64, [32, i64] XREG!6[11]
%15 = i1 Sge i64 %17, %18
br i1 %15, label %bb1, label %bb2
bb1:
%16 = i64 Add i64 PC!4, -8
PC!11 = store i64 %16, i64 PC!5
br label %bb3
bb2:
br label %bb3
bb3:
PC!6 = phi ite %15 %16 PC!4
%13 = i1 Eq i64 PC!6, PC!4
br i1 %13, label %bb4, label %bb5
bb4:
%14 = i64 Add i64 PC!6, 4
PC!7 = store i64 %14, i64 PC!6
br label %bb6
bb5:
br label %bb6
bb6:
PC!8 = phi ite %15 %16 %14
PC!9 = store i64 PC!8, i64 PC!8
PC!10 = store i64 PC!8, i64 PC!9
ret void

COMPILE
bb_2 func void []
bb0:
call void insn_6.action %0 ()
call void insn_7.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_2 func void []
bb0:
br label %bb14
bb1:
br label %bb20
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 0 to i64
%12 = load i64, [32, i64] XREG[12]
%10 = i64 Add i64 %12, %9
store i64 %10, i64 tmp_address
%11 = load i64, i64 tmp_address
%14 = load i64, [32, i64] XREG[15]
store i64 %14, i64 rs2_var
%13 = load i64, i64 rs2_var
%15 = i64 Lshr i64 %11, 3
%16 = Extract i53 of i64 %15 <52, 0>
store i53 %16, i53 mem_index
%17 = Extract i3 of i64 %11 <2, 0>
%18 = Zext i3 %17 to i6
%19 = i6 Mul i6 %18, 8
store i6 %19, i6 tmp_bit_offset
%20 = Extract i3 of i64 %11 <2, 0>
%21 = i1 Ult i3 %20, -3
br i1 %21, label %bb3, label %bb4
bb3:
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword
%24 = Extract i32 of i64 %13 <31, 0>
%25 = load i6, i6 tmp_bit_offset
%27 = load i64, i64 tmp_dword
%28 = Zext i32 %24 to i64
%29 = Zext i6 %25 to i64
%30 = Zext i6 %25 to i64
%31 = i64 Shl i64 4294967295, %30
%32 = i64 Xor i64 %31, -1
%33 = i64 And i64 %27, %32
%34 = i64 Shl i64 %28, %29
%26 = i64 Or i64 %33, %34
store i64 %26, i64 tmp_dword
%35 = load i64, i64 tmp_dword
%36 = load i53, i53 mem_index
store i64 %35, [9007199254740992, i64] MEM[%36]
br label %bb5
bb4:
%37 = load i53, i53 mem_index
%38 = i53 Add i53 %37, 1
%39 = load i64, [9007199254740992, i64] MEM[%38]
store i64 %39, i64 tmp_dword1
%40 = load i53, i53 mem_index
%41 = load i64, [9007199254740992, i64] MEM[%40]
store i64 %41, i64 tmp_dword2
%42 = Extract i2 of i64 %11 <1, 0>
%43 = i1 Eq i2 %42, 1
br i1 %43, label %bb6, label %bb7
bb5:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb11, label %bb12
bb6:
%44 = Extract i32 of i64 %13 <31, 0>
%45 = i32 Lshr i32 %44, 24
%46 = Extract i8 of i32 %45 <7, 0>
%48 = load i64, i64 tmp_dword1
%49 = Zext i8 %46 to i64
%50 = i64 And i64 %48, -256
%51 = i64 Shl i64 %49, 0
%47 = i64 Or i64 %50, %51
store i64 %47, i64 tmp_dword1
%52 = i32 Lshr i32 %44, 0
%53 = Extract i24 of i32 %52 <23, 0>
%55 = load i64, i64 tmp_dword2
%56 = Zext i24 %53 to i64
%57 = i64 And i64 %55, 1099511627775
%58 = i64 Shl i64 %56, 40
%54 = i64 Or i64 %57, %58
store i64 %54, i64 tmp_dword2
br label %bb8
bb7:
%59 = Extract i2 of i64 %11 <1, 0>
%60 = i1 Eq i2 %59, -2
br i1 %60, label %bb9, label %bb10
bb8:
%91 = load i64, i64 tmp_dword1
%92 = load i53, i53 mem_index
%93 = i53 Add i53 %92, 1
store i64 %91, [9007199254740992, i64] MEM[%93]
%94 = load i64, i64 tmp_dword2
%95 = load i53, i53 mem_index
store i64 %94, [9007199254740992, i64] MEM[%95]
br label %bb5
bb9:
%61 = Extract i32 of i64 %13 <31, 0>
%62 = i32 Lshr i32 %61, 16
%63 = Extract i16 of i32 %62 <15, 0>
%65 = load i64, i64 tmp_dword1
%66 = Zext i16 %63 to i64
%67 = i64 And i64 %65, -65536
%68 = i64 Shl i64 %66, 0
%64 = i64 Or i64 %67, %68
store i64 %64, i64 tmp_dword1
%69 = i32 Lshr i32 %61, 0
%70 = Extract i16 of i32 %69 <15, 0>
%72 = load i64, i64 tmp_dword2
%73 = Zext i16 %70 to i64
%74 = i64 And i64 %72, 281474976710655
%75 = i64 Shl i64 %73, 48
%71 = i64 Or i64 %74, %75
store i64 %71, i64 tmp_dword2
br label %bb8
bb10:
%76 = Extract i32 of i64 %13 <31, 0>
%77 = i32 Lshr i32 %76, 8
%78 = Extract i24 of i32 %77 <23, 0>
%80 = load i64, i64 tmp_dword1
%81 = Zext i24 %78 to i64
%82 = i64 And i64 %80, -16777216
%83 = i64 Shl i64 %81, 0
%79 = i64 Or i64 %82, %83
store i64 %79, i64 tmp_dword1
%84 = i32 Lshr i32 %76, 0
%85 = Extract i8 of i32 %84 <7, 0>
%87 = load i64, i64 tmp_dword2
%88 = Zext i8 %85 to i64
%89 = i64 And i64 %87, 72057594037927935
%90 = i64 Shl i64 %88, 56
%86 = i64 Or i64 %89, %90
store i64 %86, i64 tmp_dword2
br label %bb8
bb11:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb13
bb12:
br label %bb13
bb13:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb14:
br label %bb2
bb15:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb16:
store i64 0, [32, i64] XREG[0]
%97 = load i64, i64 PC
store i64 %97, i64 prev_pc
%103 = load i64, i64 PC
%104 = i64 Add i64 %103, 4
store i64 %104, [32, i64] XREG[0]
%105 = Sext i12 0 to i64
%106 = i64 Lshr i64 %105, 1
%107 = i64 Shl i64 %106, 1
%109 = load i64, [32, i64] XREG[1]
%108 = i64 Add i64 %109, %107
store i64 %108, i64 PC
%98 = load i64, i64 PC
%100 = load i64, i64 prev_pc
%99 = i1 Eq i64 %98, %100
br i1 %99, label %bb17, label %bb18
bb17:
%101 = load i64, i64 PC
%102 = i64 Add i64 %101, 4
store i64 %102, i64 PC
br label %bb19
bb18:
br label %bb19
bb19:
%96 = load i64, i64 PC
store i64 %96, i64 PC
br label %bb15
bb20:
br label %bb16

propagate
bb_2 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, 0
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = Zext i3 %16 to i6
%18 = i6 Mul i6 %17, 8
store i6 %18, i6 tmp_bit_offset
%19 = Extract i3 of i64 %10 <2, 0>
%20 = i1 Ult i3 %19, -3
br i1 %20, label %bb3, label %bb4
bb3:
%21 = load i53, i53 mem_index
%22 = load i64, [9007199254740992, i64] MEM[%21]
store i64 %22, i64 tmp_dword
%23 = Extract i32 of i64 %12 <31, 0>
%24 = load i6, i6 tmp_bit_offset
%26 = load i64, i64 tmp_dword
%27 = Zext i32 %23 to i64
%28 = Zext i6 %24 to i64
%29 = Zext i6 %24 to i64
%30 = i64 Shl i64 4294967295, %29
%31 = i64 Xor i64 %30, -1
%32 = i64 And i64 %26, %31
%33 = i64 Shl i64 %27, %28
%25 = i64 Or i64 %32, %33
store i64 %25, i64 tmp_dword
%34 = load i64, i64 tmp_dword
%35 = load i53, i53 mem_index
store i64 %34, [9007199254740992, i64] MEM[%35]
br label %bb5
bb4:
%36 = load i53, i53 mem_index
%37 = i53 Add i53 %36, 1
%38 = load i64, [9007199254740992, i64] MEM[%37]
store i64 %38, i64 tmp_dword1
%39 = load i53, i53 mem_index
%40 = load i64, [9007199254740992, i64] MEM[%39]
store i64 %40, i64 tmp_dword2
%41 = Extract i2 of i64 %10 <1, 0>
%42 = i1 Eq i2 %41, 1
br i1 %42, label %bb6, label %bb7
bb5:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb8, label %bb9
bb6:
%43 = Extract i32 of i64 %12 <31, 0>
%44 = i32 Lshr i32 %43, 24
%45 = Extract i8 of i32 %44 <7, 0>
%47 = load i64, i64 tmp_dword1
%48 = Zext i8 %45 to i64
%49 = i64 And i64 %47, -256
%50 = i64 Shl i64 %48, 0
%46 = i64 Or i64 %49, %50
store i64 %46, i64 tmp_dword1
%51 = i32 Lshr i32 %43, 0
%52 = Extract i24 of i32 %51 <23, 0>
%54 = load i64, i64 tmp_dword2
%55 = Zext i24 %52 to i64
%56 = i64 And i64 %54, 1099511627775
%57 = i64 Shl i64 %55, 40
%53 = i64 Or i64 %56, %57
store i64 %53, i64 tmp_dword2
br label %bb10
bb7:
%58 = Extract i2 of i64 %10 <1, 0>
%59 = i1 Eq i2 %58, -2
br i1 %59, label %bb11, label %bb12
bb8:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb13
bb9:
br label %bb13
bb10:
%90 = load i64, i64 tmp_dword1
%91 = load i53, i53 mem_index
%92 = i53 Add i53 %91, 1
store i64 %90, [9007199254740992, i64] MEM[%92]
%93 = load i64, i64 tmp_dword2
%94 = load i53, i53 mem_index
store i64 %93, [9007199254740992, i64] MEM[%94]
br label %bb5
bb11:
%60 = Extract i32 of i64 %12 <31, 0>
%61 = i32 Lshr i32 %60, 16
%62 = Extract i16 of i32 %61 <15, 0>
%64 = load i64, i64 tmp_dword1
%65 = Zext i16 %62 to i64
%66 = i64 And i64 %64, -65536
%67 = i64 Shl i64 %65, 0
%63 = i64 Or i64 %66, %67
store i64 %63, i64 tmp_dword1
%68 = i32 Lshr i32 %60, 0
%69 = Extract i16 of i32 %68 <15, 0>
%71 = load i64, i64 tmp_dword2
%72 = Zext i16 %69 to i64
%73 = i64 And i64 %71, 281474976710655
%74 = i64 Shl i64 %72, 48
%70 = i64 Or i64 %73, %74
store i64 %70, i64 tmp_dword2
br label %bb10
bb12:
%75 = Extract i32 of i64 %12 <31, 0>
%76 = i32 Lshr i32 %75, 8
%77 = Extract i24 of i32 %76 <23, 0>
%79 = load i64, i64 tmp_dword1
%80 = Zext i24 %77 to i64
%81 = i64 And i64 %79, -16777216
%82 = i64 Shl i64 %80, 0
%78 = i64 Or i64 %81, %82
store i64 %78, i64 tmp_dword1
%83 = i32 Lshr i32 %75, 0
%84 = Extract i8 of i32 %83 <7, 0>
%86 = load i64, i64 tmp_dword2
%87 = Zext i8 %84 to i64
%88 = i64 And i64 %86, 72057594037927935
%89 = i64 Shl i64 %87, 56
%85 = i64 Or i64 %88, %89
store i64 %85, i64 tmp_dword2
br label %bb10
bb13:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb14
bb14:
br label %bb15
bb15:
br label %bb16
bb16:
store i64 0, [32, i64] XREG[0]
%96 = load i64, i64 PC
store i64 %96, i64 prev_pc
%102 = load i64, i64 PC
%103 = i64 Add i64 %102, 4
store i64 %103, [32, i64] XREG[0]
%105 = load i64, [32, i64] XREG[1]
%104 = i64 Add i64 %105, 0
store i64 %104, i64 PC
%97 = load i64, i64 PC
%99 = load i64, i64 prev_pc
%98 = i1 Eq i64 %97, %99
br i1 %98, label %bb17, label %bb18
bb17:
%100 = load i64, i64 PC
%101 = i64 Add i64 %100, 4
store i64 %101, i64 PC
br label %bb19
bb18:
br label %bb19
bb19:
%95 = load i64, i64 PC
store i64 %95, i64 PC
br label %bb20
bb20:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_2 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%11 = load i64, [32, i64] XREG[12]
%9 = i64 Add i64 %11, 0
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[15]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = Zext i3 %16 to i6
%18 = i6 Mul i6 %17, 8
store i6 %18, i6 tmp_bit_offset
%19 = Extract i3 of i64 %10 <2, 0>
%20 = i1 Ult i3 %19, -3
br i1 %20, label %bb1, label %bb2
bb1:
%21 = load i53, i53 mem_index
%22 = load i64, [9007199254740992, i64] MEM[%21]
store i64 %22, i64 tmp_dword
%23 = Extract i32 of i64 %12 <31, 0>
%24 = load i6, i6 tmp_bit_offset
%26 = load i64, i64 tmp_dword
%27 = Zext i32 %23 to i64
%28 = Zext i6 %24 to i64
%29 = Zext i6 %24 to i64
%30 = i64 Shl i64 4294967295, %29
%31 = i64 Xor i64 %30, -1
%32 = i64 And i64 %26, %31
%33 = i64 Shl i64 %27, %28
%25 = i64 Or i64 %32, %33
store i64 %25, i64 tmp_dword
%34 = load i64, i64 tmp_dword
%35 = load i53, i53 mem_index
store i64 %34, [9007199254740992, i64] MEM[%35]
br label %bb3
bb2:
%36 = load i53, i53 mem_index
%37 = i53 Add i53 %36, 1
%38 = load i64, [9007199254740992, i64] MEM[%37]
store i64 %38, i64 tmp_dword1
%39 = load i53, i53 mem_index
%40 = load i64, [9007199254740992, i64] MEM[%39]
store i64 %40, i64 tmp_dword2
%41 = Extract i2 of i64 %10 <1, 0>
%42 = i1 Eq i2 %41, 1
br i1 %42, label %bb4, label %bb5
bb3:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb6, label %bb7
bb4:
%43 = Extract i32 of i64 %12 <31, 0>
%44 = i32 Lshr i32 %43, 24
%45 = Extract i8 of i32 %44 <7, 0>
%47 = load i64, i64 tmp_dword1
%48 = Zext i8 %45 to i64
%49 = i64 And i64 %47, -256
%50 = i64 Shl i64 %48, 0
%46 = i64 Or i64 %49, %50
store i64 %46, i64 tmp_dword1
%51 = i32 Lshr i32 %43, 0
%52 = Extract i24 of i32 %51 <23, 0>
%54 = load i64, i64 tmp_dword2
%55 = Zext i24 %52 to i64
%56 = i64 And i64 %54, 1099511627775
%57 = i64 Shl i64 %55, 40
%53 = i64 Or i64 %56, %57
store i64 %53, i64 tmp_dword2
br label %bb8
bb5:
%58 = Extract i2 of i64 %10 <1, 0>
%59 = i1 Eq i2 %58, -2
br i1 %59, label %bb9, label %bb10
bb6:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb11
bb7:
br label %bb11
bb8:
%90 = load i64, i64 tmp_dword1
%91 = load i53, i53 mem_index
%92 = i53 Add i53 %91, 1
store i64 %90, [9007199254740992, i64] MEM[%92]
%93 = load i64, i64 tmp_dword2
%94 = load i53, i53 mem_index
store i64 %93, [9007199254740992, i64] MEM[%94]
br label %bb3
bb9:
%60 = Extract i32 of i64 %12 <31, 0>
%61 = i32 Lshr i32 %60, 16
%62 = Extract i16 of i32 %61 <15, 0>
%64 = load i64, i64 tmp_dword1
%65 = Zext i16 %62 to i64
%66 = i64 And i64 %64, -65536
%67 = i64 Shl i64 %65, 0
%63 = i64 Or i64 %66, %67
store i64 %63, i64 tmp_dword1
%68 = i32 Lshr i32 %60, 0
%69 = Extract i16 of i32 %68 <15, 0>
%71 = load i64, i64 tmp_dword2
%72 = Zext i16 %69 to i64
%73 = i64 And i64 %71, 281474976710655
%74 = i64 Shl i64 %72, 48
%70 = i64 Or i64 %73, %74
store i64 %70, i64 tmp_dword2
br label %bb8
bb10:
%75 = Extract i32 of i64 %12 <31, 0>
%76 = i32 Lshr i32 %75, 8
%77 = Extract i24 of i32 %76 <23, 0>
%79 = load i64, i64 tmp_dword1
%80 = Zext i24 %77 to i64
%81 = i64 And i64 %79, -16777216
%82 = i64 Shl i64 %80, 0
%78 = i64 Or i64 %81, %82
store i64 %78, i64 tmp_dword1
%83 = i32 Lshr i32 %75, 0
%84 = Extract i8 of i32 %83 <7, 0>
%86 = load i64, i64 tmp_dword2
%87 = Zext i8 %84 to i64
%88 = i64 And i64 %86, 72057594037927935
%89 = i64 Shl i64 %87, 56
%85 = i64 Or i64 %88, %89
store i64 %85, i64 tmp_dword2
br label %bb8
bb11:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%96 = load i64, i64 PC
store i64 %96, i64 prev_pc
%102 = load i64, i64 PC
%103 = i64 Add i64 %102, 4
store i64 %103, [32, i64] XREG[0]
%105 = load i64, [32, i64] XREG[1]
%104 = i64 Add i64 %105, 0
store i64 %104, i64 PC
%97 = load i64, i64 PC
%99 = load i64, i64 prev_pc
%98 = i1 Eq i64 %97, %99
br i1 %98, label %bb12, label %bb13
bb12:
%100 = load i64, i64 PC
%101 = i64 Add i64 %100, 4
store i64 %101, i64 PC
br label %bb14
bb13:
br label %bb14
bb14:
%95 = load i64, i64 PC
store i64 %95, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%11 = load i64, [32, i64] XREG!2[12]
%9 = i64 Add i64 %11, 0
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %13, i64 rs2_var!1
%12 = load i64, i64 rs2_var!2
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
mem_index!2 = store i53 %15, i53 mem_index!1
%16 = Extract i3 of i64 %10 <2, 0>
%17 = Zext i3 %16 to i6
%18 = i6 Mul i6 %17, 8
tmp_bit_offset!2 = store i6 %18, i6 tmp_bit_offset!1
%19 = Extract i3 of i64 %10 <2, 0>
%20 = i1 Ult i3 %19, -3
br i1 %20, label %bb1, label %bb2
bb1:
%21 = load i53, i53 mem_index!2
%22 = load i64, [9007199254740992, i64] MEM!1[%21]
tmp_dword!3 = store i64 %22, i64 tmp_dword!1
%23 = Extract i32 of i64 %12 <31, 0>
%24 = load i6, i6 tmp_bit_offset!2
%26 = load i64, i64 tmp_dword!3
%27 = Zext i32 %23 to i64
%28 = Zext i6 %24 to i64
%29 = Zext i6 %24 to i64
%30 = i64 Shl i64 4294967295, %29
%31 = i64 Xor i64 %30, -1
%32 = i64 And i64 %26, %31
%33 = i64 Shl i64 %27, %28
%25 = i64 Or i64 %32, %33
tmp_dword!4 = store i64 %25, i64 tmp_dword!3
%34 = load i64, i64 tmp_dword!4
%35 = load i53, i53 mem_index!2
MEM!5 = store i64 %34, [9007199254740992, i64] MEM!1[%35]
br label %bb3
bb2:
%36 = load i53, i53 mem_index!2
%37 = i53 Add i53 %36, 1
%38 = load i64, [9007199254740992, i64] MEM!1[%37]
tmp_dword1!3 = store i64 %38, i64 tmp_dword1!1
%39 = load i53, i53 mem_index!2
%40 = load i64, [9007199254740992, i64] MEM!1[%39]
tmp_dword2!3 = store i64 %40, i64 tmp_dword2!1
%41 = Extract i2 of i64 %10 <1, 0>
%42 = i1 Eq i2 %41, 1
br i1 %42, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %20 MEM!5 MEM!4
tmp_dword!2 = phi ite %20 tmp_dword!4 tmp_dword!1
tmp_dword2!2 = phi ite %20 tmp_dword2!1 tmp_dword2!7
tmp_dword1!2 = phi ite %20 tmp_dword1!1 tmp_dword1!7
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb6, label %bb7
bb4:
%43 = Extract i32 of i64 %12 <31, 0>
%44 = i32 Lshr i32 %43, 24
%45 = Extract i8 of i32 %44 <7, 0>
%47 = load i64, i64 tmp_dword1!3
%48 = Zext i8 %45 to i64
%49 = i64 And i64 %47, -256
%50 = i64 Shl i64 %48, 0
%46 = i64 Or i64 %49, %50
tmp_dword1!4 = store i64 %46, i64 tmp_dword1!3
%51 = i32 Lshr i32 %43, 0
%52 = Extract i24 of i32 %51 <23, 0>
%54 = load i64, i64 tmp_dword2!3
%55 = Zext i24 %52 to i64
%56 = i64 And i64 %54, 1099511627775
%57 = i64 Shl i64 %55, 40
%53 = i64 Or i64 %56, %57
tmp_dword2!4 = store i64 %53, i64 tmp_dword2!3
br label %bb8
bb5:
%58 = Extract i2 of i64 %10 <1, 0>
%59 = i1 Eq i2 %58, -2
br i1 %59, label %bb9, label %bb10
bb6:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!2 = store i64 %8, i64 PC!1
br label %bb11
bb7:
br label %bb11
bb8:
tmp_dword2!7 = phi ite %42 tmp_dword2!4 ite %59 tmp_dword2!5 tmp_dword2!6
tmp_dword1!7 = phi ite %42 tmp_dword1!4 ite %59 tmp_dword1!5 tmp_dword1!6
%90 = load i64, i64 tmp_dword1!7
%91 = load i53, i53 mem_index!2
%92 = i53 Add i53 %91, 1
MEM!3 = store i64 %90, [9007199254740992, i64] MEM!1[%92]
%93 = load i64, i64 tmp_dword2!7
%94 = load i53, i53 mem_index!2
MEM!4 = store i64 %93, [9007199254740992, i64] MEM!3[%94]
br label %bb3
bb9:
%60 = Extract i32 of i64 %12 <31, 0>
%61 = i32 Lshr i32 %60, 16
%62 = Extract i16 of i32 %61 <15, 0>
%64 = load i64, i64 tmp_dword1!3
%65 = Zext i16 %62 to i64
%66 = i64 And i64 %64, -65536
%67 = i64 Shl i64 %65, 0
%63 = i64 Or i64 %66, %67
tmp_dword1!5 = store i64 %63, i64 tmp_dword1!3
%68 = i32 Lshr i32 %60, 0
%69 = Extract i16 of i32 %68 <15, 0>
%71 = load i64, i64 tmp_dword2!3
%72 = Zext i16 %69 to i64
%73 = i64 And i64 %71, 281474976710655
%74 = i64 Shl i64 %72, 48
%70 = i64 Or i64 %73, %74
tmp_dword2!5 = store i64 %70, i64 tmp_dword2!3
br label %bb8
bb10:
%75 = Extract i32 of i64 %12 <31, 0>
%76 = i32 Lshr i32 %75, 8
%77 = Extract i24 of i32 %76 <23, 0>
%79 = load i64, i64 tmp_dword1!3
%80 = Zext i24 %77 to i64
%81 = i64 And i64 %79, -16777216
%82 = i64 Shl i64 %80, 0
%78 = i64 Or i64 %81, %82
tmp_dword1!6 = store i64 %78, i64 tmp_dword1!3
%83 = i32 Lshr i32 %75, 0
%84 = Extract i8 of i32 %83 <7, 0>
%86 = load i64, i64 tmp_dword2!3
%87 = Zext i8 %84 to i64
%88 = i64 And i64 %86, 72057594037927935
%89 = i64 Shl i64 %87, 56
%85 = i64 Or i64 %88, %89
tmp_dword2!6 = store i64 %85, i64 tmp_dword2!3
br label %bb8
bb11:
PC!3 = phi ite %5 PC!2 PC!1
%2 = load i64, i64 PC!3
PC!4 = store i64 %2, i64 PC!3
XREG!3 = store i64 0, [32, i64] XREG!2[0]
%96 = load i64, i64 PC!4
prev_pc!3 = store i64 %96, i64 prev_pc!2
%102 = load i64, i64 PC!4
%103 = i64 Add i64 %102, 4
XREG!4 = store i64 %103, [32, i64] XREG!3[0]
%105 = load i64, [32, i64] XREG!4[1]
%104 = i64 Add i64 %105, 0
PC!5 = store i64 %104, i64 PC!4
%97 = load i64, i64 PC!5
%99 = load i64, i64 prev_pc!3
%98 = i1 Eq i64 %97, %99
br i1 %98, label %bb12, label %bb13
bb12:
%100 = load i64, i64 PC!5
%101 = i64 Add i64 %100, 4
PC!9 = store i64 %101, i64 PC!5
br label %bb14
bb13:
br label %bb14
bb14:
PC!6 = phi ite %98 PC!9 PC!5
%95 = load i64, i64 PC!6
PC!7 = store i64 %95, i64 PC!6
%1 = load i64, i64 PC!7
PC!8 = store i64 %1, i64 PC!7
ret void

SSA forward
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[12]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %4, i64 rs2_var!1
%5 = i64 Lshr i64 %2, 3
%6 = Extract i53 of i64 %5 <52, 0>
mem_index!2 = store i53 %6, i53 mem_index!1
%7 = Extract i3 of i64 %2 <2, 0>
%8 = Zext i3 %7 to i6
%9 = i6 Mul i6 %8, 8
tmp_bit_offset!2 = store i6 %9, i6 tmp_bit_offset!1
%10 = Extract i3 of i64 %2 <2, 0>
%11 = i1 Ult i3 %10, -3
br i1 %11, label %bb1, label %bb2
bb1:
%12 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword!3 = store i64 %12, i64 tmp_dword!1
%13 = Extract i32 of i64 %4 <31, 0>
%15 = Zext i32 %13 to i64
%16 = Zext i6 %9 to i64
%17 = Zext i6 %9 to i64
%18 = i64 Shl i64 4294967295, %17
%19 = i64 Xor i64 %18, -1
%20 = i64 And i64 %12, %19
%21 = i64 Shl i64 %15, %16
%14 = i64 Or i64 %20, %21
tmp_dword!4 = store i64 %14, i64 tmp_dword!3
MEM!5 = store i64 %14, [9007199254740992, i64] MEM!1[%6]
br label %bb3
bb2:
%22 = i53 Add i53 %6, 1
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword1!3 = store i64 %23, i64 tmp_dword1!1
%24 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword2!3 = store i64 %24, i64 tmp_dword2!1
%25 = Extract i2 of i64 %2 <1, 0>
%26 = i1 Eq i2 %25, 1
br i1 %26, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %11 MEM!5 MEM!4
tmp_dword!2 = phi ite %11 %14 tmp_dword!1
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!7
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!7
br label %bb6
bb4:
%27 = Extract i32 of i64 %4 <31, 0>
%28 = i32 Lshr i32 %27, 24
%29 = Extract i8 of i32 %28 <7, 0>
%31 = Zext i8 %29 to i64
%32 = i64 And i64 %23, -256
%33 = i64 Shl i64 %31, 0
%30 = i64 Or i64 %32, %33
tmp_dword1!4 = store i64 %30, i64 tmp_dword1!3
%34 = i32 Lshr i32 %27, 0
%35 = Extract i24 of i32 %34 <23, 0>
%37 = Zext i24 %35 to i64
%38 = i64 And i64 %24, 1099511627775
%39 = i64 Shl i64 %37, 40
%36 = i64 Or i64 %38, %39
tmp_dword2!4 = store i64 %36, i64 tmp_dword2!3
br label %bb7
bb5:
%40 = Extract i2 of i64 %2 <1, 0>
%41 = i1 Eq i2 %40, -2
br i1 %41, label %bb8, label %bb9
bb6:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb10
bb7:
tmp_dword2!7 = phi ite %26 %36 ite %41 %51 %64
tmp_dword1!7 = phi ite %26 %30 ite %41 %45 %58
%68 = i53 Add i53 %6, 1
MEM!3 = store i64 tmp_dword1!7, [9007199254740992, i64] MEM!1[%68]
MEM!4 = store i64 tmp_dword2!7, [9007199254740992, i64] MEM!3[%6]
br label %bb3
bb8:
%42 = Extract i32 of i64 %4 <31, 0>
%43 = i32 Lshr i32 %42, 16
%44 = Extract i16 of i32 %43 <15, 0>
%46 = Zext i16 %44 to i64
%47 = i64 And i64 %23, -65536
%48 = i64 Shl i64 %46, 0
%45 = i64 Or i64 %47, %48
tmp_dword1!5 = store i64 %45, i64 tmp_dword1!3
%49 = i32 Lshr i32 %42, 0
%50 = Extract i16 of i32 %49 <15, 0>
%52 = Zext i16 %50 to i64
%53 = i64 And i64 %24, 281474976710655
%54 = i64 Shl i64 %52, 48
%51 = i64 Or i64 %53, %54
tmp_dword2!5 = store i64 %51, i64 tmp_dword2!3
br label %bb7
bb9:
%55 = Extract i32 of i64 %4 <31, 0>
%56 = i32 Lshr i32 %55, 8
%57 = Extract i24 of i32 %56 <23, 0>
%59 = Zext i24 %57 to i64
%60 = i64 And i64 %23, -16777216
%61 = i64 Shl i64 %59, 0
%58 = i64 Or i64 %60, %61
tmp_dword1!6 = store i64 %58, i64 tmp_dword1!3
%62 = i32 Lshr i32 %55, 0
%63 = Extract i8 of i32 %62 <7, 0>
%65 = Zext i8 %63 to i64
%66 = i64 And i64 %24, 72057594037927935
%67 = i64 Shl i64 %65, 56
%64 = i64 Or i64 %66, %67
tmp_dword2!6 = store i64 %64, i64 tmp_dword2!3
br label %bb7
bb10:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!3 = store i64 0, [32, i64] XREG!2[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%71 = i64 Add i64 PC!3, 4
XREG!4 = store i64 %71, [32, i64] XREG!3[0]
%73 = load i64, [32, i64] XREG!4[1]
%72 = i64 Add i64 %73, 0
PC!5 = store i64 %72, i64 PC!4
%69 = i1 Eq i64 %72, PC!3
br i1 %69, label %bb11, label %bb12
bb11:
%70 = i64 Add i64 %72, 4
PC!9 = store i64 %70, i64 PC!5
br label %bb13
bb12:
br label %bb13
bb13:
PC!6 = phi ite %69 %70 %72
PC!7 = store i64 PC!6, i64 PC!6
PC!8 = store i64 PC!6, i64 PC!7
ret void

Nested SCCP
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[12]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %4, i64 rs2_var!1
%5 = i64 Lshr i64 %2, 3
%6 = Extract i53 of i64 %5 <52, 0>
mem_index!2 = store i53 %6, i53 mem_index!1
%7 = Extract i3 of i64 %2 <2, 0>
%8 = Zext i3 %7 to i6
%9 = i6 Mul i6 %8, 8
tmp_bit_offset!2 = store i6 %9, i6 tmp_bit_offset!1
%10 = Extract i3 of i64 %2 <2, 0>
%11 = i1 Ult i3 %10, -3
br i1 %11, label %bb1, label %bb2
bb1:
%12 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword!3 = store i64 %12, i64 tmp_dword!1
%13 = Extract i32 of i64 %4 <31, 0>
%15 = Zext i32 %13 to i64
%16 = Zext i6 %9 to i64
%17 = Zext i6 %9 to i64
%18 = i64 Shl i64 4294967295, %17
%19 = i64 Xor i64 %18, -1
%20 = i64 And i64 %12, %19
%21 = i64 Shl i64 %15, %16
%14 = i64 Or i64 %20, %21
tmp_dword!4 = store i64 %14, i64 tmp_dword!3
MEM!5 = store i64 %14, [9007199254740992, i64] MEM!1[%6]
br label %bb3
bb2:
%22 = i53 Add i53 %6, 1
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword1!3 = store i64 %23, i64 tmp_dword1!1
%24 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword2!3 = store i64 %24, i64 tmp_dword2!1
%25 = Extract i2 of i64 %2 <1, 0>
%26 = i1 Eq i2 %25, 1
br i1 %26, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %11 MEM!5 MEM!4
tmp_dword!2 = phi ite %11 %14 tmp_dword!1
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!7
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!7
br label %bb6
bb4:
%27 = Extract i32 of i64 %4 <31, 0>
%28 = i32 Lshr i32 %27, 24
%29 = Extract i8 of i32 %28 <7, 0>
%31 = Zext i8 %29 to i64
%32 = i64 And i64 %23, -256
%33 = i64 Shl i64 %31, 0
%30 = i64 Or i64 %32, %33
tmp_dword1!4 = store i64 %30, i64 tmp_dword1!3
%34 = i32 Lshr i32 %27, 0
%35 = Extract i24 of i32 %34 <23, 0>
%37 = Zext i24 %35 to i64
%38 = i64 And i64 %24, 1099511627775
%39 = i64 Shl i64 %37, 40
%36 = i64 Or i64 %38, %39
tmp_dword2!4 = store i64 %36, i64 tmp_dword2!3
br label %bb7
bb5:
%40 = Extract i2 of i64 %2 <1, 0>
%41 = i1 Eq i2 %40, -2
br i1 %41, label %bb8, label %bb9
bb6:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb10
bb7:
tmp_dword2!7 = phi ite %26 %36 ite %41 %51 %64
tmp_dword1!7 = phi ite %26 %30 ite %41 %45 %58
%68 = i53 Add i53 %6, 1
MEM!3 = store i64 tmp_dword1!7, [9007199254740992, i64] MEM!1[%68]
MEM!4 = store i64 tmp_dword2!7, [9007199254740992, i64] MEM!3[%6]
br label %bb3
bb8:
%42 = Extract i32 of i64 %4 <31, 0>
%43 = i32 Lshr i32 %42, 16
%44 = Extract i16 of i32 %43 <15, 0>
%46 = Zext i16 %44 to i64
%47 = i64 And i64 %23, -65536
%48 = i64 Shl i64 %46, 0
%45 = i64 Or i64 %47, %48
tmp_dword1!5 = store i64 %45, i64 tmp_dword1!3
%49 = i32 Lshr i32 %42, 0
%50 = Extract i16 of i32 %49 <15, 0>
%52 = Zext i16 %50 to i64
%53 = i64 And i64 %24, 281474976710655
%54 = i64 Shl i64 %52, 48
%51 = i64 Or i64 %53, %54
tmp_dword2!5 = store i64 %51, i64 tmp_dword2!3
br label %bb7
bb9:
%55 = Extract i32 of i64 %4 <31, 0>
%56 = i32 Lshr i32 %55, 8
%57 = Extract i24 of i32 %56 <23, 0>
%59 = Zext i24 %57 to i64
%60 = i64 And i64 %23, -16777216
%61 = i64 Shl i64 %59, 0
%58 = i64 Or i64 %60, %61
tmp_dword1!6 = store i64 %58, i64 tmp_dword1!3
%62 = i32 Lshr i32 %55, 0
%63 = Extract i8 of i32 %62 <7, 0>
%65 = Zext i8 %63 to i64
%66 = i64 And i64 %24, 72057594037927935
%67 = i64 Shl i64 %65, 56
%64 = i64 Or i64 %66, %67
tmp_dword2!6 = store i64 %64, i64 tmp_dword2!3
br label %bb7
bb10:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!3 = store i64 0, [32, i64] XREG!2[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%71 = i64 Add i64 PC!3, 4
XREG!4 = store i64 %71, [32, i64] XREG!3[0]
%73 = load i64, [32, i64] XREG!4[1]
%72 = i64 Add i64 %73, 0
PC!5 = store i64 %72, i64 PC!4
%69 = i1 Eq i64 %72, PC!3
br i1 %69, label %bb11, label %bb12
bb11:
%70 = i64 Add i64 %72, 4
PC!9 = store i64 %70, i64 PC!5
br label %bb13
bb12:
br label %bb13
bb13:
PC!6 = phi ite %69 %70 %72
PC!7 = store i64 PC!6, i64 PC!6
PC!8 = store i64 PC!6, i64 PC!7
ret void

SCCP forward
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[12]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %4, i64 rs2_var!1
%5 = i64 Lshr i64 %2, 3
%6 = Extract i53 of i64 %5 <52, 0>
mem_index!2 = store i53 %6, i53 mem_index!1
%7 = Extract i3 of i64 %2 <2, 0>
%8 = Zext i3 %7 to i6
%9 = i6 Mul i6 %8, 8
tmp_bit_offset!2 = store i6 %9, i6 tmp_bit_offset!1
%10 = Extract i3 of i64 %2 <2, 0>
%11 = i1 Ult i3 %10, -3
br i1 %11, label %bb1, label %bb2
bb1:
%12 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword!3 = store i64 %12, i64 tmp_dword!1
%13 = Extract i32 of i64 %4 <31, 0>
%15 = Zext i32 %13 to i64
%16 = Zext i6 %9 to i64
%17 = Zext i6 %9 to i64
%18 = i64 Shl i64 4294967295, %17
%19 = i64 Xor i64 %18, -1
%20 = i64 And i64 %12, %19
%21 = i64 Shl i64 %15, %16
%14 = i64 Or i64 %20, %21
tmp_dword!4 = store i64 %14, i64 tmp_dword!3
MEM!5 = store i64 %14, [9007199254740992, i64] MEM!1[%6]
br label %bb3
bb2:
%22 = i53 Add i53 %6, 1
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword1!3 = store i64 %23, i64 tmp_dword1!1
%24 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword2!3 = store i64 %24, i64 tmp_dword2!1
%25 = Extract i2 of i64 %2 <1, 0>
%26 = i1 Eq i2 %25, 1
br i1 %26, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %11 MEM!5 MEM!4
tmp_dword!2 = phi ite %11 %14 tmp_dword!1
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!7
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!7
br label %bb6
bb4:
%27 = Extract i32 of i64 %4 <31, 0>
%28 = i32 Lshr i32 %27, 24
%29 = Extract i8 of i32 %28 <7, 0>
%31 = Zext i8 %29 to i64
%32 = i64 And i64 %23, -256
%33 = i64 Shl i64 %31, 0
%30 = i64 Or i64 %32, %33
tmp_dword1!4 = store i64 %30, i64 tmp_dword1!3
%34 = i32 Lshr i32 %27, 0
%35 = Extract i24 of i32 %34 <23, 0>
%37 = Zext i24 %35 to i64
%38 = i64 And i64 %24, 1099511627775
%39 = i64 Shl i64 %37, 40
%36 = i64 Or i64 %38, %39
tmp_dword2!4 = store i64 %36, i64 tmp_dword2!3
br label %bb7
bb5:
%40 = Extract i2 of i64 %2 <1, 0>
%41 = i1 Eq i2 %40, -2
br i1 %41, label %bb8, label %bb9
bb6:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb10
bb7:
tmp_dword2!7 = phi ite %26 %36 ite %41 %51 %64
tmp_dword1!7 = phi ite %26 %30 ite %41 %45 %58
%68 = i53 Add i53 %6, 1
MEM!3 = store i64 tmp_dword1!7, [9007199254740992, i64] MEM!1[%68]
MEM!4 = store i64 tmp_dword2!7, [9007199254740992, i64] MEM!3[%6]
br label %bb3
bb8:
%42 = Extract i32 of i64 %4 <31, 0>
%43 = i32 Lshr i32 %42, 16
%44 = Extract i16 of i32 %43 <15, 0>
%46 = Zext i16 %44 to i64
%47 = i64 And i64 %23, -65536
%48 = i64 Shl i64 %46, 0
%45 = i64 Or i64 %47, %48
tmp_dword1!5 = store i64 %45, i64 tmp_dword1!3
%49 = i32 Lshr i32 %42, 0
%50 = Extract i16 of i32 %49 <15, 0>
%52 = Zext i16 %50 to i64
%53 = i64 And i64 %24, 281474976710655
%54 = i64 Shl i64 %52, 48
%51 = i64 Or i64 %53, %54
tmp_dword2!5 = store i64 %51, i64 tmp_dword2!3
br label %bb7
bb9:
%55 = Extract i32 of i64 %4 <31, 0>
%56 = i32 Lshr i32 %55, 8
%57 = Extract i24 of i32 %56 <23, 0>
%59 = Zext i24 %57 to i64
%60 = i64 And i64 %23, -16777216
%61 = i64 Shl i64 %59, 0
%58 = i64 Or i64 %60, %61
tmp_dword1!6 = store i64 %58, i64 tmp_dword1!3
%62 = i32 Lshr i32 %55, 0
%63 = Extract i8 of i32 %62 <7, 0>
%65 = Zext i8 %63 to i64
%66 = i64 And i64 %24, 72057594037927935
%67 = i64 Shl i64 %65, 56
%64 = i64 Or i64 %66, %67
tmp_dword2!6 = store i64 %64, i64 tmp_dword2!3
br label %bb7
bb10:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!3 = store i64 0, [32, i64] XREG!2[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%71 = i64 Add i64 PC!3, 4
XREG!4 = store i64 %71, [32, i64] XREG!3[0]
%73 = load i64, [32, i64] XREG!4[1]
%72 = i64 Add i64 %73, 0
PC!5 = store i64 %72, i64 PC!4
%69 = i1 Eq i64 %72, PC!3
br i1 %69, label %bb11, label %bb12
bb11:
%70 = i64 Add i64 %72, 4
PC!9 = store i64 %70, i64 PC!5
br label %bb13
bb12:
br label %bb13
bb13:
PC!6 = phi ite %69 %70 %72
PC!7 = store i64 PC!6, i64 PC!6
PC!8 = store i64 PC!6, i64 PC!7
ret void

cherry
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[12]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %4, i64 rs2_var!1
%5 = i64 Lshr i64 %2, 3
%6 = Extract i53 of i64 %5 <52, 0>
mem_index!2 = store i53 %6, i53 mem_index!1
%7 = Extract i3 of i64 %2 <2, 0>
%8 = Zext i3 %7 to i6
%9 = i6 Mul i6 %8, 8
tmp_bit_offset!2 = store i6 %9, i6 tmp_bit_offset!1
%10 = Extract i3 of i64 %2 <2, 0>
%11 = i1 Ult i3 %10, -3
br i1 %11, label %bb1, label %bb2
bb1:
%12 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword!3 = store i64 %12, i64 tmp_dword!1
%13 = Extract i32 of i64 %4 <31, 0>
%15 = Zext i32 %13 to i64
%16 = Zext i6 %9 to i64
%17 = Zext i6 %9 to i64
%18 = i64 Shl i64 4294967295, %17
%19 = i64 Xor i64 %18, -1
%20 = i64 And i64 %12, %19
%21 = i64 Shl i64 %15, %16
%14 = i64 Or i64 %20, %21
tmp_dword!4 = store i64 %14, i64 tmp_dword!3
MEM!5 = store i64 %14, [9007199254740992, i64] MEM!1[%6]
br label %bb3
bb2:
%22 = i53 Add i53 %6, 1
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword1!3 = store i64 %23, i64 tmp_dword1!1
%24 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword2!3 = store i64 %24, i64 tmp_dword2!1
%25 = Extract i2 of i64 %2 <1, 0>
%26 = i1 Eq i2 %25, 1
br i1 %26, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %11 MEM!5 MEM!4
tmp_dword!2 = phi ite %11 %14 tmp_dword!1
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!7
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!7
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!3 = store i64 0, [32, i64] XREG!2[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%71 = i64 Add i64 PC!3, 4
XREG!4 = store i64 %71, [32, i64] XREG!3[0]
%73 = load i64, [32, i64] XREG!4[1]
%72 = i64 Add i64 %73, 0
PC!5 = store i64 %72, i64 PC!4
%69 = i1 Eq i64 %72, PC!3
br i1 %69, label %bb9, label %bb10
bb4:
%27 = Extract i32 of i64 %4 <31, 0>
%28 = i32 Lshr i32 %27, 24
%29 = Extract i8 of i32 %28 <7, 0>
%31 = Zext i8 %29 to i64
%32 = i64 And i64 %23, -256
%33 = i64 Shl i64 %31, 0
%30 = i64 Or i64 %32, %33
tmp_dword1!4 = store i64 %30, i64 tmp_dword1!3
%34 = i32 Lshr i32 %27, 0
%35 = Extract i24 of i32 %34 <23, 0>
%37 = Zext i24 %35 to i64
%38 = i64 And i64 %24, 1099511627775
%39 = i64 Shl i64 %37, 40
%36 = i64 Or i64 %38, %39
tmp_dword2!4 = store i64 %36, i64 tmp_dword2!3
br label %bb6
bb5:
%40 = Extract i2 of i64 %2 <1, 0>
%41 = i1 Eq i2 %40, -2
br i1 %41, label %bb7, label %bb8
bb6:
tmp_dword2!7 = phi ite %26 %36 ite %41 %51 %64
tmp_dword1!7 = phi ite %26 %30 ite %41 %45 %58
%68 = i53 Add i53 %6, 1
MEM!3 = store i64 tmp_dword1!7, [9007199254740992, i64] MEM!1[%68]
MEM!4 = store i64 tmp_dword2!7, [9007199254740992, i64] MEM!3[%6]
br label %bb3
bb7:
%42 = Extract i32 of i64 %4 <31, 0>
%43 = i32 Lshr i32 %42, 16
%44 = Extract i16 of i32 %43 <15, 0>
%46 = Zext i16 %44 to i64
%47 = i64 And i64 %23, -65536
%48 = i64 Shl i64 %46, 0
%45 = i64 Or i64 %47, %48
tmp_dword1!5 = store i64 %45, i64 tmp_dword1!3
%49 = i32 Lshr i32 %42, 0
%50 = Extract i16 of i32 %49 <15, 0>
%52 = Zext i16 %50 to i64
%53 = i64 And i64 %24, 281474976710655
%54 = i64 Shl i64 %52, 48
%51 = i64 Or i64 %53, %54
tmp_dword2!5 = store i64 %51, i64 tmp_dword2!3
br label %bb6
bb8:
%55 = Extract i32 of i64 %4 <31, 0>
%56 = i32 Lshr i32 %55, 8
%57 = Extract i24 of i32 %56 <23, 0>
%59 = Zext i24 %57 to i64
%60 = i64 And i64 %23, -16777216
%61 = i64 Shl i64 %59, 0
%58 = i64 Or i64 %60, %61
tmp_dword1!6 = store i64 %58, i64 tmp_dword1!3
%62 = i32 Lshr i32 %55, 0
%63 = Extract i8 of i32 %62 <7, 0>
%65 = Zext i8 %63 to i64
%66 = i64 And i64 %24, 72057594037927935
%67 = i64 Shl i64 %65, 56
%64 = i64 Or i64 %66, %67
tmp_dword2!6 = store i64 %64, i64 tmp_dword2!3
br label %bb6
bb9:
%70 = i64 Add i64 %72, 4
PC!9 = store i64 %70, i64 PC!5
br label %bb11
bb10:
br label %bb11
bb11:
PC!6 = phi ite %69 %70 %72
PC!7 = store i64 PC!6, i64 PC!6
PC!8 = store i64 PC!6, i64 PC!7
ret void

bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[12]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = load i64, [32, i64] XREG!2[15]
rs2_var!2 = store i64 %4, i64 rs2_var!1
%5 = i64 Lshr i64 %2, 3
%6 = Extract i53 of i64 %5 <52, 0>
mem_index!2 = store i53 %6, i53 mem_index!1
%7 = Extract i3 of i64 %2 <2, 0>
%8 = Zext i3 %7 to i6
%9 = i6 Mul i6 %8, 8
tmp_bit_offset!2 = store i6 %9, i6 tmp_bit_offset!1
%10 = Extract i3 of i64 %2 <2, 0>
%11 = i1 Ult i3 %10, -3
br i1 %11, label %bb1, label %bb2
bb1:
%12 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword!3 = store i64 %12, i64 tmp_dword!1
%13 = Extract i32 of i64 %4 <31, 0>
%15 = Zext i32 %13 to i64
%16 = Zext i6 %9 to i64
%17 = Zext i6 %9 to i64
%18 = i64 Shl i64 4294967295, %17
%19 = i64 Xor i64 %18, -1
%20 = i64 And i64 %12, %19
%21 = i64 Shl i64 %15, %16
%14 = i64 Or i64 %20, %21
tmp_dword!4 = store i64 %14, i64 tmp_dword!3
MEM!5 = store i64 %14, [9007199254740992, i64] MEM!1[%6]
br label %bb3
bb2:
%22 = i53 Add i53 %6, 1
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword1!3 = store i64 %23, i64 tmp_dword1!1
%24 = load i64, [9007199254740992, i64] MEM!1[%6]
tmp_dword2!3 = store i64 %24, i64 tmp_dword2!1
%25 = Extract i2 of i64 %2 <1, 0>
%26 = i1 Eq i2 %25, 1
br i1 %26, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %11 MEM!5 MEM!4
tmp_dword!2 = phi ite %11 %14 tmp_dword!1
tmp_dword2!2 = phi ite %11 tmp_dword2!1 tmp_dword2!7
tmp_dword1!2 = phi ite %11 tmp_dword1!1 tmp_dword1!7
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!3 = store i64 0, [32, i64] XREG!2[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%71 = i64 Add i64 PC!3, 4
XREG!4 = store i64 %71, [32, i64] XREG!3[0]
%73 = load i64, [32, i64] XREG!4[1]
%72 = i64 Add i64 %73, 0
PC!5 = store i64 %72, i64 PC!4
%69 = i1 Eq i64 %72, PC!3
br i1 %69, label %bb9, label %bb10
bb4:
%27 = Extract i32 of i64 %4 <31, 0>
%28 = i32 Lshr i32 %27, 24
%29 = Extract i8 of i32 %28 <7, 0>
%31 = Zext i8 %29 to i64
%32 = i64 And i64 %23, -256
%33 = i64 Shl i64 %31, 0
%30 = i64 Or i64 %32, %33
tmp_dword1!4 = store i64 %30, i64 tmp_dword1!3
%34 = i32 Lshr i32 %27, 0
%35 = Extract i24 of i32 %34 <23, 0>
%37 = Zext i24 %35 to i64
%38 = i64 And i64 %24, 1099511627775
%39 = i64 Shl i64 %37, 40
%36 = i64 Or i64 %38, %39
tmp_dword2!4 = store i64 %36, i64 tmp_dword2!3
br label %bb6
bb5:
%40 = Extract i2 of i64 %2 <1, 0>
%41 = i1 Eq i2 %40, -2
br i1 %41, label %bb7, label %bb8
bb6:
tmp_dword2!7 = phi ite %26 %36 ite %41 %51 %64
tmp_dword1!7 = phi ite %26 %30 ite %41 %45 %58
%68 = i53 Add i53 %6, 1
MEM!3 = store i64 tmp_dword1!7, [9007199254740992, i64] MEM!1[%68]
MEM!4 = store i64 tmp_dword2!7, [9007199254740992, i64] MEM!3[%6]
br label %bb3
bb7:
%42 = Extract i32 of i64 %4 <31, 0>
%43 = i32 Lshr i32 %42, 16
%44 = Extract i16 of i32 %43 <15, 0>
%46 = Zext i16 %44 to i64
%47 = i64 And i64 %23, -65536
%48 = i64 Shl i64 %46, 0
%45 = i64 Or i64 %47, %48
tmp_dword1!5 = store i64 %45, i64 tmp_dword1!3
%49 = i32 Lshr i32 %42, 0
%50 = Extract i16 of i32 %49 <15, 0>
%52 = Zext i16 %50 to i64
%53 = i64 And i64 %24, 281474976710655
%54 = i64 Shl i64 %52, 48
%51 = i64 Or i64 %53, %54
tmp_dword2!5 = store i64 %51, i64 tmp_dword2!3
br label %bb6
bb8:
%55 = Extract i32 of i64 %4 <31, 0>
%56 = i32 Lshr i32 %55, 8
%57 = Extract i24 of i32 %56 <23, 0>
%59 = Zext i24 %57 to i64
%60 = i64 And i64 %23, -16777216
%61 = i64 Shl i64 %59, 0
%58 = i64 Or i64 %60, %61
tmp_dword1!6 = store i64 %58, i64 tmp_dword1!3
%62 = i32 Lshr i32 %55, 0
%63 = Extract i8 of i32 %62 <7, 0>
%65 = Zext i8 %63 to i64
%66 = i64 And i64 %24, 72057594037927935
%67 = i64 Shl i64 %65, 56
%64 = i64 Or i64 %66, %67
tmp_dword2!6 = store i64 %64, i64 tmp_dword2!3
br label %bb6
bb9:
%70 = i64 Add i64 %72, 4
PC!9 = store i64 %70, i64 PC!5
br label %bb11
bb10:
br label %bb11
bb11:
PC!6 = phi ite %69 %70 %72
PC!7 = store i64 PC!6, i64 PC!6
PC!8 = store i64 PC!6, i64 PC!7
ret void

Created file: idiv.bin.smt2
