Analyzing file: memset.bin...
addi sp, sp, -16
sd s0, 0(sp)
sd ra, 8(sp)
addi s0, a0, 0
beq a2, zero, 6
andi a1, a1, 255
jal ra, 0xffff4
ld ra, 8(sp)
addi a0, s0, 0
ld s0, 0(sp)
addi sp, sp, 16
jalr zero, ra, 0
COMPILE
insn_0.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 2} X, func void [i5] {i5 2} X, i12 4080} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_0.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 2} X, func void [i5] {i5 2} X, i12 4080} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_0.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4080 to i64
%10 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[2]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_0.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4080 to i64
%10 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[2]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_1.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 8} X, func void [i5] {i5 2} X, i12 0} sd} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_1.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb24
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 8} X, func void [i5] {i5 2} X, i12 0} sd} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
store i64 %19, i64 rs2_var
%17 = load i64, i64 rs2_var
%20 = i64 Lshr i64 %14, 3
%21 = Extract i53 of i64 %20 <52, 0>
store i53 %21, i53 mem_index
%22 = Extract i3 of i64 %14 <2, 0>
%23 = i1 Eq i3 %22, 0
br i1 %23, label %bb8, label %bb9
bb8:
%24 = load i53, i53 mem_index
store i64 %17, [9007199254740992, i64] MEM[%24]
br label %bb10
bb9:
%25 = load i53, i53 mem_index
%26 = i53 Add i53 %25, 1
%27 = load i64, [9007199254740992, i64] MEM[%26]
store i64 %27, i64 tmp_dword1
%28 = load i53, i53 mem_index
%29 = load i64, [9007199254740992, i64] MEM[%28]
store i64 %29, i64 tmp_dword2
%30 = Extract i3 of i64 %14 <2, 0>
%31 = i1 Eq i3 %30, 1
br i1 %31, label %bb11, label %bb12
bb10:
br label %bb6
bb11:
%32 = i64 Lshr i64 %17, 56
%33 = Extract i8 of i64 %32 <7, 0>
%35 = load i64, i64 tmp_dword1
%36 = Zext i8 %33 to i64
%37 = i64 And i64 %35, -256
%38 = i64 Shl i64 %36, 0
%34 = i64 Or i64 %37, %38
store i64 %34, i64 tmp_dword1
%39 = i64 Lshr i64 %17, 0
%40 = Extract i56 of i64 %39 <55, 0>
%42 = load i64, i64 tmp_dword2
%43 = Zext i56 %40 to i64
%44 = i64 And i64 %42, 255
%45 = i64 Shl i64 %43, 8
%41 = i64 Or i64 %44, %45
store i64 %41, i64 tmp_dword2
br label %bb13
bb12:
%46 = Extract i3 of i64 %14 <2, 0>
%47 = i1 Eq i3 %46, 2
br i1 %47, label %bb14, label %bb15
bb13:
%140 = load i64, i64 tmp_dword1
%141 = load i53, i53 mem_index
%142 = i53 Add i53 %141, 1
store i64 %140, [9007199254740992, i64] MEM[%142]
%143 = load i64, i64 tmp_dword2
%144 = load i53, i53 mem_index
store i64 %143, [9007199254740992, i64] MEM[%144]
br label %bb10
bb14:
%48 = i64 Lshr i64 %17, 48
%49 = Extract i16 of i64 %48 <15, 0>
%51 = load i64, i64 tmp_dword1
%52 = Zext i16 %49 to i64
%53 = i64 And i64 %51, -65536
%54 = i64 Shl i64 %52, 0
%50 = i64 Or i64 %53, %54
store i64 %50, i64 tmp_dword1
%55 = i64 Lshr i64 %17, 0
%56 = Extract i48 of i64 %55 <47, 0>
%58 = load i64, i64 tmp_dword2
%59 = Zext i48 %56 to i64
%60 = i64 And i64 %58, 65535
%61 = i64 Shl i64 %59, 16
%57 = i64 Or i64 %60, %61
store i64 %57, i64 tmp_dword2
br label %bb13
bb15:
%62 = Extract i3 of i64 %14 <2, 0>
%63 = i1 Eq i3 %62, 3
br i1 %63, label %bb16, label %bb17
bb16:
%64 = i64 Lshr i64 %17, 40
%65 = Extract i24 of i64 %64 <23, 0>
%67 = load i64, i64 tmp_dword1
%68 = Zext i24 %65 to i64
%69 = i64 And i64 %67, -16777216
%70 = i64 Shl i64 %68, 0
%66 = i64 Or i64 %69, %70
store i64 %66, i64 tmp_dword1
%71 = i64 Lshr i64 %17, 0
%72 = Extract i40 of i64 %71 <39, 0>
%74 = load i64, i64 tmp_dword2
%75 = Zext i40 %72 to i64
%76 = i64 And i64 %74, 16777215
%77 = i64 Shl i64 %75, 24
%73 = i64 Or i64 %76, %77
store i64 %73, i64 tmp_dword2
br label %bb13
bb17:
%78 = Extract i3 of i64 %14 <2, 0>
%79 = i1 Eq i3 %78, -4
br i1 %79, label %bb18, label %bb19
bb18:
%80 = i64 Lshr i64 %17, 32
%81 = Extract i32 of i64 %80 <31, 0>
%83 = load i64, i64 tmp_dword1
%84 = Zext i32 %81 to i64
%85 = i64 And i64 %83, -4294967296
%86 = i64 Shl i64 %84, 0
%82 = i64 Or i64 %85, %86
store i64 %82, i64 tmp_dword1
%87 = i64 Lshr i64 %17, 0
%88 = Extract i32 of i64 %87 <31, 0>
%90 = load i64, i64 tmp_dword2
%91 = Zext i32 %88 to i64
%92 = i64 And i64 %90, 4294967295
%93 = i64 Shl i64 %91, 32
%89 = i64 Or i64 %92, %93
store i64 %89, i64 tmp_dword2
br label %bb13
bb19:
%94 = Extract i3 of i64 %14 <2, 0>
%95 = i1 Eq i3 %94, -3
br i1 %95, label %bb20, label %bb21
bb20:
%96 = i64 Lshr i64 %17, 24
%97 = Extract i40 of i64 %96 <39, 0>
%99 = load i64, i64 tmp_dword1
%100 = Zext i40 %97 to i64
%101 = i64 And i64 %99, -1099511627776
%102 = i64 Shl i64 %100, 0
%98 = i64 Or i64 %101, %102
store i64 %98, i64 tmp_dword1
%103 = i64 Lshr i64 %17, 0
%104 = Extract i24 of i64 %103 <23, 0>
%106 = load i64, i64 tmp_dword2
%107 = Zext i24 %104 to i64
%108 = i64 And i64 %106, 1099511627775
%109 = i64 Shl i64 %107, 40
%105 = i64 Or i64 %108, %109
store i64 %105, i64 tmp_dword2
br label %bb13
bb21:
%110 = Extract i3 of i64 %14 <2, 0>
%111 = i1 Eq i3 %110, -2
br i1 %111, label %bb22, label %bb23
bb22:
%112 = i64 Lshr i64 %17, 16
%113 = Extract i48 of i64 %112 <47, 0>
%115 = load i64, i64 tmp_dword1
%116 = Zext i48 %113 to i64
%117 = i64 And i64 %115, -281474976710656
%118 = i64 Shl i64 %116, 0
%114 = i64 Or i64 %117, %118
store i64 %114, i64 tmp_dword1
%119 = i64 Lshr i64 %17, 0
%120 = Extract i16 of i64 %119 <15, 0>
%122 = load i64, i64 tmp_dword2
%123 = Zext i16 %120 to i64
%124 = i64 And i64 %122, 281474976710655
%125 = i64 Shl i64 %123, 48
%121 = i64 Or i64 %124, %125
store i64 %121, i64 tmp_dword2
br label %bb13
bb23:
%126 = i64 Lshr i64 %17, 8
%127 = Extract i56 of i64 %126 <55, 0>
%129 = load i64, i64 tmp_dword1
%130 = Zext i56 %127 to i64
%131 = i64 And i64 %129, -72057594037927936
%132 = i64 Shl i64 %130, 0
%128 = i64 Or i64 %131, %132
store i64 %128, i64 tmp_dword1
%133 = i64 Lshr i64 %17, 0
%134 = Extract i8 of i64 %133 <7, 0>
%136 = load i64, i64 tmp_dword2
%137 = Zext i8 %134 to i64
%138 = i64 And i64 %136, 72057594037927935
%139 = i64 Shl i64 %137, 56
%135 = i64 Or i64 %138, %139
store i64 %135, i64 tmp_dword2
br label %bb13
bb24:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_1.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[8]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb5, label %bb6
bb5:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
br label %bb10
bb8:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb11
bb9:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb12, label %bb13
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb14, label %bb15
bb11:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb7
bb12:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb11
bb13:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb16, label %bb17
bb14:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb18
bb15:
br label %bb18
bb16:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb11
bb17:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb19, label %bb20
bb18:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb19:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb11
bb20:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb21, label %bb22
bb21:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb11
bb22:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb23, label %bb24
bb23:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb11
bb24:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb11

inline blocks
insn_1.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[8]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

COMPILE
insn_2.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 1} X, func void [i5] {i5 2} X, i12 8} sd} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_2.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb24
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 1} X, func void [i5] {i5 2} X, i12 8} sd} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
store i64 %19, i64 rs2_var
%17 = load i64, i64 rs2_var
%20 = i64 Lshr i64 %14, 3
%21 = Extract i53 of i64 %20 <52, 0>
store i53 %21, i53 mem_index
%22 = Extract i3 of i64 %14 <2, 0>
%23 = i1 Eq i3 %22, 0
br i1 %23, label %bb8, label %bb9
bb8:
%24 = load i53, i53 mem_index
store i64 %17, [9007199254740992, i64] MEM[%24]
br label %bb10
bb9:
%25 = load i53, i53 mem_index
%26 = i53 Add i53 %25, 1
%27 = load i64, [9007199254740992, i64] MEM[%26]
store i64 %27, i64 tmp_dword1
%28 = load i53, i53 mem_index
%29 = load i64, [9007199254740992, i64] MEM[%28]
store i64 %29, i64 tmp_dword2
%30 = Extract i3 of i64 %14 <2, 0>
%31 = i1 Eq i3 %30, 1
br i1 %31, label %bb11, label %bb12
bb10:
br label %bb6
bb11:
%32 = i64 Lshr i64 %17, 56
%33 = Extract i8 of i64 %32 <7, 0>
%35 = load i64, i64 tmp_dword1
%36 = Zext i8 %33 to i64
%37 = i64 And i64 %35, -256
%38 = i64 Shl i64 %36, 0
%34 = i64 Or i64 %37, %38
store i64 %34, i64 tmp_dword1
%39 = i64 Lshr i64 %17, 0
%40 = Extract i56 of i64 %39 <55, 0>
%42 = load i64, i64 tmp_dword2
%43 = Zext i56 %40 to i64
%44 = i64 And i64 %42, 255
%45 = i64 Shl i64 %43, 8
%41 = i64 Or i64 %44, %45
store i64 %41, i64 tmp_dword2
br label %bb13
bb12:
%46 = Extract i3 of i64 %14 <2, 0>
%47 = i1 Eq i3 %46, 2
br i1 %47, label %bb14, label %bb15
bb13:
%140 = load i64, i64 tmp_dword1
%141 = load i53, i53 mem_index
%142 = i53 Add i53 %141, 1
store i64 %140, [9007199254740992, i64] MEM[%142]
%143 = load i64, i64 tmp_dword2
%144 = load i53, i53 mem_index
store i64 %143, [9007199254740992, i64] MEM[%144]
br label %bb10
bb14:
%48 = i64 Lshr i64 %17, 48
%49 = Extract i16 of i64 %48 <15, 0>
%51 = load i64, i64 tmp_dword1
%52 = Zext i16 %49 to i64
%53 = i64 And i64 %51, -65536
%54 = i64 Shl i64 %52, 0
%50 = i64 Or i64 %53, %54
store i64 %50, i64 tmp_dword1
%55 = i64 Lshr i64 %17, 0
%56 = Extract i48 of i64 %55 <47, 0>
%58 = load i64, i64 tmp_dword2
%59 = Zext i48 %56 to i64
%60 = i64 And i64 %58, 65535
%61 = i64 Shl i64 %59, 16
%57 = i64 Or i64 %60, %61
store i64 %57, i64 tmp_dword2
br label %bb13
bb15:
%62 = Extract i3 of i64 %14 <2, 0>
%63 = i1 Eq i3 %62, 3
br i1 %63, label %bb16, label %bb17
bb16:
%64 = i64 Lshr i64 %17, 40
%65 = Extract i24 of i64 %64 <23, 0>
%67 = load i64, i64 tmp_dword1
%68 = Zext i24 %65 to i64
%69 = i64 And i64 %67, -16777216
%70 = i64 Shl i64 %68, 0
%66 = i64 Or i64 %69, %70
store i64 %66, i64 tmp_dword1
%71 = i64 Lshr i64 %17, 0
%72 = Extract i40 of i64 %71 <39, 0>
%74 = load i64, i64 tmp_dword2
%75 = Zext i40 %72 to i64
%76 = i64 And i64 %74, 16777215
%77 = i64 Shl i64 %75, 24
%73 = i64 Or i64 %76, %77
store i64 %73, i64 tmp_dword2
br label %bb13
bb17:
%78 = Extract i3 of i64 %14 <2, 0>
%79 = i1 Eq i3 %78, -4
br i1 %79, label %bb18, label %bb19
bb18:
%80 = i64 Lshr i64 %17, 32
%81 = Extract i32 of i64 %80 <31, 0>
%83 = load i64, i64 tmp_dword1
%84 = Zext i32 %81 to i64
%85 = i64 And i64 %83, -4294967296
%86 = i64 Shl i64 %84, 0
%82 = i64 Or i64 %85, %86
store i64 %82, i64 tmp_dword1
%87 = i64 Lshr i64 %17, 0
%88 = Extract i32 of i64 %87 <31, 0>
%90 = load i64, i64 tmp_dword2
%91 = Zext i32 %88 to i64
%92 = i64 And i64 %90, 4294967295
%93 = i64 Shl i64 %91, 32
%89 = i64 Or i64 %92, %93
store i64 %89, i64 tmp_dword2
br label %bb13
bb19:
%94 = Extract i3 of i64 %14 <2, 0>
%95 = i1 Eq i3 %94, -3
br i1 %95, label %bb20, label %bb21
bb20:
%96 = i64 Lshr i64 %17, 24
%97 = Extract i40 of i64 %96 <39, 0>
%99 = load i64, i64 tmp_dword1
%100 = Zext i40 %97 to i64
%101 = i64 And i64 %99, -1099511627776
%102 = i64 Shl i64 %100, 0
%98 = i64 Or i64 %101, %102
store i64 %98, i64 tmp_dword1
%103 = i64 Lshr i64 %17, 0
%104 = Extract i24 of i64 %103 <23, 0>
%106 = load i64, i64 tmp_dword2
%107 = Zext i24 %104 to i64
%108 = i64 And i64 %106, 1099511627775
%109 = i64 Shl i64 %107, 40
%105 = i64 Or i64 %108, %109
store i64 %105, i64 tmp_dword2
br label %bb13
bb21:
%110 = Extract i3 of i64 %14 <2, 0>
%111 = i1 Eq i3 %110, -2
br i1 %111, label %bb22, label %bb23
bb22:
%112 = i64 Lshr i64 %17, 16
%113 = Extract i48 of i64 %112 <47, 0>
%115 = load i64, i64 tmp_dword1
%116 = Zext i48 %113 to i64
%117 = i64 And i64 %115, -281474976710656
%118 = i64 Shl i64 %116, 0
%114 = i64 Or i64 %117, %118
store i64 %114, i64 tmp_dword1
%119 = i64 Lshr i64 %17, 0
%120 = Extract i16 of i64 %119 <15, 0>
%122 = load i64, i64 tmp_dword2
%123 = Zext i16 %120 to i64
%124 = i64 And i64 %122, 281474976710655
%125 = i64 Shl i64 %123, 48
%121 = i64 Or i64 %124, %125
store i64 %121, i64 tmp_dword2
br label %bb13
bb23:
%126 = i64 Lshr i64 %17, 8
%127 = Extract i56 of i64 %126 <55, 0>
%129 = load i64, i64 tmp_dword1
%130 = Zext i56 %127 to i64
%131 = i64 And i64 %129, -72057594037927936
%132 = i64 Shl i64 %130, 0
%128 = i64 Or i64 %131, %132
store i64 %128, i64 tmp_dword1
%133 = i64 Lshr i64 %17, 0
%134 = Extract i8 of i64 %133 <7, 0>
%136 = load i64, i64 tmp_dword2
%137 = Zext i8 %134 to i64
%138 = i64 And i64 %136, 72057594037927935
%139 = i64 Shl i64 %137, 56
%135 = i64 Or i64 %138, %139
store i64 %135, i64 tmp_dword2
br label %bb13
bb24:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_2.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[1]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb5, label %bb6
bb5:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
br label %bb10
bb8:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb11
bb9:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb12, label %bb13
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb14, label %bb15
bb11:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb7
bb12:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb11
bb13:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb16, label %bb17
bb14:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb18
bb15:
br label %bb18
bb16:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb11
bb17:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb19, label %bb20
bb18:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb19:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb11
bb20:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb21, label %bb22
bb21:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb11
bb22:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb23, label %bb24
bb23:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb11
bb24:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb11

inline blocks
insn_2.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[1]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

COMPILE
insn_3.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 8} X, func void [i5] {i5 10} X, i12 0} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_3.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 8} X, func void [i5] {i5 10} X, i12 0} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_3.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[8]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_3.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[8]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_4.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 12} X, func void [i5] {i5 0} X, func void [i12] {i12 6} BRANCH_IMM} beq} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_4.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb10
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i12]]] {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 12} X, func void [i5] {i5 0} X, func void [i12] {i12 6} BRANCH_IMM} beq} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
%20 = Disclose i5 of func i64 [i5] %10 i32 0
%21 = load i64, [32, i64] XREG[%20]
%12 = i1 Eq i64 %19, %21
br i1 %12, label %bb8, label %bb9
bb8:
br label %bb13
bb9:
br label %bb6
bb10:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7
bb11:
%14 = Sext i12 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb12:
%13 = i12 Use i12 %22
br label %bb11
bb13:
%22 = Disclose void of func i12 [] %11 i32 0
br label %bb12

propagate
insn_4.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%13 = load i64, [32, i64] XREG[12]
%14 = load i64, [32, i64] XREG[0]
%8 = i1 Eq i64 %13, %14
br i1 %8, label %bb5, label %bb6
bb5:
br label %bb7
bb6:
br label %bb8
bb7:
br label %bb9
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb10, label %bb11
bb9:
br label %bb12
bb10:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb11:
br label %bb13
bb12:
%9 = Sext i12 6 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_4.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[12]
%14 = load i64, [32, i64] XREG[0]
%8 = i1 Eq i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 6 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_5.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 11} X, func void [i5] {i5 11} X, i12 255} andi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_5.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 11} X, func void [i5] {i5 11} X, i12 255} andi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 And i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_5.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 255 to i64
%10 = load i64, [32, i64] XREG[11]
%9 = i64 And i64 %10, %8
store i64 %9, [32, i64] XREG[11]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_5.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 255 to i64
%10 = load i64, [32, i64] XREG[11]
%9 = i64 And i64 %10, %8
store i64 %9, [32, i64] XREG[11]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_6.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i20]] {func void [i5] {i5 1} X, func void [i20] {i20 1048564} JUMP_IMM} jal} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_6.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i20]]] {func void [func void [i5], func void [i20]] {func void [i5] {i5 1} X, func void [i20] {i20 1048564} JUMP_IMM} jal} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, 4
%18 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %12, [32, i64] XREG[%18]
br label %bb11
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
br label %bb7
bb9:
%14 = Sext i20 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb10:
%13 = i20 Use i20 %19
br label %bb9
bb11:
%19 = Disclose i64 of func i20 [] %10 i32 0
br label %bb10

propagate
insn_6.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[1]
br label %bb5
bb5:
br label %bb6
bb6:
br label %bb7
bb7:
%10 = Sext i20 1048564 to i64
%11 = i64 Shl i64 %10, 1
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, %11
store i64 %13, i64 PC
br label %bb8
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_6.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[1]
%10 = Sext i20 1048564 to i64
%11 = i64 Shl i64 %10, 1
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, %11
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_7.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 1} X, func void [i5] {i5 2} X, i12 8} ld} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_7.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb23
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 1} X, func void [i5] {i5 2} X, i12 8} ld} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = i64 Lshr i64 %14, 3
%19 = Extract i53 of i64 %18 <52, 0>
store i53 %19, i53 mem_index
%20 = Extract i3 of i64 %14 <2, 0>
%21 = i1 Eq i3 %20, 0
br i1 %21, label %bb8, label %bb9
bb8:
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword
br label %bb10
bb9:
%24 = load i53, i53 mem_index
%25 = i53 Add i53 %24, 1
%26 = load i64, [9007199254740992, i64] MEM[%25]
store i64 %26, i64 tmp_dword1
%27 = load i53, i53 mem_index
%28 = load i64, [9007199254740992, i64] MEM[%27]
store i64 %28, i64 tmp_dword2
%29 = Extract i3 of i64 %14 <2, 0>
%30 = i1 Eq i3 %29, 1
br i1 %30, label %bb11, label %bb12
bb10:
%76 = load i64, i64 tmp_dword
store i64 %76, i64 rd_var
%17 = load i64, i64 rd_var
%77 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %17, [32, i64] XREG[%77]
br label %bb6
bb11:
%32 = load i64, i64 tmp_dword1
%33 = Extract i8 of i64 %32 <7, 0>
%34 = load i64, i64 tmp_dword2
%35 = Extract i56 of i64 %34 <63, 8>
%31 = Concat i64 i8 %33, i56 %35
store i64 %31, i64 tmp_dword
br label %bb10
bb12:
%36 = Extract i3 of i64 %14 <2, 0>
%37 = i1 Eq i3 %36, 2
br i1 %37, label %bb13, label %bb14
bb13:
%39 = load i64, i64 tmp_dword1
%40 = Extract i16 of i64 %39 <15, 0>
%41 = load i64, i64 tmp_dword2
%42 = Extract i48 of i64 %41 <63, 16>
%38 = Concat i64 i16 %40, i48 %42
store i64 %38, i64 tmp_dword
br label %bb10
bb14:
%43 = Extract i3 of i64 %14 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb15, label %bb16
bb15:
%46 = load i64, i64 tmp_dword1
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2
%49 = Extract i40 of i64 %48 <63, 24>
%45 = Concat i64 i24 %47, i40 %49
store i64 %45, i64 tmp_dword
br label %bb10
bb16:
%50 = Extract i3 of i64 %14 <2, 0>
%51 = i1 Eq i3 %50, -4
br i1 %51, label %bb17, label %bb18
bb17:
%53 = load i64, i64 tmp_dword1
%54 = Extract i32 of i64 %53 <31, 0>
%55 = load i64, i64 tmp_dword2
%56 = Extract i32 of i64 %55 <63, 32>
%52 = Concat i64 i32 %54, i32 %56
store i64 %52, i64 tmp_dword
br label %bb10
bb18:
%57 = Extract i3 of i64 %14 <2, 0>
%58 = i1 Eq i3 %57, -3
br i1 %58, label %bb19, label %bb20
bb19:
%60 = load i64, i64 tmp_dword1
%61 = Extract i40 of i64 %60 <39, 0>
%62 = load i64, i64 tmp_dword2
%63 = Extract i24 of i64 %62 <63, 40>
%59 = Concat i64 i40 %61, i24 %63
store i64 %59, i64 tmp_dword
br label %bb10
bb20:
%64 = Extract i3 of i64 %14 <2, 0>
%65 = i1 Eq i3 %64, -2
br i1 %65, label %bb21, label %bb22
bb21:
%67 = load i64, i64 tmp_dword1
%68 = Extract i48 of i64 %67 <47, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i16 of i64 %69 <63, 48>
%66 = Concat i64 i48 %68, i16 %70
store i64 %66, i64 tmp_dword
br label %bb10
bb22:
%72 = load i64, i64 tmp_dword1
%73 = Extract i56 of i64 %72 <55, 0>
%74 = load i64, i64 tmp_dword2
%75 = Extract i8 of i64 %74 <63, 56>
%71 = Concat i64 i56 %73, i8 %75
store i64 %71, i64 tmp_dword
br label %bb10
bb23:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_7.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb5, label %bb6
bb5:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[1]
br label %bb10
bb8:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb7
bb9:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb11, label %bb12
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb13, label %bb14
bb11:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb7
bb12:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb15, label %bb16
bb13:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb17
bb14:
br label %bb17
bb15:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb7
bb16:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb18, label %bb19
bb17:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb18:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb7
bb19:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb20, label %bb21
bb20:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb7
bb21:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb22, label %bb23
bb22:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb7
bb23:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb7

inline blocks
insn_7.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[1]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb13:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb3

COMPILE
insn_8.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 10} X, func void [i5] {i5 8} X, i12 0} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_8.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 10} X, func void [i5] {i5 8} X, i12 0} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_8.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[8]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_8.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[8]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_9.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 8} X, func void [i5] {i5 2} X, i12 0} ld} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_9.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb23
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 8} X, func void [i5] {i5 2} X, i12 0} ld} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = i64 Lshr i64 %14, 3
%19 = Extract i53 of i64 %18 <52, 0>
store i53 %19, i53 mem_index
%20 = Extract i3 of i64 %14 <2, 0>
%21 = i1 Eq i3 %20, 0
br i1 %21, label %bb8, label %bb9
bb8:
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword
br label %bb10
bb9:
%24 = load i53, i53 mem_index
%25 = i53 Add i53 %24, 1
%26 = load i64, [9007199254740992, i64] MEM[%25]
store i64 %26, i64 tmp_dword1
%27 = load i53, i53 mem_index
%28 = load i64, [9007199254740992, i64] MEM[%27]
store i64 %28, i64 tmp_dword2
%29 = Extract i3 of i64 %14 <2, 0>
%30 = i1 Eq i3 %29, 1
br i1 %30, label %bb11, label %bb12
bb10:
%76 = load i64, i64 tmp_dword
store i64 %76, i64 rd_var
%17 = load i64, i64 rd_var
%77 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %17, [32, i64] XREG[%77]
br label %bb6
bb11:
%32 = load i64, i64 tmp_dword1
%33 = Extract i8 of i64 %32 <7, 0>
%34 = load i64, i64 tmp_dword2
%35 = Extract i56 of i64 %34 <63, 8>
%31 = Concat i64 i8 %33, i56 %35
store i64 %31, i64 tmp_dword
br label %bb10
bb12:
%36 = Extract i3 of i64 %14 <2, 0>
%37 = i1 Eq i3 %36, 2
br i1 %37, label %bb13, label %bb14
bb13:
%39 = load i64, i64 tmp_dword1
%40 = Extract i16 of i64 %39 <15, 0>
%41 = load i64, i64 tmp_dword2
%42 = Extract i48 of i64 %41 <63, 16>
%38 = Concat i64 i16 %40, i48 %42
store i64 %38, i64 tmp_dword
br label %bb10
bb14:
%43 = Extract i3 of i64 %14 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb15, label %bb16
bb15:
%46 = load i64, i64 tmp_dword1
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2
%49 = Extract i40 of i64 %48 <63, 24>
%45 = Concat i64 i24 %47, i40 %49
store i64 %45, i64 tmp_dword
br label %bb10
bb16:
%50 = Extract i3 of i64 %14 <2, 0>
%51 = i1 Eq i3 %50, -4
br i1 %51, label %bb17, label %bb18
bb17:
%53 = load i64, i64 tmp_dword1
%54 = Extract i32 of i64 %53 <31, 0>
%55 = load i64, i64 tmp_dword2
%56 = Extract i32 of i64 %55 <63, 32>
%52 = Concat i64 i32 %54, i32 %56
store i64 %52, i64 tmp_dword
br label %bb10
bb18:
%57 = Extract i3 of i64 %14 <2, 0>
%58 = i1 Eq i3 %57, -3
br i1 %58, label %bb19, label %bb20
bb19:
%60 = load i64, i64 tmp_dword1
%61 = Extract i40 of i64 %60 <39, 0>
%62 = load i64, i64 tmp_dword2
%63 = Extract i24 of i64 %62 <63, 40>
%59 = Concat i64 i40 %61, i24 %63
store i64 %59, i64 tmp_dword
br label %bb10
bb20:
%64 = Extract i3 of i64 %14 <2, 0>
%65 = i1 Eq i3 %64, -2
br i1 %65, label %bb21, label %bb22
bb21:
%67 = load i64, i64 tmp_dword1
%68 = Extract i48 of i64 %67 <47, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i16 of i64 %69 <63, 48>
%66 = Concat i64 i48 %68, i16 %70
store i64 %66, i64 tmp_dword
br label %bb10
bb22:
%72 = load i64, i64 tmp_dword1
%73 = Extract i56 of i64 %72 <55, 0>
%74 = load i64, i64 tmp_dword2
%75 = Extract i8 of i64 %74 <63, 56>
%71 = Concat i64 i56 %73, i8 %75
store i64 %71, i64 tmp_dword
br label %bb10
bb23:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_9.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb5, label %bb6
bb5:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb7
bb6:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb8, label %bb9
bb7:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[8]
br label %bb10
bb8:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb7
bb9:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb11, label %bb12
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb13, label %bb14
bb11:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb7
bb12:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb15, label %bb16
bb13:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb17
bb14:
br label %bb17
bb15:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb7
bb16:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb18, label %bb19
bb17:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb18:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb7
bb19:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb20, label %bb21
bb20:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb7
bb21:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb22, label %bb23
bb22:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb7
bb23:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb7

inline blocks
insn_9.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[8]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb13:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb3

COMPILE
insn_10.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 2} X, func void [i5] {i5 2} X, i12 16} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_10.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 2} X, func void [i5] {i5 2} X, i12 16} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_10.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[2]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_10.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[2]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_11.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 0} X, func void [i5] {i5 1} X, i12 0} jalr} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_11.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 0} X, func void [i5] {i5 1} X, i12 0} jalr} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, 4
%18 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%18]
%14 = Sext i12 %11 to i64
%15 = i64 Lshr i64 %14, 1
%16 = i64 Shl i64 %15, 1
%19 = Disclose i5 of func i64 [i5] %10 i32 0
%20 = load i64, [32, i64] XREG[%19]
%17 = i64 Add i64 %20, %16
store i64 %17, i64 PC
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_11.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_11.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_0.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4080 to i64
%10 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[2]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4080 to i64
%10 = load i64, [32, i64] XREG!2[2]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[2]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, -16
XREG!3 = store i64 %1, [32, i64] XREG!2[2]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, -16
XREG!3 = store i64 %1, [32, i64] XREG!2[2]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, -16
XREG!3 = store i64 %1, [32, i64] XREG!2[2]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, -16
XREG!3 = store i64 %1, [32, i64] XREG!2[2]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_1.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[8]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

build SSA
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG!2[2]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = load i64, [32, i64] XREG!2[8]
rs2_var!2 = store i64 %13, i64 rs2_var!1
%12 = load i64, i64 rs2_var!2
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
mem_index!2 = store i53 %15, i53 mem_index!1
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index!2
MEM!5 = store i64 %12, [9007199254740992, i64] MEM!1[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!2 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!2 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!4 = phi ite %17 MEM!5 MEM!3
tmp_dword2!11 = phi ite %17 tmp_dword2!1 tmp_dword2!4
tmp_dword1!11 = phi ite %17 tmp_dword1!1 tmp_dword1!4
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1!2
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
tmp_dword1!3 = store i64 %28, i64 tmp_dword1!2
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2!2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
tmp_dword2!3 = store i64 %35, i64 tmp_dword2!2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
tmp_dword2!4 = phi ite %25 tmp_dword2!3 ite %41 tmp_dword2!5 ite %57 tmp_dword2!6 ite %73 tmp_dword2!7 ite %89 tmp_dword2!8 ite %105 tmp_dword2!9 tmp_dword2!10
tmp_dword1!4 = phi ite %25 tmp_dword1!3 ite %41 tmp_dword1!5 ite %57 tmp_dword1!6 ite %73 tmp_dword1!7 ite %89 tmp_dword1!8 ite %105 tmp_dword1!9 tmp_dword1!10
%134 = load i64, i64 tmp_dword1!4
%135 = load i53, i53 mem_index!2
%136 = i53 Add i53 %135, 1
MEM!2 = store i64 %134, [9007199254740992, i64] MEM!1[%136]
%137 = load i64, i64 tmp_dword2!4
%138 = load i53, i53 mem_index!2
MEM!3 = store i64 %137, [9007199254740992, i64] MEM!2[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1!2
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
tmp_dword1!5 = store i64 %44, i64 tmp_dword1!2
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2!2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
tmp_dword2!5 = store i64 %51, i64 tmp_dword2!2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1!2
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
tmp_dword1!6 = store i64 %60, i64 tmp_dword1!2
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2!2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
tmp_dword2!6 = store i64 %67, i64 tmp_dword2!2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1!2
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
tmp_dword1!7 = store i64 %76, i64 tmp_dword1!2
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2!2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
tmp_dword2!7 = store i64 %83, i64 tmp_dword2!2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1!2
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
tmp_dword1!8 = store i64 %92, i64 tmp_dword1!2
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2!2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
tmp_dword2!8 = store i64 %99, i64 tmp_dword2!2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1!2
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
tmp_dword1!9 = store i64 %108, i64 tmp_dword1!2
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2!2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
tmp_dword2!9 = store i64 %115, i64 tmp_dword2!2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1!2
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
tmp_dword1!10 = store i64 %122, i64 tmp_dword1!2
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2!2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
tmp_dword2!10 = store i64 %129, i64 tmp_dword2!2
br label %bb6

SSA forward
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[8]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!4 = phi ite %7 MEM!5 MEM!3
tmp_dword2!11 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!11 = phi ite %7 tmp_dword1!1 tmp_dword1!4
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!3 = store i64 %15, i64 tmp_dword1!2
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!3 = store i64 %21, i64 tmp_dword2!2
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!2 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!3 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!2[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!2
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!2
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!2
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!2
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!2
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!2
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!2
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!2
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!9 = store i64 %85, i64 tmp_dword1!2
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!9 = store i64 %91, i64 tmp_dword2!2
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!10 = store i64 %97, i64 tmp_dword1!2
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!10 = store i64 %103, i64 tmp_dword2!2
br label %bb7

Nested SCCP
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[8]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!4 = phi ite %7 MEM!5 MEM!3
tmp_dword2!11 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!11 = phi ite %7 tmp_dword1!1 tmp_dword1!4
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!3 = store i64 %15, i64 tmp_dword1!2
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!3 = store i64 %21, i64 tmp_dword2!2
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!2 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!3 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!2[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!2
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!2
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!2
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!2
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!2
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!2
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!2
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!2
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!9 = store i64 %85, i64 tmp_dword1!2
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!9 = store i64 %91, i64 tmp_dword2!2
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!10 = store i64 %97, i64 tmp_dword1!2
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!10 = store i64 %103, i64 tmp_dword2!2
br label %bb7

SCCP forward
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[8]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!4 = phi ite %7 MEM!5 MEM!3
tmp_dword2!11 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!11 = phi ite %7 tmp_dword1!1 tmp_dword1!4
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!3 = store i64 %15, i64 tmp_dword1!2
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!3 = store i64 %21, i64 tmp_dword2!2
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!2 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!3 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!2[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!2
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!2
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!2
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!2
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!2
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!2
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!2
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!2
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!9 = store i64 %85, i64 tmp_dword1!2
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!9 = store i64 %91, i64 tmp_dword2!2
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!10 = store i64 %97, i64 tmp_dword1!2
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!10 = store i64 %103, i64 tmp_dword2!2
br label %bb7

cherry
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[8]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!4 = phi ite %7 MEM!5 MEM!3
tmp_dword2!11 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!11 = phi ite %7 tmp_dword1!1 tmp_dword1!4
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!3 = store i64 %15, i64 tmp_dword1!2
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!3 = store i64 %21, i64 tmp_dword2!2
br label %bb6
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb7, label %bb8
bb6:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!2 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!3 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!2[%5]
br label %bb3
bb7:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %29, i64 tmp_dword1!2
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!2
br label %bb6
bb8:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb9, label %bb10
bb9:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!2
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!2
br label %bb6
bb10:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb11, label %bb12
bb11:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!2
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!2
br label %bb6
bb12:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb13, label %bb14
bb13:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!2
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!2
br label %bb6
bb14:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb15, label %bb16
bb15:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!9 = store i64 %85, i64 tmp_dword1!2
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!9 = store i64 %91, i64 tmp_dword2!2
br label %bb6
bb16:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!10 = store i64 %97, i64 tmp_dword1!2
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!10 = store i64 %103, i64 tmp_dword2!2
br label %bb6

COMPILE
insn_2.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = load i64, [32, i64] XREG[1]
store i64 %13, i64 rs2_var
%12 = load i64, i64 rs2_var
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index
store i64 %12, [9007199254740992, i64] MEM[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
store i64 %28, i64 tmp_dword1
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
store i64 %35, i64 tmp_dword2
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
%134 = load i64, i64 tmp_dword1
%135 = load i53, i53 mem_index
%136 = i53 Add i53 %135, 1
store i64 %134, [9007199254740992, i64] MEM[%136]
%137 = load i64, i64 tmp_dword2
%138 = load i53, i53 mem_index
store i64 %137, [9007199254740992, i64] MEM[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword1
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
store i64 %51, i64 tmp_dword2
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword1
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
store i64 %67, i64 tmp_dword2
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword1
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
store i64 %83, i64 tmp_dword2
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword1
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
store i64 %99, i64 tmp_dword2
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword1
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
store i64 %115, i64 tmp_dword2
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
store i64 %122, i64 tmp_dword1
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
store i64 %129, i64 tmp_dword2
br label %bb6

build SSA
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG!2[2]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = load i64, [32, i64] XREG!2[1]
rs2_var!2 = store i64 %13, i64 rs2_var!1
%12 = load i64, i64 rs2_var!2
%14 = i64 Lshr i64 %10, 3
%15 = Extract i53 of i64 %14 <52, 0>
mem_index!2 = store i53 %15, i53 mem_index!1
%16 = Extract i3 of i64 %10 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb1, label %bb2
bb1:
%18 = load i53, i53 mem_index!2
MEM!5 = store i64 %12, [9007199254740992, i64] MEM!1[%18]
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!3 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!3 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %17 MEM!5 MEM!4
tmp_dword2!2 = phi ite %17 tmp_dword2!1 tmp_dword2!4
tmp_dword1!2 = phi ite %17 tmp_dword1!1 tmp_dword1!4
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb9, label %bb10
bb4:
%26 = i64 Lshr i64 %12, 56
%27 = Extract i8 of i64 %26 <7, 0>
%29 = load i64, i64 tmp_dword1!3
%30 = Zext i8 %27 to i64
%31 = i64 And i64 %29, -256
%32 = i64 Shl i64 %30, 0
%28 = i64 Or i64 %31, %32
tmp_dword1!5 = store i64 %28, i64 tmp_dword1!3
%33 = i64 Lshr i64 %12, 0
%34 = Extract i56 of i64 %33 <55, 0>
%36 = load i64, i64 tmp_dword2!3
%37 = Zext i56 %34 to i64
%38 = i64 And i64 %36, 255
%39 = i64 Shl i64 %37, 8
%35 = i64 Or i64 %38, %39
tmp_dword2!5 = store i64 %35, i64 tmp_dword2!3
br label %bb6
bb5:
%40 = Extract i3 of i64 %10 <2, 0>
%41 = i1 Eq i3 %40, 2
br i1 %41, label %bb7, label %bb8
bb6:
tmp_dword2!4 = phi ite %25 tmp_dword2!5 ite %41 tmp_dword2!11 ite %57 tmp_dword2!6 ite %73 tmp_dword2!7 ite %89 tmp_dword2!8 ite %105 tmp_dword2!10 tmp_dword2!9
tmp_dword1!4 = phi ite %25 tmp_dword1!5 ite %41 tmp_dword1!11 ite %57 tmp_dword1!6 ite %73 tmp_dword1!7 ite %89 tmp_dword1!8 ite %105 tmp_dword1!10 tmp_dword1!9
%134 = load i64, i64 tmp_dword1!4
%135 = load i53, i53 mem_index!2
%136 = i53 Add i53 %135, 1
MEM!3 = store i64 %134, [9007199254740992, i64] MEM!1[%136]
%137 = load i64, i64 tmp_dword2!4
%138 = load i53, i53 mem_index!2
MEM!4 = store i64 %137, [9007199254740992, i64] MEM!3[%138]
br label %bb3
bb7:
%42 = i64 Lshr i64 %12, 48
%43 = Extract i16 of i64 %42 <15, 0>
%45 = load i64, i64 tmp_dword1!3
%46 = Zext i16 %43 to i64
%47 = i64 And i64 %45, -65536
%48 = i64 Shl i64 %46, 0
%44 = i64 Or i64 %47, %48
tmp_dword1!11 = store i64 %44, i64 tmp_dword1!3
%49 = i64 Lshr i64 %12, 0
%50 = Extract i48 of i64 %49 <47, 0>
%52 = load i64, i64 tmp_dword2!3
%53 = Zext i48 %50 to i64
%54 = i64 And i64 %52, 65535
%55 = i64 Shl i64 %53, 16
%51 = i64 Or i64 %54, %55
tmp_dword2!11 = store i64 %51, i64 tmp_dword2!3
br label %bb6
bb8:
%56 = Extract i3 of i64 %10 <2, 0>
%57 = i1 Eq i3 %56, 3
br i1 %57, label %bb11, label %bb12
bb9:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb13
bb10:
br label %bb13
bb11:
%58 = i64 Lshr i64 %12, 40
%59 = Extract i24 of i64 %58 <23, 0>
%61 = load i64, i64 tmp_dword1!3
%62 = Zext i24 %59 to i64
%63 = i64 And i64 %61, -16777216
%64 = i64 Shl i64 %62, 0
%60 = i64 Or i64 %63, %64
tmp_dword1!6 = store i64 %60, i64 tmp_dword1!3
%65 = i64 Lshr i64 %12, 0
%66 = Extract i40 of i64 %65 <39, 0>
%68 = load i64, i64 tmp_dword2!3
%69 = Zext i40 %66 to i64
%70 = i64 And i64 %68, 16777215
%71 = i64 Shl i64 %69, 24
%67 = i64 Or i64 %70, %71
tmp_dword2!6 = store i64 %67, i64 tmp_dword2!3
br label %bb6
bb12:
%72 = Extract i3 of i64 %10 <2, 0>
%73 = i1 Eq i3 %72, -4
br i1 %73, label %bb14, label %bb15
bb13:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void
bb14:
%74 = i64 Lshr i64 %12, 32
%75 = Extract i32 of i64 %74 <31, 0>
%77 = load i64, i64 tmp_dword1!3
%78 = Zext i32 %75 to i64
%79 = i64 And i64 %77, -4294967296
%80 = i64 Shl i64 %78, 0
%76 = i64 Or i64 %79, %80
tmp_dword1!7 = store i64 %76, i64 tmp_dword1!3
%81 = i64 Lshr i64 %12, 0
%82 = Extract i32 of i64 %81 <31, 0>
%84 = load i64, i64 tmp_dword2!3
%85 = Zext i32 %82 to i64
%86 = i64 And i64 %84, 4294967295
%87 = i64 Shl i64 %85, 32
%83 = i64 Or i64 %86, %87
tmp_dword2!7 = store i64 %83, i64 tmp_dword2!3
br label %bb6
bb15:
%88 = Extract i3 of i64 %10 <2, 0>
%89 = i1 Eq i3 %88, -3
br i1 %89, label %bb16, label %bb17
bb16:
%90 = i64 Lshr i64 %12, 24
%91 = Extract i40 of i64 %90 <39, 0>
%93 = load i64, i64 tmp_dword1!3
%94 = Zext i40 %91 to i64
%95 = i64 And i64 %93, -1099511627776
%96 = i64 Shl i64 %94, 0
%92 = i64 Or i64 %95, %96
tmp_dword1!8 = store i64 %92, i64 tmp_dword1!3
%97 = i64 Lshr i64 %12, 0
%98 = Extract i24 of i64 %97 <23, 0>
%100 = load i64, i64 tmp_dword2!3
%101 = Zext i24 %98 to i64
%102 = i64 And i64 %100, 1099511627775
%103 = i64 Shl i64 %101, 40
%99 = i64 Or i64 %102, %103
tmp_dword2!8 = store i64 %99, i64 tmp_dword2!3
br label %bb6
bb17:
%104 = Extract i3 of i64 %10 <2, 0>
%105 = i1 Eq i3 %104, -2
br i1 %105, label %bb18, label %bb19
bb18:
%106 = i64 Lshr i64 %12, 16
%107 = Extract i48 of i64 %106 <47, 0>
%109 = load i64, i64 tmp_dword1!3
%110 = Zext i48 %107 to i64
%111 = i64 And i64 %109, -281474976710656
%112 = i64 Shl i64 %110, 0
%108 = i64 Or i64 %111, %112
tmp_dword1!10 = store i64 %108, i64 tmp_dword1!3
%113 = i64 Lshr i64 %12, 0
%114 = Extract i16 of i64 %113 <15, 0>
%116 = load i64, i64 tmp_dword2!3
%117 = Zext i16 %114 to i64
%118 = i64 And i64 %116, 281474976710655
%119 = i64 Shl i64 %117, 48
%115 = i64 Or i64 %118, %119
tmp_dword2!10 = store i64 %115, i64 tmp_dword2!3
br label %bb6
bb19:
%120 = i64 Lshr i64 %12, 8
%121 = Extract i56 of i64 %120 <55, 0>
%123 = load i64, i64 tmp_dword1!3
%124 = Zext i56 %121 to i64
%125 = i64 And i64 %123, -72057594037927936
%126 = i64 Shl i64 %124, 0
%122 = i64 Or i64 %125, %126
tmp_dword1!9 = store i64 %122, i64 tmp_dword1!3
%127 = i64 Lshr i64 %12, 0
%128 = Extract i8 of i64 %127 <7, 0>
%130 = load i64, i64 tmp_dword2!3
%131 = Zext i8 %128 to i64
%132 = i64 And i64 %130, 72057594037927935
%133 = i64 Shl i64 %131, 56
%129 = i64 Or i64 %132, %133
tmp_dword2!9 = store i64 %129, i64 tmp_dword2!3
br label %bb6

SSA forward
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[1]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!5 MEM!4
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!4
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!5 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!5 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!11 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!11 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!10 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!10 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!9 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!9 = store i64 %103, i64 tmp_dword2!3
br label %bb7

Nested SCCP
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[1]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!5 MEM!4
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!4
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!5 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!5 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!11 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!11 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!10 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!10 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!9 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!9 = store i64 %103, i64 tmp_dword2!3
br label %bb7

SCCP forward
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[1]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!5 MEM!4
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!4
br label %bb6
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!5 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!5 = store i64 %21, i64 tmp_dword2!3
br label %bb7
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb8, label %bb9
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb10
bb7:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb8:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!11 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!11 = store i64 %35, i64 tmp_dword2!3
br label %bb7
bb9:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb11, label %bb12
bb10:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb11:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!3
br label %bb7
bb12:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb13, label %bb14
bb13:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!3
br label %bb7
bb14:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb15, label %bb16
bb15:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!3
br label %bb7
bb16:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!10 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!10 = store i64 %91, i64 tmp_dword2!3
br label %bb7
bb18:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!9 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!9 = store i64 %103, i64 tmp_dword2!3
br label %bb7

cherry
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = load i64, [32, i64] XREG!2[1]
rs2_var!2 = store i64 %3, i64 rs2_var!1
%4 = i64 Lshr i64 %1, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %1 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
MEM!5 = store i64 %3, [9007199254740992, i64] MEM!1[%5]
br label %bb3
bb2:
%8 = i53 Add i53 %5, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
MEM!2 = phi ite %7 MEM!5 MEM!4
tmp_dword2!2 = phi ite %7 tmp_dword2!1 tmp_dword2!4
tmp_dword1!2 = phi ite %7 tmp_dword1!1 tmp_dword1!4
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb4:
%13 = i64 Lshr i64 %3, 56
%14 = Extract i8 of i64 %13 <7, 0>
%16 = Zext i8 %14 to i64
%17 = i64 And i64 %9, -256
%18 = i64 Shl i64 %16, 0
%15 = i64 Or i64 %17, %18
tmp_dword1!5 = store i64 %15, i64 tmp_dword1!3
%19 = i64 Lshr i64 %3, 0
%20 = Extract i56 of i64 %19 <55, 0>
%22 = Zext i56 %20 to i64
%23 = i64 And i64 %10, 255
%24 = i64 Shl i64 %22, 8
%21 = i64 Or i64 %23, %24
tmp_dword2!5 = store i64 %21, i64 tmp_dword2!3
br label %bb6
bb5:
%25 = Extract i3 of i64 %1 <2, 0>
%26 = i1 Eq i3 %25, 2
br i1 %26, label %bb7, label %bb8
bb6:
tmp_dword2!4 = phi ite %12 %21 ite %26 %35 ite %40 %49 ite %54 %63 ite %68 %77 ite %82 %91 %103
tmp_dword1!4 = phi ite %12 %15 ite %26 %29 ite %40 %43 ite %54 %57 ite %68 %71 ite %82 %85 %97
%107 = i53 Add i53 %5, 1
MEM!3 = store i64 tmp_dword1!4, [9007199254740992, i64] MEM!1[%107]
MEM!4 = store i64 tmp_dword2!4, [9007199254740992, i64] MEM!3[%5]
br label %bb3
bb7:
%27 = i64 Lshr i64 %3, 48
%28 = Extract i16 of i64 %27 <15, 0>
%30 = Zext i16 %28 to i64
%31 = i64 And i64 %9, -65536
%32 = i64 Shl i64 %30, 0
%29 = i64 Or i64 %31, %32
tmp_dword1!11 = store i64 %29, i64 tmp_dword1!3
%33 = i64 Lshr i64 %3, 0
%34 = Extract i48 of i64 %33 <47, 0>
%36 = Zext i48 %34 to i64
%37 = i64 And i64 %10, 65535
%38 = i64 Shl i64 %36, 16
%35 = i64 Or i64 %37, %38
tmp_dword2!11 = store i64 %35, i64 tmp_dword2!3
br label %bb6
bb8:
%39 = Extract i3 of i64 %1 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb9, label %bb10
bb9:
%41 = i64 Lshr i64 %3, 40
%42 = Extract i24 of i64 %41 <23, 0>
%44 = Zext i24 %42 to i64
%45 = i64 And i64 %9, -16777216
%46 = i64 Shl i64 %44, 0
%43 = i64 Or i64 %45, %46
tmp_dword1!6 = store i64 %43, i64 tmp_dword1!3
%47 = i64 Lshr i64 %3, 0
%48 = Extract i40 of i64 %47 <39, 0>
%50 = Zext i40 %48 to i64
%51 = i64 And i64 %10, 16777215
%52 = i64 Shl i64 %50, 24
%49 = i64 Or i64 %51, %52
tmp_dword2!6 = store i64 %49, i64 tmp_dword2!3
br label %bb6
bb10:
%53 = Extract i3 of i64 %1 <2, 0>
%54 = i1 Eq i3 %53, -4
br i1 %54, label %bb11, label %bb12
bb11:
%55 = i64 Lshr i64 %3, 32
%56 = Extract i32 of i64 %55 <31, 0>
%58 = Zext i32 %56 to i64
%59 = i64 And i64 %9, -4294967296
%60 = i64 Shl i64 %58, 0
%57 = i64 Or i64 %59, %60
tmp_dword1!7 = store i64 %57, i64 tmp_dword1!3
%61 = i64 Lshr i64 %3, 0
%62 = Extract i32 of i64 %61 <31, 0>
%64 = Zext i32 %62 to i64
%65 = i64 And i64 %10, 4294967295
%66 = i64 Shl i64 %64, 32
%63 = i64 Or i64 %65, %66
tmp_dword2!7 = store i64 %63, i64 tmp_dword2!3
br label %bb6
bb12:
%67 = Extract i3 of i64 %1 <2, 0>
%68 = i1 Eq i3 %67, -3
br i1 %68, label %bb13, label %bb14
bb13:
%69 = i64 Lshr i64 %3, 24
%70 = Extract i40 of i64 %69 <39, 0>
%72 = Zext i40 %70 to i64
%73 = i64 And i64 %9, -1099511627776
%74 = i64 Shl i64 %72, 0
%71 = i64 Or i64 %73, %74
tmp_dword1!8 = store i64 %71, i64 tmp_dword1!3
%75 = i64 Lshr i64 %3, 0
%76 = Extract i24 of i64 %75 <23, 0>
%78 = Zext i24 %76 to i64
%79 = i64 And i64 %10, 1099511627775
%80 = i64 Shl i64 %78, 40
%77 = i64 Or i64 %79, %80
tmp_dword2!8 = store i64 %77, i64 tmp_dword2!3
br label %bb6
bb14:
%81 = Extract i3 of i64 %1 <2, 0>
%82 = i1 Eq i3 %81, -2
br i1 %82, label %bb15, label %bb16
bb15:
%83 = i64 Lshr i64 %3, 16
%84 = Extract i48 of i64 %83 <47, 0>
%86 = Zext i48 %84 to i64
%87 = i64 And i64 %9, -281474976710656
%88 = i64 Shl i64 %86, 0
%85 = i64 Or i64 %87, %88
tmp_dword1!10 = store i64 %85, i64 tmp_dword1!3
%89 = i64 Lshr i64 %3, 0
%90 = Extract i16 of i64 %89 <15, 0>
%92 = Zext i16 %90 to i64
%93 = i64 And i64 %10, 281474976710655
%94 = i64 Shl i64 %92, 48
%91 = i64 Or i64 %93, %94
tmp_dword2!10 = store i64 %91, i64 tmp_dword2!3
br label %bb6
bb16:
%95 = i64 Lshr i64 %3, 8
%96 = Extract i56 of i64 %95 <55, 0>
%98 = Zext i56 %96 to i64
%99 = i64 And i64 %9, -72057594037927936
%100 = i64 Shl i64 %98, 0
%97 = i64 Or i64 %99, %100
tmp_dword1!9 = store i64 %97, i64 tmp_dword1!3
%101 = i64 Lshr i64 %3, 0
%102 = Extract i8 of i64 %101 <7, 0>
%104 = Zext i8 %102 to i64
%105 = i64 And i64 %10, 72057594037927935
%106 = i64 Shl i64 %104, 56
%103 = i64 Or i64 %105, %106
tmp_dword2!9 = store i64 %103, i64 tmp_dword2!3
br label %bb6

COMPILE
insn_3.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[8]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG!2[10]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[8]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[8]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[8]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[8]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[8]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_4.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[12]
%14 = load i64, [32, i64] XREG[0]
%8 = i1 Eq i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 6 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%13 = load i64, [32, i64] XREG!2[12]
%14 = load i64, [32, i64] XREG!2[0]
%8 = i1 Eq i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 6 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC!1
%12 = i64 Add i64 %11, %10
PC!6 = store i64 %12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %8 PC!6 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!3 = store i64 %7, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %4 PC!3 PC!2
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[12]
%5 = load i64, [32, i64] XREG!2[0]
%3 = i1 Eq i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!6 = store i64 12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %3 12 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!2, 4
PC!3 = store i64 %2, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %1 %2 PC!2
PC!5 = store i64 PC!4, i64 PC!4
ret void

Nested SCCP
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[12]
%5 = load i64, [32, i64] XREG!2[0]
%3 = i1 Eq i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!6 = store i64 12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %3 12 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 0, 4
PC!3 = store i64 %2, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %3 12 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

SCCP forward
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[12]
%4 = load i64, [32, i64] XREG!2[0]
%2 = i1 Eq i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!6 = store i64 12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %2 12 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!3 = store i64 4, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 12 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

cherry
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[12]
%4 = load i64, [32, i64] XREG!2[0]
%2 = i1 Eq i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!6 = store i64 12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %2 12 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!3 = store i64 4, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 12 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

COMPILE
insn_5.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 255 to i64
%10 = load i64, [32, i64] XREG[11]
%9 = i64 And i64 %10, %8
store i64 %9, [32, i64] XREG[11]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 255 to i64
%10 = load i64, [32, i64] XREG!2[11]
%9 = i64 And i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[11]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[11]
%1 = i64 And i64 %2, 255
XREG!3 = store i64 %1, [32, i64] XREG!2[11]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[11]
%1 = i64 And i64 %2, 255
XREG!3 = store i64 %1, [32, i64] XREG!2[11]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[11]
%1 = i64 And i64 %2, 255
XREG!3 = store i64 %1, [32, i64] XREG!2[11]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[11]
%1 = i64 And i64 %2, 255
XREG!3 = store i64 %1, [32, i64] XREG!2[11]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_6.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[1]
%10 = Sext i20 1048564 to i64
%11 = i64 Shl i64 %10, 1
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, %11
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = load i64, i64 PC!1
%9 = i64 Add i64 %8, 4
XREG!3 = store i64 %9, [32, i64] XREG!2[1]
%10 = Sext i20 1048564 to i64
%11 = i64 Shl i64 %10, 1
%12 = load i64, i64 PC!1
%13 = i64 Add i64 %12, %11
PC!2 = store i64 %13, i64 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!5 = store i64 %7, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!5 PC!2
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[1]
PC!2 = store i64 -24, i64 PC!1
br label %bb1
bb1:
br label %bb2
bb2:
store i64 -24, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[1]
PC!2 = store i64 -24, i64 PC!1
br label %bb1
bb1:
br label %bb2
bb2:
store i64 -24, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[1]
PC!2 = store i64 -24, i64 PC!1
br label %bb1
bb1:
br label %bb2
bb2:
store i64 -24, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[1]
PC!2 = store i64 -24, i64 PC!1
store i64 -24, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_7.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[1]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb13:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb3

build SSA
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 8 to i64
%11 = load i64, [32, i64] XREG!2[2]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index!2
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword!3 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!3 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!3 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %16 tmp_dword!3 ite %25 tmp_dword!10 ite %32 tmp_dword!4 ite %39 tmp_dword!5 ite %46 tmp_dword!9 ite %53 tmp_dword!8 ite %60 tmp_dword!7 tmp_dword!6
tmp_dword2!2 = phi ite %16 tmp_dword2!1 tmp_dword2!3
tmp_dword1!2 = phi ite %16 tmp_dword1!1 tmp_dword1!3
%71 = load i64, i64 tmp_dword!2
rd_var!2 = store i64 %71, i64 rd_var!1
%12 = load i64, i64 rd_var!2
XREG!3 = store i64 %12, [32, i64] XREG!2[1]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1!3
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2!3
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
tmp_dword!10 = store i64 %26, i64 tmp_dword!1
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1!3
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2!3
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
tmp_dword!4 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1!3
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2!3
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
tmp_dword!5 = store i64 %40, i64 tmp_dword!1
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void
bb13:
%48 = load i64, i64 tmp_dword1!3
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2!3
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
tmp_dword!9 = store i64 %47, i64 tmp_dword!1
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1!3
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2!3
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
tmp_dword!8 = store i64 %54, i64 tmp_dword!1
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1!3
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2!3
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
tmp_dword!7 = store i64 %61, i64 tmp_dword!1
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1!3
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2!3
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
tmp_dword!6 = store i64 %66, i64 tmp_dword!1
br label %bb3

SSA forward
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!3 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[1]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!10 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!4 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!5 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!9 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!8 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!7 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

Nested SCCP
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!3 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[1]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!10 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!4 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!5 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!9 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!8 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!7 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

SCCP forward
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!3 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[1]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!10 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!4 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!5 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!9 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!8 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!7 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

cherry
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 8
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!3 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!3 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!2 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!2 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!2 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!2, i64 rd_var!1
XREG!3 = store i64 tmp_dword!2, [32, i64] XREG!2[1]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!10 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb6, label %bb7
bb6:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!4 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb7:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb8, label %bb9
bb8:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!5 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb9:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb10, label %bb11
bb10:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!9 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb11:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb12, label %bb13
bb12:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!8 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb13:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb14, label %bb15
bb14:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!7 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb15:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

COMPILE
insn_8.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[8]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG!2[8]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[10]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[8]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[8]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[8]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[8]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_9.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[8]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb13:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb3

build SSA
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG!2[2]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index!2
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword!9 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!2 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!2 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %16 tmp_dword!9 ite %25 tmp_dword!8 ite %32 tmp_dword!2 ite %39 tmp_dword!3 ite %46 tmp_dword!7 ite %53 tmp_dword!4 ite %60 tmp_dword!5 tmp_dword!6
tmp_dword2!3 = phi ite %16 tmp_dword2!1 tmp_dword2!2
tmp_dword1!3 = phi ite %16 tmp_dword1!1 tmp_dword1!2
%71 = load i64, i64 tmp_dword!10
rd_var!2 = store i64 %71, i64 rd_var!1
%12 = load i64, i64 rd_var!2
XREG!3 = store i64 %12, [32, i64] XREG!2[8]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%27 = load i64, i64 tmp_dword1!2
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2!2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
tmp_dword!8 = store i64 %26, i64 tmp_dword!1
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb6, label %bb7
bb6:
%34 = load i64, i64 tmp_dword1!2
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2!2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
tmp_dword!2 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb7:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb10, label %bb11
bb8:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1!2
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2!2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
tmp_dword!3 = store i64 %40, i64 tmp_dword!1
br label %bb3
bb11:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb12:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void
bb13:
%48 = load i64, i64 tmp_dword1!2
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2!2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
tmp_dword!7 = store i64 %47, i64 tmp_dword!1
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1!2
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2!2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
tmp_dword!4 = store i64 %54, i64 tmp_dword!1
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1!2
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2!2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
tmp_dword!5 = store i64 %61, i64 tmp_dword!1
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1!2
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2!2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
tmp_dword!6 = store i64 %66, i64 tmp_dword!1
br label %bb3

SSA forward
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!9 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!3 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!3 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!10, i64 rd_var!1
XREG!3 = store i64 tmp_dword!10, [32, i64] XREG!2[8]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!8 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!2 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!3 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!7 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!4 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!5 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

Nested SCCP
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!9 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!3 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!3 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!10, i64 rd_var!1
XREG!3 = store i64 tmp_dword!10, [32, i64] XREG!2[8]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!8 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!2 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!3 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!7 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!4 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!5 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

SCCP forward
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!9 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!3 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!3 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!10, i64 rd_var!1
XREG!3 = store i64 tmp_dword!10, [32, i64] XREG!2[8]
br label %bb6
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!8 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb7, label %bb8
bb6:
PC!4 = store i64 4, i64 PC!1
br label %bb9
bb7:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!2 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb8:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb10, label %bb11
bb9:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb10:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!3 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb11:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb12, label %bb13
bb12:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!7 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb13:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb14, label %bb15
bb14:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!4 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb15:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb16, label %bb17
bb16:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!5 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb17:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

cherry
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = i1 Eq i3 %5, 0
br i1 %6, label %bb1, label %bb2
bb1:
%7 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword!9 = store i64 %7, i64 tmp_dword!1
br label %bb3
bb2:
%8 = i53 Add i53 %4, 1
%9 = load i64, [9007199254740992, i64] MEM!1[%8]
tmp_dword1!2 = store i64 %9, i64 tmp_dword1!1
%10 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!2 = store i64 %10, i64 tmp_dword2!1
%11 = Extract i3 of i64 %1 <2, 0>
%12 = i1 Eq i3 %11, 1
br i1 %12, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %6 %7 ite %12 %13 ite %17 %18 ite %22 %23 ite %27 %28 ite %32 %33 ite %37 %38 %41
tmp_dword2!3 = phi ite %6 tmp_dword2!1 %10
tmp_dword1!3 = phi ite %6 tmp_dword1!1 %9
rd_var!2 = store i64 tmp_dword!10, i64 rd_var!1
XREG!3 = store i64 tmp_dword!10, [32, i64] XREG!2[8]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void
bb4:
%14 = Extract i8 of i64 %9 <7, 0>
%15 = Extract i56 of i64 %10 <63, 8>
%13 = Concat i64 i8 %14, i56 %15
tmp_dword!8 = store i64 %13, i64 tmp_dword!1
br label %bb3
bb5:
%16 = Extract i3 of i64 %1 <2, 0>
%17 = i1 Eq i3 %16, 2
br i1 %17, label %bb6, label %bb7
bb6:
%19 = Extract i16 of i64 %9 <15, 0>
%20 = Extract i48 of i64 %10 <63, 16>
%18 = Concat i64 i16 %19, i48 %20
tmp_dword!2 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb7:
%21 = Extract i3 of i64 %1 <2, 0>
%22 = i1 Eq i3 %21, 3
br i1 %22, label %bb8, label %bb9
bb8:
%24 = Extract i24 of i64 %9 <23, 0>
%25 = Extract i40 of i64 %10 <63, 24>
%23 = Concat i64 i24 %24, i40 %25
tmp_dword!3 = store i64 %23, i64 tmp_dword!1
br label %bb3
bb9:
%26 = Extract i3 of i64 %1 <2, 0>
%27 = i1 Eq i3 %26, -4
br i1 %27, label %bb10, label %bb11
bb10:
%29 = Extract i32 of i64 %9 <31, 0>
%30 = Extract i32 of i64 %10 <63, 32>
%28 = Concat i64 i32 %29, i32 %30
tmp_dword!7 = store i64 %28, i64 tmp_dword!1
br label %bb3
bb11:
%31 = Extract i3 of i64 %1 <2, 0>
%32 = i1 Eq i3 %31, -3
br i1 %32, label %bb12, label %bb13
bb12:
%34 = Extract i40 of i64 %9 <39, 0>
%35 = Extract i24 of i64 %10 <63, 40>
%33 = Concat i64 i40 %34, i24 %35
tmp_dword!4 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb13:
%36 = Extract i3 of i64 %1 <2, 0>
%37 = i1 Eq i3 %36, -2
br i1 %37, label %bb14, label %bb15
bb14:
%39 = Extract i48 of i64 %9 <47, 0>
%40 = Extract i16 of i64 %10 <63, 48>
%38 = Concat i64 i48 %39, i16 %40
tmp_dword!5 = store i64 %38, i64 tmp_dword!1
br label %bb3
bb15:
%42 = Extract i56 of i64 %9 <55, 0>
%43 = Extract i8 of i64 %10 <63, 56>
%41 = Concat i64 i56 %42, i8 %43
tmp_dword!6 = store i64 %41, i64 tmp_dword!1
br label %bb3

COMPILE
insn_10.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[2]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 16 to i64
%10 = load i64, [32, i64] XREG!2[2]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[2]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[2]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[2]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[2]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[2]
%1 = i64 Add i64 %2, 16
XREG!3 = store i64 %1, [32, i64] XREG!2[2]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_11.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = load i64, i64 PC!1
%9 = i64 Add i64 %8, 4
XREG!3 = store i64 %9, [32, i64] XREG!2[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG!3[1]
%13 = i64 Add i64 %14, %12
PC!2 = store i64 %13, i64 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!5 = store i64 %7, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!5 PC!2
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!3[1]
%3 = i64 Add i64 %4, 0
PC!2 = store i64 %3, i64 PC!1
%1 = i1 Eq i64 %3, 0
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %3, 4
PC!5 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!3[1]
%3 = i64 Add i64 %4, 0
PC!2 = store i64 %3, i64 PC!1
%1 = i1 Eq i64 %3, 0
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 0, 4
PC!5 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%3 = load i64, [32, i64] XREG!3[1]
%2 = i64 Add i64 %3, 0
PC!2 = store i64 %2, i64 PC!1
%1 = i1 Eq i64 %2, 0
br i1 %1, label %bb1, label %bb2
bb1:
PC!5 = store i64 4, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 4 %2
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%3 = load i64, [32, i64] XREG!3[1]
%2 = i64 Add i64 %3, 0
PC!2 = store i64 %2, i64 PC!1
%1 = i1 Eq i64 %2, 0
br i1 %1, label %bb1, label %bb2
bb1:
PC!5 = store i64 4, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 4 %2
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
bb_0 func void []
bb0:
call void insn_0.action %0 ()
call void insn_1.action %0 ()
call void insn_2.action %0 ()
call void insn_3.action %0 ()
call void insn_4.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_0 func void []
bb0:
br label %bb6
bb1:
br label %bb28
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 4080 to i64
%11 = load i64, [32, i64] XREG[2]
%10 = i64 Add i64 %11, %9
store i64 %10, [32, i64] XREG[2]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
br label %bb50
bb8:
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%19 = Sext i12 0 to i64
%22 = load i64, [32, i64] XREG[2]
%20 = i64 Add i64 %22, %19
store i64 %20, i64 tmp_address
%21 = load i64, i64 tmp_address
%24 = load i64, [32, i64] XREG[8]
store i64 %24, i64 rs2_var
%23 = load i64, i64 rs2_var
%25 = i64 Lshr i64 %21, 3
%26 = Extract i53 of i64 %25 <52, 0>
store i53 %26, i53 mem_index
%27 = Extract i3 of i64 %21 <2, 0>
%28 = i1 Eq i3 %27, 0
br i1 %28, label %bb9, label %bb10
bb9:
%29 = load i53, i53 mem_index
store i64 %23, [9007199254740992, i64] MEM[%29]
br label %bb11
bb10:
%30 = load i53, i53 mem_index
%31 = i53 Add i53 %30, 1
%32 = load i64, [9007199254740992, i64] MEM[%31]
store i64 %32, i64 tmp_dword1
%33 = load i53, i53 mem_index
%34 = load i64, [9007199254740992, i64] MEM[%33]
store i64 %34, i64 tmp_dword2
%35 = Extract i3 of i64 %21 <2, 0>
%36 = i1 Eq i3 %35, 1
br i1 %36, label %bb12, label %bb13
bb11:
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb17, label %bb18
bb12:
%37 = i64 Lshr i64 %23, 56
%38 = Extract i8 of i64 %37 <7, 0>
%40 = load i64, i64 tmp_dword1
%41 = Zext i8 %38 to i64
%42 = i64 And i64 %40, -256
%43 = i64 Shl i64 %41, 0
%39 = i64 Or i64 %42, %43
store i64 %39, i64 tmp_dword1
%44 = i64 Lshr i64 %23, 0
%45 = Extract i56 of i64 %44 <55, 0>
%47 = load i64, i64 tmp_dword2
%48 = Zext i56 %45 to i64
%49 = i64 And i64 %47, 255
%50 = i64 Shl i64 %48, 8
%46 = i64 Or i64 %49, %50
store i64 %46, i64 tmp_dword2
br label %bb14
bb13:
%51 = Extract i3 of i64 %21 <2, 0>
%52 = i1 Eq i3 %51, 2
br i1 %52, label %bb15, label %bb16
bb14:
%145 = load i64, i64 tmp_dword1
%146 = load i53, i53 mem_index
%147 = i53 Add i53 %146, 1
store i64 %145, [9007199254740992, i64] MEM[%147]
%148 = load i64, i64 tmp_dword2
%149 = load i53, i53 mem_index
store i64 %148, [9007199254740992, i64] MEM[%149]
br label %bb11
bb15:
%53 = i64 Lshr i64 %23, 48
%54 = Extract i16 of i64 %53 <15, 0>
%56 = load i64, i64 tmp_dword1
%57 = Zext i16 %54 to i64
%58 = i64 And i64 %56, -65536
%59 = i64 Shl i64 %57, 0
%55 = i64 Or i64 %58, %59
store i64 %55, i64 tmp_dword1
%60 = i64 Lshr i64 %23, 0
%61 = Extract i48 of i64 %60 <47, 0>
%63 = load i64, i64 tmp_dword2
%64 = Zext i48 %61 to i64
%65 = i64 And i64 %63, 65535
%66 = i64 Shl i64 %64, 16
%62 = i64 Or i64 %65, %66
store i64 %62, i64 tmp_dword2
br label %bb14
bb16:
%67 = Extract i3 of i64 %21 <2, 0>
%68 = i1 Eq i3 %67, 3
br i1 %68, label %bb19, label %bb20
bb17:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb21
bb18:
br label %bb21
bb19:
%69 = i64 Lshr i64 %23, 40
%70 = Extract i24 of i64 %69 <23, 0>
%72 = load i64, i64 tmp_dword1
%73 = Zext i24 %70 to i64
%74 = i64 And i64 %72, -16777216
%75 = i64 Shl i64 %73, 0
%71 = i64 Or i64 %74, %75
store i64 %71, i64 tmp_dword1
%76 = i64 Lshr i64 %23, 0
%77 = Extract i40 of i64 %76 <39, 0>
%79 = load i64, i64 tmp_dword2
%80 = Zext i40 %77 to i64
%81 = i64 And i64 %79, 16777215
%82 = i64 Shl i64 %80, 24
%78 = i64 Or i64 %81, %82
store i64 %78, i64 tmp_dword2
br label %bb14
bb20:
%83 = Extract i3 of i64 %21 <2, 0>
%84 = i1 Eq i3 %83, -4
br i1 %84, label %bb22, label %bb23
bb21:
%12 = load i64, i64 PC
store i64 %12, i64 PC
br label %bb7
bb22:
%85 = i64 Lshr i64 %23, 32
%86 = Extract i32 of i64 %85 <31, 0>
%88 = load i64, i64 tmp_dword1
%89 = Zext i32 %86 to i64
%90 = i64 And i64 %88, -4294967296
%91 = i64 Shl i64 %89, 0
%87 = i64 Or i64 %90, %91
store i64 %87, i64 tmp_dword1
%92 = i64 Lshr i64 %23, 0
%93 = Extract i32 of i64 %92 <31, 0>
%95 = load i64, i64 tmp_dword2
%96 = Zext i32 %93 to i64
%97 = i64 And i64 %95, 4294967295
%98 = i64 Shl i64 %96, 32
%94 = i64 Or i64 %97, %98
store i64 %94, i64 tmp_dword2
br label %bb14
bb23:
%99 = Extract i3 of i64 %21 <2, 0>
%100 = i1 Eq i3 %99, -3
br i1 %100, label %bb24, label %bb25
bb24:
%101 = i64 Lshr i64 %23, 24
%102 = Extract i40 of i64 %101 <39, 0>
%104 = load i64, i64 tmp_dword1
%105 = Zext i40 %102 to i64
%106 = i64 And i64 %104, -1099511627776
%107 = i64 Shl i64 %105, 0
%103 = i64 Or i64 %106, %107
store i64 %103, i64 tmp_dword1
%108 = i64 Lshr i64 %23, 0
%109 = Extract i24 of i64 %108 <23, 0>
%111 = load i64, i64 tmp_dword2
%112 = Zext i24 %109 to i64
%113 = i64 And i64 %111, 1099511627775
%114 = i64 Shl i64 %112, 40
%110 = i64 Or i64 %113, %114
store i64 %110, i64 tmp_dword2
br label %bb14
bb25:
%115 = Extract i3 of i64 %21 <2, 0>
%116 = i1 Eq i3 %115, -2
br i1 %116, label %bb26, label %bb27
bb26:
%117 = i64 Lshr i64 %23, 16
%118 = Extract i48 of i64 %117 <47, 0>
%120 = load i64, i64 tmp_dword1
%121 = Zext i48 %118 to i64
%122 = i64 And i64 %120, -281474976710656
%123 = i64 Shl i64 %121, 0
%119 = i64 Or i64 %122, %123
store i64 %119, i64 tmp_dword1
%124 = i64 Lshr i64 %23, 0
%125 = Extract i16 of i64 %124 <15, 0>
%127 = load i64, i64 tmp_dword2
%128 = Zext i16 %125 to i64
%129 = i64 And i64 %127, 281474976710655
%130 = i64 Shl i64 %128, 48
%126 = i64 Or i64 %129, %130
store i64 %126, i64 tmp_dword2
br label %bb14
bb27:
%131 = i64 Lshr i64 %23, 8
%132 = Extract i56 of i64 %131 <55, 0>
%134 = load i64, i64 tmp_dword1
%135 = Zext i56 %132 to i64
%136 = i64 And i64 %134, -72057594037927936
%137 = i64 Shl i64 %135, 0
%133 = i64 Or i64 %136, %137
store i64 %133, i64 tmp_dword1
%138 = i64 Lshr i64 %23, 0
%139 = Extract i8 of i64 %138 <7, 0>
%141 = load i64, i64 tmp_dword2
%142 = Zext i8 %139 to i64
%143 = i64 And i64 %141, 72057594037927935
%144 = i64 Shl i64 %142, 56
%140 = i64 Or i64 %143, %144
store i64 %140, i64 tmp_dword2
br label %bb14
bb28:
br label %bb8
bb29:
br label %bb56
bb30:
store i64 0, [32, i64] XREG[0]
%151 = load i64, i64 PC
store i64 %151, i64 prev_pc
%157 = Sext i12 8 to i64
%160 = load i64, [32, i64] XREG[2]
%158 = i64 Add i64 %160, %157
store i64 %158, i64 tmp_address
%159 = load i64, i64 tmp_address
%162 = load i64, [32, i64] XREG[1]
store i64 %162, i64 rs2_var
%161 = load i64, i64 rs2_var
%163 = i64 Lshr i64 %159, 3
%164 = Extract i53 of i64 %163 <52, 0>
store i53 %164, i53 mem_index
%165 = Extract i3 of i64 %159 <2, 0>
%166 = i1 Eq i3 %165, 0
br i1 %166, label %bb31, label %bb32
bb31:
%167 = load i53, i53 mem_index
store i64 %161, [9007199254740992, i64] MEM[%167]
br label %bb33
bb32:
%168 = load i53, i53 mem_index
%169 = i53 Add i53 %168, 1
%170 = load i64, [9007199254740992, i64] MEM[%169]
store i64 %170, i64 tmp_dword1
%171 = load i53, i53 mem_index
%172 = load i64, [9007199254740992, i64] MEM[%171]
store i64 %172, i64 tmp_dword2
%173 = Extract i3 of i64 %159 <2, 0>
%174 = i1 Eq i3 %173, 1
br i1 %174, label %bb34, label %bb35
bb33:
%152 = load i64, i64 PC
%154 = load i64, i64 prev_pc
%153 = i1 Eq i64 %152, %154
br i1 %153, label %bb39, label %bb40
bb34:
%175 = i64 Lshr i64 %161, 56
%176 = Extract i8 of i64 %175 <7, 0>
%178 = load i64, i64 tmp_dword1
%179 = Zext i8 %176 to i64
%180 = i64 And i64 %178, -256
%181 = i64 Shl i64 %179, 0
%177 = i64 Or i64 %180, %181
store i64 %177, i64 tmp_dword1
%182 = i64 Lshr i64 %161, 0
%183 = Extract i56 of i64 %182 <55, 0>
%185 = load i64, i64 tmp_dword2
%186 = Zext i56 %183 to i64
%187 = i64 And i64 %185, 255
%188 = i64 Shl i64 %186, 8
%184 = i64 Or i64 %187, %188
store i64 %184, i64 tmp_dword2
br label %bb36
bb35:
%189 = Extract i3 of i64 %159 <2, 0>
%190 = i1 Eq i3 %189, 2
br i1 %190, label %bb37, label %bb38
bb36:
%283 = load i64, i64 tmp_dword1
%284 = load i53, i53 mem_index
%285 = i53 Add i53 %284, 1
store i64 %283, [9007199254740992, i64] MEM[%285]
%286 = load i64, i64 tmp_dword2
%287 = load i53, i53 mem_index
store i64 %286, [9007199254740992, i64] MEM[%287]
br label %bb33
bb37:
%191 = i64 Lshr i64 %161, 48
%192 = Extract i16 of i64 %191 <15, 0>
%194 = load i64, i64 tmp_dword1
%195 = Zext i16 %192 to i64
%196 = i64 And i64 %194, -65536
%197 = i64 Shl i64 %195, 0
%193 = i64 Or i64 %196, %197
store i64 %193, i64 tmp_dword1
%198 = i64 Lshr i64 %161, 0
%199 = Extract i48 of i64 %198 <47, 0>
%201 = load i64, i64 tmp_dword2
%202 = Zext i48 %199 to i64
%203 = i64 And i64 %201, 65535
%204 = i64 Shl i64 %202, 16
%200 = i64 Or i64 %203, %204
store i64 %200, i64 tmp_dword2
br label %bb36
bb38:
%205 = Extract i3 of i64 %159 <2, 0>
%206 = i1 Eq i3 %205, 3
br i1 %206, label %bb41, label %bb42
bb39:
%155 = load i64, i64 PC
%156 = i64 Add i64 %155, 4
store i64 %156, i64 PC
br label %bb43
bb40:
br label %bb43
bb41:
%207 = i64 Lshr i64 %161, 40
%208 = Extract i24 of i64 %207 <23, 0>
%210 = load i64, i64 tmp_dword1
%211 = Zext i24 %208 to i64
%212 = i64 And i64 %210, -16777216
%213 = i64 Shl i64 %211, 0
%209 = i64 Or i64 %212, %213
store i64 %209, i64 tmp_dword1
%214 = i64 Lshr i64 %161, 0
%215 = Extract i40 of i64 %214 <39, 0>
%217 = load i64, i64 tmp_dword2
%218 = Zext i40 %215 to i64
%219 = i64 And i64 %217, 16777215
%220 = i64 Shl i64 %218, 24
%216 = i64 Or i64 %219, %220
store i64 %216, i64 tmp_dword2
br label %bb36
bb42:
%221 = Extract i3 of i64 %159 <2, 0>
%222 = i1 Eq i3 %221, -4
br i1 %222, label %bb44, label %bb45
bb43:
%150 = load i64, i64 PC
store i64 %150, i64 PC
br label %bb29
bb44:
%223 = i64 Lshr i64 %161, 32
%224 = Extract i32 of i64 %223 <31, 0>
%226 = load i64, i64 tmp_dword1
%227 = Zext i32 %224 to i64
%228 = i64 And i64 %226, -4294967296
%229 = i64 Shl i64 %227, 0
%225 = i64 Or i64 %228, %229
store i64 %225, i64 tmp_dword1
%230 = i64 Lshr i64 %161, 0
%231 = Extract i32 of i64 %230 <31, 0>
%233 = load i64, i64 tmp_dword2
%234 = Zext i32 %231 to i64
%235 = i64 And i64 %233, 4294967295
%236 = i64 Shl i64 %234, 32
%232 = i64 Or i64 %235, %236
store i64 %232, i64 tmp_dword2
br label %bb36
bb45:
%237 = Extract i3 of i64 %159 <2, 0>
%238 = i1 Eq i3 %237, -3
br i1 %238, label %bb46, label %bb47
bb46:
%239 = i64 Lshr i64 %161, 24
%240 = Extract i40 of i64 %239 <39, 0>
%242 = load i64, i64 tmp_dword1
%243 = Zext i40 %240 to i64
%244 = i64 And i64 %242, -1099511627776
%245 = i64 Shl i64 %243, 0
%241 = i64 Or i64 %244, %245
store i64 %241, i64 tmp_dword1
%246 = i64 Lshr i64 %161, 0
%247 = Extract i24 of i64 %246 <23, 0>
%249 = load i64, i64 tmp_dword2
%250 = Zext i24 %247 to i64
%251 = i64 And i64 %249, 1099511627775
%252 = i64 Shl i64 %250, 40
%248 = i64 Or i64 %251, %252
store i64 %248, i64 tmp_dword2
br label %bb36
bb47:
%253 = Extract i3 of i64 %159 <2, 0>
%254 = i1 Eq i3 %253, -2
br i1 %254, label %bb48, label %bb49
bb48:
%255 = i64 Lshr i64 %161, 16
%256 = Extract i48 of i64 %255 <47, 0>
%258 = load i64, i64 tmp_dword1
%259 = Zext i48 %256 to i64
%260 = i64 And i64 %258, -281474976710656
%261 = i64 Shl i64 %259, 0
%257 = i64 Or i64 %260, %261
store i64 %257, i64 tmp_dword1
%262 = i64 Lshr i64 %161, 0
%263 = Extract i16 of i64 %262 <15, 0>
%265 = load i64, i64 tmp_dword2
%266 = Zext i16 %263 to i64
%267 = i64 And i64 %265, 281474976710655
%268 = i64 Shl i64 %266, 48
%264 = i64 Or i64 %267, %268
store i64 %264, i64 tmp_dword2
br label %bb36
bb49:
%269 = i64 Lshr i64 %161, 8
%270 = Extract i56 of i64 %269 <55, 0>
%272 = load i64, i64 tmp_dword1
%273 = Zext i56 %270 to i64
%274 = i64 And i64 %272, -72057594037927936
%275 = i64 Shl i64 %273, 0
%271 = i64 Or i64 %274, %275
store i64 %271, i64 tmp_dword1
%276 = i64 Lshr i64 %161, 0
%277 = Extract i8 of i64 %276 <7, 0>
%279 = load i64, i64 tmp_dword2
%280 = Zext i8 %277 to i64
%281 = i64 And i64 %279, 72057594037927935
%282 = i64 Shl i64 %280, 56
%278 = i64 Or i64 %281, %282
store i64 %278, i64 tmp_dword2
br label %bb36
bb50:
br label %bb30
bb51:
br label %bb65
bb52:
store i64 0, [32, i64] XREG[0]
%289 = load i64, i64 PC
store i64 %289, i64 prev_pc
%295 = Sext i12 0 to i64
%297 = load i64, [32, i64] XREG[10]
%296 = i64 Add i64 %297, %295
store i64 %296, [32, i64] XREG[8]
%290 = load i64, i64 PC
%292 = load i64, i64 prev_pc
%291 = i1 Eq i64 %290, %292
br i1 %291, label %bb53, label %bb54
bb53:
%293 = load i64, i64 PC
%294 = i64 Add i64 %293, 4
store i64 %294, i64 PC
br label %bb55
bb54:
br label %bb55
bb55:
%288 = load i64, i64 PC
store i64 %288, i64 PC
br label %bb51
bb56:
br label %bb52
bb57:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb58:
store i64 0, [32, i64] XREG[0]
%299 = load i64, i64 PC
store i64 %299, i64 prev_pc
%310 = load i64, [32, i64] XREG[12]
%311 = load i64, [32, i64] XREG[0]
%305 = i1 Eq i64 %310, %311
br i1 %305, label %bb59, label %bb60
bb59:
%306 = Sext i12 6 to i64
%307 = i64 Shl i64 %306, 1
%308 = load i64, i64 PC
%309 = i64 Add i64 %308, %307
store i64 %309, i64 PC
br label %bb61
bb60:
br label %bb61
bb61:
%300 = load i64, i64 PC
%302 = load i64, i64 prev_pc
%301 = i1 Eq i64 %300, %302
br i1 %301, label %bb62, label %bb63
bb62:
%303 = load i64, i64 PC
%304 = i64 Add i64 %303, 4
store i64 %304, i64 PC
br label %bb64
bb63:
br label %bb64
bb64:
%298 = load i64, i64 PC
store i64 %298, i64 PC
br label %bb57
bb65:
br label %bb58

propagate
bb_0 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %10, -16
store i64 %9, [32, i64] XREG[2]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%20 = load i64, [32, i64] XREG[2]
%18 = i64 Add i64 %20, 0
store i64 %18, i64 tmp_address
%19 = load i64, i64 tmp_address
%22 = load i64, [32, i64] XREG[8]
store i64 %22, i64 rs2_var
%21 = load i64, i64 rs2_var
%23 = i64 Lshr i64 %19, 3
%24 = Extract i53 of i64 %23 <52, 0>
store i53 %24, i53 mem_index
%25 = Extract i3 of i64 %19 <2, 0>
%26 = i1 Eq i3 %25, 0
br i1 %26, label %bb9, label %bb10
bb9:
%27 = load i53, i53 mem_index
store i64 %21, [9007199254740992, i64] MEM[%27]
br label %bb11
bb10:
%28 = load i53, i53 mem_index
%29 = i53 Add i53 %28, 1
%30 = load i64, [9007199254740992, i64] MEM[%29]
store i64 %30, i64 tmp_dword1
%31 = load i53, i53 mem_index
%32 = load i64, [9007199254740992, i64] MEM[%31]
store i64 %32, i64 tmp_dword2
%33 = Extract i3 of i64 %19 <2, 0>
%34 = i1 Eq i3 %33, 1
br i1 %34, label %bb12, label %bb13
bb11:
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb14, label %bb15
bb12:
%35 = i64 Lshr i64 %21, 56
%36 = Extract i8 of i64 %35 <7, 0>
%38 = load i64, i64 tmp_dword1
%39 = Zext i8 %36 to i64
%40 = i64 And i64 %38, -256
%41 = i64 Shl i64 %39, 0
%37 = i64 Or i64 %40, %41
store i64 %37, i64 tmp_dword1
%42 = i64 Lshr i64 %21, 0
%43 = Extract i56 of i64 %42 <55, 0>
%45 = load i64, i64 tmp_dword2
%46 = Zext i56 %43 to i64
%47 = i64 And i64 %45, 255
%48 = i64 Shl i64 %46, 8
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword2
br label %bb16
bb13:
%49 = Extract i3 of i64 %19 <2, 0>
%50 = i1 Eq i3 %49, 2
br i1 %50, label %bb17, label %bb18
bb14:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb19
bb15:
br label %bb19
bb16:
%143 = load i64, i64 tmp_dword1
%144 = load i53, i53 mem_index
%145 = i53 Add i53 %144, 1
store i64 %143, [9007199254740992, i64] MEM[%145]
%146 = load i64, i64 tmp_dword2
%147 = load i53, i53 mem_index
store i64 %146, [9007199254740992, i64] MEM[%147]
br label %bb11
bb17:
%51 = i64 Lshr i64 %21, 48
%52 = Extract i16 of i64 %51 <15, 0>
%54 = load i64, i64 tmp_dword1
%55 = Zext i16 %52 to i64
%56 = i64 And i64 %54, -65536
%57 = i64 Shl i64 %55, 0
%53 = i64 Or i64 %56, %57
store i64 %53, i64 tmp_dword1
%58 = i64 Lshr i64 %21, 0
%59 = Extract i48 of i64 %58 <47, 0>
%61 = load i64, i64 tmp_dword2
%62 = Zext i48 %59 to i64
%63 = i64 And i64 %61, 65535
%64 = i64 Shl i64 %62, 16
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword2
br label %bb16
bb18:
%65 = Extract i3 of i64 %19 <2, 0>
%66 = i1 Eq i3 %65, 3
br i1 %66, label %bb20, label %bb21
bb19:
%11 = load i64, i64 PC
store i64 %11, i64 PC
br label %bb22
bb20:
%67 = i64 Lshr i64 %21, 40
%68 = Extract i24 of i64 %67 <23, 0>
%70 = load i64, i64 tmp_dword1
%71 = Zext i24 %68 to i64
%72 = i64 And i64 %70, -16777216
%73 = i64 Shl i64 %71, 0
%69 = i64 Or i64 %72, %73
store i64 %69, i64 tmp_dword1
%74 = i64 Lshr i64 %21, 0
%75 = Extract i40 of i64 %74 <39, 0>
%77 = load i64, i64 tmp_dword2
%78 = Zext i40 %75 to i64
%79 = i64 And i64 %77, 16777215
%80 = i64 Shl i64 %78, 24
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword2
br label %bb16
bb21:
%81 = Extract i3 of i64 %19 <2, 0>
%82 = i1 Eq i3 %81, -4
br i1 %82, label %bb23, label %bb24
bb22:
br label %bb25
bb23:
%83 = i64 Lshr i64 %21, 32
%84 = Extract i32 of i64 %83 <31, 0>
%86 = load i64, i64 tmp_dword1
%87 = Zext i32 %84 to i64
%88 = i64 And i64 %86, -4294967296
%89 = i64 Shl i64 %87, 0
%85 = i64 Or i64 %88, %89
store i64 %85, i64 tmp_dword1
%90 = i64 Lshr i64 %21, 0
%91 = Extract i32 of i64 %90 <31, 0>
%93 = load i64, i64 tmp_dword2
%94 = Zext i32 %91 to i64
%95 = i64 And i64 %93, 4294967295
%96 = i64 Shl i64 %94, 32
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword2
br label %bb16
bb24:
%97 = Extract i3 of i64 %19 <2, 0>
%98 = i1 Eq i3 %97, -3
br i1 %98, label %bb26, label %bb27
bb25:
br label %bb28
bb26:
%99 = i64 Lshr i64 %21, 24
%100 = Extract i40 of i64 %99 <39, 0>
%102 = load i64, i64 tmp_dword1
%103 = Zext i40 %100 to i64
%104 = i64 And i64 %102, -1099511627776
%105 = i64 Shl i64 %103, 0
%101 = i64 Or i64 %104, %105
store i64 %101, i64 tmp_dword1
%106 = i64 Lshr i64 %21, 0
%107 = Extract i24 of i64 %106 <23, 0>
%109 = load i64, i64 tmp_dword2
%110 = Zext i24 %107 to i64
%111 = i64 And i64 %109, 1099511627775
%112 = i64 Shl i64 %110, 40
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword2
br label %bb16
bb27:
%113 = Extract i3 of i64 %19 <2, 0>
%114 = i1 Eq i3 %113, -2
br i1 %114, label %bb29, label %bb30
bb28:
store i64 0, [32, i64] XREG[0]
%149 = load i64, i64 PC
store i64 %149, i64 prev_pc
%157 = load i64, [32, i64] XREG[2]
%155 = i64 Add i64 %157, 8
store i64 %155, i64 tmp_address
%156 = load i64, i64 tmp_address
%159 = load i64, [32, i64] XREG[1]
store i64 %159, i64 rs2_var
%158 = load i64, i64 rs2_var
%160 = i64 Lshr i64 %156, 3
%161 = Extract i53 of i64 %160 <52, 0>
store i53 %161, i53 mem_index
%162 = Extract i3 of i64 %156 <2, 0>
%163 = i1 Eq i3 %162, 0
br i1 %163, label %bb31, label %bb32
bb29:
%115 = i64 Lshr i64 %21, 16
%116 = Extract i48 of i64 %115 <47, 0>
%118 = load i64, i64 tmp_dword1
%119 = Zext i48 %116 to i64
%120 = i64 And i64 %118, -281474976710656
%121 = i64 Shl i64 %119, 0
%117 = i64 Or i64 %120, %121
store i64 %117, i64 tmp_dword1
%122 = i64 Lshr i64 %21, 0
%123 = Extract i16 of i64 %122 <15, 0>
%125 = load i64, i64 tmp_dword2
%126 = Zext i16 %123 to i64
%127 = i64 And i64 %125, 281474976710655
%128 = i64 Shl i64 %126, 48
%124 = i64 Or i64 %127, %128
store i64 %124, i64 tmp_dword2
br label %bb16
bb30:
%129 = i64 Lshr i64 %21, 8
%130 = Extract i56 of i64 %129 <55, 0>
%132 = load i64, i64 tmp_dword1
%133 = Zext i56 %130 to i64
%134 = i64 And i64 %132, -72057594037927936
%135 = i64 Shl i64 %133, 0
%131 = i64 Or i64 %134, %135
store i64 %131, i64 tmp_dword1
%136 = i64 Lshr i64 %21, 0
%137 = Extract i8 of i64 %136 <7, 0>
%139 = load i64, i64 tmp_dword2
%140 = Zext i8 %137 to i64
%141 = i64 And i64 %139, 72057594037927935
%142 = i64 Shl i64 %140, 56
%138 = i64 Or i64 %141, %142
store i64 %138, i64 tmp_dword2
br label %bb16
bb31:
%164 = load i53, i53 mem_index
store i64 %158, [9007199254740992, i64] MEM[%164]
br label %bb33
bb32:
%165 = load i53, i53 mem_index
%166 = i53 Add i53 %165, 1
%167 = load i64, [9007199254740992, i64] MEM[%166]
store i64 %167, i64 tmp_dword1
%168 = load i53, i53 mem_index
%169 = load i64, [9007199254740992, i64] MEM[%168]
store i64 %169, i64 tmp_dword2
%170 = Extract i3 of i64 %156 <2, 0>
%171 = i1 Eq i3 %170, 1
br i1 %171, label %bb34, label %bb35
bb33:
%150 = load i64, i64 PC
%152 = load i64, i64 prev_pc
%151 = i1 Eq i64 %150, %152
br i1 %151, label %bb36, label %bb37
bb34:
%172 = i64 Lshr i64 %158, 56
%173 = Extract i8 of i64 %172 <7, 0>
%175 = load i64, i64 tmp_dword1
%176 = Zext i8 %173 to i64
%177 = i64 And i64 %175, -256
%178 = i64 Shl i64 %176, 0
%174 = i64 Or i64 %177, %178
store i64 %174, i64 tmp_dword1
%179 = i64 Lshr i64 %158, 0
%180 = Extract i56 of i64 %179 <55, 0>
%182 = load i64, i64 tmp_dword2
%183 = Zext i56 %180 to i64
%184 = i64 And i64 %182, 255
%185 = i64 Shl i64 %183, 8
%181 = i64 Or i64 %184, %185
store i64 %181, i64 tmp_dword2
br label %bb38
bb35:
%186 = Extract i3 of i64 %156 <2, 0>
%187 = i1 Eq i3 %186, 2
br i1 %187, label %bb39, label %bb40
bb36:
%153 = load i64, i64 PC
%154 = i64 Add i64 %153, 4
store i64 %154, i64 PC
br label %bb41
bb37:
br label %bb41
bb38:
%280 = load i64, i64 tmp_dword1
%281 = load i53, i53 mem_index
%282 = i53 Add i53 %281, 1
store i64 %280, [9007199254740992, i64] MEM[%282]
%283 = load i64, i64 tmp_dword2
%284 = load i53, i53 mem_index
store i64 %283, [9007199254740992, i64] MEM[%284]
br label %bb33
bb39:
%188 = i64 Lshr i64 %158, 48
%189 = Extract i16 of i64 %188 <15, 0>
%191 = load i64, i64 tmp_dword1
%192 = Zext i16 %189 to i64
%193 = i64 And i64 %191, -65536
%194 = i64 Shl i64 %192, 0
%190 = i64 Or i64 %193, %194
store i64 %190, i64 tmp_dword1
%195 = i64 Lshr i64 %158, 0
%196 = Extract i48 of i64 %195 <47, 0>
%198 = load i64, i64 tmp_dword2
%199 = Zext i48 %196 to i64
%200 = i64 And i64 %198, 65535
%201 = i64 Shl i64 %199, 16
%197 = i64 Or i64 %200, %201
store i64 %197, i64 tmp_dword2
br label %bb38
bb40:
%202 = Extract i3 of i64 %156 <2, 0>
%203 = i1 Eq i3 %202, 3
br i1 %203, label %bb42, label %bb43
bb41:
%148 = load i64, i64 PC
store i64 %148, i64 PC
br label %bb44
bb42:
%204 = i64 Lshr i64 %158, 40
%205 = Extract i24 of i64 %204 <23, 0>
%207 = load i64, i64 tmp_dword1
%208 = Zext i24 %205 to i64
%209 = i64 And i64 %207, -16777216
%210 = i64 Shl i64 %208, 0
%206 = i64 Or i64 %209, %210
store i64 %206, i64 tmp_dword1
%211 = i64 Lshr i64 %158, 0
%212 = Extract i40 of i64 %211 <39, 0>
%214 = load i64, i64 tmp_dword2
%215 = Zext i40 %212 to i64
%216 = i64 And i64 %214, 16777215
%217 = i64 Shl i64 %215, 24
%213 = i64 Or i64 %216, %217
store i64 %213, i64 tmp_dword2
br label %bb38
bb43:
%218 = Extract i3 of i64 %156 <2, 0>
%219 = i1 Eq i3 %218, -4
br i1 %219, label %bb45, label %bb46
bb44:
br label %bb47
bb45:
%220 = i64 Lshr i64 %158, 32
%221 = Extract i32 of i64 %220 <31, 0>
%223 = load i64, i64 tmp_dword1
%224 = Zext i32 %221 to i64
%225 = i64 And i64 %223, -4294967296
%226 = i64 Shl i64 %224, 0
%222 = i64 Or i64 %225, %226
store i64 %222, i64 tmp_dword1
%227 = i64 Lshr i64 %158, 0
%228 = Extract i32 of i64 %227 <31, 0>
%230 = load i64, i64 tmp_dword2
%231 = Zext i32 %228 to i64
%232 = i64 And i64 %230, 4294967295
%233 = i64 Shl i64 %231, 32
%229 = i64 Or i64 %232, %233
store i64 %229, i64 tmp_dword2
br label %bb38
bb46:
%234 = Extract i3 of i64 %156 <2, 0>
%235 = i1 Eq i3 %234, -3
br i1 %235, label %bb48, label %bb49
bb47:
br label %bb50
bb48:
%236 = i64 Lshr i64 %158, 24
%237 = Extract i40 of i64 %236 <39, 0>
%239 = load i64, i64 tmp_dword1
%240 = Zext i40 %237 to i64
%241 = i64 And i64 %239, -1099511627776
%242 = i64 Shl i64 %240, 0
%238 = i64 Or i64 %241, %242
store i64 %238, i64 tmp_dword1
%243 = i64 Lshr i64 %158, 0
%244 = Extract i24 of i64 %243 <23, 0>
%246 = load i64, i64 tmp_dword2
%247 = Zext i24 %244 to i64
%248 = i64 And i64 %246, 1099511627775
%249 = i64 Shl i64 %247, 40
%245 = i64 Or i64 %248, %249
store i64 %245, i64 tmp_dword2
br label %bb38
bb49:
%250 = Extract i3 of i64 %156 <2, 0>
%251 = i1 Eq i3 %250, -2
br i1 %251, label %bb51, label %bb52
bb50:
store i64 0, [32, i64] XREG[0]
%286 = load i64, i64 PC
store i64 %286, i64 prev_pc
%293 = load i64, [32, i64] XREG[10]
%292 = i64 Add i64 %293, 0
store i64 %292, [32, i64] XREG[8]
%287 = load i64, i64 PC
%289 = load i64, i64 prev_pc
%288 = i1 Eq i64 %287, %289
br i1 %288, label %bb53, label %bb54
bb51:
%252 = i64 Lshr i64 %158, 16
%253 = Extract i48 of i64 %252 <47, 0>
%255 = load i64, i64 tmp_dword1
%256 = Zext i48 %253 to i64
%257 = i64 And i64 %255, -281474976710656
%258 = i64 Shl i64 %256, 0
%254 = i64 Or i64 %257, %258
store i64 %254, i64 tmp_dword1
%259 = i64 Lshr i64 %158, 0
%260 = Extract i16 of i64 %259 <15, 0>
%262 = load i64, i64 tmp_dword2
%263 = Zext i16 %260 to i64
%264 = i64 And i64 %262, 281474976710655
%265 = i64 Shl i64 %263, 48
%261 = i64 Or i64 %264, %265
store i64 %261, i64 tmp_dword2
br label %bb38
bb52:
%266 = i64 Lshr i64 %158, 8
%267 = Extract i56 of i64 %266 <55, 0>
%269 = load i64, i64 tmp_dword1
%270 = Zext i56 %267 to i64
%271 = i64 And i64 %269, -72057594037927936
%272 = i64 Shl i64 %270, 0
%268 = i64 Or i64 %271, %272
store i64 %268, i64 tmp_dword1
%273 = i64 Lshr i64 %158, 0
%274 = Extract i8 of i64 %273 <7, 0>
%276 = load i64, i64 tmp_dword2
%277 = Zext i8 %274 to i64
%278 = i64 And i64 %276, 72057594037927935
%279 = i64 Shl i64 %277, 56
%275 = i64 Or i64 %278, %279
store i64 %275, i64 tmp_dword2
br label %bb38
bb53:
%290 = load i64, i64 PC
%291 = i64 Add i64 %290, 4
store i64 %291, i64 PC
br label %bb55
bb54:
br label %bb55
bb55:
%285 = load i64, i64 PC
store i64 %285, i64 PC
br label %bb56
bb56:
br label %bb57
bb57:
br label %bb58
bb58:
store i64 0, [32, i64] XREG[0]
%295 = load i64, i64 PC
store i64 %295, i64 prev_pc
%304 = load i64, [32, i64] XREG[12]
%305 = load i64, [32, i64] XREG[0]
%301 = i1 Eq i64 %304, %305
br i1 %301, label %bb59, label %bb60
bb59:
%302 = load i64, i64 PC
%303 = i64 Add i64 %302, 12
store i64 %303, i64 PC
br label %bb61
bb60:
br label %bb61
bb61:
%296 = load i64, i64 PC
%298 = load i64, i64 prev_pc
%297 = i1 Eq i64 %296, %298
br i1 %297, label %bb62, label %bb63
bb62:
%299 = load i64, i64 PC
%300 = i64 Add i64 %299, 4
store i64 %300, i64 PC
br label %bb64
bb63:
br label %bb64
bb64:
%294 = load i64, i64 PC
store i64 %294, i64 PC
br label %bb65
bb65:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_0 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %10, -16
store i64 %9, [32, i64] XREG[2]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%20 = load i64, [32, i64] XREG[2]
%18 = i64 Add i64 %20, 0
store i64 %18, i64 tmp_address
%19 = load i64, i64 tmp_address
%22 = load i64, [32, i64] XREG[8]
store i64 %22, i64 rs2_var
%21 = load i64, i64 rs2_var
%23 = i64 Lshr i64 %19, 3
%24 = Extract i53 of i64 %23 <52, 0>
store i53 %24, i53 mem_index
%25 = Extract i3 of i64 %19 <2, 0>
%26 = i1 Eq i3 %25, 0
br i1 %26, label %bb4, label %bb5
bb4:
%27 = load i53, i53 mem_index
store i64 %21, [9007199254740992, i64] MEM[%27]
br label %bb6
bb5:
%28 = load i53, i53 mem_index
%29 = i53 Add i53 %28, 1
%30 = load i64, [9007199254740992, i64] MEM[%29]
store i64 %30, i64 tmp_dword1
%31 = load i53, i53 mem_index
%32 = load i64, [9007199254740992, i64] MEM[%31]
store i64 %32, i64 tmp_dword2
%33 = Extract i3 of i64 %19 <2, 0>
%34 = i1 Eq i3 %33, 1
br i1 %34, label %bb7, label %bb8
bb6:
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb7:
%35 = i64 Lshr i64 %21, 56
%36 = Extract i8 of i64 %35 <7, 0>
%38 = load i64, i64 tmp_dword1
%39 = Zext i8 %36 to i64
%40 = i64 And i64 %38, -256
%41 = i64 Shl i64 %39, 0
%37 = i64 Or i64 %40, %41
store i64 %37, i64 tmp_dword1
%42 = i64 Lshr i64 %21, 0
%43 = Extract i56 of i64 %42 <55, 0>
%45 = load i64, i64 tmp_dword2
%46 = Zext i56 %43 to i64
%47 = i64 And i64 %45, 255
%48 = i64 Shl i64 %46, 8
%44 = i64 Or i64 %47, %48
store i64 %44, i64 tmp_dword2
br label %bb11
bb8:
%49 = Extract i3 of i64 %19 <2, 0>
%50 = i1 Eq i3 %49, 2
br i1 %50, label %bb12, label %bb13
bb9:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb14
bb10:
br label %bb14
bb11:
%143 = load i64, i64 tmp_dword1
%144 = load i53, i53 mem_index
%145 = i53 Add i53 %144, 1
store i64 %143, [9007199254740992, i64] MEM[%145]
%146 = load i64, i64 tmp_dword2
%147 = load i53, i53 mem_index
store i64 %146, [9007199254740992, i64] MEM[%147]
br label %bb6
bb12:
%51 = i64 Lshr i64 %21, 48
%52 = Extract i16 of i64 %51 <15, 0>
%54 = load i64, i64 tmp_dword1
%55 = Zext i16 %52 to i64
%56 = i64 And i64 %54, -65536
%57 = i64 Shl i64 %55, 0
%53 = i64 Or i64 %56, %57
store i64 %53, i64 tmp_dword1
%58 = i64 Lshr i64 %21, 0
%59 = Extract i48 of i64 %58 <47, 0>
%61 = load i64, i64 tmp_dword2
%62 = Zext i48 %59 to i64
%63 = i64 And i64 %61, 65535
%64 = i64 Shl i64 %62, 16
%60 = i64 Or i64 %63, %64
store i64 %60, i64 tmp_dword2
br label %bb11
bb13:
%65 = Extract i3 of i64 %19 <2, 0>
%66 = i1 Eq i3 %65, 3
br i1 %66, label %bb15, label %bb16
bb14:
%11 = load i64, i64 PC
store i64 %11, i64 PC
store i64 0, [32, i64] XREG[0]
%149 = load i64, i64 PC
store i64 %149, i64 prev_pc
%157 = load i64, [32, i64] XREG[2]
%155 = i64 Add i64 %157, 8
store i64 %155, i64 tmp_address
%156 = load i64, i64 tmp_address
%159 = load i64, [32, i64] XREG[1]
store i64 %159, i64 rs2_var
%158 = load i64, i64 rs2_var
%160 = i64 Lshr i64 %156, 3
%161 = Extract i53 of i64 %160 <52, 0>
store i53 %161, i53 mem_index
%162 = Extract i3 of i64 %156 <2, 0>
%163 = i1 Eq i3 %162, 0
br i1 %163, label %bb23, label %bb24
bb15:
%67 = i64 Lshr i64 %21, 40
%68 = Extract i24 of i64 %67 <23, 0>
%70 = load i64, i64 tmp_dword1
%71 = Zext i24 %68 to i64
%72 = i64 And i64 %70, -16777216
%73 = i64 Shl i64 %71, 0
%69 = i64 Or i64 %72, %73
store i64 %69, i64 tmp_dword1
%74 = i64 Lshr i64 %21, 0
%75 = Extract i40 of i64 %74 <39, 0>
%77 = load i64, i64 tmp_dword2
%78 = Zext i40 %75 to i64
%79 = i64 And i64 %77, 16777215
%80 = i64 Shl i64 %78, 24
%76 = i64 Or i64 %79, %80
store i64 %76, i64 tmp_dword2
br label %bb11
bb16:
%81 = Extract i3 of i64 %19 <2, 0>
%82 = i1 Eq i3 %81, -4
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %21, 32
%84 = Extract i32 of i64 %83 <31, 0>
%86 = load i64, i64 tmp_dword1
%87 = Zext i32 %84 to i64
%88 = i64 And i64 %86, -4294967296
%89 = i64 Shl i64 %87, 0
%85 = i64 Or i64 %88, %89
store i64 %85, i64 tmp_dword1
%90 = i64 Lshr i64 %21, 0
%91 = Extract i32 of i64 %90 <31, 0>
%93 = load i64, i64 tmp_dword2
%94 = Zext i32 %91 to i64
%95 = i64 And i64 %93, 4294967295
%96 = i64 Shl i64 %94, 32
%92 = i64 Or i64 %95, %96
store i64 %92, i64 tmp_dword2
br label %bb11
bb18:
%97 = Extract i3 of i64 %19 <2, 0>
%98 = i1 Eq i3 %97, -3
br i1 %98, label %bb19, label %bb20
bb19:
%99 = i64 Lshr i64 %21, 24
%100 = Extract i40 of i64 %99 <39, 0>
%102 = load i64, i64 tmp_dword1
%103 = Zext i40 %100 to i64
%104 = i64 And i64 %102, -1099511627776
%105 = i64 Shl i64 %103, 0
%101 = i64 Or i64 %104, %105
store i64 %101, i64 tmp_dword1
%106 = i64 Lshr i64 %21, 0
%107 = Extract i24 of i64 %106 <23, 0>
%109 = load i64, i64 tmp_dword2
%110 = Zext i24 %107 to i64
%111 = i64 And i64 %109, 1099511627775
%112 = i64 Shl i64 %110, 40
%108 = i64 Or i64 %111, %112
store i64 %108, i64 tmp_dword2
br label %bb11
bb20:
%113 = Extract i3 of i64 %19 <2, 0>
%114 = i1 Eq i3 %113, -2
br i1 %114, label %bb21, label %bb22
bb21:
%115 = i64 Lshr i64 %21, 16
%116 = Extract i48 of i64 %115 <47, 0>
%118 = load i64, i64 tmp_dword1
%119 = Zext i48 %116 to i64
%120 = i64 And i64 %118, -281474976710656
%121 = i64 Shl i64 %119, 0
%117 = i64 Or i64 %120, %121
store i64 %117, i64 tmp_dword1
%122 = i64 Lshr i64 %21, 0
%123 = Extract i16 of i64 %122 <15, 0>
%125 = load i64, i64 tmp_dword2
%126 = Zext i16 %123 to i64
%127 = i64 And i64 %125, 281474976710655
%128 = i64 Shl i64 %126, 48
%124 = i64 Or i64 %127, %128
store i64 %124, i64 tmp_dword2
br label %bb11
bb22:
%129 = i64 Lshr i64 %21, 8
%130 = Extract i56 of i64 %129 <55, 0>
%132 = load i64, i64 tmp_dword1
%133 = Zext i56 %130 to i64
%134 = i64 And i64 %132, -72057594037927936
%135 = i64 Shl i64 %133, 0
%131 = i64 Or i64 %134, %135
store i64 %131, i64 tmp_dword1
%136 = i64 Lshr i64 %21, 0
%137 = Extract i8 of i64 %136 <7, 0>
%139 = load i64, i64 tmp_dword2
%140 = Zext i8 %137 to i64
%141 = i64 And i64 %139, 72057594037927935
%142 = i64 Shl i64 %140, 56
%138 = i64 Or i64 %141, %142
store i64 %138, i64 tmp_dword2
br label %bb11
bb23:
%164 = load i53, i53 mem_index
store i64 %158, [9007199254740992, i64] MEM[%164]
br label %bb25
bb24:
%165 = load i53, i53 mem_index
%166 = i53 Add i53 %165, 1
%167 = load i64, [9007199254740992, i64] MEM[%166]
store i64 %167, i64 tmp_dword1
%168 = load i53, i53 mem_index
%169 = load i64, [9007199254740992, i64] MEM[%168]
store i64 %169, i64 tmp_dword2
%170 = Extract i3 of i64 %156 <2, 0>
%171 = i1 Eq i3 %170, 1
br i1 %171, label %bb26, label %bb27
bb25:
%150 = load i64, i64 PC
%152 = load i64, i64 prev_pc
%151 = i1 Eq i64 %150, %152
br i1 %151, label %bb28, label %bb29
bb26:
%172 = i64 Lshr i64 %158, 56
%173 = Extract i8 of i64 %172 <7, 0>
%175 = load i64, i64 tmp_dword1
%176 = Zext i8 %173 to i64
%177 = i64 And i64 %175, -256
%178 = i64 Shl i64 %176, 0
%174 = i64 Or i64 %177, %178
store i64 %174, i64 tmp_dword1
%179 = i64 Lshr i64 %158, 0
%180 = Extract i56 of i64 %179 <55, 0>
%182 = load i64, i64 tmp_dword2
%183 = Zext i56 %180 to i64
%184 = i64 And i64 %182, 255
%185 = i64 Shl i64 %183, 8
%181 = i64 Or i64 %184, %185
store i64 %181, i64 tmp_dword2
br label %bb30
bb27:
%186 = Extract i3 of i64 %156 <2, 0>
%187 = i1 Eq i3 %186, 2
br i1 %187, label %bb31, label %bb32
bb28:
%153 = load i64, i64 PC
%154 = i64 Add i64 %153, 4
store i64 %154, i64 PC
br label %bb33
bb29:
br label %bb33
bb30:
%280 = load i64, i64 tmp_dword1
%281 = load i53, i53 mem_index
%282 = i53 Add i53 %281, 1
store i64 %280, [9007199254740992, i64] MEM[%282]
%283 = load i64, i64 tmp_dword2
%284 = load i53, i53 mem_index
store i64 %283, [9007199254740992, i64] MEM[%284]
br label %bb25
bb31:
%188 = i64 Lshr i64 %158, 48
%189 = Extract i16 of i64 %188 <15, 0>
%191 = load i64, i64 tmp_dword1
%192 = Zext i16 %189 to i64
%193 = i64 And i64 %191, -65536
%194 = i64 Shl i64 %192, 0
%190 = i64 Or i64 %193, %194
store i64 %190, i64 tmp_dword1
%195 = i64 Lshr i64 %158, 0
%196 = Extract i48 of i64 %195 <47, 0>
%198 = load i64, i64 tmp_dword2
%199 = Zext i48 %196 to i64
%200 = i64 And i64 %198, 65535
%201 = i64 Shl i64 %199, 16
%197 = i64 Or i64 %200, %201
store i64 %197, i64 tmp_dword2
br label %bb30
bb32:
%202 = Extract i3 of i64 %156 <2, 0>
%203 = i1 Eq i3 %202, 3
br i1 %203, label %bb34, label %bb35
bb33:
%148 = load i64, i64 PC
store i64 %148, i64 PC
store i64 0, [32, i64] XREG[0]
%286 = load i64, i64 PC
store i64 %286, i64 prev_pc
%293 = load i64, [32, i64] XREG[10]
%292 = i64 Add i64 %293, 0
store i64 %292, [32, i64] XREG[8]
%287 = load i64, i64 PC
%289 = load i64, i64 prev_pc
%288 = i1 Eq i64 %287, %289
br i1 %288, label %bb42, label %bb43
bb34:
%204 = i64 Lshr i64 %158, 40
%205 = Extract i24 of i64 %204 <23, 0>
%207 = load i64, i64 tmp_dword1
%208 = Zext i24 %205 to i64
%209 = i64 And i64 %207, -16777216
%210 = i64 Shl i64 %208, 0
%206 = i64 Or i64 %209, %210
store i64 %206, i64 tmp_dword1
%211 = i64 Lshr i64 %158, 0
%212 = Extract i40 of i64 %211 <39, 0>
%214 = load i64, i64 tmp_dword2
%215 = Zext i40 %212 to i64
%216 = i64 And i64 %214, 16777215
%217 = i64 Shl i64 %215, 24
%213 = i64 Or i64 %216, %217
store i64 %213, i64 tmp_dword2
br label %bb30
bb35:
%218 = Extract i3 of i64 %156 <2, 0>
%219 = i1 Eq i3 %218, -4
br i1 %219, label %bb36, label %bb37
bb36:
%220 = i64 Lshr i64 %158, 32
%221 = Extract i32 of i64 %220 <31, 0>
%223 = load i64, i64 tmp_dword1
%224 = Zext i32 %221 to i64
%225 = i64 And i64 %223, -4294967296
%226 = i64 Shl i64 %224, 0
%222 = i64 Or i64 %225, %226
store i64 %222, i64 tmp_dword1
%227 = i64 Lshr i64 %158, 0
%228 = Extract i32 of i64 %227 <31, 0>
%230 = load i64, i64 tmp_dword2
%231 = Zext i32 %228 to i64
%232 = i64 And i64 %230, 4294967295
%233 = i64 Shl i64 %231, 32
%229 = i64 Or i64 %232, %233
store i64 %229, i64 tmp_dword2
br label %bb30
bb37:
%234 = Extract i3 of i64 %156 <2, 0>
%235 = i1 Eq i3 %234, -3
br i1 %235, label %bb38, label %bb39
bb38:
%236 = i64 Lshr i64 %158, 24
%237 = Extract i40 of i64 %236 <39, 0>
%239 = load i64, i64 tmp_dword1
%240 = Zext i40 %237 to i64
%241 = i64 And i64 %239, -1099511627776
%242 = i64 Shl i64 %240, 0
%238 = i64 Or i64 %241, %242
store i64 %238, i64 tmp_dword1
%243 = i64 Lshr i64 %158, 0
%244 = Extract i24 of i64 %243 <23, 0>
%246 = load i64, i64 tmp_dword2
%247 = Zext i24 %244 to i64
%248 = i64 And i64 %246, 1099511627775
%249 = i64 Shl i64 %247, 40
%245 = i64 Or i64 %248, %249
store i64 %245, i64 tmp_dword2
br label %bb30
bb39:
%250 = Extract i3 of i64 %156 <2, 0>
%251 = i1 Eq i3 %250, -2
br i1 %251, label %bb40, label %bb41
bb40:
%252 = i64 Lshr i64 %158, 16
%253 = Extract i48 of i64 %252 <47, 0>
%255 = load i64, i64 tmp_dword1
%256 = Zext i48 %253 to i64
%257 = i64 And i64 %255, -281474976710656
%258 = i64 Shl i64 %256, 0
%254 = i64 Or i64 %257, %258
store i64 %254, i64 tmp_dword1
%259 = i64 Lshr i64 %158, 0
%260 = Extract i16 of i64 %259 <15, 0>
%262 = load i64, i64 tmp_dword2
%263 = Zext i16 %260 to i64
%264 = i64 And i64 %262, 281474976710655
%265 = i64 Shl i64 %263, 48
%261 = i64 Or i64 %264, %265
store i64 %261, i64 tmp_dword2
br label %bb30
bb41:
%266 = i64 Lshr i64 %158, 8
%267 = Extract i56 of i64 %266 <55, 0>
%269 = load i64, i64 tmp_dword1
%270 = Zext i56 %267 to i64
%271 = i64 And i64 %269, -72057594037927936
%272 = i64 Shl i64 %270, 0
%268 = i64 Or i64 %271, %272
store i64 %268, i64 tmp_dword1
%273 = i64 Lshr i64 %158, 0
%274 = Extract i8 of i64 %273 <7, 0>
%276 = load i64, i64 tmp_dword2
%277 = Zext i8 %274 to i64
%278 = i64 And i64 %276, 72057594037927935
%279 = i64 Shl i64 %277, 56
%275 = i64 Or i64 %278, %279
store i64 %275, i64 tmp_dword2
br label %bb30
bb42:
%290 = load i64, i64 PC
%291 = i64 Add i64 %290, 4
store i64 %291, i64 PC
br label %bb44
bb43:
br label %bb44
bb44:
%285 = load i64, i64 PC
store i64 %285, i64 PC
store i64 0, [32, i64] XREG[0]
%295 = load i64, i64 PC
store i64 %295, i64 prev_pc
%304 = load i64, [32, i64] XREG[12]
%305 = load i64, [32, i64] XREG[0]
%301 = i1 Eq i64 %304, %305
br i1 %301, label %bb45, label %bb46
bb45:
%302 = load i64, i64 PC
%303 = i64 Add i64 %302, 12
store i64 %303, i64 PC
br label %bb47
bb46:
br label %bb47
bb47:
%296 = load i64, i64 PC
%298 = load i64, i64 prev_pc
%297 = i1 Eq i64 %296, %298
br i1 %297, label %bb48, label %bb49
bb48:
%299 = load i64, i64 PC
%300 = i64 Add i64 %299, 4
store i64 %300, i64 PC
br label %bb50
bb49:
br label %bb50
bb50:
%294 = load i64, i64 PC
store i64 %294, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%10 = load i64, [32, i64] XREG!2[2]
%9 = i64 Add i64 %10, -16
XREG!3 = store i64 %9, [32, i64] XREG!2[2]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!2 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %5 PC!2 PC!1
%2 = load i64, i64 PC!3
PC!4 = store i64 %2, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%12 = load i64, i64 PC!4
prev_pc!3 = store i64 %12, i64 prev_pc!2
%20 = load i64, [32, i64] XREG!4[2]
%18 = i64 Add i64 %20, 0
tmp_address!2 = store i64 %18, i64 tmp_address!1
%19 = load i64, i64 tmp_address!2
%22 = load i64, [32, i64] XREG!4[8]
rs2_var!2 = store i64 %22, i64 rs2_var!1
%21 = load i64, i64 rs2_var!2
%23 = i64 Lshr i64 %19, 3
%24 = Extract i53 of i64 %23 <52, 0>
mem_index!2 = store i53 %24, i53 mem_index!1
%25 = Extract i3 of i64 %19 <2, 0>
%26 = i1 Eq i3 %25, 0
br i1 %26, label %bb4, label %bb5
bb4:
%27 = load i53, i53 mem_index!2
MEM!4 = store i64 %21, [9007199254740992, i64] MEM!1[%27]
br label %bb6
bb5:
%28 = load i53, i53 mem_index!2
%29 = i53 Add i53 %28, 1
%30 = load i64, [9007199254740992, i64] MEM!1[%29]
tmp_dword1!2 = store i64 %30, i64 tmp_dword1!1
%31 = load i53, i53 mem_index!2
%32 = load i64, [9007199254740992, i64] MEM!1[%31]
tmp_dword2!2 = store i64 %32, i64 tmp_dword2!1
%33 = Extract i3 of i64 %19 <2, 0>
%34 = i1 Eq i3 %33, 1
br i1 %34, label %bb7, label %bb8
bb6:
MEM!5 = phi ite %26 MEM!4 MEM!3
tmp_dword2!11 = phi ite %26 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %26 tmp_dword1!1 tmp_dword1!3
%13 = load i64, i64 PC!4
%15 = load i64, i64 prev_pc!3
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb7:
%35 = i64 Lshr i64 %21, 56
%36 = Extract i8 of i64 %35 <7, 0>
%38 = load i64, i64 tmp_dword1!2
%39 = Zext i8 %36 to i64
%40 = i64 And i64 %38, -256
%41 = i64 Shl i64 %39, 0
%37 = i64 Or i64 %40, %41
tmp_dword1!10 = store i64 %37, i64 tmp_dword1!2
%42 = i64 Lshr i64 %21, 0
%43 = Extract i56 of i64 %42 <55, 0>
%45 = load i64, i64 tmp_dword2!2
%46 = Zext i56 %43 to i64
%47 = i64 And i64 %45, 255
%48 = i64 Shl i64 %46, 8
%44 = i64 Or i64 %47, %48
tmp_dword2!10 = store i64 %44, i64 tmp_dword2!2
br label %bb11
bb8:
%49 = Extract i3 of i64 %19 <2, 0>
%50 = i1 Eq i3 %49, 2
br i1 %50, label %bb12, label %bb13
bb9:
%16 = load i64, i64 PC!4
%17 = i64 Add i64 %16, 4
PC!19 = store i64 %17, i64 PC!4
br label %bb14
bb10:
br label %bb14
bb11:
tmp_dword2!3 = phi ite %34 tmp_dword2!10 ite %50 tmp_dword2!4 ite %66 tmp_dword2!9 ite %82 tmp_dword2!8 ite %98 tmp_dword2!5 ite %114 tmp_dword2!6 tmp_dword2!7
tmp_dword1!3 = phi ite %34 tmp_dword1!10 ite %50 tmp_dword1!4 ite %66 tmp_dword1!9 ite %82 tmp_dword1!8 ite %98 tmp_dword1!5 ite %114 tmp_dword1!6 tmp_dword1!7
%143 = load i64, i64 tmp_dword1!3
%144 = load i53, i53 mem_index!2
%145 = i53 Add i53 %144, 1
MEM!2 = store i64 %143, [9007199254740992, i64] MEM!1[%145]
%146 = load i64, i64 tmp_dword2!3
%147 = load i53, i53 mem_index!2
MEM!3 = store i64 %146, [9007199254740992, i64] MEM!2[%147]
br label %bb6
bb12:
%51 = i64 Lshr i64 %21, 48
%52 = Extract i16 of i64 %51 <15, 0>
%54 = load i64, i64 tmp_dword1!2
%55 = Zext i16 %52 to i64
%56 = i64 And i64 %54, -65536
%57 = i64 Shl i64 %55, 0
%53 = i64 Or i64 %56, %57
tmp_dword1!4 = store i64 %53, i64 tmp_dword1!2
%58 = i64 Lshr i64 %21, 0
%59 = Extract i48 of i64 %58 <47, 0>
%61 = load i64, i64 tmp_dword2!2
%62 = Zext i48 %59 to i64
%63 = i64 And i64 %61, 65535
%64 = i64 Shl i64 %62, 16
%60 = i64 Or i64 %63, %64
tmp_dword2!4 = store i64 %60, i64 tmp_dword2!2
br label %bb11
bb13:
%65 = Extract i3 of i64 %19 <2, 0>
%66 = i1 Eq i3 %65, 3
br i1 %66, label %bb15, label %bb16
bb14:
PC!5 = phi ite %14 PC!19 PC!4
%11 = load i64, i64 PC!5
PC!6 = store i64 %11, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
%149 = load i64, i64 PC!6
prev_pc!4 = store i64 %149, i64 prev_pc!3
%157 = load i64, [32, i64] XREG!5[2]
%155 = i64 Add i64 %157, 8
tmp_address!3 = store i64 %155, i64 tmp_address!2
%156 = load i64, i64 tmp_address!3
%159 = load i64, [32, i64] XREG!5[1]
rs2_var!3 = store i64 %159, i64 rs2_var!2
%158 = load i64, i64 rs2_var!3
%160 = i64 Lshr i64 %156, 3
%161 = Extract i53 of i64 %160 <52, 0>
mem_index!3 = store i53 %161, i53 mem_index!2
%162 = Extract i3 of i64 %156 <2, 0>
%163 = i1 Eq i3 %162, 0
br i1 %163, label %bb23, label %bb24
bb15:
%67 = i64 Lshr i64 %21, 40
%68 = Extract i24 of i64 %67 <23, 0>
%70 = load i64, i64 tmp_dword1!2
%71 = Zext i24 %68 to i64
%72 = i64 And i64 %70, -16777216
%73 = i64 Shl i64 %71, 0
%69 = i64 Or i64 %72, %73
tmp_dword1!9 = store i64 %69, i64 tmp_dword1!2
%74 = i64 Lshr i64 %21, 0
%75 = Extract i40 of i64 %74 <39, 0>
%77 = load i64, i64 tmp_dword2!2
%78 = Zext i40 %75 to i64
%79 = i64 And i64 %77, 16777215
%80 = i64 Shl i64 %78, 24
%76 = i64 Or i64 %79, %80
tmp_dword2!9 = store i64 %76, i64 tmp_dword2!2
br label %bb11
bb16:
%81 = Extract i3 of i64 %19 <2, 0>
%82 = i1 Eq i3 %81, -4
br i1 %82, label %bb17, label %bb18
bb17:
%83 = i64 Lshr i64 %21, 32
%84 = Extract i32 of i64 %83 <31, 0>
%86 = load i64, i64 tmp_dword1!2
%87 = Zext i32 %84 to i64
%88 = i64 And i64 %86, -4294967296
%89 = i64 Shl i64 %87, 0
%85 = i64 Or i64 %88, %89
tmp_dword1!8 = store i64 %85, i64 tmp_dword1!2
%90 = i64 Lshr i64 %21, 0
%91 = Extract i32 of i64 %90 <31, 0>
%93 = load i64, i64 tmp_dword2!2
%94 = Zext i32 %91 to i64
%95 = i64 And i64 %93, 4294967295
%96 = i64 Shl i64 %94, 32
%92 = i64 Or i64 %95, %96
tmp_dword2!8 = store i64 %92, i64 tmp_dword2!2
br label %bb11
bb18:
%97 = Extract i3 of i64 %19 <2, 0>
%98 = i1 Eq i3 %97, -3
br i1 %98, label %bb19, label %bb20
bb19:
%99 = i64 Lshr i64 %21, 24
%100 = Extract i40 of i64 %99 <39, 0>
%102 = load i64, i64 tmp_dword1!2
%103 = Zext i40 %100 to i64
%104 = i64 And i64 %102, -1099511627776
%105 = i64 Shl i64 %103, 0
%101 = i64 Or i64 %104, %105
tmp_dword1!5 = store i64 %101, i64 tmp_dword1!2
%106 = i64 Lshr i64 %21, 0
%107 = Extract i24 of i64 %106 <23, 0>
%109 = load i64, i64 tmp_dword2!2
%110 = Zext i24 %107 to i64
%111 = i64 And i64 %109, 1099511627775
%112 = i64 Shl i64 %110, 40
%108 = i64 Or i64 %111, %112
tmp_dword2!5 = store i64 %108, i64 tmp_dword2!2
br label %bb11
bb20:
%113 = Extract i3 of i64 %19 <2, 0>
%114 = i1 Eq i3 %113, -2
br i1 %114, label %bb21, label %bb22
bb21:
%115 = i64 Lshr i64 %21, 16
%116 = Extract i48 of i64 %115 <47, 0>
%118 = load i64, i64 tmp_dword1!2
%119 = Zext i48 %116 to i64
%120 = i64 And i64 %118, -281474976710656
%121 = i64 Shl i64 %119, 0
%117 = i64 Or i64 %120, %121
tmp_dword1!6 = store i64 %117, i64 tmp_dword1!2
%122 = i64 Lshr i64 %21, 0
%123 = Extract i16 of i64 %122 <15, 0>
%125 = load i64, i64 tmp_dword2!2
%126 = Zext i16 %123 to i64
%127 = i64 And i64 %125, 281474976710655
%128 = i64 Shl i64 %126, 48
%124 = i64 Or i64 %127, %128
tmp_dword2!6 = store i64 %124, i64 tmp_dword2!2
br label %bb11
bb22:
%129 = i64 Lshr i64 %21, 8
%130 = Extract i56 of i64 %129 <55, 0>
%132 = load i64, i64 tmp_dword1!2
%133 = Zext i56 %130 to i64
%134 = i64 And i64 %132, -72057594037927936
%135 = i64 Shl i64 %133, 0
%131 = i64 Or i64 %134, %135
tmp_dword1!7 = store i64 %131, i64 tmp_dword1!2
%136 = i64 Lshr i64 %21, 0
%137 = Extract i8 of i64 %136 <7, 0>
%139 = load i64, i64 tmp_dword2!2
%140 = Zext i8 %137 to i64
%141 = i64 And i64 %139, 72057594037927935
%142 = i64 Shl i64 %140, 56
%138 = i64 Or i64 %141, %142
tmp_dword2!7 = store i64 %138, i64 tmp_dword2!2
br label %bb11
bb23:
%164 = load i53, i53 mem_index!3
MEM!6 = store i64 %158, [9007199254740992, i64] MEM!5[%164]
br label %bb25
bb24:
%165 = load i53, i53 mem_index!3
%166 = i53 Add i53 %165, 1
%167 = load i64, [9007199254740992, i64] MEM!5[%166]
tmp_dword1!13 = store i64 %167, i64 tmp_dword1!11
%168 = load i53, i53 mem_index!3
%169 = load i64, [9007199254740992, i64] MEM!5[%168]
tmp_dword2!13 = store i64 %169, i64 tmp_dword2!11
%170 = Extract i3 of i64 %156 <2, 0>
%171 = i1 Eq i3 %170, 1
br i1 %171, label %bb26, label %bb27
bb25:
MEM!7 = phi ite %163 MEM!6 MEM!9
tmp_dword2!12 = phi ite %163 tmp_dword2!11 tmp_dword2!21
tmp_dword1!12 = phi ite %163 tmp_dword1!11 tmp_dword1!21
%150 = load i64, i64 PC!6
%152 = load i64, i64 prev_pc!4
%151 = i1 Eq i64 %150, %152
br i1 %151, label %bb28, label %bb29
bb26:
%172 = i64 Lshr i64 %158, 56
%173 = Extract i8 of i64 %172 <7, 0>
%175 = load i64, i64 tmp_dword1!13
%176 = Zext i8 %173 to i64
%177 = i64 And i64 %175, -256
%178 = i64 Shl i64 %176, 0
%174 = i64 Or i64 %177, %178
tmp_dword1!14 = store i64 %174, i64 tmp_dword1!13
%179 = i64 Lshr i64 %158, 0
%180 = Extract i56 of i64 %179 <55, 0>
%182 = load i64, i64 tmp_dword2!13
%183 = Zext i56 %180 to i64
%184 = i64 And i64 %182, 255
%185 = i64 Shl i64 %183, 8
%181 = i64 Or i64 %184, %185
tmp_dword2!14 = store i64 %181, i64 tmp_dword2!13
br label %bb30
bb27:
%186 = Extract i3 of i64 %156 <2, 0>
%187 = i1 Eq i3 %186, 2
br i1 %187, label %bb31, label %bb32
bb28:
%153 = load i64, i64 PC!6
%154 = i64 Add i64 %153, 4
PC!7 = store i64 %154, i64 PC!6
br label %bb33
bb29:
br label %bb33
bb30:
tmp_dword2!21 = phi ite %171 tmp_dword2!14 ite %187 tmp_dword2!20 ite %203 tmp_dword2!19 ite %219 tmp_dword2!15 ite %235 tmp_dword2!16 ite %251 tmp_dword2!18 tmp_dword2!17
tmp_dword1!21 = phi ite %171 tmp_dword1!14 ite %187 tmp_dword1!20 ite %203 tmp_dword1!19 ite %219 tmp_dword1!15 ite %235 tmp_dword1!16 ite %251 tmp_dword1!18 tmp_dword1!17
%280 = load i64, i64 tmp_dword1!21
%281 = load i53, i53 mem_index!3
%282 = i53 Add i53 %281, 1
MEM!8 = store i64 %280, [9007199254740992, i64] MEM!5[%282]
%283 = load i64, i64 tmp_dword2!21
%284 = load i53, i53 mem_index!3
MEM!9 = store i64 %283, [9007199254740992, i64] MEM!8[%284]
br label %bb25
bb31:
%188 = i64 Lshr i64 %158, 48
%189 = Extract i16 of i64 %188 <15, 0>
%191 = load i64, i64 tmp_dword1!13
%192 = Zext i16 %189 to i64
%193 = i64 And i64 %191, -65536
%194 = i64 Shl i64 %192, 0
%190 = i64 Or i64 %193, %194
tmp_dword1!20 = store i64 %190, i64 tmp_dword1!13
%195 = i64 Lshr i64 %158, 0
%196 = Extract i48 of i64 %195 <47, 0>
%198 = load i64, i64 tmp_dword2!13
%199 = Zext i48 %196 to i64
%200 = i64 And i64 %198, 65535
%201 = i64 Shl i64 %199, 16
%197 = i64 Or i64 %200, %201
tmp_dword2!20 = store i64 %197, i64 tmp_dword2!13
br label %bb30
bb32:
%202 = Extract i3 of i64 %156 <2, 0>
%203 = i1 Eq i3 %202, 3
br i1 %203, label %bb34, label %bb35
bb33:
PC!8 = phi ite %151 PC!7 PC!6
%148 = load i64, i64 PC!8
PC!9 = store i64 %148, i64 PC!8
XREG!6 = store i64 0, [32, i64] XREG!5[0]
%286 = load i64, i64 PC!9
prev_pc!5 = store i64 %286, i64 prev_pc!4
%293 = load i64, [32, i64] XREG!6[10]
%292 = i64 Add i64 %293, 0
XREG!7 = store i64 %292, [32, i64] XREG!6[8]
%287 = load i64, i64 PC!9
%289 = load i64, i64 prev_pc!5
%288 = i1 Eq i64 %287, %289
br i1 %288, label %bb42, label %bb43
bb34:
%204 = i64 Lshr i64 %158, 40
%205 = Extract i24 of i64 %204 <23, 0>
%207 = load i64, i64 tmp_dword1!13
%208 = Zext i24 %205 to i64
%209 = i64 And i64 %207, -16777216
%210 = i64 Shl i64 %208, 0
%206 = i64 Or i64 %209, %210
tmp_dword1!19 = store i64 %206, i64 tmp_dword1!13
%211 = i64 Lshr i64 %158, 0
%212 = Extract i40 of i64 %211 <39, 0>
%214 = load i64, i64 tmp_dword2!13
%215 = Zext i40 %212 to i64
%216 = i64 And i64 %214, 16777215
%217 = i64 Shl i64 %215, 24
%213 = i64 Or i64 %216, %217
tmp_dword2!19 = store i64 %213, i64 tmp_dword2!13
br label %bb30
bb35:
%218 = Extract i3 of i64 %156 <2, 0>
%219 = i1 Eq i3 %218, -4
br i1 %219, label %bb36, label %bb37
bb36:
%220 = i64 Lshr i64 %158, 32
%221 = Extract i32 of i64 %220 <31, 0>
%223 = load i64, i64 tmp_dword1!13
%224 = Zext i32 %221 to i64
%225 = i64 And i64 %223, -4294967296
%226 = i64 Shl i64 %224, 0
%222 = i64 Or i64 %225, %226
tmp_dword1!15 = store i64 %222, i64 tmp_dword1!13
%227 = i64 Lshr i64 %158, 0
%228 = Extract i32 of i64 %227 <31, 0>
%230 = load i64, i64 tmp_dword2!13
%231 = Zext i32 %228 to i64
%232 = i64 And i64 %230, 4294967295
%233 = i64 Shl i64 %231, 32
%229 = i64 Or i64 %232, %233
tmp_dword2!15 = store i64 %229, i64 tmp_dword2!13
br label %bb30
bb37:
%234 = Extract i3 of i64 %156 <2, 0>
%235 = i1 Eq i3 %234, -3
br i1 %235, label %bb38, label %bb39
bb38:
%236 = i64 Lshr i64 %158, 24
%237 = Extract i40 of i64 %236 <39, 0>
%239 = load i64, i64 tmp_dword1!13
%240 = Zext i40 %237 to i64
%241 = i64 And i64 %239, -1099511627776
%242 = i64 Shl i64 %240, 0
%238 = i64 Or i64 %241, %242
tmp_dword1!16 = store i64 %238, i64 tmp_dword1!13
%243 = i64 Lshr i64 %158, 0
%244 = Extract i24 of i64 %243 <23, 0>
%246 = load i64, i64 tmp_dword2!13
%247 = Zext i24 %244 to i64
%248 = i64 And i64 %246, 1099511627775
%249 = i64 Shl i64 %247, 40
%245 = i64 Or i64 %248, %249
tmp_dword2!16 = store i64 %245, i64 tmp_dword2!13
br label %bb30
bb39:
%250 = Extract i3 of i64 %156 <2, 0>
%251 = i1 Eq i3 %250, -2
br i1 %251, label %bb40, label %bb41
bb40:
%252 = i64 Lshr i64 %158, 16
%253 = Extract i48 of i64 %252 <47, 0>
%255 = load i64, i64 tmp_dword1!13
%256 = Zext i48 %253 to i64
%257 = i64 And i64 %255, -281474976710656
%258 = i64 Shl i64 %256, 0
%254 = i64 Or i64 %257, %258
tmp_dword1!18 = store i64 %254, i64 tmp_dword1!13
%259 = i64 Lshr i64 %158, 0
%260 = Extract i16 of i64 %259 <15, 0>
%262 = load i64, i64 tmp_dword2!13
%263 = Zext i16 %260 to i64
%264 = i64 And i64 %262, 281474976710655
%265 = i64 Shl i64 %263, 48
%261 = i64 Or i64 %264, %265
tmp_dword2!18 = store i64 %261, i64 tmp_dword2!13
br label %bb30
bb41:
%266 = i64 Lshr i64 %158, 8
%267 = Extract i56 of i64 %266 <55, 0>
%269 = load i64, i64 tmp_dword1!13
%270 = Zext i56 %267 to i64
%271 = i64 And i64 %269, -72057594037927936
%272 = i64 Shl i64 %270, 0
%268 = i64 Or i64 %271, %272
tmp_dword1!17 = store i64 %268, i64 tmp_dword1!13
%273 = i64 Lshr i64 %158, 0
%274 = Extract i8 of i64 %273 <7, 0>
%276 = load i64, i64 tmp_dword2!13
%277 = Zext i8 %274 to i64
%278 = i64 And i64 %276, 72057594037927935
%279 = i64 Shl i64 %277, 56
%275 = i64 Or i64 %278, %279
tmp_dword2!17 = store i64 %275, i64 tmp_dword2!13
br label %bb30
bb42:
%290 = load i64, i64 PC!9
%291 = i64 Add i64 %290, 4
PC!18 = store i64 %291, i64 PC!9
br label %bb44
bb43:
br label %bb44
bb44:
PC!10 = phi ite %288 PC!18 PC!9
%285 = load i64, i64 PC!10
PC!11 = store i64 %285, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
%295 = load i64, i64 PC!11
prev_pc!6 = store i64 %295, i64 prev_pc!5
%304 = load i64, [32, i64] XREG!8[12]
%305 = load i64, [32, i64] XREG!8[0]
%301 = i1 Eq i64 %304, %305
br i1 %301, label %bb45, label %bb46
bb45:
%302 = load i64, i64 PC!11
%303 = i64 Add i64 %302, 12
PC!17 = store i64 %303, i64 PC!11
br label %bb47
bb46:
br label %bb47
bb47:
PC!12 = phi ite %301 PC!17 PC!11
%296 = load i64, i64 PC!12
%298 = load i64, i64 prev_pc!6
%297 = i1 Eq i64 %296, %298
br i1 %297, label %bb48, label %bb49
bb48:
%299 = load i64, i64 PC!12
%300 = i64 Add i64 %299, 4
PC!16 = store i64 %300, i64 PC!12
br label %bb50
bb49:
br label %bb50
bb50:
PC!13 = phi ite %297 PC!16 PC!12
%294 = load i64, i64 PC!13
PC!14 = store i64 %294, i64 PC!13
%1 = load i64, i64 PC!14
PC!15 = store i64 %1, i64 PC!14
ret void

SSA forward
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[2]
%2 = i64 Add i64 %3, -16
XREG!3 = store i64 %2, [32, i64] XREG!2[2]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[2]
%5 = i64 Add i64 %6, 0
tmp_address!2 = store i64 %5, i64 tmp_address!1
%7 = load i64, [32, i64] XREG!4[8]
rs2_var!2 = store i64 %7, i64 rs2_var!1
%8 = i64 Lshr i64 %5, 3
%9 = Extract i53 of i64 %8 <52, 0>
mem_index!2 = store i53 %9, i53 mem_index!1
%10 = Extract i3 of i64 %5 <2, 0>
%11 = i1 Eq i3 %10, 0
br i1 %11, label %bb3, label %bb4
bb3:
MEM!4 = store i64 %7, [9007199254740992, i64] MEM!1[%9]
br label %bb5
bb4:
%12 = i53 Add i53 %9, 1
%13 = load i64, [9007199254740992, i64] MEM!1[%12]
tmp_dword1!2 = store i64 %13, i64 tmp_dword1!1
%14 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword2!2 = store i64 %14, i64 tmp_dword2!1
%15 = Extract i3 of i64 %5 <2, 0>
%16 = i1 Eq i3 %15, 1
br i1 %16, label %bb6, label %bb7
bb5:
MEM!5 = phi ite %11 MEM!4 MEM!3
tmp_dword2!11 = phi ite %11 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %11 tmp_dword1!1 tmp_dword1!3
br label %bb8
bb6:
%17 = i64 Lshr i64 %7, 56
%18 = Extract i8 of i64 %17 <7, 0>
%20 = Zext i8 %18 to i64
%21 = i64 And i64 %13, -256
%22 = i64 Shl i64 %20, 0
%19 = i64 Or i64 %21, %22
tmp_dword1!10 = store i64 %19, i64 tmp_dword1!2
%23 = i64 Lshr i64 %7, 0
%24 = Extract i56 of i64 %23 <55, 0>
%26 = Zext i56 %24 to i64
%27 = i64 And i64 %14, 255
%28 = i64 Shl i64 %26, 8
%25 = i64 Or i64 %27, %28
tmp_dword2!10 = store i64 %25, i64 tmp_dword2!2
br label %bb9
bb7:
%29 = Extract i3 of i64 %5 <2, 0>
%30 = i1 Eq i3 %29, 2
br i1 %30, label %bb10, label %bb11
bb8:
%4 = i64 Add i64 PC!3, 4
PC!19 = store i64 %4, i64 PC!4
br label %bb12
bb9:
tmp_dword2!3 = phi ite %16 %25 ite %30 %39 ite %44 %53 ite %58 %67 ite %72 %81 ite %86 %95 %107
tmp_dword1!3 = phi ite %16 %19 ite %30 %33 ite %44 %47 ite %58 %61 ite %72 %75 ite %86 %89 %101
%111 = i53 Add i53 %9, 1
MEM!2 = store i64 tmp_dword1!3, [9007199254740992, i64] MEM!1[%111]
MEM!3 = store i64 tmp_dword2!3, [9007199254740992, i64] MEM!2[%9]
br label %bb5
bb10:
%31 = i64 Lshr i64 %7, 48
%32 = Extract i16 of i64 %31 <15, 0>
%34 = Zext i16 %32 to i64
%35 = i64 And i64 %13, -65536
%36 = i64 Shl i64 %34, 0
%33 = i64 Or i64 %35, %36
tmp_dword1!4 = store i64 %33, i64 tmp_dword1!2
%37 = i64 Lshr i64 %7, 0
%38 = Extract i48 of i64 %37 <47, 0>
%40 = Zext i48 %38 to i64
%41 = i64 And i64 %14, 65535
%42 = i64 Shl i64 %40, 16
%39 = i64 Or i64 %41, %42
tmp_dword2!4 = store i64 %39, i64 tmp_dword2!2
br label %bb9
bb11:
%43 = Extract i3 of i64 %5 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb13, label %bb14
bb12:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%114 = load i64, [32, i64] XREG!5[2]
%113 = i64 Add i64 %114, 8
tmp_address!3 = store i64 %113, i64 tmp_address!2
%115 = load i64, [32, i64] XREG!5[1]
rs2_var!3 = store i64 %115, i64 rs2_var!2
%116 = i64 Lshr i64 %113, 3
%117 = Extract i53 of i64 %116 <52, 0>
mem_index!3 = store i53 %117, i53 mem_index!2
%118 = Extract i3 of i64 %113 <2, 0>
%119 = i1 Eq i3 %118, 0
br i1 %119, label %bb15, label %bb16
bb13:
%45 = i64 Lshr i64 %7, 40
%46 = Extract i24 of i64 %45 <23, 0>
%48 = Zext i24 %46 to i64
%49 = i64 And i64 %13, -16777216
%50 = i64 Shl i64 %48, 0
%47 = i64 Or i64 %49, %50
tmp_dword1!9 = store i64 %47, i64 tmp_dword1!2
%51 = i64 Lshr i64 %7, 0
%52 = Extract i40 of i64 %51 <39, 0>
%54 = Zext i40 %52 to i64
%55 = i64 And i64 %14, 16777215
%56 = i64 Shl i64 %54, 24
%53 = i64 Or i64 %55, %56
tmp_dword2!9 = store i64 %53, i64 tmp_dword2!2
br label %bb9
bb14:
%57 = Extract i3 of i64 %5 <2, 0>
%58 = i1 Eq i3 %57, -4
br i1 %58, label %bb17, label %bb18
bb15:
MEM!6 = store i64 %115, [9007199254740992, i64] MEM!5[%117]
br label %bb19
bb16:
%120 = i53 Add i53 %117, 1
%121 = load i64, [9007199254740992, i64] MEM!5[%120]
tmp_dword1!13 = store i64 %121, i64 tmp_dword1!11
%122 = load i64, [9007199254740992, i64] MEM!5[%117]
tmp_dword2!13 = store i64 %122, i64 tmp_dword2!11
%123 = Extract i3 of i64 %113 <2, 0>
%124 = i1 Eq i3 %123, 1
br i1 %124, label %bb20, label %bb21
bb17:
%59 = i64 Lshr i64 %7, 32
%60 = Extract i32 of i64 %59 <31, 0>
%62 = Zext i32 %60 to i64
%63 = i64 And i64 %13, -4294967296
%64 = i64 Shl i64 %62, 0
%61 = i64 Or i64 %63, %64
tmp_dword1!8 = store i64 %61, i64 tmp_dword1!2
%65 = i64 Lshr i64 %7, 0
%66 = Extract i32 of i64 %65 <31, 0>
%68 = Zext i32 %66 to i64
%69 = i64 And i64 %14, 4294967295
%70 = i64 Shl i64 %68, 32
%67 = i64 Or i64 %69, %70
tmp_dword2!8 = store i64 %67, i64 tmp_dword2!2
br label %bb9
bb18:
%71 = Extract i3 of i64 %5 <2, 0>
%72 = i1 Eq i3 %71, -3
br i1 %72, label %bb22, label %bb23
bb19:
MEM!7 = phi ite %119 MEM!6 MEM!9
tmp_dword2!12 = phi ite %119 tmp_dword2!11 tmp_dword2!21
tmp_dword1!12 = phi ite %119 tmp_dword1!11 tmp_dword1!21
br label %bb24
bb20:
%125 = i64 Lshr i64 %115, 56
%126 = Extract i8 of i64 %125 <7, 0>
%128 = Zext i8 %126 to i64
%129 = i64 And i64 %121, -256
%130 = i64 Shl i64 %128, 0
%127 = i64 Or i64 %129, %130
tmp_dword1!14 = store i64 %127, i64 tmp_dword1!13
%131 = i64 Lshr i64 %115, 0
%132 = Extract i56 of i64 %131 <55, 0>
%134 = Zext i56 %132 to i64
%135 = i64 And i64 %122, 255
%136 = i64 Shl i64 %134, 8
%133 = i64 Or i64 %135, %136
tmp_dword2!14 = store i64 %133, i64 tmp_dword2!13
br label %bb25
bb21:
%137 = Extract i3 of i64 %113 <2, 0>
%138 = i1 Eq i3 %137, 2
br i1 %138, label %bb26, label %bb27
bb22:
%73 = i64 Lshr i64 %7, 24
%74 = Extract i40 of i64 %73 <39, 0>
%76 = Zext i40 %74 to i64
%77 = i64 And i64 %13, -1099511627776
%78 = i64 Shl i64 %76, 0
%75 = i64 Or i64 %77, %78
tmp_dword1!5 = store i64 %75, i64 tmp_dword1!2
%79 = i64 Lshr i64 %7, 0
%80 = Extract i24 of i64 %79 <23, 0>
%82 = Zext i24 %80 to i64
%83 = i64 And i64 %14, 1099511627775
%84 = i64 Shl i64 %82, 40
%81 = i64 Or i64 %83, %84
tmp_dword2!5 = store i64 %81, i64 tmp_dword2!2
br label %bb9
bb23:
%85 = Extract i3 of i64 %5 <2, 0>
%86 = i1 Eq i3 %85, -2
br i1 %86, label %bb28, label %bb29
bb24:
%112 = i64 Add i64 PC!5, 4
PC!7 = store i64 %112, i64 PC!6
br label %bb30
bb25:
tmp_dword2!21 = phi ite %124 %133 ite %138 %147 ite %152 %161 ite %166 %175 ite %180 %189 ite %194 %203 %215
tmp_dword1!21 = phi ite %124 %127 ite %138 %141 ite %152 %155 ite %166 %169 ite %180 %183 ite %194 %197 %209
%219 = i53 Add i53 %117, 1
MEM!8 = store i64 tmp_dword1!21, [9007199254740992, i64] MEM!5[%219]
MEM!9 = store i64 tmp_dword2!21, [9007199254740992, i64] MEM!8[%117]
br label %bb19
bb26:
%139 = i64 Lshr i64 %115, 48
%140 = Extract i16 of i64 %139 <15, 0>
%142 = Zext i16 %140 to i64
%143 = i64 And i64 %121, -65536
%144 = i64 Shl i64 %142, 0
%141 = i64 Or i64 %143, %144
tmp_dword1!20 = store i64 %141, i64 tmp_dword1!13
%145 = i64 Lshr i64 %115, 0
%146 = Extract i48 of i64 %145 <47, 0>
%148 = Zext i48 %146 to i64
%149 = i64 And i64 %122, 65535
%150 = i64 Shl i64 %148, 16
%147 = i64 Or i64 %149, %150
tmp_dword2!20 = store i64 %147, i64 tmp_dword2!13
br label %bb25
bb27:
%151 = Extract i3 of i64 %113 <2, 0>
%152 = i1 Eq i3 %151, 3
br i1 %152, label %bb31, label %bb32
bb28:
%87 = i64 Lshr i64 %7, 16
%88 = Extract i48 of i64 %87 <47, 0>
%90 = Zext i48 %88 to i64
%91 = i64 And i64 %13, -281474976710656
%92 = i64 Shl i64 %90, 0
%89 = i64 Or i64 %91, %92
tmp_dword1!6 = store i64 %89, i64 tmp_dword1!2
%93 = i64 Lshr i64 %7, 0
%94 = Extract i16 of i64 %93 <15, 0>
%96 = Zext i16 %94 to i64
%97 = i64 And i64 %14, 281474976710655
%98 = i64 Shl i64 %96, 48
%95 = i64 Or i64 %97, %98
tmp_dword2!6 = store i64 %95, i64 tmp_dword2!2
br label %bb9
bb29:
%99 = i64 Lshr i64 %7, 8
%100 = Extract i56 of i64 %99 <55, 0>
%102 = Zext i56 %100 to i64
%103 = i64 And i64 %13, -72057594037927936
%104 = i64 Shl i64 %102, 0
%101 = i64 Or i64 %103, %104
tmp_dword1!7 = store i64 %101, i64 tmp_dword1!2
%105 = i64 Lshr i64 %7, 0
%106 = Extract i8 of i64 %105 <7, 0>
%108 = Zext i8 %106 to i64
%109 = i64 And i64 %14, 72057594037927935
%110 = i64 Shl i64 %108, 56
%107 = i64 Or i64 %109, %110
tmp_dword2!7 = store i64 %107, i64 tmp_dword2!2
br label %bb9
bb30:
store i64 %112, i64 PC!8
PC!9 = store i64 PC!8, i64 PC!8
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!5 = store i64 PC!8, i64 prev_pc!4
%222 = load i64, [32, i64] XREG!6[10]
%221 = i64 Add i64 %222, 0
XREG!7 = store i64 %221, [32, i64] XREG!6[8]
br label %bb33
bb31:
%153 = i64 Lshr i64 %115, 40
%154 = Extract i24 of i64 %153 <23, 0>
%156 = Zext i24 %154 to i64
%157 = i64 And i64 %121, -16777216
%158 = i64 Shl i64 %156, 0
%155 = i64 Or i64 %157, %158
tmp_dword1!19 = store i64 %155, i64 tmp_dword1!13
%159 = i64 Lshr i64 %115, 0
%160 = Extract i40 of i64 %159 <39, 0>
%162 = Zext i40 %160 to i64
%163 = i64 And i64 %122, 16777215
%164 = i64 Shl i64 %162, 24
%161 = i64 Or i64 %163, %164
tmp_dword2!19 = store i64 %161, i64 tmp_dword2!13
br label %bb25
bb32:
%165 = Extract i3 of i64 %113 <2, 0>
%166 = i1 Eq i3 %165, -4
br i1 %166, label %bb34, label %bb35
bb33:
%220 = i64 Add i64 PC!8, 4
PC!18 = store i64 %220, i64 PC!9
br label %bb36
bb34:
%167 = i64 Lshr i64 %115, 32
%168 = Extract i32 of i64 %167 <31, 0>
%170 = Zext i32 %168 to i64
%171 = i64 And i64 %121, -4294967296
%172 = i64 Shl i64 %170, 0
%169 = i64 Or i64 %171, %172
tmp_dword1!15 = store i64 %169, i64 tmp_dword1!13
%173 = i64 Lshr i64 %115, 0
%174 = Extract i32 of i64 %173 <31, 0>
%176 = Zext i32 %174 to i64
%177 = i64 And i64 %122, 4294967295
%178 = i64 Shl i64 %176, 32
%175 = i64 Or i64 %177, %178
tmp_dword2!15 = store i64 %175, i64 tmp_dword2!13
br label %bb25
bb35:
%179 = Extract i3 of i64 %113 <2, 0>
%180 = i1 Eq i3 %179, -3
br i1 %180, label %bb37, label %bb38
bb36:
store i64 %220, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[12]
%228 = load i64, [32, i64] XREG!8[0]
%225 = i1 Eq i64 %227, %228
br i1 %225, label %bb39, label %bb40
bb37:
%181 = i64 Lshr i64 %115, 24
%182 = Extract i40 of i64 %181 <39, 0>
%184 = Zext i40 %182 to i64
%185 = i64 And i64 %121, -1099511627776
%186 = i64 Shl i64 %184, 0
%183 = i64 Or i64 %185, %186
tmp_dword1!16 = store i64 %183, i64 tmp_dword1!13
%187 = i64 Lshr i64 %115, 0
%188 = Extract i24 of i64 %187 <23, 0>
%190 = Zext i24 %188 to i64
%191 = i64 And i64 %122, 1099511627775
%192 = i64 Shl i64 %190, 40
%189 = i64 Or i64 %191, %192
tmp_dword2!16 = store i64 %189, i64 tmp_dword2!13
br label %bb25
bb38:
%193 = Extract i3 of i64 %113 <2, 0>
%194 = i1 Eq i3 %193, -2
br i1 %194, label %bb41, label %bb42
bb39:
%226 = i64 Add i64 PC!10, 12
PC!17 = store i64 %226, i64 PC!11
br label %bb43
bb40:
br label %bb43
bb41:
%195 = i64 Lshr i64 %115, 16
%196 = Extract i48 of i64 %195 <47, 0>
%198 = Zext i48 %196 to i64
%199 = i64 And i64 %121, -281474976710656
%200 = i64 Shl i64 %198, 0
%197 = i64 Or i64 %199, %200
tmp_dword1!18 = store i64 %197, i64 tmp_dword1!13
%201 = i64 Lshr i64 %115, 0
%202 = Extract i16 of i64 %201 <15, 0>
%204 = Zext i16 %202 to i64
%205 = i64 And i64 %122, 281474976710655
%206 = i64 Shl i64 %204, 48
%203 = i64 Or i64 %205, %206
tmp_dword2!18 = store i64 %203, i64 tmp_dword2!13
br label %bb25
bb42:
%207 = i64 Lshr i64 %115, 8
%208 = Extract i56 of i64 %207 <55, 0>
%210 = Zext i56 %208 to i64
%211 = i64 And i64 %121, -72057594037927936
%212 = i64 Shl i64 %210, 0
%209 = i64 Or i64 %211, %212
tmp_dword1!17 = store i64 %209, i64 tmp_dword1!13
%213 = i64 Lshr i64 %115, 0
%214 = Extract i8 of i64 %213 <7, 0>
%216 = Zext i8 %214 to i64
%217 = i64 And i64 %122, 72057594037927935
%218 = i64 Shl i64 %216, 56
%215 = i64 Or i64 %217, %218
tmp_dword2!17 = store i64 %215, i64 tmp_dword2!13
br label %bb25
bb43:
PC!12 = phi ite %225 %226 PC!10
%223 = i1 Eq i64 PC!12, PC!10
br i1 %223, label %bb44, label %bb45
bb44:
%224 = i64 Add i64 PC!12, 4
PC!16 = store i64 %224, i64 PC!12
br label %bb46
bb45:
br label %bb46
bb46:
PC!13 = phi ite %223 %224 PC!12
PC!14 = store i64 PC!13, i64 PC!13
PC!15 = store i64 PC!13, i64 PC!14
ret void

Nested SCCP
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[2]
%2 = i64 Add i64 %3, -16
XREG!3 = store i64 %2, [32, i64] XREG!2[2]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[2]
%5 = i64 Add i64 %6, 0
tmp_address!2 = store i64 %5, i64 tmp_address!1
%7 = load i64, [32, i64] XREG!4[8]
rs2_var!2 = store i64 %7, i64 rs2_var!1
%8 = i64 Lshr i64 %5, 3
%9 = Extract i53 of i64 %8 <52, 0>
mem_index!2 = store i53 %9, i53 mem_index!1
%10 = Extract i3 of i64 %5 <2, 0>
%11 = i1 Eq i3 %10, 0
br i1 %11, label %bb3, label %bb4
bb3:
MEM!4 = store i64 %7, [9007199254740992, i64] MEM!1[%9]
br label %bb5
bb4:
%12 = i53 Add i53 %9, 1
%13 = load i64, [9007199254740992, i64] MEM!1[%12]
tmp_dword1!2 = store i64 %13, i64 tmp_dword1!1
%14 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword2!2 = store i64 %14, i64 tmp_dword2!1
%15 = Extract i3 of i64 %5 <2, 0>
%16 = i1 Eq i3 %15, 1
br i1 %16, label %bb6, label %bb7
bb5:
MEM!5 = phi ite %11 MEM!4 MEM!3
tmp_dword2!11 = phi ite %11 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %11 tmp_dword1!1 tmp_dword1!3
br label %bb8
bb6:
%17 = i64 Lshr i64 %7, 56
%18 = Extract i8 of i64 %17 <7, 0>
%20 = Zext i8 %18 to i64
%21 = i64 And i64 %13, -256
%22 = i64 Shl i64 %20, 0
%19 = i64 Or i64 %21, %22
tmp_dword1!10 = store i64 %19, i64 tmp_dword1!2
%23 = i64 Lshr i64 %7, 0
%24 = Extract i56 of i64 %23 <55, 0>
%26 = Zext i56 %24 to i64
%27 = i64 And i64 %14, 255
%28 = i64 Shl i64 %26, 8
%25 = i64 Or i64 %27, %28
tmp_dword2!10 = store i64 %25, i64 tmp_dword2!2
br label %bb9
bb7:
%29 = Extract i3 of i64 %5 <2, 0>
%30 = i1 Eq i3 %29, 2
br i1 %30, label %bb10, label %bb11
bb8:
%4 = i64 Add i64 PC!3, 4
PC!19 = store i64 %4, i64 PC!4
br label %bb12
bb9:
tmp_dword2!3 = phi ite %16 %25 ite %30 %39 ite %44 %53 ite %58 %67 ite %72 %81 ite %86 %95 %107
tmp_dword1!3 = phi ite %16 %19 ite %30 %33 ite %44 %47 ite %58 %61 ite %72 %75 ite %86 %89 %101
%111 = i53 Add i53 %9, 1
MEM!2 = store i64 tmp_dword1!3, [9007199254740992, i64] MEM!1[%111]
MEM!3 = store i64 tmp_dword2!3, [9007199254740992, i64] MEM!2[%9]
br label %bb5
bb10:
%31 = i64 Lshr i64 %7, 48
%32 = Extract i16 of i64 %31 <15, 0>
%34 = Zext i16 %32 to i64
%35 = i64 And i64 %13, -65536
%36 = i64 Shl i64 %34, 0
%33 = i64 Or i64 %35, %36
tmp_dword1!4 = store i64 %33, i64 tmp_dword1!2
%37 = i64 Lshr i64 %7, 0
%38 = Extract i48 of i64 %37 <47, 0>
%40 = Zext i48 %38 to i64
%41 = i64 And i64 %14, 65535
%42 = i64 Shl i64 %40, 16
%39 = i64 Or i64 %41, %42
tmp_dword2!4 = store i64 %39, i64 tmp_dword2!2
br label %bb9
bb11:
%43 = Extract i3 of i64 %5 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb13, label %bb14
bb12:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%114 = load i64, [32, i64] XREG!5[2]
%113 = i64 Add i64 %114, 8
tmp_address!3 = store i64 %113, i64 tmp_address!2
%115 = load i64, [32, i64] XREG!5[1]
rs2_var!3 = store i64 %115, i64 rs2_var!2
%116 = i64 Lshr i64 %113, 3
%117 = Extract i53 of i64 %116 <52, 0>
mem_index!3 = store i53 %117, i53 mem_index!2
%118 = Extract i3 of i64 %113 <2, 0>
%119 = i1 Eq i3 %118, 0
br i1 %119, label %bb15, label %bb16
bb13:
%45 = i64 Lshr i64 %7, 40
%46 = Extract i24 of i64 %45 <23, 0>
%48 = Zext i24 %46 to i64
%49 = i64 And i64 %13, -16777216
%50 = i64 Shl i64 %48, 0
%47 = i64 Or i64 %49, %50
tmp_dword1!9 = store i64 %47, i64 tmp_dword1!2
%51 = i64 Lshr i64 %7, 0
%52 = Extract i40 of i64 %51 <39, 0>
%54 = Zext i40 %52 to i64
%55 = i64 And i64 %14, 16777215
%56 = i64 Shl i64 %54, 24
%53 = i64 Or i64 %55, %56
tmp_dword2!9 = store i64 %53, i64 tmp_dword2!2
br label %bb9
bb14:
%57 = Extract i3 of i64 %5 <2, 0>
%58 = i1 Eq i3 %57, -4
br i1 %58, label %bb17, label %bb18
bb15:
MEM!6 = store i64 %115, [9007199254740992, i64] MEM!5[%117]
br label %bb19
bb16:
%120 = i53 Add i53 %117, 1
%121 = load i64, [9007199254740992, i64] MEM!5[%120]
tmp_dword1!13 = store i64 %121, i64 tmp_dword1!11
%122 = load i64, [9007199254740992, i64] MEM!5[%117]
tmp_dword2!13 = store i64 %122, i64 tmp_dword2!11
%123 = Extract i3 of i64 %113 <2, 0>
%124 = i1 Eq i3 %123, 1
br i1 %124, label %bb20, label %bb21
bb17:
%59 = i64 Lshr i64 %7, 32
%60 = Extract i32 of i64 %59 <31, 0>
%62 = Zext i32 %60 to i64
%63 = i64 And i64 %13, -4294967296
%64 = i64 Shl i64 %62, 0
%61 = i64 Or i64 %63, %64
tmp_dword1!8 = store i64 %61, i64 tmp_dword1!2
%65 = i64 Lshr i64 %7, 0
%66 = Extract i32 of i64 %65 <31, 0>
%68 = Zext i32 %66 to i64
%69 = i64 And i64 %14, 4294967295
%70 = i64 Shl i64 %68, 32
%67 = i64 Or i64 %69, %70
tmp_dword2!8 = store i64 %67, i64 tmp_dword2!2
br label %bb9
bb18:
%71 = Extract i3 of i64 %5 <2, 0>
%72 = i1 Eq i3 %71, -3
br i1 %72, label %bb22, label %bb23
bb19:
MEM!7 = phi ite %119 MEM!6 MEM!9
tmp_dword2!12 = phi ite %119 tmp_dword2!11 tmp_dword2!21
tmp_dword1!12 = phi ite %119 tmp_dword1!11 tmp_dword1!21
br label %bb24
bb20:
%125 = i64 Lshr i64 %115, 56
%126 = Extract i8 of i64 %125 <7, 0>
%128 = Zext i8 %126 to i64
%129 = i64 And i64 %121, -256
%130 = i64 Shl i64 %128, 0
%127 = i64 Or i64 %129, %130
tmp_dword1!14 = store i64 %127, i64 tmp_dword1!13
%131 = i64 Lshr i64 %115, 0
%132 = Extract i56 of i64 %131 <55, 0>
%134 = Zext i56 %132 to i64
%135 = i64 And i64 %122, 255
%136 = i64 Shl i64 %134, 8
%133 = i64 Or i64 %135, %136
tmp_dword2!14 = store i64 %133, i64 tmp_dword2!13
br label %bb25
bb21:
%137 = Extract i3 of i64 %113 <2, 0>
%138 = i1 Eq i3 %137, 2
br i1 %138, label %bb26, label %bb27
bb22:
%73 = i64 Lshr i64 %7, 24
%74 = Extract i40 of i64 %73 <39, 0>
%76 = Zext i40 %74 to i64
%77 = i64 And i64 %13, -1099511627776
%78 = i64 Shl i64 %76, 0
%75 = i64 Or i64 %77, %78
tmp_dword1!5 = store i64 %75, i64 tmp_dword1!2
%79 = i64 Lshr i64 %7, 0
%80 = Extract i24 of i64 %79 <23, 0>
%82 = Zext i24 %80 to i64
%83 = i64 And i64 %14, 1099511627775
%84 = i64 Shl i64 %82, 40
%81 = i64 Or i64 %83, %84
tmp_dword2!5 = store i64 %81, i64 tmp_dword2!2
br label %bb9
bb23:
%85 = Extract i3 of i64 %5 <2, 0>
%86 = i1 Eq i3 %85, -2
br i1 %86, label %bb28, label %bb29
bb24:
%112 = i64 Add i64 PC!5, 4
PC!7 = store i64 %112, i64 PC!6
br label %bb30
bb25:
tmp_dword2!21 = phi ite %124 %133 ite %138 %147 ite %152 %161 ite %166 %175 ite %180 %189 ite %194 %203 %215
tmp_dword1!21 = phi ite %124 %127 ite %138 %141 ite %152 %155 ite %166 %169 ite %180 %183 ite %194 %197 %209
%219 = i53 Add i53 %117, 1
MEM!8 = store i64 tmp_dword1!21, [9007199254740992, i64] MEM!5[%219]
MEM!9 = store i64 tmp_dword2!21, [9007199254740992, i64] MEM!8[%117]
br label %bb19
bb26:
%139 = i64 Lshr i64 %115, 48
%140 = Extract i16 of i64 %139 <15, 0>
%142 = Zext i16 %140 to i64
%143 = i64 And i64 %121, -65536
%144 = i64 Shl i64 %142, 0
%141 = i64 Or i64 %143, %144
tmp_dword1!20 = store i64 %141, i64 tmp_dword1!13
%145 = i64 Lshr i64 %115, 0
%146 = Extract i48 of i64 %145 <47, 0>
%148 = Zext i48 %146 to i64
%149 = i64 And i64 %122, 65535
%150 = i64 Shl i64 %148, 16
%147 = i64 Or i64 %149, %150
tmp_dword2!20 = store i64 %147, i64 tmp_dword2!13
br label %bb25
bb27:
%151 = Extract i3 of i64 %113 <2, 0>
%152 = i1 Eq i3 %151, 3
br i1 %152, label %bb31, label %bb32
bb28:
%87 = i64 Lshr i64 %7, 16
%88 = Extract i48 of i64 %87 <47, 0>
%90 = Zext i48 %88 to i64
%91 = i64 And i64 %13, -281474976710656
%92 = i64 Shl i64 %90, 0
%89 = i64 Or i64 %91, %92
tmp_dword1!6 = store i64 %89, i64 tmp_dword1!2
%93 = i64 Lshr i64 %7, 0
%94 = Extract i16 of i64 %93 <15, 0>
%96 = Zext i16 %94 to i64
%97 = i64 And i64 %14, 281474976710655
%98 = i64 Shl i64 %96, 48
%95 = i64 Or i64 %97, %98
tmp_dword2!6 = store i64 %95, i64 tmp_dword2!2
br label %bb9
bb29:
%99 = i64 Lshr i64 %7, 8
%100 = Extract i56 of i64 %99 <55, 0>
%102 = Zext i56 %100 to i64
%103 = i64 And i64 %13, -72057594037927936
%104 = i64 Shl i64 %102, 0
%101 = i64 Or i64 %103, %104
tmp_dword1!7 = store i64 %101, i64 tmp_dword1!2
%105 = i64 Lshr i64 %7, 0
%106 = Extract i8 of i64 %105 <7, 0>
%108 = Zext i8 %106 to i64
%109 = i64 And i64 %14, 72057594037927935
%110 = i64 Shl i64 %108, 56
%107 = i64 Or i64 %109, %110
tmp_dword2!7 = store i64 %107, i64 tmp_dword2!2
br label %bb9
bb30:
store i64 %112, i64 PC!8
PC!9 = store i64 PC!8, i64 PC!8
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!5 = store i64 PC!8, i64 prev_pc!4
%222 = load i64, [32, i64] XREG!6[10]
%221 = i64 Add i64 %222, 0
XREG!7 = store i64 %221, [32, i64] XREG!6[8]
br label %bb33
bb31:
%153 = i64 Lshr i64 %115, 40
%154 = Extract i24 of i64 %153 <23, 0>
%156 = Zext i24 %154 to i64
%157 = i64 And i64 %121, -16777216
%158 = i64 Shl i64 %156, 0
%155 = i64 Or i64 %157, %158
tmp_dword1!19 = store i64 %155, i64 tmp_dword1!13
%159 = i64 Lshr i64 %115, 0
%160 = Extract i40 of i64 %159 <39, 0>
%162 = Zext i40 %160 to i64
%163 = i64 And i64 %122, 16777215
%164 = i64 Shl i64 %162, 24
%161 = i64 Or i64 %163, %164
tmp_dword2!19 = store i64 %161, i64 tmp_dword2!13
br label %bb25
bb32:
%165 = Extract i3 of i64 %113 <2, 0>
%166 = i1 Eq i3 %165, -4
br i1 %166, label %bb34, label %bb35
bb33:
%220 = i64 Add i64 PC!8, 4
PC!18 = store i64 %220, i64 PC!9
br label %bb36
bb34:
%167 = i64 Lshr i64 %115, 32
%168 = Extract i32 of i64 %167 <31, 0>
%170 = Zext i32 %168 to i64
%171 = i64 And i64 %121, -4294967296
%172 = i64 Shl i64 %170, 0
%169 = i64 Or i64 %171, %172
tmp_dword1!15 = store i64 %169, i64 tmp_dword1!13
%173 = i64 Lshr i64 %115, 0
%174 = Extract i32 of i64 %173 <31, 0>
%176 = Zext i32 %174 to i64
%177 = i64 And i64 %122, 4294967295
%178 = i64 Shl i64 %176, 32
%175 = i64 Or i64 %177, %178
tmp_dword2!15 = store i64 %175, i64 tmp_dword2!13
br label %bb25
bb35:
%179 = Extract i3 of i64 %113 <2, 0>
%180 = i1 Eq i3 %179, -3
br i1 %180, label %bb37, label %bb38
bb36:
store i64 %220, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[12]
%228 = load i64, [32, i64] XREG!8[0]
%225 = i1 Eq i64 %227, %228
br i1 %225, label %bb39, label %bb40
bb37:
%181 = i64 Lshr i64 %115, 24
%182 = Extract i40 of i64 %181 <39, 0>
%184 = Zext i40 %182 to i64
%185 = i64 And i64 %121, -1099511627776
%186 = i64 Shl i64 %184, 0
%183 = i64 Or i64 %185, %186
tmp_dword1!16 = store i64 %183, i64 tmp_dword1!13
%187 = i64 Lshr i64 %115, 0
%188 = Extract i24 of i64 %187 <23, 0>
%190 = Zext i24 %188 to i64
%191 = i64 And i64 %122, 1099511627775
%192 = i64 Shl i64 %190, 40
%189 = i64 Or i64 %191, %192
tmp_dword2!16 = store i64 %189, i64 tmp_dword2!13
br label %bb25
bb38:
%193 = Extract i3 of i64 %113 <2, 0>
%194 = i1 Eq i3 %193, -2
br i1 %194, label %bb41, label %bb42
bb39:
%226 = i64 Add i64 PC!10, 12
PC!17 = store i64 %226, i64 PC!11
br label %bb43
bb40:
br label %bb43
bb41:
%195 = i64 Lshr i64 %115, 16
%196 = Extract i48 of i64 %195 <47, 0>
%198 = Zext i48 %196 to i64
%199 = i64 And i64 %121, -281474976710656
%200 = i64 Shl i64 %198, 0
%197 = i64 Or i64 %199, %200
tmp_dword1!18 = store i64 %197, i64 tmp_dword1!13
%201 = i64 Lshr i64 %115, 0
%202 = Extract i16 of i64 %201 <15, 0>
%204 = Zext i16 %202 to i64
%205 = i64 And i64 %122, 281474976710655
%206 = i64 Shl i64 %204, 48
%203 = i64 Or i64 %205, %206
tmp_dword2!18 = store i64 %203, i64 tmp_dword2!13
br label %bb25
bb42:
%207 = i64 Lshr i64 %115, 8
%208 = Extract i56 of i64 %207 <55, 0>
%210 = Zext i56 %208 to i64
%211 = i64 And i64 %121, -72057594037927936
%212 = i64 Shl i64 %210, 0
%209 = i64 Or i64 %211, %212
tmp_dword1!17 = store i64 %209, i64 tmp_dword1!13
%213 = i64 Lshr i64 %115, 0
%214 = Extract i8 of i64 %213 <7, 0>
%216 = Zext i8 %214 to i64
%217 = i64 And i64 %122, 72057594037927935
%218 = i64 Shl i64 %216, 56
%215 = i64 Or i64 %217, %218
tmp_dword2!17 = store i64 %215, i64 tmp_dword2!13
br label %bb25
bb43:
PC!12 = phi ite %225 %226 PC!10
%223 = i1 Eq i64 PC!12, PC!10
br i1 %223, label %bb44, label %bb45
bb44:
%224 = i64 Add i64 PC!12, 4
PC!16 = store i64 %224, i64 PC!12
br label %bb46
bb45:
br label %bb46
bb46:
PC!13 = phi ite %225 %226 %224
PC!14 = store i64 PC!13, i64 PC!13
PC!15 = store i64 PC!13, i64 PC!14
ret void

SCCP forward
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[2]
%2 = i64 Add i64 %3, -16
XREG!3 = store i64 %2, [32, i64] XREG!2[2]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[2]
%5 = i64 Add i64 %6, 0
tmp_address!2 = store i64 %5, i64 tmp_address!1
%7 = load i64, [32, i64] XREG!4[8]
rs2_var!2 = store i64 %7, i64 rs2_var!1
%8 = i64 Lshr i64 %5, 3
%9 = Extract i53 of i64 %8 <52, 0>
mem_index!2 = store i53 %9, i53 mem_index!1
%10 = Extract i3 of i64 %5 <2, 0>
%11 = i1 Eq i3 %10, 0
br i1 %11, label %bb3, label %bb4
bb3:
MEM!4 = store i64 %7, [9007199254740992, i64] MEM!1[%9]
br label %bb5
bb4:
%12 = i53 Add i53 %9, 1
%13 = load i64, [9007199254740992, i64] MEM!1[%12]
tmp_dword1!2 = store i64 %13, i64 tmp_dword1!1
%14 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword2!2 = store i64 %14, i64 tmp_dword2!1
%15 = Extract i3 of i64 %5 <2, 0>
%16 = i1 Eq i3 %15, 1
br i1 %16, label %bb6, label %bb7
bb5:
MEM!5 = phi ite %11 MEM!4 MEM!3
tmp_dword2!11 = phi ite %11 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %11 tmp_dword1!1 tmp_dword1!3
br label %bb8
bb6:
%17 = i64 Lshr i64 %7, 56
%18 = Extract i8 of i64 %17 <7, 0>
%20 = Zext i8 %18 to i64
%21 = i64 And i64 %13, -256
%22 = i64 Shl i64 %20, 0
%19 = i64 Or i64 %21, %22
tmp_dword1!10 = store i64 %19, i64 tmp_dword1!2
%23 = i64 Lshr i64 %7, 0
%24 = Extract i56 of i64 %23 <55, 0>
%26 = Zext i56 %24 to i64
%27 = i64 And i64 %14, 255
%28 = i64 Shl i64 %26, 8
%25 = i64 Or i64 %27, %28
tmp_dword2!10 = store i64 %25, i64 tmp_dword2!2
br label %bb9
bb7:
%29 = Extract i3 of i64 %5 <2, 0>
%30 = i1 Eq i3 %29, 2
br i1 %30, label %bb10, label %bb11
bb8:
%4 = i64 Add i64 PC!3, 4
PC!19 = store i64 %4, i64 PC!4
br label %bb12
bb9:
tmp_dword2!3 = phi ite %16 %25 ite %30 %39 ite %44 %53 ite %58 %67 ite %72 %81 ite %86 %95 %107
tmp_dword1!3 = phi ite %16 %19 ite %30 %33 ite %44 %47 ite %58 %61 ite %72 %75 ite %86 %89 %101
%111 = i53 Add i53 %9, 1
MEM!2 = store i64 tmp_dword1!3, [9007199254740992, i64] MEM!1[%111]
MEM!3 = store i64 tmp_dword2!3, [9007199254740992, i64] MEM!2[%9]
br label %bb5
bb10:
%31 = i64 Lshr i64 %7, 48
%32 = Extract i16 of i64 %31 <15, 0>
%34 = Zext i16 %32 to i64
%35 = i64 And i64 %13, -65536
%36 = i64 Shl i64 %34, 0
%33 = i64 Or i64 %35, %36
tmp_dword1!4 = store i64 %33, i64 tmp_dword1!2
%37 = i64 Lshr i64 %7, 0
%38 = Extract i48 of i64 %37 <47, 0>
%40 = Zext i48 %38 to i64
%41 = i64 And i64 %14, 65535
%42 = i64 Shl i64 %40, 16
%39 = i64 Or i64 %41, %42
tmp_dword2!4 = store i64 %39, i64 tmp_dword2!2
br label %bb9
bb11:
%43 = Extract i3 of i64 %5 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb13, label %bb14
bb12:
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%114 = load i64, [32, i64] XREG!5[2]
%113 = i64 Add i64 %114, 8
tmp_address!3 = store i64 %113, i64 tmp_address!2
%115 = load i64, [32, i64] XREG!5[1]
rs2_var!3 = store i64 %115, i64 rs2_var!2
%116 = i64 Lshr i64 %113, 3
%117 = Extract i53 of i64 %116 <52, 0>
mem_index!3 = store i53 %117, i53 mem_index!2
%118 = Extract i3 of i64 %113 <2, 0>
%119 = i1 Eq i3 %118, 0
br i1 %119, label %bb15, label %bb16
bb13:
%45 = i64 Lshr i64 %7, 40
%46 = Extract i24 of i64 %45 <23, 0>
%48 = Zext i24 %46 to i64
%49 = i64 And i64 %13, -16777216
%50 = i64 Shl i64 %48, 0
%47 = i64 Or i64 %49, %50
tmp_dword1!9 = store i64 %47, i64 tmp_dword1!2
%51 = i64 Lshr i64 %7, 0
%52 = Extract i40 of i64 %51 <39, 0>
%54 = Zext i40 %52 to i64
%55 = i64 And i64 %14, 16777215
%56 = i64 Shl i64 %54, 24
%53 = i64 Or i64 %55, %56
tmp_dword2!9 = store i64 %53, i64 tmp_dword2!2
br label %bb9
bb14:
%57 = Extract i3 of i64 %5 <2, 0>
%58 = i1 Eq i3 %57, -4
br i1 %58, label %bb17, label %bb18
bb15:
MEM!6 = store i64 %115, [9007199254740992, i64] MEM!5[%117]
br label %bb19
bb16:
%120 = i53 Add i53 %117, 1
%121 = load i64, [9007199254740992, i64] MEM!5[%120]
tmp_dword1!13 = store i64 %121, i64 tmp_dword1!11
%122 = load i64, [9007199254740992, i64] MEM!5[%117]
tmp_dword2!13 = store i64 %122, i64 tmp_dword2!11
%123 = Extract i3 of i64 %113 <2, 0>
%124 = i1 Eq i3 %123, 1
br i1 %124, label %bb20, label %bb21
bb17:
%59 = i64 Lshr i64 %7, 32
%60 = Extract i32 of i64 %59 <31, 0>
%62 = Zext i32 %60 to i64
%63 = i64 And i64 %13, -4294967296
%64 = i64 Shl i64 %62, 0
%61 = i64 Or i64 %63, %64
tmp_dword1!8 = store i64 %61, i64 tmp_dword1!2
%65 = i64 Lshr i64 %7, 0
%66 = Extract i32 of i64 %65 <31, 0>
%68 = Zext i32 %66 to i64
%69 = i64 And i64 %14, 4294967295
%70 = i64 Shl i64 %68, 32
%67 = i64 Or i64 %69, %70
tmp_dword2!8 = store i64 %67, i64 tmp_dword2!2
br label %bb9
bb18:
%71 = Extract i3 of i64 %5 <2, 0>
%72 = i1 Eq i3 %71, -3
br i1 %72, label %bb22, label %bb23
bb19:
MEM!7 = phi ite %119 MEM!6 MEM!9
tmp_dword2!12 = phi ite %119 tmp_dword2!11 tmp_dword2!21
tmp_dword1!12 = phi ite %119 tmp_dword1!11 tmp_dword1!21
br label %bb24
bb20:
%125 = i64 Lshr i64 %115, 56
%126 = Extract i8 of i64 %125 <7, 0>
%128 = Zext i8 %126 to i64
%129 = i64 And i64 %121, -256
%130 = i64 Shl i64 %128, 0
%127 = i64 Or i64 %129, %130
tmp_dword1!14 = store i64 %127, i64 tmp_dword1!13
%131 = i64 Lshr i64 %115, 0
%132 = Extract i56 of i64 %131 <55, 0>
%134 = Zext i56 %132 to i64
%135 = i64 And i64 %122, 255
%136 = i64 Shl i64 %134, 8
%133 = i64 Or i64 %135, %136
tmp_dword2!14 = store i64 %133, i64 tmp_dword2!13
br label %bb25
bb21:
%137 = Extract i3 of i64 %113 <2, 0>
%138 = i1 Eq i3 %137, 2
br i1 %138, label %bb26, label %bb27
bb22:
%73 = i64 Lshr i64 %7, 24
%74 = Extract i40 of i64 %73 <39, 0>
%76 = Zext i40 %74 to i64
%77 = i64 And i64 %13, -1099511627776
%78 = i64 Shl i64 %76, 0
%75 = i64 Or i64 %77, %78
tmp_dword1!5 = store i64 %75, i64 tmp_dword1!2
%79 = i64 Lshr i64 %7, 0
%80 = Extract i24 of i64 %79 <23, 0>
%82 = Zext i24 %80 to i64
%83 = i64 And i64 %14, 1099511627775
%84 = i64 Shl i64 %82, 40
%81 = i64 Or i64 %83, %84
tmp_dword2!5 = store i64 %81, i64 tmp_dword2!2
br label %bb9
bb23:
%85 = Extract i3 of i64 %5 <2, 0>
%86 = i1 Eq i3 %85, -2
br i1 %86, label %bb28, label %bb29
bb24:
%112 = i64 Add i64 PC!5, 4
PC!7 = store i64 %112, i64 PC!6
br label %bb30
bb25:
tmp_dword2!21 = phi ite %124 %133 ite %138 %147 ite %152 %161 ite %166 %175 ite %180 %189 ite %194 %203 %215
tmp_dword1!21 = phi ite %124 %127 ite %138 %141 ite %152 %155 ite %166 %169 ite %180 %183 ite %194 %197 %209
%219 = i53 Add i53 %117, 1
MEM!8 = store i64 tmp_dword1!21, [9007199254740992, i64] MEM!5[%219]
MEM!9 = store i64 tmp_dword2!21, [9007199254740992, i64] MEM!8[%117]
br label %bb19
bb26:
%139 = i64 Lshr i64 %115, 48
%140 = Extract i16 of i64 %139 <15, 0>
%142 = Zext i16 %140 to i64
%143 = i64 And i64 %121, -65536
%144 = i64 Shl i64 %142, 0
%141 = i64 Or i64 %143, %144
tmp_dword1!20 = store i64 %141, i64 tmp_dword1!13
%145 = i64 Lshr i64 %115, 0
%146 = Extract i48 of i64 %145 <47, 0>
%148 = Zext i48 %146 to i64
%149 = i64 And i64 %122, 65535
%150 = i64 Shl i64 %148, 16
%147 = i64 Or i64 %149, %150
tmp_dword2!20 = store i64 %147, i64 tmp_dword2!13
br label %bb25
bb27:
%151 = Extract i3 of i64 %113 <2, 0>
%152 = i1 Eq i3 %151, 3
br i1 %152, label %bb31, label %bb32
bb28:
%87 = i64 Lshr i64 %7, 16
%88 = Extract i48 of i64 %87 <47, 0>
%90 = Zext i48 %88 to i64
%91 = i64 And i64 %13, -281474976710656
%92 = i64 Shl i64 %90, 0
%89 = i64 Or i64 %91, %92
tmp_dword1!6 = store i64 %89, i64 tmp_dword1!2
%93 = i64 Lshr i64 %7, 0
%94 = Extract i16 of i64 %93 <15, 0>
%96 = Zext i16 %94 to i64
%97 = i64 And i64 %14, 281474976710655
%98 = i64 Shl i64 %96, 48
%95 = i64 Or i64 %97, %98
tmp_dword2!6 = store i64 %95, i64 tmp_dword2!2
br label %bb9
bb29:
%99 = i64 Lshr i64 %7, 8
%100 = Extract i56 of i64 %99 <55, 0>
%102 = Zext i56 %100 to i64
%103 = i64 And i64 %13, -72057594037927936
%104 = i64 Shl i64 %102, 0
%101 = i64 Or i64 %103, %104
tmp_dword1!7 = store i64 %101, i64 tmp_dword1!2
%105 = i64 Lshr i64 %7, 0
%106 = Extract i8 of i64 %105 <7, 0>
%108 = Zext i8 %106 to i64
%109 = i64 And i64 %14, 72057594037927935
%110 = i64 Shl i64 %108, 56
%107 = i64 Or i64 %109, %110
tmp_dword2!7 = store i64 %107, i64 tmp_dword2!2
br label %bb9
bb30:
store i64 %112, i64 PC!8
PC!9 = store i64 PC!8, i64 PC!8
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!5 = store i64 PC!8, i64 prev_pc!4
%222 = load i64, [32, i64] XREG!6[10]
%221 = i64 Add i64 %222, 0
XREG!7 = store i64 %221, [32, i64] XREG!6[8]
br label %bb33
bb31:
%153 = i64 Lshr i64 %115, 40
%154 = Extract i24 of i64 %153 <23, 0>
%156 = Zext i24 %154 to i64
%157 = i64 And i64 %121, -16777216
%158 = i64 Shl i64 %156, 0
%155 = i64 Or i64 %157, %158
tmp_dword1!19 = store i64 %155, i64 tmp_dword1!13
%159 = i64 Lshr i64 %115, 0
%160 = Extract i40 of i64 %159 <39, 0>
%162 = Zext i40 %160 to i64
%163 = i64 And i64 %122, 16777215
%164 = i64 Shl i64 %162, 24
%161 = i64 Or i64 %163, %164
tmp_dword2!19 = store i64 %161, i64 tmp_dword2!13
br label %bb25
bb32:
%165 = Extract i3 of i64 %113 <2, 0>
%166 = i1 Eq i3 %165, -4
br i1 %166, label %bb34, label %bb35
bb33:
%220 = i64 Add i64 PC!8, 4
PC!18 = store i64 %220, i64 PC!9
br label %bb36
bb34:
%167 = i64 Lshr i64 %115, 32
%168 = Extract i32 of i64 %167 <31, 0>
%170 = Zext i32 %168 to i64
%171 = i64 And i64 %121, -4294967296
%172 = i64 Shl i64 %170, 0
%169 = i64 Or i64 %171, %172
tmp_dword1!15 = store i64 %169, i64 tmp_dword1!13
%173 = i64 Lshr i64 %115, 0
%174 = Extract i32 of i64 %173 <31, 0>
%176 = Zext i32 %174 to i64
%177 = i64 And i64 %122, 4294967295
%178 = i64 Shl i64 %176, 32
%175 = i64 Or i64 %177, %178
tmp_dword2!15 = store i64 %175, i64 tmp_dword2!13
br label %bb25
bb35:
%179 = Extract i3 of i64 %113 <2, 0>
%180 = i1 Eq i3 %179, -3
br i1 %180, label %bb37, label %bb38
bb36:
store i64 %220, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[12]
%228 = load i64, [32, i64] XREG!8[0]
%225 = i1 Eq i64 %227, %228
br i1 %225, label %bb39, label %bb40
bb37:
%181 = i64 Lshr i64 %115, 24
%182 = Extract i40 of i64 %181 <39, 0>
%184 = Zext i40 %182 to i64
%185 = i64 And i64 %121, -1099511627776
%186 = i64 Shl i64 %184, 0
%183 = i64 Or i64 %185, %186
tmp_dword1!16 = store i64 %183, i64 tmp_dword1!13
%187 = i64 Lshr i64 %115, 0
%188 = Extract i24 of i64 %187 <23, 0>
%190 = Zext i24 %188 to i64
%191 = i64 And i64 %122, 1099511627775
%192 = i64 Shl i64 %190, 40
%189 = i64 Or i64 %191, %192
tmp_dword2!16 = store i64 %189, i64 tmp_dword2!13
br label %bb25
bb38:
%193 = Extract i3 of i64 %113 <2, 0>
%194 = i1 Eq i3 %193, -2
br i1 %194, label %bb41, label %bb42
bb39:
%226 = i64 Add i64 PC!10, 12
PC!17 = store i64 %226, i64 PC!11
br label %bb43
bb40:
br label %bb43
bb41:
%195 = i64 Lshr i64 %115, 16
%196 = Extract i48 of i64 %195 <47, 0>
%198 = Zext i48 %196 to i64
%199 = i64 And i64 %121, -281474976710656
%200 = i64 Shl i64 %198, 0
%197 = i64 Or i64 %199, %200
tmp_dword1!18 = store i64 %197, i64 tmp_dword1!13
%201 = i64 Lshr i64 %115, 0
%202 = Extract i16 of i64 %201 <15, 0>
%204 = Zext i16 %202 to i64
%205 = i64 And i64 %122, 281474976710655
%206 = i64 Shl i64 %204, 48
%203 = i64 Or i64 %205, %206
tmp_dword2!18 = store i64 %203, i64 tmp_dword2!13
br label %bb25
bb42:
%207 = i64 Lshr i64 %115, 8
%208 = Extract i56 of i64 %207 <55, 0>
%210 = Zext i56 %208 to i64
%211 = i64 And i64 %121, -72057594037927936
%212 = i64 Shl i64 %210, 0
%209 = i64 Or i64 %211, %212
tmp_dword1!17 = store i64 %209, i64 tmp_dword1!13
%213 = i64 Lshr i64 %115, 0
%214 = Extract i8 of i64 %213 <7, 0>
%216 = Zext i8 %214 to i64
%217 = i64 And i64 %122, 72057594037927935
%218 = i64 Shl i64 %216, 56
%215 = i64 Or i64 %217, %218
tmp_dword2!17 = store i64 %215, i64 tmp_dword2!13
br label %bb25
bb43:
PC!12 = phi ite %225 %226 PC!10
%223 = i1 Eq i64 PC!12, PC!10
br i1 %223, label %bb44, label %bb45
bb44:
%224 = i64 Add i64 PC!12, 4
PC!16 = store i64 %224, i64 PC!12
br label %bb46
bb45:
br label %bb46
bb46:
PC!13 = phi ite %225 %226 %224
PC!14 = store i64 PC!13, i64 PC!13
PC!15 = store i64 PC!13, i64 PC!14
ret void

cherry
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[2]
%2 = i64 Add i64 %3, -16
XREG!3 = store i64 %2, [32, i64] XREG!2[2]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[2]
%5 = i64 Add i64 %6, 0
tmp_address!2 = store i64 %5, i64 tmp_address!1
%7 = load i64, [32, i64] XREG!4[8]
rs2_var!2 = store i64 %7, i64 rs2_var!1
%8 = i64 Lshr i64 %5, 3
%9 = Extract i53 of i64 %8 <52, 0>
mem_index!2 = store i53 %9, i53 mem_index!1
%10 = Extract i3 of i64 %5 <2, 0>
%11 = i1 Eq i3 %10, 0
br i1 %11, label %bb1, label %bb2
bb1:
MEM!4 = store i64 %7, [9007199254740992, i64] MEM!1[%9]
br label %bb3
bb2:
%12 = i53 Add i53 %9, 1
%13 = load i64, [9007199254740992, i64] MEM!1[%12]
tmp_dword1!2 = store i64 %13, i64 tmp_dword1!1
%14 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword2!2 = store i64 %14, i64 tmp_dword2!1
%15 = Extract i3 of i64 %5 <2, 0>
%16 = i1 Eq i3 %15, 1
br i1 %16, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %11 MEM!4 MEM!3
tmp_dword2!11 = phi ite %11 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %11 tmp_dword1!1 tmp_dword1!3
%4 = i64 Add i64 PC!3, 4
PC!19 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%114 = load i64, [32, i64] XREG!5[2]
%113 = i64 Add i64 %114, 8
tmp_address!3 = store i64 %113, i64 tmp_address!2
%115 = load i64, [32, i64] XREG!5[1]
rs2_var!3 = store i64 %115, i64 rs2_var!2
%116 = i64 Lshr i64 %113, 3
%117 = Extract i53 of i64 %116 <52, 0>
mem_index!3 = store i53 %117, i53 mem_index!2
%118 = Extract i3 of i64 %113 <2, 0>
%119 = i1 Eq i3 %118, 0
br i1 %119, label %bb11, label %bb12
bb4:
%17 = i64 Lshr i64 %7, 56
%18 = Extract i8 of i64 %17 <7, 0>
%20 = Zext i8 %18 to i64
%21 = i64 And i64 %13, -256
%22 = i64 Shl i64 %20, 0
%19 = i64 Or i64 %21, %22
tmp_dword1!10 = store i64 %19, i64 tmp_dword1!2
%23 = i64 Lshr i64 %7, 0
%24 = Extract i56 of i64 %23 <55, 0>
%26 = Zext i56 %24 to i64
%27 = i64 And i64 %14, 255
%28 = i64 Shl i64 %26, 8
%25 = i64 Or i64 %27, %28
tmp_dword2!10 = store i64 %25, i64 tmp_dword2!2
br label %bb6
bb5:
%29 = Extract i3 of i64 %5 <2, 0>
%30 = i1 Eq i3 %29, 2
br i1 %30, label %bb7, label %bb8
bb6:
tmp_dword2!3 = phi ite %16 %25 ite %30 %39 ite %44 %53 ite %58 %67 ite %72 %81 ite %86 %95 %107
tmp_dword1!3 = phi ite %16 %19 ite %30 %33 ite %44 %47 ite %58 %61 ite %72 %75 ite %86 %89 %101
%111 = i53 Add i53 %9, 1
MEM!2 = store i64 tmp_dword1!3, [9007199254740992, i64] MEM!1[%111]
MEM!3 = store i64 tmp_dword2!3, [9007199254740992, i64] MEM!2[%9]
br label %bb3
bb7:
%31 = i64 Lshr i64 %7, 48
%32 = Extract i16 of i64 %31 <15, 0>
%34 = Zext i16 %32 to i64
%35 = i64 And i64 %13, -65536
%36 = i64 Shl i64 %34, 0
%33 = i64 Or i64 %35, %36
tmp_dword1!4 = store i64 %33, i64 tmp_dword1!2
%37 = i64 Lshr i64 %7, 0
%38 = Extract i48 of i64 %37 <47, 0>
%40 = Zext i48 %38 to i64
%41 = i64 And i64 %14, 65535
%42 = i64 Shl i64 %40, 16
%39 = i64 Or i64 %41, %42
tmp_dword2!4 = store i64 %39, i64 tmp_dword2!2
br label %bb6
bb8:
%43 = Extract i3 of i64 %5 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb9, label %bb10
bb9:
%45 = i64 Lshr i64 %7, 40
%46 = Extract i24 of i64 %45 <23, 0>
%48 = Zext i24 %46 to i64
%49 = i64 And i64 %13, -16777216
%50 = i64 Shl i64 %48, 0
%47 = i64 Or i64 %49, %50
tmp_dword1!9 = store i64 %47, i64 tmp_dword1!2
%51 = i64 Lshr i64 %7, 0
%52 = Extract i40 of i64 %51 <39, 0>
%54 = Zext i40 %52 to i64
%55 = i64 And i64 %14, 16777215
%56 = i64 Shl i64 %54, 24
%53 = i64 Or i64 %55, %56
tmp_dword2!9 = store i64 %53, i64 tmp_dword2!2
br label %bb6
bb10:
%57 = Extract i3 of i64 %5 <2, 0>
%58 = i1 Eq i3 %57, -4
br i1 %58, label %bb13, label %bb14
bb11:
MEM!6 = store i64 %115, [9007199254740992, i64] MEM!5[%117]
br label %bb15
bb12:
%120 = i53 Add i53 %117, 1
%121 = load i64, [9007199254740992, i64] MEM!5[%120]
tmp_dword1!13 = store i64 %121, i64 tmp_dword1!11
%122 = load i64, [9007199254740992, i64] MEM!5[%117]
tmp_dword2!13 = store i64 %122, i64 tmp_dword2!11
%123 = Extract i3 of i64 %113 <2, 0>
%124 = i1 Eq i3 %123, 1
br i1 %124, label %bb16, label %bb17
bb13:
%59 = i64 Lshr i64 %7, 32
%60 = Extract i32 of i64 %59 <31, 0>
%62 = Zext i32 %60 to i64
%63 = i64 And i64 %13, -4294967296
%64 = i64 Shl i64 %62, 0
%61 = i64 Or i64 %63, %64
tmp_dword1!8 = store i64 %61, i64 tmp_dword1!2
%65 = i64 Lshr i64 %7, 0
%66 = Extract i32 of i64 %65 <31, 0>
%68 = Zext i32 %66 to i64
%69 = i64 And i64 %14, 4294967295
%70 = i64 Shl i64 %68, 32
%67 = i64 Or i64 %69, %70
tmp_dword2!8 = store i64 %67, i64 tmp_dword2!2
br label %bb6
bb14:
%71 = Extract i3 of i64 %5 <2, 0>
%72 = i1 Eq i3 %71, -3
br i1 %72, label %bb18, label %bb19
bb15:
MEM!7 = phi ite %119 MEM!6 MEM!9
tmp_dword2!12 = phi ite %119 tmp_dword2!11 tmp_dword2!21
tmp_dword1!12 = phi ite %119 tmp_dword1!11 tmp_dword1!21
%112 = i64 Add i64 PC!5, 4
PC!7 = store i64 %112, i64 PC!6
store i64 %112, i64 PC!8
PC!9 = store i64 PC!8, i64 PC!8
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!5 = store i64 PC!8, i64 prev_pc!4
%222 = load i64, [32, i64] XREG!6[10]
%221 = i64 Add i64 %222, 0
XREG!7 = store i64 %221, [32, i64] XREG!6[8]
%220 = i64 Add i64 PC!8, 4
PC!18 = store i64 %220, i64 PC!9
store i64 %220, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[12]
%228 = load i64, [32, i64] XREG!8[0]
%225 = i1 Eq i64 %227, %228
br i1 %225, label %bb31, label %bb32
bb16:
%125 = i64 Lshr i64 %115, 56
%126 = Extract i8 of i64 %125 <7, 0>
%128 = Zext i8 %126 to i64
%129 = i64 And i64 %121, -256
%130 = i64 Shl i64 %128, 0
%127 = i64 Or i64 %129, %130
tmp_dword1!14 = store i64 %127, i64 tmp_dword1!13
%131 = i64 Lshr i64 %115, 0
%132 = Extract i56 of i64 %131 <55, 0>
%134 = Zext i56 %132 to i64
%135 = i64 And i64 %122, 255
%136 = i64 Shl i64 %134, 8
%133 = i64 Or i64 %135, %136
tmp_dword2!14 = store i64 %133, i64 tmp_dword2!13
br label %bb20
bb17:
%137 = Extract i3 of i64 %113 <2, 0>
%138 = i1 Eq i3 %137, 2
br i1 %138, label %bb21, label %bb22
bb18:
%73 = i64 Lshr i64 %7, 24
%74 = Extract i40 of i64 %73 <39, 0>
%76 = Zext i40 %74 to i64
%77 = i64 And i64 %13, -1099511627776
%78 = i64 Shl i64 %76, 0
%75 = i64 Or i64 %77, %78
tmp_dword1!5 = store i64 %75, i64 tmp_dword1!2
%79 = i64 Lshr i64 %7, 0
%80 = Extract i24 of i64 %79 <23, 0>
%82 = Zext i24 %80 to i64
%83 = i64 And i64 %14, 1099511627775
%84 = i64 Shl i64 %82, 40
%81 = i64 Or i64 %83, %84
tmp_dword2!5 = store i64 %81, i64 tmp_dword2!2
br label %bb6
bb19:
%85 = Extract i3 of i64 %5 <2, 0>
%86 = i1 Eq i3 %85, -2
br i1 %86, label %bb23, label %bb24
bb20:
tmp_dword2!21 = phi ite %124 %133 ite %138 %147 ite %152 %161 ite %166 %175 ite %180 %189 ite %194 %203 %215
tmp_dword1!21 = phi ite %124 %127 ite %138 %141 ite %152 %155 ite %166 %169 ite %180 %183 ite %194 %197 %209
%219 = i53 Add i53 %117, 1
MEM!8 = store i64 tmp_dword1!21, [9007199254740992, i64] MEM!5[%219]
MEM!9 = store i64 tmp_dword2!21, [9007199254740992, i64] MEM!8[%117]
br label %bb15
bb21:
%139 = i64 Lshr i64 %115, 48
%140 = Extract i16 of i64 %139 <15, 0>
%142 = Zext i16 %140 to i64
%143 = i64 And i64 %121, -65536
%144 = i64 Shl i64 %142, 0
%141 = i64 Or i64 %143, %144
tmp_dword1!20 = store i64 %141, i64 tmp_dword1!13
%145 = i64 Lshr i64 %115, 0
%146 = Extract i48 of i64 %145 <47, 0>
%148 = Zext i48 %146 to i64
%149 = i64 And i64 %122, 65535
%150 = i64 Shl i64 %148, 16
%147 = i64 Or i64 %149, %150
tmp_dword2!20 = store i64 %147, i64 tmp_dword2!13
br label %bb20
bb22:
%151 = Extract i3 of i64 %113 <2, 0>
%152 = i1 Eq i3 %151, 3
br i1 %152, label %bb25, label %bb26
bb23:
%87 = i64 Lshr i64 %7, 16
%88 = Extract i48 of i64 %87 <47, 0>
%90 = Zext i48 %88 to i64
%91 = i64 And i64 %13, -281474976710656
%92 = i64 Shl i64 %90, 0
%89 = i64 Or i64 %91, %92
tmp_dword1!6 = store i64 %89, i64 tmp_dword1!2
%93 = i64 Lshr i64 %7, 0
%94 = Extract i16 of i64 %93 <15, 0>
%96 = Zext i16 %94 to i64
%97 = i64 And i64 %14, 281474976710655
%98 = i64 Shl i64 %96, 48
%95 = i64 Or i64 %97, %98
tmp_dword2!6 = store i64 %95, i64 tmp_dword2!2
br label %bb6
bb24:
%99 = i64 Lshr i64 %7, 8
%100 = Extract i56 of i64 %99 <55, 0>
%102 = Zext i56 %100 to i64
%103 = i64 And i64 %13, -72057594037927936
%104 = i64 Shl i64 %102, 0
%101 = i64 Or i64 %103, %104
tmp_dword1!7 = store i64 %101, i64 tmp_dword1!2
%105 = i64 Lshr i64 %7, 0
%106 = Extract i8 of i64 %105 <7, 0>
%108 = Zext i8 %106 to i64
%109 = i64 And i64 %14, 72057594037927935
%110 = i64 Shl i64 %108, 56
%107 = i64 Or i64 %109, %110
tmp_dword2!7 = store i64 %107, i64 tmp_dword2!2
br label %bb6
bb25:
%153 = i64 Lshr i64 %115, 40
%154 = Extract i24 of i64 %153 <23, 0>
%156 = Zext i24 %154 to i64
%157 = i64 And i64 %121, -16777216
%158 = i64 Shl i64 %156, 0
%155 = i64 Or i64 %157, %158
tmp_dword1!19 = store i64 %155, i64 tmp_dword1!13
%159 = i64 Lshr i64 %115, 0
%160 = Extract i40 of i64 %159 <39, 0>
%162 = Zext i40 %160 to i64
%163 = i64 And i64 %122, 16777215
%164 = i64 Shl i64 %162, 24
%161 = i64 Or i64 %163, %164
tmp_dword2!19 = store i64 %161, i64 tmp_dword2!13
br label %bb20
bb26:
%165 = Extract i3 of i64 %113 <2, 0>
%166 = i1 Eq i3 %165, -4
br i1 %166, label %bb27, label %bb28
bb27:
%167 = i64 Lshr i64 %115, 32
%168 = Extract i32 of i64 %167 <31, 0>
%170 = Zext i32 %168 to i64
%171 = i64 And i64 %121, -4294967296
%172 = i64 Shl i64 %170, 0
%169 = i64 Or i64 %171, %172
tmp_dword1!15 = store i64 %169, i64 tmp_dword1!13
%173 = i64 Lshr i64 %115, 0
%174 = Extract i32 of i64 %173 <31, 0>
%176 = Zext i32 %174 to i64
%177 = i64 And i64 %122, 4294967295
%178 = i64 Shl i64 %176, 32
%175 = i64 Or i64 %177, %178
tmp_dword2!15 = store i64 %175, i64 tmp_dword2!13
br label %bb20
bb28:
%179 = Extract i3 of i64 %113 <2, 0>
%180 = i1 Eq i3 %179, -3
br i1 %180, label %bb29, label %bb30
bb29:
%181 = i64 Lshr i64 %115, 24
%182 = Extract i40 of i64 %181 <39, 0>
%184 = Zext i40 %182 to i64
%185 = i64 And i64 %121, -1099511627776
%186 = i64 Shl i64 %184, 0
%183 = i64 Or i64 %185, %186
tmp_dword1!16 = store i64 %183, i64 tmp_dword1!13
%187 = i64 Lshr i64 %115, 0
%188 = Extract i24 of i64 %187 <23, 0>
%190 = Zext i24 %188 to i64
%191 = i64 And i64 %122, 1099511627775
%192 = i64 Shl i64 %190, 40
%189 = i64 Or i64 %191, %192
tmp_dword2!16 = store i64 %189, i64 tmp_dword2!13
br label %bb20
bb30:
%193 = Extract i3 of i64 %113 <2, 0>
%194 = i1 Eq i3 %193, -2
br i1 %194, label %bb33, label %bb34
bb31:
%226 = i64 Add i64 PC!10, 12
PC!17 = store i64 %226, i64 PC!11
br label %bb35
bb32:
br label %bb35
bb33:
%195 = i64 Lshr i64 %115, 16
%196 = Extract i48 of i64 %195 <47, 0>
%198 = Zext i48 %196 to i64
%199 = i64 And i64 %121, -281474976710656
%200 = i64 Shl i64 %198, 0
%197 = i64 Or i64 %199, %200
tmp_dword1!18 = store i64 %197, i64 tmp_dword1!13
%201 = i64 Lshr i64 %115, 0
%202 = Extract i16 of i64 %201 <15, 0>
%204 = Zext i16 %202 to i64
%205 = i64 And i64 %122, 281474976710655
%206 = i64 Shl i64 %204, 48
%203 = i64 Or i64 %205, %206
tmp_dword2!18 = store i64 %203, i64 tmp_dword2!13
br label %bb20
bb34:
%207 = i64 Lshr i64 %115, 8
%208 = Extract i56 of i64 %207 <55, 0>
%210 = Zext i56 %208 to i64
%211 = i64 And i64 %121, -72057594037927936
%212 = i64 Shl i64 %210, 0
%209 = i64 Or i64 %211, %212
tmp_dword1!17 = store i64 %209, i64 tmp_dword1!13
%213 = i64 Lshr i64 %115, 0
%214 = Extract i8 of i64 %213 <7, 0>
%216 = Zext i8 %214 to i64
%217 = i64 And i64 %122, 72057594037927935
%218 = i64 Shl i64 %216, 56
%215 = i64 Or i64 %217, %218
tmp_dword2!17 = store i64 %215, i64 tmp_dword2!13
br label %bb20
bb35:
PC!12 = phi ite %225 %226 PC!10
%223 = i1 Eq i64 PC!12, PC!10
br i1 %223, label %bb36, label %bb37
bb36:
%224 = i64 Add i64 PC!12, 4
PC!16 = store i64 %224, i64 PC!12
br label %bb38
bb37:
br label %bb38
bb38:
PC!13 = phi ite %225 %226 %224
PC!14 = store i64 PC!13, i64 PC!13
PC!15 = store i64 PC!13, i64 PC!14
ret void

bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[2]
%2 = i64 Add i64 %3, -16
XREG!3 = store i64 %2, [32, i64] XREG!2[2]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = load i64, [32, i64] XREG!4[2]
%5 = i64 Add i64 %6, 0
tmp_address!2 = store i64 %5, i64 tmp_address!1
%7 = load i64, [32, i64] XREG!4[8]
rs2_var!2 = store i64 %7, i64 rs2_var!1
%8 = i64 Lshr i64 %5, 3
%9 = Extract i53 of i64 %8 <52, 0>
mem_index!2 = store i53 %9, i53 mem_index!1
%10 = Extract i3 of i64 %5 <2, 0>
%11 = i1 Eq i3 %10, 0
br i1 %11, label %bb1, label %bb2
bb1:
MEM!4 = store i64 %7, [9007199254740992, i64] MEM!1[%9]
br label %bb3
bb2:
%12 = i53 Add i53 %9, 1
%13 = load i64, [9007199254740992, i64] MEM!1[%12]
tmp_dword1!2 = store i64 %13, i64 tmp_dword1!1
%14 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword2!2 = store i64 %14, i64 tmp_dword2!1
%15 = Extract i3 of i64 %5 <2, 0>
%16 = i1 Eq i3 %15, 1
br i1 %16, label %bb4, label %bb5
bb3:
MEM!5 = phi ite %11 MEM!4 MEM!3
tmp_dword2!11 = phi ite %11 tmp_dword2!1 tmp_dword2!3
tmp_dword1!11 = phi ite %11 tmp_dword1!1 tmp_dword1!3
%4 = i64 Add i64 PC!3, 4
PC!19 = store i64 %4, i64 PC!4
store i64 %4, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!5 = store i64 0, [32, i64] XREG!4[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%114 = load i64, [32, i64] XREG!5[2]
%113 = i64 Add i64 %114, 8
tmp_address!3 = store i64 %113, i64 tmp_address!2
%115 = load i64, [32, i64] XREG!5[1]
rs2_var!3 = store i64 %115, i64 rs2_var!2
%116 = i64 Lshr i64 %113, 3
%117 = Extract i53 of i64 %116 <52, 0>
mem_index!3 = store i53 %117, i53 mem_index!2
%118 = Extract i3 of i64 %113 <2, 0>
%119 = i1 Eq i3 %118, 0
br i1 %119, label %bb11, label %bb12
bb4:
%17 = i64 Lshr i64 %7, 56
%18 = Extract i8 of i64 %17 <7, 0>
%20 = Zext i8 %18 to i64
%21 = i64 And i64 %13, -256
%22 = i64 Shl i64 %20, 0
%19 = i64 Or i64 %21, %22
tmp_dword1!10 = store i64 %19, i64 tmp_dword1!2
%23 = i64 Lshr i64 %7, 0
%24 = Extract i56 of i64 %23 <55, 0>
%26 = Zext i56 %24 to i64
%27 = i64 And i64 %14, 255
%28 = i64 Shl i64 %26, 8
%25 = i64 Or i64 %27, %28
tmp_dword2!10 = store i64 %25, i64 tmp_dword2!2
br label %bb6
bb5:
%29 = Extract i3 of i64 %5 <2, 0>
%30 = i1 Eq i3 %29, 2
br i1 %30, label %bb7, label %bb8
bb6:
tmp_dword2!3 = phi ite %16 %25 ite %30 %39 ite %44 %53 ite %58 %67 ite %72 %81 ite %86 %95 %107
tmp_dword1!3 = phi ite %16 %19 ite %30 %33 ite %44 %47 ite %58 %61 ite %72 %75 ite %86 %89 %101
%111 = i53 Add i53 %9, 1
MEM!2 = store i64 tmp_dword1!3, [9007199254740992, i64] MEM!1[%111]
MEM!3 = store i64 tmp_dword2!3, [9007199254740992, i64] MEM!2[%9]
br label %bb3
bb7:
%31 = i64 Lshr i64 %7, 48
%32 = Extract i16 of i64 %31 <15, 0>
%34 = Zext i16 %32 to i64
%35 = i64 And i64 %13, -65536
%36 = i64 Shl i64 %34, 0
%33 = i64 Or i64 %35, %36
tmp_dword1!4 = store i64 %33, i64 tmp_dword1!2
%37 = i64 Lshr i64 %7, 0
%38 = Extract i48 of i64 %37 <47, 0>
%40 = Zext i48 %38 to i64
%41 = i64 And i64 %14, 65535
%42 = i64 Shl i64 %40, 16
%39 = i64 Or i64 %41, %42
tmp_dword2!4 = store i64 %39, i64 tmp_dword2!2
br label %bb6
bb8:
%43 = Extract i3 of i64 %5 <2, 0>
%44 = i1 Eq i3 %43, 3
br i1 %44, label %bb9, label %bb10
bb9:
%45 = i64 Lshr i64 %7, 40
%46 = Extract i24 of i64 %45 <23, 0>
%48 = Zext i24 %46 to i64
%49 = i64 And i64 %13, -16777216
%50 = i64 Shl i64 %48, 0
%47 = i64 Or i64 %49, %50
tmp_dword1!9 = store i64 %47, i64 tmp_dword1!2
%51 = i64 Lshr i64 %7, 0
%52 = Extract i40 of i64 %51 <39, 0>
%54 = Zext i40 %52 to i64
%55 = i64 And i64 %14, 16777215
%56 = i64 Shl i64 %54, 24
%53 = i64 Or i64 %55, %56
tmp_dword2!9 = store i64 %53, i64 tmp_dword2!2
br label %bb6
bb10:
%57 = Extract i3 of i64 %5 <2, 0>
%58 = i1 Eq i3 %57, -4
br i1 %58, label %bb13, label %bb14
bb11:
MEM!6 = store i64 %115, [9007199254740992, i64] MEM!5[%117]
br label %bb15
bb12:
%120 = i53 Add i53 %117, 1
%121 = load i64, [9007199254740992, i64] MEM!5[%120]
tmp_dword1!13 = store i64 %121, i64 tmp_dword1!11
%122 = load i64, [9007199254740992, i64] MEM!5[%117]
tmp_dword2!13 = store i64 %122, i64 tmp_dword2!11
%123 = Extract i3 of i64 %113 <2, 0>
%124 = i1 Eq i3 %123, 1
br i1 %124, label %bb16, label %bb17
bb13:
%59 = i64 Lshr i64 %7, 32
%60 = Extract i32 of i64 %59 <31, 0>
%62 = Zext i32 %60 to i64
%63 = i64 And i64 %13, -4294967296
%64 = i64 Shl i64 %62, 0
%61 = i64 Or i64 %63, %64
tmp_dword1!8 = store i64 %61, i64 tmp_dword1!2
%65 = i64 Lshr i64 %7, 0
%66 = Extract i32 of i64 %65 <31, 0>
%68 = Zext i32 %66 to i64
%69 = i64 And i64 %14, 4294967295
%70 = i64 Shl i64 %68, 32
%67 = i64 Or i64 %69, %70
tmp_dword2!8 = store i64 %67, i64 tmp_dword2!2
br label %bb6
bb14:
%71 = Extract i3 of i64 %5 <2, 0>
%72 = i1 Eq i3 %71, -3
br i1 %72, label %bb18, label %bb19
bb15:
MEM!7 = phi ite %119 MEM!6 MEM!9
tmp_dword2!12 = phi ite %119 tmp_dword2!11 tmp_dword2!21
tmp_dword1!12 = phi ite %119 tmp_dword1!11 tmp_dword1!21
%112 = i64 Add i64 PC!5, 4
PC!7 = store i64 %112, i64 PC!6
store i64 %112, i64 PC!8
PC!9 = store i64 PC!8, i64 PC!8
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!5 = store i64 PC!8, i64 prev_pc!4
%222 = load i64, [32, i64] XREG!6[10]
%221 = i64 Add i64 %222, 0
XREG!7 = store i64 %221, [32, i64] XREG!6[8]
%220 = i64 Add i64 PC!8, 4
PC!18 = store i64 %220, i64 PC!9
store i64 %220, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%227 = load i64, [32, i64] XREG!8[12]
%228 = load i64, [32, i64] XREG!8[0]
%225 = i1 Eq i64 %227, %228
br i1 %225, label %bb31, label %bb32
bb16:
%125 = i64 Lshr i64 %115, 56
%126 = Extract i8 of i64 %125 <7, 0>
%128 = Zext i8 %126 to i64
%129 = i64 And i64 %121, -256
%130 = i64 Shl i64 %128, 0
%127 = i64 Or i64 %129, %130
tmp_dword1!14 = store i64 %127, i64 tmp_dword1!13
%131 = i64 Lshr i64 %115, 0
%132 = Extract i56 of i64 %131 <55, 0>
%134 = Zext i56 %132 to i64
%135 = i64 And i64 %122, 255
%136 = i64 Shl i64 %134, 8
%133 = i64 Or i64 %135, %136
tmp_dword2!14 = store i64 %133, i64 tmp_dword2!13
br label %bb20
bb17:
%137 = Extract i3 of i64 %113 <2, 0>
%138 = i1 Eq i3 %137, 2
br i1 %138, label %bb21, label %bb22
bb18:
%73 = i64 Lshr i64 %7, 24
%74 = Extract i40 of i64 %73 <39, 0>
%76 = Zext i40 %74 to i64
%77 = i64 And i64 %13, -1099511627776
%78 = i64 Shl i64 %76, 0
%75 = i64 Or i64 %77, %78
tmp_dword1!5 = store i64 %75, i64 tmp_dword1!2
%79 = i64 Lshr i64 %7, 0
%80 = Extract i24 of i64 %79 <23, 0>
%82 = Zext i24 %80 to i64
%83 = i64 And i64 %14, 1099511627775
%84 = i64 Shl i64 %82, 40
%81 = i64 Or i64 %83, %84
tmp_dword2!5 = store i64 %81, i64 tmp_dword2!2
br label %bb6
bb19:
%85 = Extract i3 of i64 %5 <2, 0>
%86 = i1 Eq i3 %85, -2
br i1 %86, label %bb23, label %bb24
bb20:
tmp_dword2!21 = phi ite %124 %133 ite %138 %147 ite %152 %161 ite %166 %175 ite %180 %189 ite %194 %203 %215
tmp_dword1!21 = phi ite %124 %127 ite %138 %141 ite %152 %155 ite %166 %169 ite %180 %183 ite %194 %197 %209
%219 = i53 Add i53 %117, 1
MEM!8 = store i64 tmp_dword1!21, [9007199254740992, i64] MEM!5[%219]
MEM!9 = store i64 tmp_dword2!21, [9007199254740992, i64] MEM!8[%117]
br label %bb15
bb21:
%139 = i64 Lshr i64 %115, 48
%140 = Extract i16 of i64 %139 <15, 0>
%142 = Zext i16 %140 to i64
%143 = i64 And i64 %121, -65536
%144 = i64 Shl i64 %142, 0
%141 = i64 Or i64 %143, %144
tmp_dword1!20 = store i64 %141, i64 tmp_dword1!13
%145 = i64 Lshr i64 %115, 0
%146 = Extract i48 of i64 %145 <47, 0>
%148 = Zext i48 %146 to i64
%149 = i64 And i64 %122, 65535
%150 = i64 Shl i64 %148, 16
%147 = i64 Or i64 %149, %150
tmp_dword2!20 = store i64 %147, i64 tmp_dword2!13
br label %bb20
bb22:
%151 = Extract i3 of i64 %113 <2, 0>
%152 = i1 Eq i3 %151, 3
br i1 %152, label %bb25, label %bb26
bb23:
%87 = i64 Lshr i64 %7, 16
%88 = Extract i48 of i64 %87 <47, 0>
%90 = Zext i48 %88 to i64
%91 = i64 And i64 %13, -281474976710656
%92 = i64 Shl i64 %90, 0
%89 = i64 Or i64 %91, %92
tmp_dword1!6 = store i64 %89, i64 tmp_dword1!2
%93 = i64 Lshr i64 %7, 0
%94 = Extract i16 of i64 %93 <15, 0>
%96 = Zext i16 %94 to i64
%97 = i64 And i64 %14, 281474976710655
%98 = i64 Shl i64 %96, 48
%95 = i64 Or i64 %97, %98
tmp_dword2!6 = store i64 %95, i64 tmp_dword2!2
br label %bb6
bb24:
%99 = i64 Lshr i64 %7, 8
%100 = Extract i56 of i64 %99 <55, 0>
%102 = Zext i56 %100 to i64
%103 = i64 And i64 %13, -72057594037927936
%104 = i64 Shl i64 %102, 0
%101 = i64 Or i64 %103, %104
tmp_dword1!7 = store i64 %101, i64 tmp_dword1!2
%105 = i64 Lshr i64 %7, 0
%106 = Extract i8 of i64 %105 <7, 0>
%108 = Zext i8 %106 to i64
%109 = i64 And i64 %14, 72057594037927935
%110 = i64 Shl i64 %108, 56
%107 = i64 Or i64 %109, %110
tmp_dword2!7 = store i64 %107, i64 tmp_dword2!2
br label %bb6
bb25:
%153 = i64 Lshr i64 %115, 40
%154 = Extract i24 of i64 %153 <23, 0>
%156 = Zext i24 %154 to i64
%157 = i64 And i64 %121, -16777216
%158 = i64 Shl i64 %156, 0
%155 = i64 Or i64 %157, %158
tmp_dword1!19 = store i64 %155, i64 tmp_dword1!13
%159 = i64 Lshr i64 %115, 0
%160 = Extract i40 of i64 %159 <39, 0>
%162 = Zext i40 %160 to i64
%163 = i64 And i64 %122, 16777215
%164 = i64 Shl i64 %162, 24
%161 = i64 Or i64 %163, %164
tmp_dword2!19 = store i64 %161, i64 tmp_dword2!13
br label %bb20
bb26:
%165 = Extract i3 of i64 %113 <2, 0>
%166 = i1 Eq i3 %165, -4
br i1 %166, label %bb27, label %bb28
bb27:
%167 = i64 Lshr i64 %115, 32
%168 = Extract i32 of i64 %167 <31, 0>
%170 = Zext i32 %168 to i64
%171 = i64 And i64 %121, -4294967296
%172 = i64 Shl i64 %170, 0
%169 = i64 Or i64 %171, %172
tmp_dword1!15 = store i64 %169, i64 tmp_dword1!13
%173 = i64 Lshr i64 %115, 0
%174 = Extract i32 of i64 %173 <31, 0>
%176 = Zext i32 %174 to i64
%177 = i64 And i64 %122, 4294967295
%178 = i64 Shl i64 %176, 32
%175 = i64 Or i64 %177, %178
tmp_dword2!15 = store i64 %175, i64 tmp_dword2!13
br label %bb20
bb28:
%179 = Extract i3 of i64 %113 <2, 0>
%180 = i1 Eq i3 %179, -3
br i1 %180, label %bb29, label %bb30
bb29:
%181 = i64 Lshr i64 %115, 24
%182 = Extract i40 of i64 %181 <39, 0>
%184 = Zext i40 %182 to i64
%185 = i64 And i64 %121, -1099511627776
%186 = i64 Shl i64 %184, 0
%183 = i64 Or i64 %185, %186
tmp_dword1!16 = store i64 %183, i64 tmp_dword1!13
%187 = i64 Lshr i64 %115, 0
%188 = Extract i24 of i64 %187 <23, 0>
%190 = Zext i24 %188 to i64
%191 = i64 And i64 %122, 1099511627775
%192 = i64 Shl i64 %190, 40
%189 = i64 Or i64 %191, %192
tmp_dword2!16 = store i64 %189, i64 tmp_dword2!13
br label %bb20
bb30:
%193 = Extract i3 of i64 %113 <2, 0>
%194 = i1 Eq i3 %193, -2
br i1 %194, label %bb33, label %bb34
bb31:
%226 = i64 Add i64 PC!10, 12
PC!17 = store i64 %226, i64 PC!11
br label %bb35
bb32:
br label %bb35
bb33:
%195 = i64 Lshr i64 %115, 16
%196 = Extract i48 of i64 %195 <47, 0>
%198 = Zext i48 %196 to i64
%199 = i64 And i64 %121, -281474976710656
%200 = i64 Shl i64 %198, 0
%197 = i64 Or i64 %199, %200
tmp_dword1!18 = store i64 %197, i64 tmp_dword1!13
%201 = i64 Lshr i64 %115, 0
%202 = Extract i16 of i64 %201 <15, 0>
%204 = Zext i16 %202 to i64
%205 = i64 And i64 %122, 281474976710655
%206 = i64 Shl i64 %204, 48
%203 = i64 Or i64 %205, %206
tmp_dword2!18 = store i64 %203, i64 tmp_dword2!13
br label %bb20
bb34:
%207 = i64 Lshr i64 %115, 8
%208 = Extract i56 of i64 %207 <55, 0>
%210 = Zext i56 %208 to i64
%211 = i64 And i64 %121, -72057594037927936
%212 = i64 Shl i64 %210, 0
%209 = i64 Or i64 %211, %212
tmp_dword1!17 = store i64 %209, i64 tmp_dword1!13
%213 = i64 Lshr i64 %115, 0
%214 = Extract i8 of i64 %213 <7, 0>
%216 = Zext i8 %214 to i64
%217 = i64 And i64 %122, 72057594037927935
%218 = i64 Shl i64 %216, 56
%215 = i64 Or i64 %217, %218
tmp_dword2!17 = store i64 %215, i64 tmp_dword2!13
br label %bb20
bb35:
PC!12 = phi ite %225 %226 PC!10
%223 = i1 Eq i64 PC!12, PC!10
br i1 %223, label %bb36, label %bb37
bb36:
%224 = i64 Add i64 PC!12, 4
PC!16 = store i64 %224, i64 PC!12
br label %bb38
bb37:
br label %bb38
bb38:
PC!13 = phi ite %225 %226 %224
PC!14 = store i64 PC!13, i64 PC!13
PC!15 = store i64 PC!13, i64 PC!14
ret void

COMPILE
bb_1 func void []
bb0:
call void insn_5.action %0 ()
call void insn_6.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_1 func void []
bb0:
br label %bb6
bb1:
br label %bb12
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 255 to i64
%11 = load i64, [32, i64] XREG[11]
%10 = i64 And i64 %11, %9
store i64 %10, [32, i64] XREG[11]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb8:
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%19 = load i64, i64 PC
%20 = i64 Add i64 %19, 4
store i64 %20, [32, i64] XREG[1]
%21 = Sext i20 1048564 to i64
%22 = i64 Shl i64 %21, 1
%23 = load i64, i64 PC
%24 = i64 Add i64 %23, %22
store i64 %24, i64 PC
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb9, label %bb10
bb9:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%12 = load i64, i64 PC
store i64 %12, i64 PC
br label %bb7
bb12:
br label %bb8

propagate
bb_1 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[11]
%9 = i64 And i64 %10, 255
store i64 %9, [32, i64] XREG[11]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%18 = load i64, i64 PC
%19 = i64 Add i64 %18, 4
store i64 %19, [32, i64] XREG[1]
%20 = load i64, i64 PC
%21 = i64 Add i64 %20, -24
store i64 %21, i64 PC
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb9:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%11 = load i64, i64 PC
store i64 %11, i64 PC
br label %bb12
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_1 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[11]
%9 = i64 And i64 %10, 255
store i64 %9, [32, i64] XREG[11]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%18 = load i64, i64 PC
%19 = i64 Add i64 %18, 4
store i64 %19, [32, i64] XREG[1]
%20 = load i64, i64 PC
%21 = i64 Add i64 %20, -24
store i64 %21, i64 PC
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%11 = load i64, i64 PC
store i64 %11, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%10 = load i64, [32, i64] XREG!2[11]
%9 = i64 And i64 %10, 255
XREG!3 = store i64 %9, [32, i64] XREG!2[11]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!2 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %5 PC!2 PC!1
%2 = load i64, i64 PC!3
PC!4 = store i64 %2, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%12 = load i64, i64 PC!4
prev_pc!3 = store i64 %12, i64 prev_pc!2
%18 = load i64, i64 PC!4
%19 = i64 Add i64 %18, 4
XREG!5 = store i64 %19, [32, i64] XREG!4[1]
%20 = load i64, i64 PC!4
%21 = i64 Add i64 %20, -24
PC!5 = store i64 %21, i64 PC!4
%13 = load i64, i64 PC!5
%15 = load i64, i64 prev_pc!3
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC!5
%17 = i64 Add i64 %16, 4
PC!6 = store i64 %17, i64 PC!5
br label %bb6
bb5:
br label %bb6
bb6:
PC!7 = phi ite %14 PC!6 PC!5
%11 = load i64, i64 PC!7
PC!8 = store i64 %11, i64 PC!7
%1 = load i64, i64 PC!8
PC!9 = store i64 %1, i64 PC!8
ret void

SSA forward
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[11]
%2 = i64 And i64 %3, 255
XREG!3 = store i64 %2, [32, i64] XREG!2[11]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%4 = i64 Add i64 PC!3, 4
XREG!5 = store i64 %4, [32, i64] XREG!4[1]
%5 = i64 Add i64 PC!3, -24
PC!5 = store i64 %5, i64 PC!4
br label %bb3
bb3:
br label %bb4
bb4:
store i64 %5, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

Nested SCCP
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[11]
%2 = i64 And i64 %3, 255
XREG!3 = store i64 %2, [32, i64] XREG!2[11]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%4 = i64 Add i64 PC!3, 4
XREG!5 = store i64 %4, [32, i64] XREG!4[1]
%5 = i64 Add i64 PC!3, -24
PC!5 = store i64 %5, i64 PC!4
br label %bb3
bb3:
br label %bb4
bb4:
store i64 %5, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

SCCP forward
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[11]
%2 = i64 And i64 %3, 255
XREG!3 = store i64 %2, [32, i64] XREG!2[11]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%4 = i64 Add i64 PC!3, 4
XREG!5 = store i64 %4, [32, i64] XREG!4[1]
%5 = i64 Add i64 PC!3, -24
PC!5 = store i64 %5, i64 PC!4
br label %bb3
bb3:
br label %bb4
bb4:
store i64 %5, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

cherry
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[11]
%2 = i64 And i64 %3, 255
XREG!3 = store i64 %2, [32, i64] XREG!2[11]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%4 = i64 Add i64 PC!3, 4
XREG!5 = store i64 %4, [32, i64] XREG!4[1]
%5 = i64 Add i64 PC!3, -24
PC!5 = store i64 %5, i64 PC!4
store i64 %5, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[11]
%2 = i64 And i64 %3, 255
XREG!3 = store i64 %2, [32, i64] XREG!2[11]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%4 = i64 Add i64 PC!3, 4
XREG!5 = store i64 %4, [32, i64] XREG!4[1]
%5 = i64 Add i64 PC!3, -24
PC!5 = store i64 %5, i64 PC!4
store i64 %5, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

COMPILE
bb_2 func void []
bb0:
call void insn_7.action %0 ()
call void insn_8.action %0 ()
call void insn_9.action %0 ()
call void insn_10.action %0 ()
call void insn_11.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_2 func void []
bb0:
br label %bb21
bb1:
br label %bb27
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 8 to i64
%12 = load i64, [32, i64] XREG[2]
%10 = i64 Add i64 %12, %9
store i64 %10, i64 tmp_address
%11 = load i64, i64 tmp_address
%14 = i64 Lshr i64 %11, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %11 <2, 0>
%17 = i1 Eq i3 %16, 0
br i1 %17, label %bb3, label %bb4
bb3:
%18 = load i53, i53 mem_index
%19 = load i64, [9007199254740992, i64] MEM[%18]
store i64 %19, i64 tmp_dword
br label %bb5
bb4:
%20 = load i53, i53 mem_index
%21 = i53 Add i53 %20, 1
%22 = load i64, [9007199254740992, i64] MEM[%21]
store i64 %22, i64 tmp_dword1
%23 = load i53, i53 mem_index
%24 = load i64, [9007199254740992, i64] MEM[%23]
store i64 %24, i64 tmp_dword2
%25 = Extract i3 of i64 %11 <2, 0>
%26 = i1 Eq i3 %25, 1
br i1 %26, label %bb6, label %bb7
bb5:
%72 = load i64, i64 tmp_dword
store i64 %72, i64 rd_var
%13 = load i64, i64 rd_var
store i64 %13, [32, i64] XREG[1]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb10, label %bb11
bb6:
%28 = load i64, i64 tmp_dword1
%29 = Extract i8 of i64 %28 <7, 0>
%30 = load i64, i64 tmp_dword2
%31 = Extract i56 of i64 %30 <63, 8>
%27 = Concat i64 i8 %29, i56 %31
store i64 %27, i64 tmp_dword
br label %bb5
bb7:
%32 = Extract i3 of i64 %11 <2, 0>
%33 = i1 Eq i3 %32, 2
br i1 %33, label %bb8, label %bb9
bb8:
%35 = load i64, i64 tmp_dword1
%36 = Extract i16 of i64 %35 <15, 0>
%37 = load i64, i64 tmp_dword2
%38 = Extract i48 of i64 %37 <63, 16>
%34 = Concat i64 i16 %36, i48 %38
store i64 %34, i64 tmp_dword
br label %bb5
bb9:
%39 = Extract i3 of i64 %11 <2, 0>
%40 = i1 Eq i3 %39, 3
br i1 %40, label %bb12, label %bb13
bb10:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb14
bb11:
br label %bb14
bb12:
%42 = load i64, i64 tmp_dword1
%43 = Extract i24 of i64 %42 <23, 0>
%44 = load i64, i64 tmp_dword2
%45 = Extract i40 of i64 %44 <63, 24>
%41 = Concat i64 i24 %43, i40 %45
store i64 %41, i64 tmp_dword
br label %bb5
bb13:
%46 = Extract i3 of i64 %11 <2, 0>
%47 = i1 Eq i3 %46, -4
br i1 %47, label %bb15, label %bb16
bb14:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb15:
%49 = load i64, i64 tmp_dword1
%50 = Extract i32 of i64 %49 <31, 0>
%51 = load i64, i64 tmp_dword2
%52 = Extract i32 of i64 %51 <63, 32>
%48 = Concat i64 i32 %50, i32 %52
store i64 %48, i64 tmp_dword
br label %bb5
bb16:
%53 = Extract i3 of i64 %11 <2, 0>
%54 = i1 Eq i3 %53, -3
br i1 %54, label %bb17, label %bb18
bb17:
%56 = load i64, i64 tmp_dword1
%57 = Extract i40 of i64 %56 <39, 0>
%58 = load i64, i64 tmp_dword2
%59 = Extract i24 of i64 %58 <63, 40>
%55 = Concat i64 i40 %57, i24 %59
store i64 %55, i64 tmp_dword
br label %bb5
bb18:
%60 = Extract i3 of i64 %11 <2, 0>
%61 = i1 Eq i3 %60, -2
br i1 %61, label %bb19, label %bb20
bb19:
%63 = load i64, i64 tmp_dword1
%64 = Extract i48 of i64 %63 <47, 0>
%65 = load i64, i64 tmp_dword2
%66 = Extract i16 of i64 %65 <63, 48>
%62 = Concat i64 i48 %64, i16 %66
store i64 %62, i64 tmp_dword
br label %bb5
bb20:
%68 = load i64, i64 tmp_dword1
%69 = Extract i56 of i64 %68 <55, 0>
%70 = load i64, i64 tmp_dword2
%71 = Extract i8 of i64 %70 <63, 56>
%67 = Concat i64 i56 %69, i8 %71
store i64 %67, i64 tmp_dword
br label %bb5
bb21:
br label %bb2
bb22:
br label %bb48
bb23:
store i64 0, [32, i64] XREG[0]
%74 = load i64, i64 PC
store i64 %74, i64 prev_pc
%80 = Sext i12 0 to i64
%82 = load i64, [32, i64] XREG[8]
%81 = i64 Add i64 %82, %80
store i64 %81, [32, i64] XREG[10]
%75 = load i64, i64 PC
%77 = load i64, i64 prev_pc
%76 = i1 Eq i64 %75, %77
br i1 %76, label %bb24, label %bb25
bb24:
%78 = load i64, i64 PC
%79 = i64 Add i64 %78, 4
store i64 %79, i64 PC
br label %bb26
bb25:
br label %bb26
bb26:
%73 = load i64, i64 PC
store i64 %73, i64 PC
br label %bb22
bb27:
br label %bb23
bb28:
br label %bb54
bb29:
store i64 0, [32, i64] XREG[0]
%84 = load i64, i64 PC
store i64 %84, i64 prev_pc
%90 = Sext i12 0 to i64
%93 = load i64, [32, i64] XREG[2]
%91 = i64 Add i64 %93, %90
store i64 %91, i64 tmp_address
%92 = load i64, i64 tmp_address
%95 = i64 Lshr i64 %92, 3
%96 = Extract i53 of i64 %95 <52, 0>
store i53 %96, i53 mem_index
%97 = Extract i3 of i64 %92 <2, 0>
%98 = i1 Eq i3 %97, 0
br i1 %98, label %bb30, label %bb31
bb30:
%99 = load i53, i53 mem_index
%100 = load i64, [9007199254740992, i64] MEM[%99]
store i64 %100, i64 tmp_dword
br label %bb32
bb31:
%101 = load i53, i53 mem_index
%102 = i53 Add i53 %101, 1
%103 = load i64, [9007199254740992, i64] MEM[%102]
store i64 %103, i64 tmp_dword1
%104 = load i53, i53 mem_index
%105 = load i64, [9007199254740992, i64] MEM[%104]
store i64 %105, i64 tmp_dword2
%106 = Extract i3 of i64 %92 <2, 0>
%107 = i1 Eq i3 %106, 1
br i1 %107, label %bb33, label %bb34
bb32:
%153 = load i64, i64 tmp_dword
store i64 %153, i64 rd_var
%94 = load i64, i64 rd_var
store i64 %94, [32, i64] XREG[8]
%85 = load i64, i64 PC
%87 = load i64, i64 prev_pc
%86 = i1 Eq i64 %85, %87
br i1 %86, label %bb37, label %bb38
bb33:
%109 = load i64, i64 tmp_dword1
%110 = Extract i8 of i64 %109 <7, 0>
%111 = load i64, i64 tmp_dword2
%112 = Extract i56 of i64 %111 <63, 8>
%108 = Concat i64 i8 %110, i56 %112
store i64 %108, i64 tmp_dword
br label %bb32
bb34:
%113 = Extract i3 of i64 %92 <2, 0>
%114 = i1 Eq i3 %113, 2
br i1 %114, label %bb35, label %bb36
bb35:
%116 = load i64, i64 tmp_dword1
%117 = Extract i16 of i64 %116 <15, 0>
%118 = load i64, i64 tmp_dword2
%119 = Extract i48 of i64 %118 <63, 16>
%115 = Concat i64 i16 %117, i48 %119
store i64 %115, i64 tmp_dword
br label %bb32
bb36:
%120 = Extract i3 of i64 %92 <2, 0>
%121 = i1 Eq i3 %120, 3
br i1 %121, label %bb39, label %bb40
bb37:
%88 = load i64, i64 PC
%89 = i64 Add i64 %88, 4
store i64 %89, i64 PC
br label %bb41
bb38:
br label %bb41
bb39:
%123 = load i64, i64 tmp_dword1
%124 = Extract i24 of i64 %123 <23, 0>
%125 = load i64, i64 tmp_dword2
%126 = Extract i40 of i64 %125 <63, 24>
%122 = Concat i64 i24 %124, i40 %126
store i64 %122, i64 tmp_dword
br label %bb32
bb40:
%127 = Extract i3 of i64 %92 <2, 0>
%128 = i1 Eq i3 %127, -4
br i1 %128, label %bb42, label %bb43
bb41:
%83 = load i64, i64 PC
store i64 %83, i64 PC
br label %bb28
bb42:
%130 = load i64, i64 tmp_dword1
%131 = Extract i32 of i64 %130 <31, 0>
%132 = load i64, i64 tmp_dword2
%133 = Extract i32 of i64 %132 <63, 32>
%129 = Concat i64 i32 %131, i32 %133
store i64 %129, i64 tmp_dword
br label %bb32
bb43:
%134 = Extract i3 of i64 %92 <2, 0>
%135 = i1 Eq i3 %134, -3
br i1 %135, label %bb44, label %bb45
bb44:
%137 = load i64, i64 tmp_dword1
%138 = Extract i40 of i64 %137 <39, 0>
%139 = load i64, i64 tmp_dword2
%140 = Extract i24 of i64 %139 <63, 40>
%136 = Concat i64 i40 %138, i24 %140
store i64 %136, i64 tmp_dword
br label %bb32
bb45:
%141 = Extract i3 of i64 %92 <2, 0>
%142 = i1 Eq i3 %141, -2
br i1 %142, label %bb46, label %bb47
bb46:
%144 = load i64, i64 tmp_dword1
%145 = Extract i48 of i64 %144 <47, 0>
%146 = load i64, i64 tmp_dword2
%147 = Extract i16 of i64 %146 <63, 48>
%143 = Concat i64 i48 %145, i16 %147
store i64 %143, i64 tmp_dword
br label %bb32
bb47:
%149 = load i64, i64 tmp_dword1
%150 = Extract i56 of i64 %149 <55, 0>
%151 = load i64, i64 tmp_dword2
%152 = Extract i8 of i64 %151 <63, 56>
%148 = Concat i64 i56 %150, i8 %152
store i64 %148, i64 tmp_dword
br label %bb32
bb48:
br label %bb29
bb49:
br label %bb60
bb50:
store i64 0, [32, i64] XREG[0]
%155 = load i64, i64 PC
store i64 %155, i64 prev_pc
%161 = Sext i12 16 to i64
%163 = load i64, [32, i64] XREG[2]
%162 = i64 Add i64 %163, %161
store i64 %162, [32, i64] XREG[2]
%156 = load i64, i64 PC
%158 = load i64, i64 prev_pc
%157 = i1 Eq i64 %156, %158
br i1 %157, label %bb51, label %bb52
bb51:
%159 = load i64, i64 PC
%160 = i64 Add i64 %159, 4
store i64 %160, i64 PC
br label %bb53
bb52:
br label %bb53
bb53:
%154 = load i64, i64 PC
store i64 %154, i64 PC
br label %bb49
bb54:
br label %bb50
bb55:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb56:
store i64 0, [32, i64] XREG[0]
%165 = load i64, i64 PC
store i64 %165, i64 prev_pc
%171 = load i64, i64 PC
%172 = i64 Add i64 %171, 4
store i64 %172, [32, i64] XREG[0]
%173 = Sext i12 0 to i64
%174 = i64 Lshr i64 %173, 1
%175 = i64 Shl i64 %174, 1
%177 = load i64, [32, i64] XREG[1]
%176 = i64 Add i64 %177, %175
store i64 %176, i64 PC
%166 = load i64, i64 PC
%168 = load i64, i64 prev_pc
%167 = i1 Eq i64 %166, %168
br i1 %167, label %bb57, label %bb58
bb57:
%169 = load i64, i64 PC
%170 = i64 Add i64 %169, 4
store i64 %170, i64 PC
br label %bb59
bb58:
br label %bb59
bb59:
%164 = load i64, i64 PC
store i64 %164, i64 PC
br label %bb55
bb60:
br label %bb56

propagate
bb_2 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, 8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb3, label %bb4
bb3:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb5
bb4:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb6, label %bb7
bb5:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[1]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb8, label %bb9
bb6:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb5
bb7:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb10, label %bb11
bb8:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb5
bb11:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb13, label %bb14
bb12:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb15
bb13:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb5
bb14:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb16, label %bb17
bb15:
br label %bb18
bb16:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb5
bb17:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb19, label %bb20
bb18:
br label %bb21
bb19:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb5
bb20:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb22, label %bb23
bb21:
store i64 0, [32, i64] XREG[0]
%73 = load i64, i64 PC
store i64 %73, i64 prev_pc
%80 = load i64, [32, i64] XREG[8]
%79 = i64 Add i64 %80, 0
store i64 %79, [32, i64] XREG[10]
%74 = load i64, i64 PC
%76 = load i64, i64 prev_pc
%75 = i1 Eq i64 %74, %76
br i1 %75, label %bb24, label %bb25
bb22:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb5
bb23:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb5
bb24:
%77 = load i64, i64 PC
%78 = i64 Add i64 %77, 4
store i64 %78, i64 PC
br label %bb26
bb25:
br label %bb26
bb26:
%72 = load i64, i64 PC
store i64 %72, i64 PC
br label %bb27
bb27:
br label %bb28
bb28:
br label %bb29
bb29:
store i64 0, [32, i64] XREG[0]
%82 = load i64, i64 PC
store i64 %82, i64 prev_pc
%90 = load i64, [32, i64] XREG[2]
%88 = i64 Add i64 %90, 0
store i64 %88, i64 tmp_address
%89 = load i64, i64 tmp_address
%92 = i64 Lshr i64 %89, 3
%93 = Extract i53 of i64 %92 <52, 0>
store i53 %93, i53 mem_index
%94 = Extract i3 of i64 %89 <2, 0>
%95 = i1 Eq i3 %94, 0
br i1 %95, label %bb30, label %bb31
bb30:
%96 = load i53, i53 mem_index
%97 = load i64, [9007199254740992, i64] MEM[%96]
store i64 %97, i64 tmp_dword
br label %bb32
bb31:
%98 = load i53, i53 mem_index
%99 = i53 Add i53 %98, 1
%100 = load i64, [9007199254740992, i64] MEM[%99]
store i64 %100, i64 tmp_dword1
%101 = load i53, i53 mem_index
%102 = load i64, [9007199254740992, i64] MEM[%101]
store i64 %102, i64 tmp_dword2
%103 = Extract i3 of i64 %89 <2, 0>
%104 = i1 Eq i3 %103, 1
br i1 %104, label %bb33, label %bb34
bb32:
%150 = load i64, i64 tmp_dword
store i64 %150, i64 rd_var
%91 = load i64, i64 rd_var
store i64 %91, [32, i64] XREG[8]
%83 = load i64, i64 PC
%85 = load i64, i64 prev_pc
%84 = i1 Eq i64 %83, %85
br i1 %84, label %bb35, label %bb36
bb33:
%106 = load i64, i64 tmp_dword1
%107 = Extract i8 of i64 %106 <7, 0>
%108 = load i64, i64 tmp_dword2
%109 = Extract i56 of i64 %108 <63, 8>
%105 = Concat i64 i8 %107, i56 %109
store i64 %105, i64 tmp_dword
br label %bb32
bb34:
%110 = Extract i3 of i64 %89 <2, 0>
%111 = i1 Eq i3 %110, 2
br i1 %111, label %bb37, label %bb38
bb35:
%86 = load i64, i64 PC
%87 = i64 Add i64 %86, 4
store i64 %87, i64 PC
br label %bb39
bb36:
br label %bb39
bb37:
%113 = load i64, i64 tmp_dword1
%114 = Extract i16 of i64 %113 <15, 0>
%115 = load i64, i64 tmp_dword2
%116 = Extract i48 of i64 %115 <63, 16>
%112 = Concat i64 i16 %114, i48 %116
store i64 %112, i64 tmp_dword
br label %bb32
bb38:
%117 = Extract i3 of i64 %89 <2, 0>
%118 = i1 Eq i3 %117, 3
br i1 %118, label %bb40, label %bb41
bb39:
%81 = load i64, i64 PC
store i64 %81, i64 PC
br label %bb42
bb40:
%120 = load i64, i64 tmp_dword1
%121 = Extract i24 of i64 %120 <23, 0>
%122 = load i64, i64 tmp_dword2
%123 = Extract i40 of i64 %122 <63, 24>
%119 = Concat i64 i24 %121, i40 %123
store i64 %119, i64 tmp_dword
br label %bb32
bb41:
%124 = Extract i3 of i64 %89 <2, 0>
%125 = i1 Eq i3 %124, -4
br i1 %125, label %bb43, label %bb44
bb42:
br label %bb45
bb43:
%127 = load i64, i64 tmp_dword1
%128 = Extract i32 of i64 %127 <31, 0>
%129 = load i64, i64 tmp_dword2
%130 = Extract i32 of i64 %129 <63, 32>
%126 = Concat i64 i32 %128, i32 %130
store i64 %126, i64 tmp_dword
br label %bb32
bb44:
%131 = Extract i3 of i64 %89 <2, 0>
%132 = i1 Eq i3 %131, -3
br i1 %132, label %bb46, label %bb47
bb45:
br label %bb48
bb46:
%134 = load i64, i64 tmp_dword1
%135 = Extract i40 of i64 %134 <39, 0>
%136 = load i64, i64 tmp_dword2
%137 = Extract i24 of i64 %136 <63, 40>
%133 = Concat i64 i40 %135, i24 %137
store i64 %133, i64 tmp_dword
br label %bb32
bb47:
%138 = Extract i3 of i64 %89 <2, 0>
%139 = i1 Eq i3 %138, -2
br i1 %139, label %bb49, label %bb50
bb48:
store i64 0, [32, i64] XREG[0]
%152 = load i64, i64 PC
store i64 %152, i64 prev_pc
%159 = load i64, [32, i64] XREG[2]
%158 = i64 Add i64 %159, 16
store i64 %158, [32, i64] XREG[2]
%153 = load i64, i64 PC
%155 = load i64, i64 prev_pc
%154 = i1 Eq i64 %153, %155
br i1 %154, label %bb51, label %bb52
bb49:
%141 = load i64, i64 tmp_dword1
%142 = Extract i48 of i64 %141 <47, 0>
%143 = load i64, i64 tmp_dword2
%144 = Extract i16 of i64 %143 <63, 48>
%140 = Concat i64 i48 %142, i16 %144
store i64 %140, i64 tmp_dword
br label %bb32
bb50:
%146 = load i64, i64 tmp_dword1
%147 = Extract i56 of i64 %146 <55, 0>
%148 = load i64, i64 tmp_dword2
%149 = Extract i8 of i64 %148 <63, 56>
%145 = Concat i64 i56 %147, i8 %149
store i64 %145, i64 tmp_dword
br label %bb32
bb51:
%156 = load i64, i64 PC
%157 = i64 Add i64 %156, 4
store i64 %157, i64 PC
br label %bb53
bb52:
br label %bb53
bb53:
%151 = load i64, i64 PC
store i64 %151, i64 PC
br label %bb54
bb54:
br label %bb55
bb55:
br label %bb56
bb56:
store i64 0, [32, i64] XREG[0]
%161 = load i64, i64 PC
store i64 %161, i64 prev_pc
%167 = load i64, i64 PC
%168 = i64 Add i64 %167, 4
store i64 %168, [32, i64] XREG[0]
%170 = load i64, [32, i64] XREG[1]
%169 = i64 Add i64 %170, 0
store i64 %169, i64 PC
%162 = load i64, i64 PC
%164 = load i64, i64 prev_pc
%163 = i1 Eq i64 %162, %164
br i1 %163, label %bb57, label %bb58
bb57:
%165 = load i64, i64 PC
%166 = i64 Add i64 %165, 4
store i64 %166, i64 PC
br label %bb59
bb58:
br label %bb59
bb59:
%160 = load i64, i64 PC
store i64 %160, i64 PC
br label %bb60
bb60:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_2 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%11 = load i64, [32, i64] XREG[2]
%9 = i64 Add i64 %11, 8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index
%18 = load i64, [9007199254740992, i64] MEM[%17]
store i64 %18, i64 tmp_dword
br label %bb3
bb2:
%19 = load i53, i53 mem_index
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM[%20]
store i64 %21, i64 tmp_dword1
%22 = load i53, i53 mem_index
%23 = load i64, [9007199254740992, i64] MEM[%22]
store i64 %23, i64 tmp_dword2
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
%71 = load i64, i64 tmp_dword
store i64 %71, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[1]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb6, label %bb7
bb4:
%27 = load i64, i64 tmp_dword1
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
store i64 %26, i64 tmp_dword
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb8, label %bb9
bb6:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb10
bb7:
br label %bb10
bb8:
%34 = load i64, i64 tmp_dword1
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
store i64 %33, i64 tmp_dword
br label %bb3
bb9:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb11, label %bb12
bb10:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%73 = load i64, i64 PC
store i64 %73, i64 prev_pc
%80 = load i64, [32, i64] XREG[8]
%79 = i64 Add i64 %80, 0
store i64 %79, [32, i64] XREG[10]
%74 = load i64, i64 PC
%76 = load i64, i64 prev_pc
%75 = i1 Eq i64 %74, %76
br i1 %75, label %bb19, label %bb20
bb11:
%41 = load i64, i64 tmp_dword1
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
store i64 %40, i64 tmp_dword
br label %bb3
bb12:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb13:
%48 = load i64, i64 tmp_dword1
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
store i64 %47, i64 tmp_dword
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
store i64 %54, i64 tmp_dword
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
store i64 %61, i64 tmp_dword
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
store i64 %66, i64 tmp_dword
br label %bb3
bb19:
%77 = load i64, i64 PC
%78 = i64 Add i64 %77, 4
store i64 %78, i64 PC
br label %bb21
bb20:
br label %bb21
bb21:
%72 = load i64, i64 PC
store i64 %72, i64 PC
store i64 0, [32, i64] XREG[0]
%82 = load i64, i64 PC
store i64 %82, i64 prev_pc
%90 = load i64, [32, i64] XREG[2]
%88 = i64 Add i64 %90, 0
store i64 %88, i64 tmp_address
%89 = load i64, i64 tmp_address
%92 = i64 Lshr i64 %89, 3
%93 = Extract i53 of i64 %92 <52, 0>
store i53 %93, i53 mem_index
%94 = Extract i3 of i64 %89 <2, 0>
%95 = i1 Eq i3 %94, 0
br i1 %95, label %bb22, label %bb23
bb22:
%96 = load i53, i53 mem_index
%97 = load i64, [9007199254740992, i64] MEM[%96]
store i64 %97, i64 tmp_dword
br label %bb24
bb23:
%98 = load i53, i53 mem_index
%99 = i53 Add i53 %98, 1
%100 = load i64, [9007199254740992, i64] MEM[%99]
store i64 %100, i64 tmp_dword1
%101 = load i53, i53 mem_index
%102 = load i64, [9007199254740992, i64] MEM[%101]
store i64 %102, i64 tmp_dword2
%103 = Extract i3 of i64 %89 <2, 0>
%104 = i1 Eq i3 %103, 1
br i1 %104, label %bb25, label %bb26
bb24:
%150 = load i64, i64 tmp_dword
store i64 %150, i64 rd_var
%91 = load i64, i64 rd_var
store i64 %91, [32, i64] XREG[8]
%83 = load i64, i64 PC
%85 = load i64, i64 prev_pc
%84 = i1 Eq i64 %83, %85
br i1 %84, label %bb27, label %bb28
bb25:
%106 = load i64, i64 tmp_dword1
%107 = Extract i8 of i64 %106 <7, 0>
%108 = load i64, i64 tmp_dword2
%109 = Extract i56 of i64 %108 <63, 8>
%105 = Concat i64 i8 %107, i56 %109
store i64 %105, i64 tmp_dword
br label %bb24
bb26:
%110 = Extract i3 of i64 %89 <2, 0>
%111 = i1 Eq i3 %110, 2
br i1 %111, label %bb29, label %bb30
bb27:
%86 = load i64, i64 PC
%87 = i64 Add i64 %86, 4
store i64 %87, i64 PC
br label %bb31
bb28:
br label %bb31
bb29:
%113 = load i64, i64 tmp_dword1
%114 = Extract i16 of i64 %113 <15, 0>
%115 = load i64, i64 tmp_dword2
%116 = Extract i48 of i64 %115 <63, 16>
%112 = Concat i64 i16 %114, i48 %116
store i64 %112, i64 tmp_dword
br label %bb24
bb30:
%117 = Extract i3 of i64 %89 <2, 0>
%118 = i1 Eq i3 %117, 3
br i1 %118, label %bb32, label %bb33
bb31:
%81 = load i64, i64 PC
store i64 %81, i64 PC
store i64 0, [32, i64] XREG[0]
%152 = load i64, i64 PC
store i64 %152, i64 prev_pc
%159 = load i64, [32, i64] XREG[2]
%158 = i64 Add i64 %159, 16
store i64 %158, [32, i64] XREG[2]
%153 = load i64, i64 PC
%155 = load i64, i64 prev_pc
%154 = i1 Eq i64 %153, %155
br i1 %154, label %bb40, label %bb41
bb32:
%120 = load i64, i64 tmp_dword1
%121 = Extract i24 of i64 %120 <23, 0>
%122 = load i64, i64 tmp_dword2
%123 = Extract i40 of i64 %122 <63, 24>
%119 = Concat i64 i24 %121, i40 %123
store i64 %119, i64 tmp_dword
br label %bb24
bb33:
%124 = Extract i3 of i64 %89 <2, 0>
%125 = i1 Eq i3 %124, -4
br i1 %125, label %bb34, label %bb35
bb34:
%127 = load i64, i64 tmp_dword1
%128 = Extract i32 of i64 %127 <31, 0>
%129 = load i64, i64 tmp_dword2
%130 = Extract i32 of i64 %129 <63, 32>
%126 = Concat i64 i32 %128, i32 %130
store i64 %126, i64 tmp_dword
br label %bb24
bb35:
%131 = Extract i3 of i64 %89 <2, 0>
%132 = i1 Eq i3 %131, -3
br i1 %132, label %bb36, label %bb37
bb36:
%134 = load i64, i64 tmp_dword1
%135 = Extract i40 of i64 %134 <39, 0>
%136 = load i64, i64 tmp_dword2
%137 = Extract i24 of i64 %136 <63, 40>
%133 = Concat i64 i40 %135, i24 %137
store i64 %133, i64 tmp_dword
br label %bb24
bb37:
%138 = Extract i3 of i64 %89 <2, 0>
%139 = i1 Eq i3 %138, -2
br i1 %139, label %bb38, label %bb39
bb38:
%141 = load i64, i64 tmp_dword1
%142 = Extract i48 of i64 %141 <47, 0>
%143 = load i64, i64 tmp_dword2
%144 = Extract i16 of i64 %143 <63, 48>
%140 = Concat i64 i48 %142, i16 %144
store i64 %140, i64 tmp_dword
br label %bb24
bb39:
%146 = load i64, i64 tmp_dword1
%147 = Extract i56 of i64 %146 <55, 0>
%148 = load i64, i64 tmp_dword2
%149 = Extract i8 of i64 %148 <63, 56>
%145 = Concat i64 i56 %147, i8 %149
store i64 %145, i64 tmp_dword
br label %bb24
bb40:
%156 = load i64, i64 PC
%157 = i64 Add i64 %156, 4
store i64 %157, i64 PC
br label %bb42
bb41:
br label %bb42
bb42:
%151 = load i64, i64 PC
store i64 %151, i64 PC
store i64 0, [32, i64] XREG[0]
%161 = load i64, i64 PC
store i64 %161, i64 prev_pc
%167 = load i64, i64 PC
%168 = i64 Add i64 %167, 4
store i64 %168, [32, i64] XREG[0]
%170 = load i64, [32, i64] XREG[1]
%169 = i64 Add i64 %170, 0
store i64 %169, i64 PC
%162 = load i64, i64 PC
%164 = load i64, i64 prev_pc
%163 = i1 Eq i64 %162, %164
br i1 %163, label %bb43, label %bb44
bb43:
%165 = load i64, i64 PC
%166 = i64 Add i64 %165, 4
store i64 %166, i64 PC
br label %bb45
bb44:
br label %bb45
bb45:
%160 = load i64, i64 PC
store i64 %160, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%11 = load i64, [32, i64] XREG!2[2]
%9 = i64 Add i64 %11, 8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = i1 Eq i3 %15, 0
br i1 %16, label %bb1, label %bb2
bb1:
%17 = load i53, i53 mem_index!2
%18 = load i64, [9007199254740992, i64] MEM!1[%17]
tmp_dword!2 = store i64 %18, i64 tmp_dword!1
br label %bb3
bb2:
%19 = load i53, i53 mem_index!2
%20 = i53 Add i53 %19, 1
%21 = load i64, [9007199254740992, i64] MEM!1[%20]
tmp_dword1!2 = store i64 %21, i64 tmp_dword1!1
%22 = load i53, i53 mem_index!2
%23 = load i64, [9007199254740992, i64] MEM!1[%22]
tmp_dword2!2 = store i64 %23, i64 tmp_dword2!1
%24 = Extract i3 of i64 %10 <2, 0>
%25 = i1 Eq i3 %24, 1
br i1 %25, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %16 tmp_dword!2 ite %25 tmp_dword!3 ite %32 tmp_dword!9 ite %39 tmp_dword!8 ite %46 tmp_dword!7 ite %53 tmp_dword!4 ite %60 tmp_dword!6 tmp_dword!5
tmp_dword2!3 = phi ite %16 tmp_dword2!1 tmp_dword2!2
tmp_dword1!3 = phi ite %16 tmp_dword1!1 tmp_dword1!2
%71 = load i64, i64 tmp_dword!10
rd_var!2 = store i64 %71, i64 rd_var!1
%12 = load i64, i64 rd_var!2
XREG!3 = store i64 %12, [32, i64] XREG!2[1]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb6, label %bb7
bb4:
%27 = load i64, i64 tmp_dword1!2
%28 = Extract i8 of i64 %27 <7, 0>
%29 = load i64, i64 tmp_dword2!2
%30 = Extract i56 of i64 %29 <63, 8>
%26 = Concat i64 i8 %28, i56 %30
tmp_dword!3 = store i64 %26, i64 tmp_dword!1
br label %bb3
bb5:
%31 = Extract i3 of i64 %10 <2, 0>
%32 = i1 Eq i3 %31, 2
br i1 %32, label %bb8, label %bb9
bb6:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!18 = store i64 %8, i64 PC!1
br label %bb10
bb7:
br label %bb10
bb8:
%34 = load i64, i64 tmp_dword1!2
%35 = Extract i16 of i64 %34 <15, 0>
%36 = load i64, i64 tmp_dword2!2
%37 = Extract i48 of i64 %36 <63, 16>
%33 = Concat i64 i16 %35, i48 %37
tmp_dword!9 = store i64 %33, i64 tmp_dword!1
br label %bb3
bb9:
%38 = Extract i3 of i64 %10 <2, 0>
%39 = i1 Eq i3 %38, 3
br i1 %39, label %bb11, label %bb12
bb10:
PC!2 = phi ite %5 PC!18 PC!1
%2 = load i64, i64 PC!2
PC!3 = store i64 %2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%73 = load i64, i64 PC!3
prev_pc!3 = store i64 %73, i64 prev_pc!2
%80 = load i64, [32, i64] XREG!4[8]
%79 = i64 Add i64 %80, 0
XREG!5 = store i64 %79, [32, i64] XREG!4[10]
%74 = load i64, i64 PC!3
%76 = load i64, i64 prev_pc!3
%75 = i1 Eq i64 %74, %76
br i1 %75, label %bb19, label %bb20
bb11:
%41 = load i64, i64 tmp_dword1!2
%42 = Extract i24 of i64 %41 <23, 0>
%43 = load i64, i64 tmp_dword2!2
%44 = Extract i40 of i64 %43 <63, 24>
%40 = Concat i64 i24 %42, i40 %44
tmp_dword!8 = store i64 %40, i64 tmp_dword!1
br label %bb3
bb12:
%45 = Extract i3 of i64 %10 <2, 0>
%46 = i1 Eq i3 %45, -4
br i1 %46, label %bb13, label %bb14
bb13:
%48 = load i64, i64 tmp_dword1!2
%49 = Extract i32 of i64 %48 <31, 0>
%50 = load i64, i64 tmp_dword2!2
%51 = Extract i32 of i64 %50 <63, 32>
%47 = Concat i64 i32 %49, i32 %51
tmp_dword!7 = store i64 %47, i64 tmp_dword!1
br label %bb3
bb14:
%52 = Extract i3 of i64 %10 <2, 0>
%53 = i1 Eq i3 %52, -3
br i1 %53, label %bb15, label %bb16
bb15:
%55 = load i64, i64 tmp_dword1!2
%56 = Extract i40 of i64 %55 <39, 0>
%57 = load i64, i64 tmp_dword2!2
%58 = Extract i24 of i64 %57 <63, 40>
%54 = Concat i64 i40 %56, i24 %58
tmp_dword!4 = store i64 %54, i64 tmp_dword!1
br label %bb3
bb16:
%59 = Extract i3 of i64 %10 <2, 0>
%60 = i1 Eq i3 %59, -2
br i1 %60, label %bb17, label %bb18
bb17:
%62 = load i64, i64 tmp_dword1!2
%63 = Extract i48 of i64 %62 <47, 0>
%64 = load i64, i64 tmp_dword2!2
%65 = Extract i16 of i64 %64 <63, 48>
%61 = Concat i64 i48 %63, i16 %65
tmp_dword!6 = store i64 %61, i64 tmp_dword!1
br label %bb3
bb18:
%67 = load i64, i64 tmp_dword1!2
%68 = Extract i56 of i64 %67 <55, 0>
%69 = load i64, i64 tmp_dword2!2
%70 = Extract i8 of i64 %69 <63, 56>
%66 = Concat i64 i56 %68, i8 %70
tmp_dword!5 = store i64 %66, i64 tmp_dword!1
br label %bb3
bb19:
%77 = load i64, i64 PC!3
%78 = i64 Add i64 %77, 4
PC!4 = store i64 %78, i64 PC!3
br label %bb21
bb20:
br label %bb21
bb21:
PC!5 = phi ite %75 PC!4 PC!3
%72 = load i64, i64 PC!5
PC!6 = store i64 %72, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
%82 = load i64, i64 PC!6
prev_pc!4 = store i64 %82, i64 prev_pc!3
%90 = load i64, [32, i64] XREG!6[2]
%88 = i64 Add i64 %90, 0
tmp_address!3 = store i64 %88, i64 tmp_address!2
%89 = load i64, i64 tmp_address!3
%92 = i64 Lshr i64 %89, 3
%93 = Extract i53 of i64 %92 <52, 0>
mem_index!3 = store i53 %93, i53 mem_index!2
%94 = Extract i3 of i64 %89 <2, 0>
%95 = i1 Eq i3 %94, 0
br i1 %95, label %bb22, label %bb23
bb22:
%96 = load i53, i53 mem_index!3
%97 = load i64, [9007199254740992, i64] MEM!1[%96]
tmp_dword!19 = store i64 %97, i64 tmp_dword!10
br label %bb24
bb23:
%98 = load i53, i53 mem_index!3
%99 = i53 Add i53 %98, 1
%100 = load i64, [9007199254740992, i64] MEM!1[%99]
tmp_dword1!5 = store i64 %100, i64 tmp_dword1!3
%101 = load i53, i53 mem_index!3
%102 = load i64, [9007199254740992, i64] MEM!1[%101]
tmp_dword2!5 = store i64 %102, i64 tmp_dword2!3
%103 = Extract i3 of i64 %89 <2, 0>
%104 = i1 Eq i3 %103, 1
br i1 %104, label %bb25, label %bb26
bb24:
tmp_dword!11 = phi ite %95 tmp_dword!19 ite %104 tmp_dword!18 ite %111 tmp_dword!17 ite %118 tmp_dword!12 ite %125 tmp_dword!13 ite %132 tmp_dword!14 ite %139 tmp_dword!15 tmp_dword!16
tmp_dword2!4 = phi ite %95 tmp_dword2!3 tmp_dword2!5
tmp_dword1!4 = phi ite %95 tmp_dword1!3 tmp_dword1!5
%150 = load i64, i64 tmp_dword!11
rd_var!3 = store i64 %150, i64 rd_var!2
%91 = load i64, i64 rd_var!3
XREG!7 = store i64 %91, [32, i64] XREG!6[8]
%83 = load i64, i64 PC!6
%85 = load i64, i64 prev_pc!4
%84 = i1 Eq i64 %83, %85
br i1 %84, label %bb27, label %bb28
bb25:
%106 = load i64, i64 tmp_dword1!5
%107 = Extract i8 of i64 %106 <7, 0>
%108 = load i64, i64 tmp_dword2!5
%109 = Extract i56 of i64 %108 <63, 8>
%105 = Concat i64 i8 %107, i56 %109
tmp_dword!18 = store i64 %105, i64 tmp_dword!10
br label %bb24
bb26:
%110 = Extract i3 of i64 %89 <2, 0>
%111 = i1 Eq i3 %110, 2
br i1 %111, label %bb29, label %bb30
bb27:
%86 = load i64, i64 PC!6
%87 = i64 Add i64 %86, 4
PC!17 = store i64 %87, i64 PC!6
br label %bb31
bb28:
br label %bb31
bb29:
%113 = load i64, i64 tmp_dword1!5
%114 = Extract i16 of i64 %113 <15, 0>
%115 = load i64, i64 tmp_dword2!5
%116 = Extract i48 of i64 %115 <63, 16>
%112 = Concat i64 i16 %114, i48 %116
tmp_dword!17 = store i64 %112, i64 tmp_dword!10
br label %bb24
bb30:
%117 = Extract i3 of i64 %89 <2, 0>
%118 = i1 Eq i3 %117, 3
br i1 %118, label %bb32, label %bb33
bb31:
PC!7 = phi ite %84 PC!17 PC!6
%81 = load i64, i64 PC!7
PC!8 = store i64 %81, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
%152 = load i64, i64 PC!8
prev_pc!5 = store i64 %152, i64 prev_pc!4
%159 = load i64, [32, i64] XREG!8[2]
%158 = i64 Add i64 %159, 16
XREG!9 = store i64 %158, [32, i64] XREG!8[2]
%153 = load i64, i64 PC!8
%155 = load i64, i64 prev_pc!5
%154 = i1 Eq i64 %153, %155
br i1 %154, label %bb40, label %bb41
bb32:
%120 = load i64, i64 tmp_dword1!5
%121 = Extract i24 of i64 %120 <23, 0>
%122 = load i64, i64 tmp_dword2!5
%123 = Extract i40 of i64 %122 <63, 24>
%119 = Concat i64 i24 %121, i40 %123
tmp_dword!12 = store i64 %119, i64 tmp_dword!10
br label %bb24
bb33:
%124 = Extract i3 of i64 %89 <2, 0>
%125 = i1 Eq i3 %124, -4
br i1 %125, label %bb34, label %bb35
bb34:
%127 = load i64, i64 tmp_dword1!5
%128 = Extract i32 of i64 %127 <31, 0>
%129 = load i64, i64 tmp_dword2!5
%130 = Extract i32 of i64 %129 <63, 32>
%126 = Concat i64 i32 %128, i32 %130
tmp_dword!13 = store i64 %126, i64 tmp_dword!10
br label %bb24
bb35:
%131 = Extract i3 of i64 %89 <2, 0>
%132 = i1 Eq i3 %131, -3
br i1 %132, label %bb36, label %bb37
bb36:
%134 = load i64, i64 tmp_dword1!5
%135 = Extract i40 of i64 %134 <39, 0>
%136 = load i64, i64 tmp_dword2!5
%137 = Extract i24 of i64 %136 <63, 40>
%133 = Concat i64 i40 %135, i24 %137
tmp_dword!14 = store i64 %133, i64 tmp_dword!10
br label %bb24
bb37:
%138 = Extract i3 of i64 %89 <2, 0>
%139 = i1 Eq i3 %138, -2
br i1 %139, label %bb38, label %bb39
bb38:
%141 = load i64, i64 tmp_dword1!5
%142 = Extract i48 of i64 %141 <47, 0>
%143 = load i64, i64 tmp_dword2!5
%144 = Extract i16 of i64 %143 <63, 48>
%140 = Concat i64 i48 %142, i16 %144
tmp_dword!15 = store i64 %140, i64 tmp_dword!10
br label %bb24
bb39:
%146 = load i64, i64 tmp_dword1!5
%147 = Extract i56 of i64 %146 <55, 0>
%148 = load i64, i64 tmp_dword2!5
%149 = Extract i8 of i64 %148 <63, 56>
%145 = Concat i64 i56 %147, i8 %149
tmp_dword!16 = store i64 %145, i64 tmp_dword!10
br label %bb24
bb40:
%156 = load i64, i64 PC!8
%157 = i64 Add i64 %156, 4
PC!9 = store i64 %157, i64 PC!8
br label %bb42
bb41:
br label %bb42
bb42:
PC!10 = phi ite %154 PC!9 PC!8
%151 = load i64, i64 PC!10
PC!11 = store i64 %151, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
%161 = load i64, i64 PC!11
prev_pc!6 = store i64 %161, i64 prev_pc!5
%167 = load i64, i64 PC!11
%168 = i64 Add i64 %167, 4
XREG!11 = store i64 %168, [32, i64] XREG!10[0]
%170 = load i64, [32, i64] XREG!11[1]
%169 = i64 Add i64 %170, 0
PC!12 = store i64 %169, i64 PC!11
%162 = load i64, i64 PC!12
%164 = load i64, i64 prev_pc!6
%163 = i1 Eq i64 %162, %164
br i1 %163, label %bb43, label %bb44
bb43:
%165 = load i64, i64 PC!12
%166 = i64 Add i64 %165, 4
PC!13 = store i64 %166, i64 PC!12
br label %bb45
bb44:
br label %bb45
bb45:
PC!14 = phi ite %163 PC!13 PC!12
%160 = load i64, i64 PC!14
PC!15 = store i64 %160, i64 PC!14
%1 = load i64, i64 PC!15
PC!16 = store i64 %1, i64 PC!15
ret void

SSA forward
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[2]
%2 = i64 Add i64 %3, 8
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
%8 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!2 = store i64 %8, i64 tmp_dword!1
br label %bb3
bb2:
%9 = i53 Add i53 %5, 1
%10 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword1!2 = store i64 %10, i64 tmp_dword1!1
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %11, i64 tmp_dword2!1
%12 = Extract i3 of i64 %2 <2, 0>
%13 = i1 Eq i3 %12, 1
br i1 %13, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %7 %8 ite %13 %14 ite %18 %19 ite %23 %24 ite %28 %29 ite %33 %34 ite %38 %39 %42
tmp_dword2!3 = phi ite %7 tmp_dword2!1 %11
tmp_dword1!3 = phi ite %7 tmp_dword1!1 %10
rd_var!2 = store i64 tmp_dword!10, i64 rd_var!1
XREG!3 = store i64 tmp_dword!10, [32, i64] XREG!2[1]
br label %bb6
bb4:
%15 = Extract i8 of i64 %10 <7, 0>
%16 = Extract i56 of i64 %11 <63, 8>
%14 = Concat i64 i8 %15, i56 %16
tmp_dword!3 = store i64 %14, i64 tmp_dword!1
br label %bb3
bb5:
%17 = Extract i3 of i64 %2 <2, 0>
%18 = i1 Eq i3 %17, 2
br i1 %18, label %bb7, label %bb8
bb6:
%1 = i64 Add i64 PC!1, 4
PC!18 = store i64 %1, i64 PC!1
br label %bb9
bb7:
%20 = Extract i16 of i64 %10 <15, 0>
%21 = Extract i48 of i64 %11 <63, 16>
%19 = Concat i64 i16 %20, i48 %21
tmp_dword!9 = store i64 %19, i64 tmp_dword!1
br label %bb3
bb8:
%22 = Extract i3 of i64 %2 <2, 0>
%23 = i1 Eq i3 %22, 3
br i1 %23, label %bb10, label %bb11
bb9:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%47 = load i64, [32, i64] XREG!4[8]
%46 = i64 Add i64 %47, 0
XREG!5 = store i64 %46, [32, i64] XREG!4[10]
br label %bb12
bb10:
%25 = Extract i24 of i64 %10 <23, 0>
%26 = Extract i40 of i64 %11 <63, 24>
%24 = Concat i64 i24 %25, i40 %26
tmp_dword!8 = store i64 %24, i64 tmp_dword!1
br label %bb3
bb11:
%27 = Extract i3 of i64 %2 <2, 0>
%28 = i1 Eq i3 %27, -4
br i1 %28, label %bb13, label %bb14
bb12:
%45 = i64 Add i64 PC!2, 4
PC!4 = store i64 %45, i64 PC!3
br label %bb15
bb13:
%30 = Extract i32 of i64 %10 <31, 0>
%31 = Extract i32 of i64 %11 <63, 32>
%29 = Concat i64 i32 %30, i32 %31
tmp_dword!7 = store i64 %29, i64 tmp_dword!1
br label %bb3
bb14:
%32 = Extract i3 of i64 %2 <2, 0>
%33 = i1 Eq i3 %32, -3
br i1 %33, label %bb16, label %bb17
bb15:
store i64 %45, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%50 = load i64, [32, i64] XREG!6[2]
%49 = i64 Add i64 %50, 0
tmp_address!3 = store i64 %49, i64 tmp_address!2
%51 = i64 Lshr i64 %49, 3
%52 = Extract i53 of i64 %51 <52, 0>
mem_index!3 = store i53 %52, i53 mem_index!2
%53 = Extract i3 of i64 %49 <2, 0>
%54 = i1 Eq i3 %53, 0
br i1 %54, label %bb18, label %bb19
bb16:
%35 = Extract i40 of i64 %10 <39, 0>
%36 = Extract i24 of i64 %11 <63, 40>
%34 = Concat i64 i40 %35, i24 %36
tmp_dword!4 = store i64 %34, i64 tmp_dword!1
br label %bb3
bb17:
%37 = Extract i3 of i64 %2 <2, 0>
%38 = i1 Eq i3 %37, -2
br i1 %38, label %bb20, label %bb21
bb18:
%55 = load i64, [9007199254740992, i64] MEM!1[%52]
tmp_dword!19 = store i64 %55, i64 tmp_dword!10
br label %bb22
bb19:
%56 = i53 Add i53 %52, 1
%57 = load i64, [9007199254740992, i64] MEM!1[%56]
tmp_dword1!5 = store i64 %57, i64 tmp_dword1!3
%58 = load i64, [9007199254740992, i64] MEM!1[%52]
tmp_dword2!5 = store i64 %58, i64 tmp_dword2!3
%59 = Extract i3 of i64 %49 <2, 0>
%60 = i1 Eq i3 %59, 1
br i1 %60, label %bb23, label %bb24
bb20:
%40 = Extract i48 of i64 %10 <47, 0>
%41 = Extract i16 of i64 %11 <63, 48>
%39 = Concat i64 i48 %40, i16 %41
tmp_dword!6 = store i64 %39, i64 tmp_dword!1
br label %bb3
bb21:
%43 = Extract i56 of i64 %10 <55, 0>
%44 = Extract i8 of i64 %11 <63, 56>
%42 = Concat i64 i56 %43, i8 %44
tmp_dword!5 = store i64 %42, i64 tmp_dword!1
br label %bb3
bb22:
tmp_dword!11 = phi ite %54 %55 ite %60 %61 ite %65 %66 ite %70 %71 ite %75 %76 ite %80 %81 ite %85 %86 %89
tmp_dword2!4 = phi ite %54 tmp_dword2!3 %58
tmp_dword1!4 = phi ite %54 tmp_dword1!3 %57
rd_var!3 = store i64 tmp_dword!11, i64 rd_var!2
XREG!7 = store i64 tmp_dword!11, [32, i64] XREG!6[8]
br label %bb25
bb23:
%62 = Extract i8 of i64 %57 <7, 0>
%63 = Extract i56 of i64 %58 <63, 8>
%61 = Concat i64 i8 %62, i56 %63
tmp_dword!18 = store i64 %61, i64 tmp_dword!10
br label %bb22
bb24:
%64 = Extract i3 of i64 %49 <2, 0>
%65 = i1 Eq i3 %64, 2
br i1 %65, label %bb26, label %bb27
bb25:
%48 = i64 Add i64 PC!5, 4
PC!17 = store i64 %48, i64 PC!6
br label %bb28
bb26:
%67 = Extract i16 of i64 %57 <15, 0>
%68 = Extract i48 of i64 %58 <63, 16>
%66 = Concat i64 i16 %67, i48 %68
tmp_dword!17 = store i64 %66, i64 tmp_dword!10
br label %bb22
bb27:
%69 = Extract i3 of i64 %49 <2, 0>
%70 = i1 Eq i3 %69, 3
br i1 %70, label %bb29, label %bb30
bb28:
store i64 %48, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%94 = load i64, [32, i64] XREG!8[2]
%93 = i64 Add i64 %94, 16
XREG!9 = store i64 %93, [32, i64] XREG!8[2]
br label %bb31
bb29:
%72 = Extract i24 of i64 %57 <23, 0>
%73 = Extract i40 of i64 %58 <63, 24>
%71 = Concat i64 i24 %72, i40 %73
tmp_dword!12 = store i64 %71, i64 tmp_dword!10
br label %bb22
bb30:
%74 = Extract i3 of i64 %49 <2, 0>
%75 = i1 Eq i3 %74, -4
br i1 %75, label %bb32, label %bb33
bb31:
%92 = i64 Add i64 PC!7, 4
PC!9 = store i64 %92, i64 PC!8
br label %bb34
bb32:
%77 = Extract i32 of i64 %57 <31, 0>
%78 = Extract i32 of i64 %58 <63, 32>
%76 = Concat i64 i32 %77, i32 %78
tmp_dword!13 = store i64 %76, i64 tmp_dword!10
br label %bb22
bb33:
%79 = Extract i3 of i64 %49 <2, 0>
%80 = i1 Eq i3 %79, -3
br i1 %80, label %bb35, label %bb36
bb34:
store i64 %92, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%97 = i64 Add i64 PC!10, 4
XREG!11 = store i64 %97, [32, i64] XREG!10[0]
%99 = load i64, [32, i64] XREG!11[1]
%98 = i64 Add i64 %99, 0
PC!12 = store i64 %98, i64 PC!11
%95 = i1 Eq i64 %98, PC!10
br i1 %95, label %bb37, label %bb38
bb35:
%82 = Extract i40 of i64 %57 <39, 0>
%83 = Extract i24 of i64 %58 <63, 40>
%81 = Concat i64 i40 %82, i24 %83
tmp_dword!14 = store i64 %81, i64 tmp_dword!10
br label %bb22
bb36:
%84 = Extract i3 of i64 %49 <2, 0>
%85 = i1 Eq i3 %84, -2
br i1 %85, label %bb39, label %bb40
bb37:
%96 = i64 Add i64 %98, 4
PC!13 = store i64 %96, i64 PC!12
br label %bb41
bb38:
br label %bb41
bb39:
%87 = Extract i48 of i64 %57 <47, 0>
%88 = Extract i16 of i64 %58 <63, 48>
%86 = Concat i64 i48 %87, i16 %88
tmp_dword!15 = store i64 %86, i64 tmp_dword!10
br label %bb22
bb40:
%90 = Extract i56 of i64 %57 <55, 0>
%91 = Extract i8 of i64 %58 <63, 56>
%89 = Concat i64 i56 %90, i8 %91
tmp_dword!16 = store i64 %89, i64 tmp_dword!10
br label %bb22
bb41:
PC!14 = phi ite %95 %96 %98
PC!15 = store i64 PC!14, i64 PC!14
PC!16 = store i64 PC!14, i64 PC!15
ret void

Nested SCCP
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[2]
%2 = i64 Add i64 %3, 8
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
%8 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!2 = store i64 %8, i64 tmp_dword!1
br label %bb3
bb2:
%9 = i53 Add i53 %5, 1
%10 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword1!2 = store i64 %10, i64 tmp_dword1!1
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %11, i64 tmp_dword2!1
%12 = Extract i3 of i64 %2 <2, 0>
%13 = i1 Eq i3 %12, 1
br i1 %13, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %7 %8 ite %13 %14 ite %18 %19 ite %23 %24 ite %28 %29 ite %33 %34 ite %38 %39 %42
tmp_dword2!3 = phi ite %7 tmp_dword2!1 %11
tmp_dword1!3 = phi ite %7 tmp_dword1!1 %10
rd_var!2 = store i64 tmp_dword!10, i64 rd_var!1
XREG!3 = store i64 tmp_dword!10, [32, i64] XREG!2[1]
br label %bb6
bb4:
%15 = Extract i8 of i64 %10 <7, 0>
%16 = Extract i56 of i64 %11 <63, 8>
%14 = Concat i64 i8 %15, i56 %16
tmp_dword!3 = store i64 %14, i64 tmp_dword!1
br label %bb3
bb5:
%17 = Extract i3 of i64 %2 <2, 0>
%18 = i1 Eq i3 %17, 2
br i1 %18, label %bb7, label %bb8
bb6:
%1 = i64 Add i64 PC!1, 4
PC!18 = store i64 %1, i64 PC!1
br label %bb9
bb7:
%20 = Extract i16 of i64 %10 <15, 0>
%21 = Extract i48 of i64 %11 <63, 16>
%19 = Concat i64 i16 %20, i48 %21
tmp_dword!9 = store i64 %19, i64 tmp_dword!1
br label %bb3
bb8:
%22 = Extract i3 of i64 %2 <2, 0>
%23 = i1 Eq i3 %22, 3
br i1 %23, label %bb10, label %bb11
bb9:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%47 = load i64, [32, i64] XREG!4[8]
%46 = i64 Add i64 %47, 0
XREG!5 = store i64 %46, [32, i64] XREG!4[10]
br label %bb12
bb10:
%25 = Extract i24 of i64 %10 <23, 0>
%26 = Extract i40 of i64 %11 <63, 24>
%24 = Concat i64 i24 %25, i40 %26
tmp_dword!8 = store i64 %24, i64 tmp_dword!1
br label %bb3
bb11:
%27 = Extract i3 of i64 %2 <2, 0>
%28 = i1 Eq i3 %27, -4
br i1 %28, label %bb13, label %bb14
bb12:
%45 = i64 Add i64 PC!2, 4
PC!4 = store i64 %45, i64 PC!3
br label %bb15
bb13:
%30 = Extract i32 of i64 %10 <31, 0>
%31 = Extract i32 of i64 %11 <63, 32>
%29 = Concat i64 i32 %30, i32 %31
tmp_dword!7 = store i64 %29, i64 tmp_dword!1
br label %bb3
bb14:
%32 = Extract i3 of i64 %2 <2, 0>
%33 = i1 Eq i3 %32, -3
br i1 %33, label %bb16, label %bb17
bb15:
store i64 %45, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%50 = load i64, [32, i64] XREG!6[2]
%49 = i64 Add i64 %50, 0
tmp_address!3 = store i64 %49, i64 tmp_address!2
%51 = i64 Lshr i64 %49, 3
%52 = Extract i53 of i64 %51 <52, 0>
mem_index!3 = store i53 %52, i53 mem_index!2
%53 = Extract i3 of i64 %49 <2, 0>
%54 = i1 Eq i3 %53, 0
br i1 %54, label %bb18, label %bb19
bb16:
%35 = Extract i40 of i64 %10 <39, 0>
%36 = Extract i24 of i64 %11 <63, 40>
%34 = Concat i64 i40 %35, i24 %36
tmp_dword!4 = store i64 %34, i64 tmp_dword!1
br label %bb3
bb17:
%37 = Extract i3 of i64 %2 <2, 0>
%38 = i1 Eq i3 %37, -2
br i1 %38, label %bb20, label %bb21
bb18:
%55 = load i64, [9007199254740992, i64] MEM!1[%52]
tmp_dword!19 = store i64 %55, i64 tmp_dword!10
br label %bb22
bb19:
%56 = i53 Add i53 %52, 1
%57 = load i64, [9007199254740992, i64] MEM!1[%56]
tmp_dword1!5 = store i64 %57, i64 tmp_dword1!3
%58 = load i64, [9007199254740992, i64] MEM!1[%52]
tmp_dword2!5 = store i64 %58, i64 tmp_dword2!3
%59 = Extract i3 of i64 %49 <2, 0>
%60 = i1 Eq i3 %59, 1
br i1 %60, label %bb23, label %bb24
bb20:
%40 = Extract i48 of i64 %10 <47, 0>
%41 = Extract i16 of i64 %11 <63, 48>
%39 = Concat i64 i48 %40, i16 %41
tmp_dword!6 = store i64 %39, i64 tmp_dword!1
br label %bb3
bb21:
%43 = Extract i56 of i64 %10 <55, 0>
%44 = Extract i8 of i64 %11 <63, 56>
%42 = Concat i64 i56 %43, i8 %44
tmp_dword!5 = store i64 %42, i64 tmp_dword!1
br label %bb3
bb22:
tmp_dword!11 = phi ite %54 %55 ite %60 %61 ite %65 %66 ite %70 %71 ite %75 %76 ite %80 %81 ite %85 %86 %89
tmp_dword2!4 = phi ite %54 tmp_dword2!3 %58
tmp_dword1!4 = phi ite %54 tmp_dword1!3 %57
rd_var!3 = store i64 tmp_dword!11, i64 rd_var!2
XREG!7 = store i64 tmp_dword!11, [32, i64] XREG!6[8]
br label %bb25
bb23:
%62 = Extract i8 of i64 %57 <7, 0>
%63 = Extract i56 of i64 %58 <63, 8>
%61 = Concat i64 i8 %62, i56 %63
tmp_dword!18 = store i64 %61, i64 tmp_dword!10
br label %bb22
bb24:
%64 = Extract i3 of i64 %49 <2, 0>
%65 = i1 Eq i3 %64, 2
br i1 %65, label %bb26, label %bb27
bb25:
%48 = i64 Add i64 PC!5, 4
PC!17 = store i64 %48, i64 PC!6
br label %bb28
bb26:
%67 = Extract i16 of i64 %57 <15, 0>
%68 = Extract i48 of i64 %58 <63, 16>
%66 = Concat i64 i16 %67, i48 %68
tmp_dword!17 = store i64 %66, i64 tmp_dword!10
br label %bb22
bb27:
%69 = Extract i3 of i64 %49 <2, 0>
%70 = i1 Eq i3 %69, 3
br i1 %70, label %bb29, label %bb30
bb28:
store i64 %48, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%94 = load i64, [32, i64] XREG!8[2]
%93 = i64 Add i64 %94, 16
XREG!9 = store i64 %93, [32, i64] XREG!8[2]
br label %bb31
bb29:
%72 = Extract i24 of i64 %57 <23, 0>
%73 = Extract i40 of i64 %58 <63, 24>
%71 = Concat i64 i24 %72, i40 %73
tmp_dword!12 = store i64 %71, i64 tmp_dword!10
br label %bb22
bb30:
%74 = Extract i3 of i64 %49 <2, 0>
%75 = i1 Eq i3 %74, -4
br i1 %75, label %bb32, label %bb33
bb31:
%92 = i64 Add i64 PC!7, 4
PC!9 = store i64 %92, i64 PC!8
br label %bb34
bb32:
%77 = Extract i32 of i64 %57 <31, 0>
%78 = Extract i32 of i64 %58 <63, 32>
%76 = Concat i64 i32 %77, i32 %78
tmp_dword!13 = store i64 %76, i64 tmp_dword!10
br label %bb22
bb33:
%79 = Extract i3 of i64 %49 <2, 0>
%80 = i1 Eq i3 %79, -3
br i1 %80, label %bb35, label %bb36
bb34:
store i64 %92, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%97 = i64 Add i64 PC!10, 4
XREG!11 = store i64 %97, [32, i64] XREG!10[0]
%99 = load i64, [32, i64] XREG!11[1]
%98 = i64 Add i64 %99, 0
PC!12 = store i64 %98, i64 PC!11
%95 = i1 Eq i64 %98, PC!10
br i1 %95, label %bb37, label %bb38
bb35:
%82 = Extract i40 of i64 %57 <39, 0>
%83 = Extract i24 of i64 %58 <63, 40>
%81 = Concat i64 i40 %82, i24 %83
tmp_dword!14 = store i64 %81, i64 tmp_dword!10
br label %bb22
bb36:
%84 = Extract i3 of i64 %49 <2, 0>
%85 = i1 Eq i3 %84, -2
br i1 %85, label %bb39, label %bb40
bb37:
%96 = i64 Add i64 %98, 4
PC!13 = store i64 %96, i64 PC!12
br label %bb41
bb38:
br label %bb41
bb39:
%87 = Extract i48 of i64 %57 <47, 0>
%88 = Extract i16 of i64 %58 <63, 48>
%86 = Concat i64 i48 %87, i16 %88
tmp_dword!15 = store i64 %86, i64 tmp_dword!10
br label %bb22
bb40:
%90 = Extract i56 of i64 %57 <55, 0>
%91 = Extract i8 of i64 %58 <63, 56>
%89 = Concat i64 i56 %90, i8 %91
tmp_dword!16 = store i64 %89, i64 tmp_dword!10
br label %bb22
bb41:
PC!14 = phi ite %95 %96 %98
PC!15 = store i64 PC!14, i64 PC!14
PC!16 = store i64 PC!14, i64 PC!15
ret void

SCCP forward
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[2]
%2 = i64 Add i64 %3, 8
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
%8 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!2 = store i64 %8, i64 tmp_dword!1
br label %bb3
bb2:
%9 = i53 Add i53 %5, 1
%10 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword1!2 = store i64 %10, i64 tmp_dword1!1
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %11, i64 tmp_dword2!1
%12 = Extract i3 of i64 %2 <2, 0>
%13 = i1 Eq i3 %12, 1
br i1 %13, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %7 %8 ite %13 %14 ite %18 %19 ite %23 %24 ite %28 %29 ite %33 %34 ite %38 %39 %42
tmp_dword2!3 = phi ite %7 tmp_dword2!1 %11
tmp_dword1!3 = phi ite %7 tmp_dword1!1 %10
rd_var!2 = store i64 tmp_dword!10, i64 rd_var!1
XREG!3 = store i64 tmp_dword!10, [32, i64] XREG!2[1]
br label %bb6
bb4:
%15 = Extract i8 of i64 %10 <7, 0>
%16 = Extract i56 of i64 %11 <63, 8>
%14 = Concat i64 i8 %15, i56 %16
tmp_dword!3 = store i64 %14, i64 tmp_dword!1
br label %bb3
bb5:
%17 = Extract i3 of i64 %2 <2, 0>
%18 = i1 Eq i3 %17, 2
br i1 %18, label %bb7, label %bb8
bb6:
%1 = i64 Add i64 PC!1, 4
PC!18 = store i64 %1, i64 PC!1
br label %bb9
bb7:
%20 = Extract i16 of i64 %10 <15, 0>
%21 = Extract i48 of i64 %11 <63, 16>
%19 = Concat i64 i16 %20, i48 %21
tmp_dword!9 = store i64 %19, i64 tmp_dword!1
br label %bb3
bb8:
%22 = Extract i3 of i64 %2 <2, 0>
%23 = i1 Eq i3 %22, 3
br i1 %23, label %bb10, label %bb11
bb9:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%47 = load i64, [32, i64] XREG!4[8]
%46 = i64 Add i64 %47, 0
XREG!5 = store i64 %46, [32, i64] XREG!4[10]
br label %bb12
bb10:
%25 = Extract i24 of i64 %10 <23, 0>
%26 = Extract i40 of i64 %11 <63, 24>
%24 = Concat i64 i24 %25, i40 %26
tmp_dword!8 = store i64 %24, i64 tmp_dword!1
br label %bb3
bb11:
%27 = Extract i3 of i64 %2 <2, 0>
%28 = i1 Eq i3 %27, -4
br i1 %28, label %bb13, label %bb14
bb12:
%45 = i64 Add i64 PC!2, 4
PC!4 = store i64 %45, i64 PC!3
br label %bb15
bb13:
%30 = Extract i32 of i64 %10 <31, 0>
%31 = Extract i32 of i64 %11 <63, 32>
%29 = Concat i64 i32 %30, i32 %31
tmp_dword!7 = store i64 %29, i64 tmp_dword!1
br label %bb3
bb14:
%32 = Extract i3 of i64 %2 <2, 0>
%33 = i1 Eq i3 %32, -3
br i1 %33, label %bb16, label %bb17
bb15:
store i64 %45, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%50 = load i64, [32, i64] XREG!6[2]
%49 = i64 Add i64 %50, 0
tmp_address!3 = store i64 %49, i64 tmp_address!2
%51 = i64 Lshr i64 %49, 3
%52 = Extract i53 of i64 %51 <52, 0>
mem_index!3 = store i53 %52, i53 mem_index!2
%53 = Extract i3 of i64 %49 <2, 0>
%54 = i1 Eq i3 %53, 0
br i1 %54, label %bb18, label %bb19
bb16:
%35 = Extract i40 of i64 %10 <39, 0>
%36 = Extract i24 of i64 %11 <63, 40>
%34 = Concat i64 i40 %35, i24 %36
tmp_dword!4 = store i64 %34, i64 tmp_dword!1
br label %bb3
bb17:
%37 = Extract i3 of i64 %2 <2, 0>
%38 = i1 Eq i3 %37, -2
br i1 %38, label %bb20, label %bb21
bb18:
%55 = load i64, [9007199254740992, i64] MEM!1[%52]
tmp_dword!19 = store i64 %55, i64 tmp_dword!10
br label %bb22
bb19:
%56 = i53 Add i53 %52, 1
%57 = load i64, [9007199254740992, i64] MEM!1[%56]
tmp_dword1!5 = store i64 %57, i64 tmp_dword1!3
%58 = load i64, [9007199254740992, i64] MEM!1[%52]
tmp_dword2!5 = store i64 %58, i64 tmp_dword2!3
%59 = Extract i3 of i64 %49 <2, 0>
%60 = i1 Eq i3 %59, 1
br i1 %60, label %bb23, label %bb24
bb20:
%40 = Extract i48 of i64 %10 <47, 0>
%41 = Extract i16 of i64 %11 <63, 48>
%39 = Concat i64 i48 %40, i16 %41
tmp_dword!6 = store i64 %39, i64 tmp_dword!1
br label %bb3
bb21:
%43 = Extract i56 of i64 %10 <55, 0>
%44 = Extract i8 of i64 %11 <63, 56>
%42 = Concat i64 i56 %43, i8 %44
tmp_dword!5 = store i64 %42, i64 tmp_dword!1
br label %bb3
bb22:
tmp_dword!11 = phi ite %54 %55 ite %60 %61 ite %65 %66 ite %70 %71 ite %75 %76 ite %80 %81 ite %85 %86 %89
tmp_dword2!4 = phi ite %54 tmp_dword2!3 %58
tmp_dword1!4 = phi ite %54 tmp_dword1!3 %57
rd_var!3 = store i64 tmp_dword!11, i64 rd_var!2
XREG!7 = store i64 tmp_dword!11, [32, i64] XREG!6[8]
br label %bb25
bb23:
%62 = Extract i8 of i64 %57 <7, 0>
%63 = Extract i56 of i64 %58 <63, 8>
%61 = Concat i64 i8 %62, i56 %63
tmp_dword!18 = store i64 %61, i64 tmp_dword!10
br label %bb22
bb24:
%64 = Extract i3 of i64 %49 <2, 0>
%65 = i1 Eq i3 %64, 2
br i1 %65, label %bb26, label %bb27
bb25:
%48 = i64 Add i64 PC!5, 4
PC!17 = store i64 %48, i64 PC!6
br label %bb28
bb26:
%67 = Extract i16 of i64 %57 <15, 0>
%68 = Extract i48 of i64 %58 <63, 16>
%66 = Concat i64 i16 %67, i48 %68
tmp_dword!17 = store i64 %66, i64 tmp_dword!10
br label %bb22
bb27:
%69 = Extract i3 of i64 %49 <2, 0>
%70 = i1 Eq i3 %69, 3
br i1 %70, label %bb29, label %bb30
bb28:
store i64 %48, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%94 = load i64, [32, i64] XREG!8[2]
%93 = i64 Add i64 %94, 16
XREG!9 = store i64 %93, [32, i64] XREG!8[2]
br label %bb31
bb29:
%72 = Extract i24 of i64 %57 <23, 0>
%73 = Extract i40 of i64 %58 <63, 24>
%71 = Concat i64 i24 %72, i40 %73
tmp_dword!12 = store i64 %71, i64 tmp_dword!10
br label %bb22
bb30:
%74 = Extract i3 of i64 %49 <2, 0>
%75 = i1 Eq i3 %74, -4
br i1 %75, label %bb32, label %bb33
bb31:
%92 = i64 Add i64 PC!7, 4
PC!9 = store i64 %92, i64 PC!8
br label %bb34
bb32:
%77 = Extract i32 of i64 %57 <31, 0>
%78 = Extract i32 of i64 %58 <63, 32>
%76 = Concat i64 i32 %77, i32 %78
tmp_dword!13 = store i64 %76, i64 tmp_dword!10
br label %bb22
bb33:
%79 = Extract i3 of i64 %49 <2, 0>
%80 = i1 Eq i3 %79, -3
br i1 %80, label %bb35, label %bb36
bb34:
store i64 %92, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%97 = i64 Add i64 PC!10, 4
XREG!11 = store i64 %97, [32, i64] XREG!10[0]
%99 = load i64, [32, i64] XREG!11[1]
%98 = i64 Add i64 %99, 0
PC!12 = store i64 %98, i64 PC!11
%95 = i1 Eq i64 %98, PC!10
br i1 %95, label %bb37, label %bb38
bb35:
%82 = Extract i40 of i64 %57 <39, 0>
%83 = Extract i24 of i64 %58 <63, 40>
%81 = Concat i64 i40 %82, i24 %83
tmp_dword!14 = store i64 %81, i64 tmp_dword!10
br label %bb22
bb36:
%84 = Extract i3 of i64 %49 <2, 0>
%85 = i1 Eq i3 %84, -2
br i1 %85, label %bb39, label %bb40
bb37:
%96 = i64 Add i64 %98, 4
PC!13 = store i64 %96, i64 PC!12
br label %bb41
bb38:
br label %bb41
bb39:
%87 = Extract i48 of i64 %57 <47, 0>
%88 = Extract i16 of i64 %58 <63, 48>
%86 = Concat i64 i48 %87, i16 %88
tmp_dword!15 = store i64 %86, i64 tmp_dword!10
br label %bb22
bb40:
%90 = Extract i56 of i64 %57 <55, 0>
%91 = Extract i8 of i64 %58 <63, 56>
%89 = Concat i64 i56 %90, i8 %91
tmp_dword!16 = store i64 %89, i64 tmp_dword!10
br label %bb22
bb41:
PC!14 = phi ite %95 %96 %98
PC!15 = store i64 PC!14, i64 PC!14
PC!16 = store i64 PC!14, i64 PC!15
ret void

cherry
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[2]
%2 = i64 Add i64 %3, 8
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
%8 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!2 = store i64 %8, i64 tmp_dword!1
br label %bb3
bb2:
%9 = i53 Add i53 %5, 1
%10 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword1!2 = store i64 %10, i64 tmp_dword1!1
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %11, i64 tmp_dword2!1
%12 = Extract i3 of i64 %2 <2, 0>
%13 = i1 Eq i3 %12, 1
br i1 %13, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %7 %8 ite %13 %14 ite %18 %19 ite %23 %24 ite %28 %29 ite %33 %34 ite %38 %39 %42
tmp_dword2!3 = phi ite %7 tmp_dword2!1 %11
tmp_dword1!3 = phi ite %7 tmp_dword1!1 %10
rd_var!2 = store i64 tmp_dword!10, i64 rd_var!1
XREG!3 = store i64 tmp_dword!10, [32, i64] XREG!2[1]
%1 = i64 Add i64 PC!1, 4
PC!18 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%47 = load i64, [32, i64] XREG!4[8]
%46 = i64 Add i64 %47, 0
XREG!5 = store i64 %46, [32, i64] XREG!4[10]
%45 = i64 Add i64 PC!2, 4
PC!4 = store i64 %45, i64 PC!3
store i64 %45, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%50 = load i64, [32, i64] XREG!6[2]
%49 = i64 Add i64 %50, 0
tmp_address!3 = store i64 %49, i64 tmp_address!2
%51 = i64 Lshr i64 %49, 3
%52 = Extract i53 of i64 %51 <52, 0>
mem_index!3 = store i53 %52, i53 mem_index!2
%53 = Extract i3 of i64 %49 <2, 0>
%54 = i1 Eq i3 %53, 0
br i1 %54, label %bb14, label %bb15
bb4:
%15 = Extract i8 of i64 %10 <7, 0>
%16 = Extract i56 of i64 %11 <63, 8>
%14 = Concat i64 i8 %15, i56 %16
tmp_dword!3 = store i64 %14, i64 tmp_dword!1
br label %bb3
bb5:
%17 = Extract i3 of i64 %2 <2, 0>
%18 = i1 Eq i3 %17, 2
br i1 %18, label %bb6, label %bb7
bb6:
%20 = Extract i16 of i64 %10 <15, 0>
%21 = Extract i48 of i64 %11 <63, 16>
%19 = Concat i64 i16 %20, i48 %21
tmp_dword!9 = store i64 %19, i64 tmp_dword!1
br label %bb3
bb7:
%22 = Extract i3 of i64 %2 <2, 0>
%23 = i1 Eq i3 %22, 3
br i1 %23, label %bb8, label %bb9
bb8:
%25 = Extract i24 of i64 %10 <23, 0>
%26 = Extract i40 of i64 %11 <63, 24>
%24 = Concat i64 i24 %25, i40 %26
tmp_dword!8 = store i64 %24, i64 tmp_dword!1
br label %bb3
bb9:
%27 = Extract i3 of i64 %2 <2, 0>
%28 = i1 Eq i3 %27, -4
br i1 %28, label %bb10, label %bb11
bb10:
%30 = Extract i32 of i64 %10 <31, 0>
%31 = Extract i32 of i64 %11 <63, 32>
%29 = Concat i64 i32 %30, i32 %31
tmp_dword!7 = store i64 %29, i64 tmp_dword!1
br label %bb3
bb11:
%32 = Extract i3 of i64 %2 <2, 0>
%33 = i1 Eq i3 %32, -3
br i1 %33, label %bb12, label %bb13
bb12:
%35 = Extract i40 of i64 %10 <39, 0>
%36 = Extract i24 of i64 %11 <63, 40>
%34 = Concat i64 i40 %35, i24 %36
tmp_dword!4 = store i64 %34, i64 tmp_dword!1
br label %bb3
bb13:
%37 = Extract i3 of i64 %2 <2, 0>
%38 = i1 Eq i3 %37, -2
br i1 %38, label %bb16, label %bb17
bb14:
%55 = load i64, [9007199254740992, i64] MEM!1[%52]
tmp_dword!19 = store i64 %55, i64 tmp_dword!10
br label %bb18
bb15:
%56 = i53 Add i53 %52, 1
%57 = load i64, [9007199254740992, i64] MEM!1[%56]
tmp_dword1!5 = store i64 %57, i64 tmp_dword1!3
%58 = load i64, [9007199254740992, i64] MEM!1[%52]
tmp_dword2!5 = store i64 %58, i64 tmp_dword2!3
%59 = Extract i3 of i64 %49 <2, 0>
%60 = i1 Eq i3 %59, 1
br i1 %60, label %bb19, label %bb20
bb16:
%40 = Extract i48 of i64 %10 <47, 0>
%41 = Extract i16 of i64 %11 <63, 48>
%39 = Concat i64 i48 %40, i16 %41
tmp_dword!6 = store i64 %39, i64 tmp_dword!1
br label %bb3
bb17:
%43 = Extract i56 of i64 %10 <55, 0>
%44 = Extract i8 of i64 %11 <63, 56>
%42 = Concat i64 i56 %43, i8 %44
tmp_dword!5 = store i64 %42, i64 tmp_dword!1
br label %bb3
bb18:
tmp_dword!11 = phi ite %54 %55 ite %60 %61 ite %65 %66 ite %70 %71 ite %75 %76 ite %80 %81 ite %85 %86 %89
tmp_dword2!4 = phi ite %54 tmp_dword2!3 %58
tmp_dword1!4 = phi ite %54 tmp_dword1!3 %57
rd_var!3 = store i64 tmp_dword!11, i64 rd_var!2
XREG!7 = store i64 tmp_dword!11, [32, i64] XREG!6[8]
%48 = i64 Add i64 PC!5, 4
PC!17 = store i64 %48, i64 PC!6
store i64 %48, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%94 = load i64, [32, i64] XREG!8[2]
%93 = i64 Add i64 %94, 16
XREG!9 = store i64 %93, [32, i64] XREG!8[2]
%92 = i64 Add i64 PC!7, 4
PC!9 = store i64 %92, i64 PC!8
store i64 %92, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%97 = i64 Add i64 PC!10, 4
XREG!11 = store i64 %97, [32, i64] XREG!10[0]
%99 = load i64, [32, i64] XREG!11[1]
%98 = i64 Add i64 %99, 0
PC!12 = store i64 %98, i64 PC!11
%95 = i1 Eq i64 %98, PC!10
br i1 %95, label %bb29, label %bb30
bb19:
%62 = Extract i8 of i64 %57 <7, 0>
%63 = Extract i56 of i64 %58 <63, 8>
%61 = Concat i64 i8 %62, i56 %63
tmp_dword!18 = store i64 %61, i64 tmp_dword!10
br label %bb18
bb20:
%64 = Extract i3 of i64 %49 <2, 0>
%65 = i1 Eq i3 %64, 2
br i1 %65, label %bb21, label %bb22
bb21:
%67 = Extract i16 of i64 %57 <15, 0>
%68 = Extract i48 of i64 %58 <63, 16>
%66 = Concat i64 i16 %67, i48 %68
tmp_dword!17 = store i64 %66, i64 tmp_dword!10
br label %bb18
bb22:
%69 = Extract i3 of i64 %49 <2, 0>
%70 = i1 Eq i3 %69, 3
br i1 %70, label %bb23, label %bb24
bb23:
%72 = Extract i24 of i64 %57 <23, 0>
%73 = Extract i40 of i64 %58 <63, 24>
%71 = Concat i64 i24 %72, i40 %73
tmp_dword!12 = store i64 %71, i64 tmp_dword!10
br label %bb18
bb24:
%74 = Extract i3 of i64 %49 <2, 0>
%75 = i1 Eq i3 %74, -4
br i1 %75, label %bb25, label %bb26
bb25:
%77 = Extract i32 of i64 %57 <31, 0>
%78 = Extract i32 of i64 %58 <63, 32>
%76 = Concat i64 i32 %77, i32 %78
tmp_dword!13 = store i64 %76, i64 tmp_dword!10
br label %bb18
bb26:
%79 = Extract i3 of i64 %49 <2, 0>
%80 = i1 Eq i3 %79, -3
br i1 %80, label %bb27, label %bb28
bb27:
%82 = Extract i40 of i64 %57 <39, 0>
%83 = Extract i24 of i64 %58 <63, 40>
%81 = Concat i64 i40 %82, i24 %83
tmp_dword!14 = store i64 %81, i64 tmp_dword!10
br label %bb18
bb28:
%84 = Extract i3 of i64 %49 <2, 0>
%85 = i1 Eq i3 %84, -2
br i1 %85, label %bb31, label %bb32
bb29:
%96 = i64 Add i64 %98, 4
PC!13 = store i64 %96, i64 PC!12
br label %bb33
bb30:
br label %bb33
bb31:
%87 = Extract i48 of i64 %57 <47, 0>
%88 = Extract i16 of i64 %58 <63, 48>
%86 = Concat i64 i48 %87, i16 %88
tmp_dword!15 = store i64 %86, i64 tmp_dword!10
br label %bb18
bb32:
%90 = Extract i56 of i64 %57 <55, 0>
%91 = Extract i8 of i64 %58 <63, 56>
%89 = Concat i64 i56 %90, i8 %91
tmp_dword!16 = store i64 %89, i64 tmp_dword!10
br label %bb18
bb33:
PC!14 = phi ite %95 %96 %98
PC!15 = store i64 PC!14, i64 PC!14
PC!16 = store i64 PC!14, i64 PC!15
ret void

bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[2]
%2 = i64 Add i64 %3, 8
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = i1 Eq i3 %6, 0
br i1 %7, label %bb1, label %bb2
bb1:
%8 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword!2 = store i64 %8, i64 tmp_dword!1
br label %bb3
bb2:
%9 = i53 Add i53 %5, 1
%10 = load i64, [9007199254740992, i64] MEM!1[%9]
tmp_dword1!2 = store i64 %10, i64 tmp_dword1!1
%11 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %11, i64 tmp_dword2!1
%12 = Extract i3 of i64 %2 <2, 0>
%13 = i1 Eq i3 %12, 1
br i1 %13, label %bb4, label %bb5
bb3:
tmp_dword!10 = phi ite %7 %8 ite %13 %14 ite %18 %19 ite %23 %24 ite %28 %29 ite %33 %34 ite %38 %39 %42
tmp_dword2!3 = phi ite %7 tmp_dword2!1 %11
tmp_dword1!3 = phi ite %7 tmp_dword1!1 %10
rd_var!2 = store i64 tmp_dword!10, i64 rd_var!1
XREG!3 = store i64 tmp_dword!10, [32, i64] XREG!2[1]
%1 = i64 Add i64 PC!1, 4
PC!18 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%47 = load i64, [32, i64] XREG!4[8]
%46 = i64 Add i64 %47, 0
XREG!5 = store i64 %46, [32, i64] XREG!4[10]
%45 = i64 Add i64 PC!2, 4
PC!4 = store i64 %45, i64 PC!3
store i64 %45, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%50 = load i64, [32, i64] XREG!6[2]
%49 = i64 Add i64 %50, 0
tmp_address!3 = store i64 %49, i64 tmp_address!2
%51 = i64 Lshr i64 %49, 3
%52 = Extract i53 of i64 %51 <52, 0>
mem_index!3 = store i53 %52, i53 mem_index!2
%53 = Extract i3 of i64 %49 <2, 0>
%54 = i1 Eq i3 %53, 0
br i1 %54, label %bb14, label %bb15
bb4:
%15 = Extract i8 of i64 %10 <7, 0>
%16 = Extract i56 of i64 %11 <63, 8>
%14 = Concat i64 i8 %15, i56 %16
tmp_dword!3 = store i64 %14, i64 tmp_dword!1
br label %bb3
bb5:
%17 = Extract i3 of i64 %2 <2, 0>
%18 = i1 Eq i3 %17, 2
br i1 %18, label %bb6, label %bb7
bb6:
%20 = Extract i16 of i64 %10 <15, 0>
%21 = Extract i48 of i64 %11 <63, 16>
%19 = Concat i64 i16 %20, i48 %21
tmp_dword!9 = store i64 %19, i64 tmp_dword!1
br label %bb3
bb7:
%22 = Extract i3 of i64 %2 <2, 0>
%23 = i1 Eq i3 %22, 3
br i1 %23, label %bb8, label %bb9
bb8:
%25 = Extract i24 of i64 %10 <23, 0>
%26 = Extract i40 of i64 %11 <63, 24>
%24 = Concat i64 i24 %25, i40 %26
tmp_dword!8 = store i64 %24, i64 tmp_dword!1
br label %bb3
bb9:
%27 = Extract i3 of i64 %2 <2, 0>
%28 = i1 Eq i3 %27, -4
br i1 %28, label %bb10, label %bb11
bb10:
%30 = Extract i32 of i64 %10 <31, 0>
%31 = Extract i32 of i64 %11 <63, 32>
%29 = Concat i64 i32 %30, i32 %31
tmp_dword!7 = store i64 %29, i64 tmp_dword!1
br label %bb3
bb11:
%32 = Extract i3 of i64 %2 <2, 0>
%33 = i1 Eq i3 %32, -3
br i1 %33, label %bb12, label %bb13
bb12:
%35 = Extract i40 of i64 %10 <39, 0>
%36 = Extract i24 of i64 %11 <63, 40>
%34 = Concat i64 i40 %35, i24 %36
tmp_dword!4 = store i64 %34, i64 tmp_dword!1
br label %bb3
bb13:
%37 = Extract i3 of i64 %2 <2, 0>
%38 = i1 Eq i3 %37, -2
br i1 %38, label %bb16, label %bb17
bb14:
%55 = load i64, [9007199254740992, i64] MEM!1[%52]
tmp_dword!19 = store i64 %55, i64 tmp_dword!10
br label %bb18
bb15:
%56 = i53 Add i53 %52, 1
%57 = load i64, [9007199254740992, i64] MEM!1[%56]
tmp_dword1!5 = store i64 %57, i64 tmp_dword1!3
%58 = load i64, [9007199254740992, i64] MEM!1[%52]
tmp_dword2!5 = store i64 %58, i64 tmp_dword2!3
%59 = Extract i3 of i64 %49 <2, 0>
%60 = i1 Eq i3 %59, 1
br i1 %60, label %bb19, label %bb20
bb16:
%40 = Extract i48 of i64 %10 <47, 0>
%41 = Extract i16 of i64 %11 <63, 48>
%39 = Concat i64 i48 %40, i16 %41
tmp_dword!6 = store i64 %39, i64 tmp_dword!1
br label %bb3
bb17:
%43 = Extract i56 of i64 %10 <55, 0>
%44 = Extract i8 of i64 %11 <63, 56>
%42 = Concat i64 i56 %43, i8 %44
tmp_dword!5 = store i64 %42, i64 tmp_dword!1
br label %bb3
bb18:
tmp_dword!11 = phi ite %54 %55 ite %60 %61 ite %65 %66 ite %70 %71 ite %75 %76 ite %80 %81 ite %85 %86 %89
tmp_dword2!4 = phi ite %54 tmp_dword2!3 %58
tmp_dword1!4 = phi ite %54 tmp_dword1!3 %57
rd_var!3 = store i64 tmp_dword!11, i64 rd_var!2
XREG!7 = store i64 tmp_dword!11, [32, i64] XREG!6[8]
%48 = i64 Add i64 PC!5, 4
PC!17 = store i64 %48, i64 PC!6
store i64 %48, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%94 = load i64, [32, i64] XREG!8[2]
%93 = i64 Add i64 %94, 16
XREG!9 = store i64 %93, [32, i64] XREG!8[2]
%92 = i64 Add i64 PC!7, 4
PC!9 = store i64 %92, i64 PC!8
store i64 %92, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%97 = i64 Add i64 PC!10, 4
XREG!11 = store i64 %97, [32, i64] XREG!10[0]
%99 = load i64, [32, i64] XREG!11[1]
%98 = i64 Add i64 %99, 0
PC!12 = store i64 %98, i64 PC!11
%95 = i1 Eq i64 %98, PC!10
br i1 %95, label %bb29, label %bb30
bb19:
%62 = Extract i8 of i64 %57 <7, 0>
%63 = Extract i56 of i64 %58 <63, 8>
%61 = Concat i64 i8 %62, i56 %63
tmp_dword!18 = store i64 %61, i64 tmp_dword!10
br label %bb18
bb20:
%64 = Extract i3 of i64 %49 <2, 0>
%65 = i1 Eq i3 %64, 2
br i1 %65, label %bb21, label %bb22
bb21:
%67 = Extract i16 of i64 %57 <15, 0>
%68 = Extract i48 of i64 %58 <63, 16>
%66 = Concat i64 i16 %67, i48 %68
tmp_dword!17 = store i64 %66, i64 tmp_dword!10
br label %bb18
bb22:
%69 = Extract i3 of i64 %49 <2, 0>
%70 = i1 Eq i3 %69, 3
br i1 %70, label %bb23, label %bb24
bb23:
%72 = Extract i24 of i64 %57 <23, 0>
%73 = Extract i40 of i64 %58 <63, 24>
%71 = Concat i64 i24 %72, i40 %73
tmp_dword!12 = store i64 %71, i64 tmp_dword!10
br label %bb18
bb24:
%74 = Extract i3 of i64 %49 <2, 0>
%75 = i1 Eq i3 %74, -4
br i1 %75, label %bb25, label %bb26
bb25:
%77 = Extract i32 of i64 %57 <31, 0>
%78 = Extract i32 of i64 %58 <63, 32>
%76 = Concat i64 i32 %77, i32 %78
tmp_dword!13 = store i64 %76, i64 tmp_dword!10
br label %bb18
bb26:
%79 = Extract i3 of i64 %49 <2, 0>
%80 = i1 Eq i3 %79, -3
br i1 %80, label %bb27, label %bb28
bb27:
%82 = Extract i40 of i64 %57 <39, 0>
%83 = Extract i24 of i64 %58 <63, 40>
%81 = Concat i64 i40 %82, i24 %83
tmp_dword!14 = store i64 %81, i64 tmp_dword!10
br label %bb18
bb28:
%84 = Extract i3 of i64 %49 <2, 0>
%85 = i1 Eq i3 %84, -2
br i1 %85, label %bb31, label %bb32
bb29:
%96 = i64 Add i64 %98, 4
PC!13 = store i64 %96, i64 PC!12
br label %bb33
bb30:
br label %bb33
bb31:
%87 = Extract i48 of i64 %57 <47, 0>
%88 = Extract i16 of i64 %58 <63, 48>
%86 = Concat i64 i48 %87, i16 %88
tmp_dword!15 = store i64 %86, i64 tmp_dword!10
br label %bb18
bb32:
%90 = Extract i56 of i64 %57 <55, 0>
%91 = Extract i8 of i64 %58 <63, 56>
%89 = Concat i64 i56 %90, i8 %91
tmp_dword!16 = store i64 %89, i64 tmp_dword!10
br label %bb18
bb33:
PC!14 = phi ite %95 %96 %98
PC!15 = store i64 PC!14, i64 PC!14
PC!16 = store i64 PC!14, i64 PC!15
ret void

Created file: memset.bin.smt2
