Analyzing file: sum.bin...
bge zero, a1, 26
addiw a4, a1, -1
slli a4, a4, 0x20
addi a3, a0, 4
srli a4, a4, 0x1e
addi a5, a0, 0
add a4, a4, a3
addi a0, zero, 0
lw a3, 0(a5)
addi a5, a5, 4
addw a0, a3, a0
bne a4, a5, -6
jalr zero, ra, 0
addi a0, zero, 0
jalr zero, ra, 0
COMPILE
insn_0.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 0} X, func void [i5] {i5 11} X, func void [i12] {i12 26} BRANCH_IMM} bge} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_0.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb10
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i12]]] {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 0} X, func void [i5] {i5 11} X, func void [i12] {i12 26} BRANCH_IMM} bge} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
%20 = Disclose i5 of func i64 [i5] %10 i32 0
%21 = load i64, [32, i64] XREG[%20]
%12 = i1 Sge i64 %19, %21
br i1 %12, label %bb8, label %bb9
bb8:
br label %bb13
bb9:
br label %bb6
bb10:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7
bb11:
%14 = Sext i12 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb12:
%13 = i12 Use i12 %22
br label %bb11
bb13:
%22 = Disclose void of func i12 [] %11 i32 0
br label %bb12

propagate
insn_0.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%13 = load i64, [32, i64] XREG[0]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Sge i64 %13, %14
br i1 %8, label %bb5, label %bb6
bb5:
br label %bb7
bb6:
br label %bb8
bb7:
br label %bb9
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb10, label %bb11
bb9:
br label %bb12
bb10:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb11:
br label %bb13
bb12:
%9 = Sext i12 26 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_0.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[0]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Sge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 26 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_1.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 14} X, func void [i5] {i5 11} X, i12 4095} addiw} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_1.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 14} X, func void [i5] {i5 11} X, i12 4095} addiw} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i32
%16 = Disclose i5 of func i64 [i5] %10 i32 0
%17 = load i64, [32, i64] XREG[%16]
%13 = Extract i32 of i64 %17 <31, 0>
%14 = i32 Add i32 %13, %12
%15 = Sext i32 %14 to i64
%18 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %15, [32, i64] XREG[%18]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_1.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4095 to i32
%12 = load i64, [32, i64] XREG[11]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, %8
%11 = Sext i32 %10 to i64
store i64 %11, [32, i64] XREG[14]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_1.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4095 to i32
%12 = load i64, [32, i64] XREG[11]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, %8
%11 = Sext i32 %10 to i64
store i64 %11, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_2.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i6] {func void [i5] {i5 14} X, func void [i5] {i5 14} X, i6 32} slli} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_2.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i6]] {func void [func void [i5], func void [i5], i6] {func void [i5] {i5 14} X, func void [i5] {i5 14} X, i6 32} slli} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%13 = Disclose i5 of func i64 [i5] %10 i32 0
%14 = load i64, [32, i64] XREG[%13]
%12 = i64 Shl i64 %14, %11
%15 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %12, [32, i64] XREG[%15]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_2.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%9 = load i64, [32, i64] XREG[14]
%8 = i64 Shl i64 %9, 32
store i64 %8, [32, i64] XREG[14]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_2.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[14]
%8 = i64 Shl i64 %9, 32
store i64 %8, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_3.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 10} X, i12 4} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_3.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 10} X, i12 4} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_3.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_3.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_4.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i6] {func void [i5] {i5 14} X, func void [i5] {i5 14} X, i6 30} srli} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_4.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i6]] {func void [func void [i5], func void [i5], i6] {func void [i5] {i5 14} X, func void [i5] {i5 14} X, i6 30} srli} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%13 = Disclose i5 of func i64 [i5] %10 i32 0
%14 = load i64, [32, i64] XREG[%13]
%12 = i64 Lshr i64 %14, %11
%15 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %12, [32, i64] XREG[%15]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_4.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%9 = load i64, [32, i64] XREG[14]
%8 = i64 Lshr i64 %9, 30
store i64 %8, [32, i64] XREG[14]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_4.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[14]
%8 = i64 Lshr i64 %9, 30
store i64 %8, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_5.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 10} X, i12 0} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_5.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 10} X, i12 0} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_5.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_5.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_6.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 14} X, func void [i5] {i5 14} X, func void [i5] {i5 13} X} add} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_6.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i5]]] {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 14} X, func void [i5] {i5 14} X, func void [i5] {i5 13} X} add} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%13 = Disclose i5 of func i64 [i5] %10 i32 0
%14 = load i64, [32, i64] XREG[%13]
%15 = Disclose i5 of func i64 [i5] %11 i32 0
%16 = load i64, [32, i64] XREG[%15]
%12 = i64 Add i64 %14, %16
%17 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %12, [32, i64] XREG[%17]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_6.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%9 = load i64, [32, i64] XREG[14]
%10 = load i64, [32, i64] XREG[13]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[14]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_6.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[14]
%10 = load i64, [32, i64] XREG[13]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_7.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 10} X, func void [i5] {i5 0} X, i12 0} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_7.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 10} X, func void [i5] {i5 0} X, i12 0} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_7.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_7.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_8.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 15} X, i12 0} lw} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_8.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb15
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 13} X, func void [i5] {i5 15} X, i12 0} lw} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%15 = Disclose i5 of func i64 [i5] %10 i32 0
%16 = load i64, [32, i64] XREG[%15]
%13 = i64 Add i64 %16, %12
store i64 %13, i64 tmp_address
%14 = load i64, i64 tmp_address
%18 = i64 Lshr i64 %14, 3
%19 = Extract i53 of i64 %18 <52, 0>
store i53 %19, i53 mem_index
%20 = Extract i3 of i64 %14 <2, 0>
%21 = Zext i3 %20 to i6
%22 = i6 Mul i6 %21, 8
store i6 %22, i6 tmp_bit_offset
%23 = Extract i3 of i64 %14 <2, 0>
%24 = i1 Ult i3 %23, -3
br i1 %24, label %bb8, label %bb9
bb8:
%25 = load i6, i6 tmp_bit_offset
%26 = load i6, i6 tmp_bit_offset
%27 = i6 Add i6 %26, 31
%28 = load i53, i53 mem_index
%29 = load i64, [9007199254740992, i64] MEM[%28]
%30 = Extract i32 of i64 %29 <%27, %25>
store i32 %30, i32 tmp_word
br label %bb10
bb9:
%31 = load i53, i53 mem_index
%32 = i53 Add i53 %31, 1
%33 = load i64, [9007199254740992, i64] MEM[%32]
store i64 %33, i64 tmp_dword1
%34 = load i53, i53 mem_index
%35 = load i64, [9007199254740992, i64] MEM[%34]
store i64 %35, i64 tmp_dword2
%36 = Extract i2 of i64 %14 <1, 0>
%37 = i1 Eq i2 %36, 1
br i1 %37, label %bb11, label %bb12
bb10:
%55 = load i32, i32 tmp_word
%56 = Sext i32 %55 to i64
store i64 %56, i64 rd_var
%17 = load i64, i64 rd_var
%57 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %17, [32, i64] XREG[%57]
br label %bb6
bb11:
%39 = load i64, i64 tmp_dword1
%40 = Extract i8 of i64 %39 <7, 0>
%41 = load i64, i64 tmp_dword2
%42 = Extract i24 of i64 %41 <63, 40>
%38 = Concat i32 i8 %40, i24 %42
store i32 %38, i32 tmp_word
br label %bb10
bb12:
%43 = Extract i2 of i64 %14 <1, 0>
%44 = i1 Eq i2 %43, -2
br i1 %44, label %bb13, label %bb14
bb13:
%46 = load i64, i64 tmp_dword1
%47 = Extract i16 of i64 %46 <15, 0>
%48 = load i64, i64 tmp_dword2
%49 = Extract i16 of i64 %48 <63, 48>
%45 = Concat i32 i16 %47, i16 %49
store i32 %45, i32 tmp_word
br label %bb10
bb14:
%51 = load i64, i64 tmp_dword1
%52 = Extract i24 of i64 %51 <23, 0>
%53 = load i64, i64 tmp_dword2
%54 = Extract i8 of i64 %53 <63, 56>
%50 = Concat i32 i24 %52, i8 %54
store i32 %50, i32 tmp_word
br label %bb10
bb15:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_8.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = Zext i3 %15 to i6
%17 = i6 Mul i6 %16, 8
store i6 %17, i6 tmp_bit_offset
%18 = Extract i3 of i64 %10 <2, 0>
%19 = i1 Ult i3 %18, -3
br i1 %19, label %bb5, label %bb6
bb5:
%20 = load i6, i6 tmp_bit_offset
%21 = load i6, i6 tmp_bit_offset
%22 = i6 Add i6 %21, 31
%23 = load i53, i53 mem_index
%24 = load i64, [9007199254740992, i64] MEM[%23]
%25 = Extract i32 of i64 %24 <%22, %20>
store i32 %25, i32 tmp_word
br label %bb7
bb6:
%26 = load i53, i53 mem_index
%27 = i53 Add i53 %26, 1
%28 = load i64, [9007199254740992, i64] MEM[%27]
store i64 %28, i64 tmp_dword1
%29 = load i53, i53 mem_index
%30 = load i64, [9007199254740992, i64] MEM[%29]
store i64 %30, i64 tmp_dword2
%31 = Extract i2 of i64 %10 <1, 0>
%32 = i1 Eq i2 %31, 1
br i1 %32, label %bb8, label %bb9
bb7:
%50 = load i32, i32 tmp_word
%51 = Sext i32 %50 to i64
store i64 %51, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[13]
br label %bb10
bb8:
%34 = load i64, i64 tmp_dword1
%35 = Extract i8 of i64 %34 <7, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i24 of i64 %36 <63, 40>
%33 = Concat i32 i8 %35, i24 %37
store i32 %33, i32 tmp_word
br label %bb7
bb9:
%38 = Extract i2 of i64 %10 <1, 0>
%39 = i1 Eq i2 %38, -2
br i1 %39, label %bb11, label %bb12
bb10:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb13, label %bb14
bb11:
%41 = load i64, i64 tmp_dword1
%42 = Extract i16 of i64 %41 <15, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i16 of i64 %43 <63, 48>
%40 = Concat i32 i16 %42, i16 %44
store i32 %40, i32 tmp_word
br label %bb7
bb12:
%46 = load i64, i64 tmp_dword1
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2
%49 = Extract i8 of i64 %48 <63, 56>
%45 = Concat i32 i24 %47, i8 %49
store i32 %45, i32 tmp_word
br label %bb7
bb13:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb15
bb14:
br label %bb15
bb15:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_8.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = Zext i3 %15 to i6
%17 = i6 Mul i6 %16, 8
store i6 %17, i6 tmp_bit_offset
%18 = Extract i3 of i64 %10 <2, 0>
%19 = i1 Ult i3 %18, -3
br i1 %19, label %bb1, label %bb2
bb1:
%20 = load i6, i6 tmp_bit_offset
%21 = load i6, i6 tmp_bit_offset
%22 = i6 Add i6 %21, 31
%23 = load i53, i53 mem_index
%24 = load i64, [9007199254740992, i64] MEM[%23]
%25 = Extract i32 of i64 %24 <%22, %20>
store i32 %25, i32 tmp_word
br label %bb3
bb2:
%26 = load i53, i53 mem_index
%27 = i53 Add i53 %26, 1
%28 = load i64, [9007199254740992, i64] MEM[%27]
store i64 %28, i64 tmp_dword1
%29 = load i53, i53 mem_index
%30 = load i64, [9007199254740992, i64] MEM[%29]
store i64 %30, i64 tmp_dword2
%31 = Extract i2 of i64 %10 <1, 0>
%32 = i1 Eq i2 %31, 1
br i1 %32, label %bb4, label %bb5
bb3:
%50 = load i32, i32 tmp_word
%51 = Sext i32 %50 to i64
store i64 %51, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%34 = load i64, i64 tmp_dword1
%35 = Extract i8 of i64 %34 <7, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i24 of i64 %36 <63, 40>
%33 = Concat i32 i8 %35, i24 %37
store i32 %33, i32 tmp_word
br label %bb3
bb5:
%38 = Extract i2 of i64 %10 <1, 0>
%39 = i1 Eq i2 %38, -2
br i1 %39, label %bb6, label %bb7
bb6:
%41 = load i64, i64 tmp_dword1
%42 = Extract i16 of i64 %41 <15, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i16 of i64 %43 <63, 48>
%40 = Concat i32 i16 %42, i16 %44
store i32 %40, i32 tmp_word
br label %bb3
bb7:
%46 = load i64, i64 tmp_dword1
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2
%49 = Extract i8 of i64 %48 <63, 56>
%45 = Concat i32 i24 %47, i8 %49
store i32 %45, i32 tmp_word
br label %bb3
bb8:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb10
bb9:
br label %bb10
bb10:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_9.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 15} X, i12 4} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_9.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 15} X, func void [i5] {i5 15} X, i12 4} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_9.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_9.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_10.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 10} X, func void [i5] {i5 13} X, func void [i5] {i5 10} X} addw} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_10.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i5]]] {func void [func void [i5], func void [i5], func void [i5]] {func void [i5] {i5 10} X, func void [i5] {i5 13} X, func void [i5] {i5 10} X} addw} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%16 = Disclose i5 of func i64 [i5] %10 i32 0
%17 = load i64, [32, i64] XREG[%16]
%12 = Extract i32 of i64 %17 <31, 0>
%18 = Disclose i5 of func i64 [i5] %11 i32 0
%19 = load i64, [32, i64] XREG[%18]
%14 = Extract i32 of i64 %19 <31, 0>
%13 = i32 Add i32 %12, %14
%15 = Sext i32 %13 to i64
%20 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %15, [32, i64] XREG[%20]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_10.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%12 = load i64, [32, i64] XREG[13]
%8 = Extract i32 of i64 %12 <31, 0>
%13 = load i64, [32, i64] XREG[10]
%10 = Extract i32 of i64 %13 <31, 0>
%9 = i32 Add i32 %8, %10
%11 = Sext i32 %9 to i64
store i64 %11, [32, i64] XREG[10]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_10.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%12 = load i64, [32, i64] XREG[13]
%8 = Extract i32 of i64 %12 <31, 0>
%13 = load i64, [32, i64] XREG[10]
%10 = Extract i32 of i64 %13 <31, 0>
%9 = i32 Add i32 %8, %10
%11 = Sext i32 %9 to i64
store i64 %11, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_11.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 14} X, func void [i5] {i5 15} X, func void [i12] {i12 4090} BRANCH_IMM} bne} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_11.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb10
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], func void [i12]]] {func void [func void [i5], func void [i5], func void [i12]] {func void [i5] {i5 14} X, func void [i5] {i5 15} X, func void [i12] {i12 4090} BRANCH_IMM} bne} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%18 = Disclose i5 of func i64 [i5] %9 i32 0
%19 = load i64, [32, i64] XREG[%18]
%20 = Disclose i5 of func i64 [i5] %10 i32 0
%21 = load i64, [32, i64] XREG[%20]
%12 = i1 Ne i64 %19, %21
br i1 %12, label %bb8, label %bb9
bb8:
br label %bb13
bb9:
br label %bb6
bb10:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7
bb11:
%14 = Sext i12 %13 to i64
%15 = i64 Shl i64 %14, 1
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, %15
store i64 %17, i64 PC
br label %bb6
bb12:
%13 = i12 Use i12 %22
br label %bb11
bb13:
%22 = Disclose void of func i12 [] %11 i32 0
br label %bb12

propagate
insn_11.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%13 = load i64, [32, i64] XREG[14]
%14 = load i64, [32, i64] XREG[15]
%8 = i1 Ne i64 %13, %14
br i1 %8, label %bb5, label %bb6
bb5:
br label %bb7
bb6:
br label %bb8
bb7:
br label %bb9
bb8:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb10, label %bb11
bb9:
br label %bb12
bb10:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb13
bb11:
br label %bb13
bb12:
%9 = Sext i12 4090 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb8
bb13:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_11.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[14]
%14 = load i64, [32, i64] XREG[15]
%8 = i1 Ne i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4090 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_12.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 0} X, func void [i5] {i5 1} X, i12 0} jalr} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_12.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 0} X, func void [i5] {i5 1} X, i12 0} jalr} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, 4
%18 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%18]
%14 = Sext i12 %11 to i64
%15 = i64 Lshr i64 %14, 1
%16 = i64 Shl i64 %15, 1
%19 = Disclose i5 of func i64 [i5] %10 i32 0
%20 = load i64, [32, i64] XREG[%19]
%17 = i64 Add i64 %20, %16
store i64 %17, i64 PC
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_12.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_12.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_13.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 10} X, func void [i5] {i5 0} X, i12 0} addi} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_13.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 10} X, func void [i5] {i5 0} X, i12 0} addi} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = Sext i12 %11 to i64
%14 = Disclose i5 of func i64 [i5] %10 i32 0
%15 = load i64, [32, i64] XREG[%14]
%13 = i64 Add i64 %15, %12
%16 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%16]
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_13.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_13.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_14.action func void []
bb0:
call void instruction.action {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 0} X, func void [i5] {i5 1} X, i12 0} jalr} instruction ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
insn_14.action func void []
bb0:
br label %bb5
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
br label %bb8
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb1
bb4:
br label %bb1
bb5:
%2 = Disclose func void [] of func void [func void [func void [i5], func void [i5], i12]] {func void [func void [i5], func void [i5], i12] {func void [i5] {i5 0} X, func void [i5] {i5 1} X, i12 0} jalr} instruction i32 0
br label %bb2
bb6:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb7:
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, 4
%18 = Disclose i5 of func i64 [i5] %9 i32 0
store i64 %13, [32, i64] XREG[%18]
%14 = Sext i12 %11 to i64
%15 = i64 Lshr i64 %14, 1
%16 = i64 Shl i64 %15, 1
%19 = Disclose i5 of func i64 [i5] %10 i32 0
%20 = load i64, [32, i64] XREG[%19]
%17 = i64 Add i64 %20, %16
store i64 %17, i64 PC
br label %bb6
bb8:
%9 = Disclose i64 of func void [] %2 i32 0
%10 = Disclose func i64 [i5] of func void [] %2 i32 1
%11 = Disclose func i64 [i5] of func void [] %2 i32 2
br label %bb7

propagate
insn_14.action func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
br label %bb3
bb3:
br label %bb4
bb4:
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
br label %bb5
bb5:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb6, label %bb7
bb6:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
insn_14.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

COMPILE
insn_0.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[0]
%14 = load i64, [32, i64] XREG[11]
%8 = i1 Sge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 26 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%13 = load i64, [32, i64] XREG!2[0]
%14 = load i64, [32, i64] XREG!2[11]
%8 = i1 Sge i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 26 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC!1
%12 = i64 Add i64 %11, %10
PC!2 = store i64 %12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %8 PC!2 PC!1
%3 = load i64, i64 PC!3
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC!3
%7 = i64 Add i64 %6, 4
PC!6 = store i64 %7, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %4 PC!6 PC!3
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Sge i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!2 = store i64 52, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 52 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!3, 4
PC!6 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %1 %2 PC!3
PC!5 = store i64 PC!4, i64 PC!4
ret void

Nested SCCP
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!2[11]
%3 = i1 Sge i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!2 = store i64 52, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 52 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 0, 4
PC!6 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %3 52 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

SCCP forward
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Sge i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!2 = store i64 52, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %2 52 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!6 = store i64 4, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 52 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

cherry
insn_0.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!2[11]
%2 = i1 Sge i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!2 = store i64 52, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %2 52 0
%1 = i1 Eq i64 PC!3, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!6 = store i64 4, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 52 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

COMPILE
insn_1.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4095 to i32
%12 = load i64, [32, i64] XREG[11]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, %8
%11 = Sext i32 %10 to i64
store i64 %11, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4095 to i32
%12 = load i64, [32, i64] XREG!2[11]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, %8
%11 = Sext i32 %10 to i64
XREG!3 = store i64 %11, [32, i64] XREG!2[14]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[11]
%1 = Extract i32 of i64 %4 <31, 0>
%2 = i32 Add i32 %1, -1
%3 = Sext i32 %2 to i64
XREG!3 = store i64 %3, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[11]
%1 = Extract i32 of i64 %4 <31, 0>
%2 = i32 Add i32 %1, -1
%3 = Sext i32 %2 to i64
XREG!3 = store i64 %3, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[11]
%1 = Extract i32 of i64 %4 <31, 0>
%2 = i32 Add i32 %1, -1
%3 = Sext i32 %2 to i64
XREG!3 = store i64 %3, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_1.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[11]
%1 = Extract i32 of i64 %4 <31, 0>
%2 = i32 Add i32 %1, -1
%3 = Sext i32 %2 to i64
XREG!3 = store i64 %3, [32, i64] XREG!2[14]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_2.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[14]
%8 = i64 Shl i64 %9, 32
store i64 %8, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%9 = load i64, [32, i64] XREG!2[14]
%8 = i64 Shl i64 %9, 32
XREG!3 = store i64 %8, [32, i64] XREG!2[14]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%1 = i64 Shl i64 %2, 32
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%1 = i64 Shl i64 %2, 32
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%1 = i64 Shl i64 %2, 32
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_2.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%1 = i64 Shl i64 %2, 32
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_3.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG!2[10]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[13]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_3.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[13]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_4.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[14]
%8 = i64 Lshr i64 %9, 30
store i64 %8, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%9 = load i64, [32, i64] XREG!2[14]
%8 = i64 Lshr i64 %9, 30
XREG!3 = store i64 %8, [32, i64] XREG!2[14]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%1 = i64 Lshr i64 %2, 30
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%1 = i64 Lshr i64 %2, 30
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%1 = i64 Lshr i64 %2, 30
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_4.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%1 = i64 Lshr i64 %2, 30
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_5.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[10]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG!2[10]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_5.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[10]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_6.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%9 = load i64, [32, i64] XREG[14]
%10 = load i64, [32, i64] XREG[13]
%8 = i64 Add i64 %9, %10
store i64 %8, [32, i64] XREG[14]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%9 = load i64, [32, i64] XREG!2[14]
%10 = load i64, [32, i64] XREG!2[13]
%8 = i64 Add i64 %9, %10
XREG!3 = store i64 %8, [32, i64] XREG!2[14]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_6.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[14]
%3 = load i64, [32, i64] XREG!2[13]
%1 = i64 Add i64 %2, %3
XREG!3 = store i64 %1, [32, i64] XREG!2[14]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_7.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[10]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_7.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_8.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, %8
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = Zext i3 %15 to i6
%17 = i6 Mul i6 %16, 8
store i6 %17, i6 tmp_bit_offset
%18 = Extract i3 of i64 %10 <2, 0>
%19 = i1 Ult i3 %18, -3
br i1 %19, label %bb1, label %bb2
bb1:
%20 = load i6, i6 tmp_bit_offset
%21 = load i6, i6 tmp_bit_offset
%22 = i6 Add i6 %21, 31
%23 = load i53, i53 mem_index
%24 = load i64, [9007199254740992, i64] MEM[%23]
%25 = Extract i32 of i64 %24 <%22, %20>
store i32 %25, i32 tmp_word
br label %bb3
bb2:
%26 = load i53, i53 mem_index
%27 = i53 Add i53 %26, 1
%28 = load i64, [9007199254740992, i64] MEM[%27]
store i64 %28, i64 tmp_dword1
%29 = load i53, i53 mem_index
%30 = load i64, [9007199254740992, i64] MEM[%29]
store i64 %30, i64 tmp_dword2
%31 = Extract i2 of i64 %10 <1, 0>
%32 = i1 Eq i2 %31, 1
br i1 %32, label %bb4, label %bb5
bb3:
%50 = load i32, i32 tmp_word
%51 = Sext i32 %50 to i64
store i64 %51, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[13]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%34 = load i64, i64 tmp_dword1
%35 = Extract i8 of i64 %34 <7, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i24 of i64 %36 <63, 40>
%33 = Concat i32 i8 %35, i24 %37
store i32 %33, i32 tmp_word
br label %bb3
bb5:
%38 = Extract i2 of i64 %10 <1, 0>
%39 = i1 Eq i2 %38, -2
br i1 %39, label %bb6, label %bb7
bb6:
%41 = load i64, i64 tmp_dword1
%42 = Extract i16 of i64 %41 <15, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i16 of i64 %43 <63, 48>
%40 = Concat i32 i16 %42, i16 %44
store i32 %40, i32 tmp_word
br label %bb3
bb7:
%46 = load i64, i64 tmp_dword1
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2
%49 = Extract i8 of i64 %48 <63, 56>
%45 = Concat i32 i24 %47, i8 %49
store i32 %45, i32 tmp_word
br label %bb3
bb8:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb10
bb9:
br label %bb10
bb10:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG!2[15]
%9 = i64 Add i64 %11, %8
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = Zext i3 %15 to i6
%17 = i6 Mul i6 %16, 8
tmp_bit_offset!2 = store i6 %17, i6 tmp_bit_offset!1
%18 = Extract i3 of i64 %10 <2, 0>
%19 = i1 Ult i3 %18, -3
br i1 %19, label %bb1, label %bb2
bb1:
%20 = load i6, i6 tmp_bit_offset!2
%21 = load i6, i6 tmp_bit_offset!2
%22 = i6 Add i6 %21, 31
%23 = load i53, i53 mem_index!2
%24 = load i64, [9007199254740992, i64] MEM!1[%23]
%25 = Extract i32 of i64 %24 <%22, %20>
tmp_word!3 = store i32 %25, i32 tmp_word!1
br label %bb3
bb2:
%26 = load i53, i53 mem_index!2
%27 = i53 Add i53 %26, 1
%28 = load i64, [9007199254740992, i64] MEM!1[%27]
tmp_dword1!3 = store i64 %28, i64 tmp_dword1!1
%29 = load i53, i53 mem_index!2
%30 = load i64, [9007199254740992, i64] MEM!1[%29]
tmp_dword2!3 = store i64 %30, i64 tmp_dword2!1
%31 = Extract i2 of i64 %10 <1, 0>
%32 = i1 Eq i2 %31, 1
br i1 %32, label %bb4, label %bb5
bb3:
tmp_word!2 = phi ite %19 tmp_word!3 ite %32 tmp_word!4 ite %39 tmp_word!5 tmp_word!6
tmp_dword2!2 = phi ite %19 tmp_dword2!1 tmp_dword2!3
tmp_dword1!2 = phi ite %19 tmp_dword1!1 tmp_dword1!3
%50 = load i32, i32 tmp_word!2
%51 = Sext i32 %50 to i64
rd_var!2 = store i64 %51, i64 rd_var!1
%12 = load i64, i64 rd_var!2
XREG!3 = store i64 %12, [32, i64] XREG!2[13]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb8, label %bb9
bb4:
%34 = load i64, i64 tmp_dword1!3
%35 = Extract i8 of i64 %34 <7, 0>
%36 = load i64, i64 tmp_dword2!3
%37 = Extract i24 of i64 %36 <63, 40>
%33 = Concat i32 i8 %35, i24 %37
tmp_word!4 = store i32 %33, i32 tmp_word!1
br label %bb3
bb5:
%38 = Extract i2 of i64 %10 <1, 0>
%39 = i1 Eq i2 %38, -2
br i1 %39, label %bb6, label %bb7
bb6:
%41 = load i64, i64 tmp_dword1!3
%42 = Extract i16 of i64 %41 <15, 0>
%43 = load i64, i64 tmp_dword2!3
%44 = Extract i16 of i64 %43 <63, 48>
%40 = Concat i32 i16 %42, i16 %44
tmp_word!5 = store i32 %40, i32 tmp_word!1
br label %bb3
bb7:
%46 = load i64, i64 tmp_dword1!3
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2!3
%49 = Extract i8 of i64 %48 <63, 56>
%45 = Concat i32 i24 %47, i8 %49
tmp_word!6 = store i32 %45, i32 tmp_word!1
br label %bb3
bb8:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb10
bb9:
br label %bb10
bb10:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = Zext i3 %5 to i6
%7 = i6 Mul i6 %6, 8
tmp_bit_offset!2 = store i6 %7, i6 tmp_bit_offset!1
%8 = Extract i3 of i64 %1 <2, 0>
%9 = i1 Ult i3 %8, -3
br i1 %9, label %bb1, label %bb2
bb1:
%10 = i6 Add i6 %7, 31
%11 = load i64, [9007199254740992, i64] MEM!1[%4]
%12 = Extract i32 of i64 %11 <%10, %7>
tmp_word!3 = store i32 %12, i32 tmp_word!1
br label %bb3
bb2:
%13 = i53 Add i53 %4, 1
%14 = load i64, [9007199254740992, i64] MEM!1[%13]
tmp_dword1!3 = store i64 %14, i64 tmp_dword1!1
%15 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %15, i64 tmp_dword2!1
%16 = Extract i2 of i64 %1 <1, 0>
%17 = i1 Eq i2 %16, 1
br i1 %17, label %bb4, label %bb5
bb3:
tmp_word!2 = phi ite %9 %12 ite %17 %18 ite %22 %23 %26
tmp_dword2!2 = phi ite %9 tmp_dword2!1 %15
tmp_dword1!2 = phi ite %9 tmp_dword1!1 %14
%29 = Sext i32 tmp_word!2 to i64
rd_var!2 = store i64 %29, i64 rd_var!1
XREG!3 = store i64 %29, [32, i64] XREG!2[13]
br label %bb6
bb4:
%19 = Extract i8 of i64 %14 <7, 0>
%20 = Extract i24 of i64 %15 <63, 40>
%18 = Concat i32 i8 %19, i24 %20
tmp_word!4 = store i32 %18, i32 tmp_word!1
br label %bb3
bb5:
%21 = Extract i2 of i64 %1 <1, 0>
%22 = i1 Eq i2 %21, -2
br i1 %22, label %bb7, label %bb8
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb9
bb7:
%24 = Extract i16 of i64 %14 <15, 0>
%25 = Extract i16 of i64 %15 <63, 48>
%23 = Concat i32 i16 %24, i16 %25
tmp_word!5 = store i32 %23, i32 tmp_word!1
br label %bb3
bb8:
%27 = Extract i24 of i64 %14 <23, 0>
%28 = Extract i8 of i64 %15 <63, 56>
%26 = Concat i32 i24 %27, i8 %28
tmp_word!6 = store i32 %26, i32 tmp_word!1
br label %bb3
bb9:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = Zext i3 %5 to i6
%7 = i6 Mul i6 %6, 8
tmp_bit_offset!2 = store i6 %7, i6 tmp_bit_offset!1
%8 = Extract i3 of i64 %1 <2, 0>
%9 = i1 Ult i3 %8, -3
br i1 %9, label %bb1, label %bb2
bb1:
%10 = i6 Add i6 %7, 31
%11 = load i64, [9007199254740992, i64] MEM!1[%4]
%12 = Extract i32 of i64 %11 <%10, %7>
tmp_word!3 = store i32 %12, i32 tmp_word!1
br label %bb3
bb2:
%13 = i53 Add i53 %4, 1
%14 = load i64, [9007199254740992, i64] MEM!1[%13]
tmp_dword1!3 = store i64 %14, i64 tmp_dword1!1
%15 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %15, i64 tmp_dword2!1
%16 = Extract i2 of i64 %1 <1, 0>
%17 = i1 Eq i2 %16, 1
br i1 %17, label %bb4, label %bb5
bb3:
tmp_word!2 = phi ite %9 %12 ite %17 %18 ite %22 %23 %26
tmp_dword2!2 = phi ite %9 tmp_dword2!1 %15
tmp_dword1!2 = phi ite %9 tmp_dword1!1 %14
%29 = Sext i32 tmp_word!2 to i64
rd_var!2 = store i64 %29, i64 rd_var!1
XREG!3 = store i64 %29, [32, i64] XREG!2[13]
br label %bb6
bb4:
%19 = Extract i8 of i64 %14 <7, 0>
%20 = Extract i24 of i64 %15 <63, 40>
%18 = Concat i32 i8 %19, i24 %20
tmp_word!4 = store i32 %18, i32 tmp_word!1
br label %bb3
bb5:
%21 = Extract i2 of i64 %1 <1, 0>
%22 = i1 Eq i2 %21, -2
br i1 %22, label %bb7, label %bb8
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb9
bb7:
%24 = Extract i16 of i64 %14 <15, 0>
%25 = Extract i16 of i64 %15 <63, 48>
%23 = Concat i32 i16 %24, i16 %25
tmp_word!5 = store i32 %23, i32 tmp_word!1
br label %bb3
bb8:
%27 = Extract i24 of i64 %14 <23, 0>
%28 = Extract i8 of i64 %15 <63, 56>
%26 = Concat i32 i24 %27, i8 %28
tmp_word!6 = store i32 %26, i32 tmp_word!1
br label %bb3
bb9:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = Zext i3 %5 to i6
%7 = i6 Mul i6 %6, 8
tmp_bit_offset!2 = store i6 %7, i6 tmp_bit_offset!1
%8 = Extract i3 of i64 %1 <2, 0>
%9 = i1 Ult i3 %8, -3
br i1 %9, label %bb1, label %bb2
bb1:
%10 = i6 Add i6 %7, 31
%11 = load i64, [9007199254740992, i64] MEM!1[%4]
%12 = Extract i32 of i64 %11 <%10, %7>
tmp_word!3 = store i32 %12, i32 tmp_word!1
br label %bb3
bb2:
%13 = i53 Add i53 %4, 1
%14 = load i64, [9007199254740992, i64] MEM!1[%13]
tmp_dword1!3 = store i64 %14, i64 tmp_dword1!1
%15 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %15, i64 tmp_dword2!1
%16 = Extract i2 of i64 %1 <1, 0>
%17 = i1 Eq i2 %16, 1
br i1 %17, label %bb4, label %bb5
bb3:
tmp_word!2 = phi ite %9 %12 ite %17 %18 ite %22 %23 %26
tmp_dword2!2 = phi ite %9 tmp_dword2!1 %15
tmp_dword1!2 = phi ite %9 tmp_dword1!1 %14
%29 = Sext i32 tmp_word!2 to i64
rd_var!2 = store i64 %29, i64 rd_var!1
XREG!3 = store i64 %29, [32, i64] XREG!2[13]
br label %bb6
bb4:
%19 = Extract i8 of i64 %14 <7, 0>
%20 = Extract i24 of i64 %15 <63, 40>
%18 = Concat i32 i8 %19, i24 %20
tmp_word!4 = store i32 %18, i32 tmp_word!1
br label %bb3
bb5:
%21 = Extract i2 of i64 %1 <1, 0>
%22 = i1 Eq i2 %21, -2
br i1 %22, label %bb7, label %bb8
bb6:
PC!2 = store i64 4, i64 PC!1
br label %bb9
bb7:
%24 = Extract i16 of i64 %14 <15, 0>
%25 = Extract i16 of i64 %15 <63, 48>
%23 = Concat i32 i16 %24, i16 %25
tmp_word!5 = store i32 %23, i32 tmp_word!1
br label %bb3
bb8:
%27 = Extract i24 of i64 %14 <23, 0>
%28 = Extract i8 of i64 %15 <63, 56>
%26 = Concat i32 i24 %27, i8 %28
tmp_word!6 = store i32 %26, i32 tmp_word!1
br label %bb3
bb9:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_8.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 0
tmp_address!2 = store i64 %1, i64 tmp_address!1
%3 = i64 Lshr i64 %1, 3
%4 = Extract i53 of i64 %3 <52, 0>
mem_index!2 = store i53 %4, i53 mem_index!1
%5 = Extract i3 of i64 %1 <2, 0>
%6 = Zext i3 %5 to i6
%7 = i6 Mul i6 %6, 8
tmp_bit_offset!2 = store i6 %7, i6 tmp_bit_offset!1
%8 = Extract i3 of i64 %1 <2, 0>
%9 = i1 Ult i3 %8, -3
br i1 %9, label %bb1, label %bb2
bb1:
%10 = i6 Add i6 %7, 31
%11 = load i64, [9007199254740992, i64] MEM!1[%4]
%12 = Extract i32 of i64 %11 <%10, %7>
tmp_word!3 = store i32 %12, i32 tmp_word!1
br label %bb3
bb2:
%13 = i53 Add i53 %4, 1
%14 = load i64, [9007199254740992, i64] MEM!1[%13]
tmp_dword1!3 = store i64 %14, i64 tmp_dword1!1
%15 = load i64, [9007199254740992, i64] MEM!1[%4]
tmp_dword2!3 = store i64 %15, i64 tmp_dword2!1
%16 = Extract i2 of i64 %1 <1, 0>
%17 = i1 Eq i2 %16, 1
br i1 %17, label %bb4, label %bb5
bb3:
tmp_word!2 = phi ite %9 %12 ite %17 %18 ite %22 %23 %26
tmp_dword2!2 = phi ite %9 tmp_dword2!1 %15
tmp_dword1!2 = phi ite %9 tmp_dword1!1 %14
%29 = Sext i32 tmp_word!2 to i64
rd_var!2 = store i64 %29, i64 rd_var!1
XREG!3 = store i64 %29, [32, i64] XREG!2[13]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void
bb4:
%19 = Extract i8 of i64 %14 <7, 0>
%20 = Extract i24 of i64 %15 <63, 40>
%18 = Concat i32 i8 %19, i24 %20
tmp_word!4 = store i32 %18, i32 tmp_word!1
br label %bb3
bb5:
%21 = Extract i2 of i64 %1 <1, 0>
%22 = i1 Eq i2 %21, -2
br i1 %22, label %bb6, label %bb7
bb6:
%24 = Extract i16 of i64 %14 <15, 0>
%25 = Extract i16 of i64 %15 <63, 48>
%23 = Concat i32 i16 %24, i16 %25
tmp_word!5 = store i32 %23, i32 tmp_word!1
br label %bb3
bb7:
%27 = Extract i24 of i64 %14 <23, 0>
%28 = Extract i8 of i64 %15 <63, 56>
%26 = Concat i32 i24 %27, i8 %28
tmp_word!6 = store i32 %26, i32 tmp_word!1
br label %bb3

COMPILE
insn_9.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[15]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 4 to i64
%10 = load i64, [32, i64] XREG!2[15]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[15]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_9.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[15]
%1 = i64 Add i64 %2, 4
XREG!3 = store i64 %1, [32, i64] XREG!2[15]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_10.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%12 = load i64, [32, i64] XREG[13]
%8 = Extract i32 of i64 %12 <31, 0>
%13 = load i64, [32, i64] XREG[10]
%10 = Extract i32 of i64 %13 <31, 0>
%9 = i32 Add i32 %8, %10
%11 = Sext i32 %9 to i64
store i64 %11, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%12 = load i64, [32, i64] XREG!2[13]
%8 = Extract i32 of i64 %12 <31, 0>
%13 = load i64, [32, i64] XREG!2[10]
%10 = Extract i32 of i64 %13 <31, 0>
%9 = i32 Add i32 %8, %10
%11 = Sext i32 %9 to i64
XREG!3 = store i64 %11, [32, i64] XREG!2[10]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!4 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %4 PC!4 PC!1
%1 = load i64, i64 PC!2
PC!3 = store i64 %1, i64 PC!2
ret void

SSA forward
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[13]
%1 = Extract i32 of i64 %5 <31, 0>
%6 = load i64, [32, i64] XREG!2[10]
%3 = Extract i32 of i64 %6 <31, 0>
%2 = i32 Add i32 %1, %3
%4 = Sext i32 %2 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

Nested SCCP
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[13]
%1 = Extract i32 of i64 %5 <31, 0>
%6 = load i64, [32, i64] XREG!2[10]
%3 = Extract i32 of i64 %6 <31, 0>
%2 = i32 Add i32 %1, %3
%4 = Sext i32 %2 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

SCCP forward
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[13]
%1 = Extract i32 of i64 %5 <31, 0>
%6 = load i64, [32, i64] XREG!2[10]
%3 = Extract i32 of i64 %6 <31, 0>
%2 = i32 Add i32 %1, %3
%4 = Sext i32 %2 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!4 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

cherry
insn_10.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[13]
%1 = Extract i32 of i64 %5 <31, 0>
%6 = load i64, [32, i64] XREG!2[10]
%3 = Extract i32 of i64 %6 <31, 0>
%2 = i32 Add i32 %1, %3
%4 = Sext i32 %2 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[10]
PC!4 = store i64 4, i64 PC!1
store i64 4, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
ret void

COMPILE
insn_11.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%13 = load i64, [32, i64] XREG[14]
%14 = load i64, [32, i64] XREG[15]
%8 = i1 Ne i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4090 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC
%12 = i64 Add i64 %11, %10
store i64 %12, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%13 = load i64, [32, i64] XREG!2[14]
%14 = load i64, [32, i64] XREG!2[15]
%8 = i1 Ne i64 %13, %14
br i1 %8, label %bb1, label %bb2
bb1:
%9 = Sext i12 4090 to i64
%10 = i64 Shl i64 %9, 1
%11 = load i64, i64 PC!1
%12 = i64 Add i64 %11, %10
PC!6 = store i64 %12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %8 PC!6 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb4, label %bb5
bb4:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!3 = store i64 %7, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %4 PC!3 PC!2
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[14]
%5 = load i64, [32, i64] XREG!2[15]
%3 = i1 Ne i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!6 = store i64 -12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %3 -12 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!2, 4
PC!3 = store i64 %2, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %1 %2 PC!2
PC!5 = store i64 PC!4, i64 PC!4
ret void

Nested SCCP
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%4 = load i64, [32, i64] XREG!2[14]
%5 = load i64, [32, i64] XREG!2[15]
%3 = i1 Ne i64 %4, %5
br i1 %3, label %bb1, label %bb2
bb1:
PC!6 = store i64 -12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %3 -12 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 0, 4
PC!3 = store i64 %2, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %3 -12 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

SCCP forward
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[14]
%4 = load i64, [32, i64] XREG!2[15]
%2 = i1 Ne i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!6 = store i64 -12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %2 -12 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!3 = store i64 4, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 -12 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

cherry
insn_11.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[14]
%4 = load i64, [32, i64] XREG!2[15]
%2 = i1 Ne i64 %3, %4
br i1 %2, label %bb1, label %bb2
bb1:
PC!6 = store i64 -12, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %2 -12 0
%1 = i1 Eq i64 PC!2, 0
br i1 %1, label %bb4, label %bb5
bb4:
PC!3 = store i64 4, i64 PC!2
br label %bb6
bb5:
br label %bb6
bb6:
PC!4 = phi ite %2 -12 4
PC!5 = store i64 PC!4, i64 PC!4
ret void

COMPILE
insn_12.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_12.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = load i64, i64 PC!1
%9 = i64 Add i64 %8, 4
XREG!3 = store i64 %9, [32, i64] XREG!2[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG!3[1]
%13 = i64 Add i64 %14, %12
PC!2 = store i64 %13, i64 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!3 = store i64 %7, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %4 PC!3 PC!2
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
insn_12.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!3[1]
%3 = i64 Add i64 %4, 0
PC!2 = store i64 %3, i64 PC!1
%1 = i1 Eq i64 %3, 0
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %3, 4
PC!3 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 %2 %3
PC!5 = store i64 PC!4, i64 PC!4
ret void

Nested SCCP
insn_12.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!3[1]
%3 = i64 Add i64 %4, 0
PC!2 = store i64 %3, i64 PC!1
%1 = i1 Eq i64 %3, 0
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 0, 4
PC!3 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 %2 %3
PC!5 = store i64 PC!4, i64 PC!4
ret void

SCCP forward
insn_12.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%3 = load i64, [32, i64] XREG!3[1]
%2 = i64 Add i64 %3, 0
PC!2 = store i64 %2, i64 PC!1
%1 = i1 Eq i64 %2, 0
br i1 %1, label %bb1, label %bb2
bb1:
PC!3 = store i64 4, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 4 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

cherry
insn_12.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%3 = load i64, [32, i64] XREG!3[1]
%2 = i64 Add i64 %3, 0
PC!2 = store i64 %2, i64 PC!1
%1 = i1 Eq i64 %2, 0
br i1 %1, label %bb1, label %bb2
bb1:
PC!3 = store i64 4, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 4 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

COMPILE
insn_13.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, %8
store i64 %9, [32, i64] XREG[10]
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_13.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = Sext i12 0 to i64
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, %8
XREG!3 = store i64 %9, [32, i64] XREG!2[10]
%3 = load i64, i64 PC!1
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!1
%7 = i64 Add i64 %6, 4
PC!2 = store i64 %7, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %4 PC!2 PC!1
%1 = load i64, i64 PC!3
PC!4 = store i64 %1, i64 PC!3
ret void

SSA forward
insn_13.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

Nested SCCP
insn_13.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

SCCP forward
insn_13.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
br label %bb1
bb1:
PC!2 = store i64 4, i64 PC!1
br label %bb2
bb2:
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

cherry
insn_13.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
%2 = load i64, [32, i64] XREG!2[0]
%1 = i64 Add i64 %2, 0
XREG!3 = store i64 %1, [32, i64] XREG!2[10]
PC!2 = store i64 4, i64 PC!1
store i64 4, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
ret void

COMPILE
insn_14.action func void []
bb0:
store i64 0, [32, i64] XREG[0]
%2 = load i64, i64 PC
store i64 %2, i64 prev_pc
%8 = load i64, i64 PC
%9 = i64 Add i64 %8, 4
store i64 %9, [32, i64] XREG[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG[1]
%13 = i64 Add i64 %14, %12
store i64 %13, i64 PC
%3 = load i64, i64 PC
%5 = load i64, i64 prev_pc
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC
%7 = i64 Add i64 %6, 4
store i64 %7, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
insn_14.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%2 = load i64, i64 PC!1
prev_pc!2 = store i64 %2, i64 prev_pc!1
%8 = load i64, i64 PC!1
%9 = i64 Add i64 %8, 4
XREG!3 = store i64 %9, [32, i64] XREG!2[0]
%10 = Sext i12 0 to i64
%11 = i64 Lshr i64 %10, 1
%12 = i64 Shl i64 %11, 1
%14 = load i64, [32, i64] XREG!3[1]
%13 = i64 Add i64 %14, %12
PC!2 = store i64 %13, i64 PC!1
%3 = load i64, i64 PC!2
%5 = load i64, i64 prev_pc!2
%4 = i1 Eq i64 %3, %5
br i1 %4, label %bb1, label %bb2
bb1:
%6 = load i64, i64 PC!2
%7 = i64 Add i64 %6, 4
PC!3 = store i64 %7, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %4 PC!3 PC!2
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
insn_14.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!3[1]
%3 = i64 Add i64 %4, 0
PC!2 = store i64 %3, i64 PC!1
%1 = i1 Eq i64 %3, 0
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %3, 4
PC!3 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 %2 %3
PC!5 = store i64 PC!4, i64 PC!4
ret void

Nested SCCP
insn_14.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%4 = load i64, [32, i64] XREG!3[1]
%3 = i64 Add i64 %4, 0
PC!2 = store i64 %3, i64 PC!1
%1 = i1 Eq i64 %3, 0
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 0, 4
PC!3 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 %2 %3
PC!5 = store i64 PC!4, i64 PC!4
ret void

SCCP forward
insn_14.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%3 = load i64, [32, i64] XREG!3[1]
%2 = i64 Add i64 %3, 0
PC!2 = store i64 %2, i64 PC!1
%1 = i1 Eq i64 %2, 0
br i1 %1, label %bb1, label %bb2
bb1:
PC!3 = store i64 4, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 4 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

cherry
insn_14.action func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 0, i64 prev_pc!1
XREG!3 = store i64 4, [32, i64] XREG!2[0]
%3 = load i64, [32, i64] XREG!3[1]
%2 = i64 Add i64 %3, 0
PC!2 = store i64 %2, i64 PC!1
%1 = i1 Eq i64 %2, 0
br i1 %1, label %bb1, label %bb2
bb1:
PC!3 = store i64 4, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!4 = phi ite %1 4 %2
PC!5 = store i64 PC!4, i64 PC!4
ret void

COMPILE
bb_0 func void []
bb0:
call void insn_0.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_0 func void []
bb0:
br label %bb9
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%14 = load i64, [32, i64] XREG[0]
%15 = load i64, [32, i64] XREG[11]
%9 = i1 Sge i64 %14, %15
br i1 %9, label %bb3, label %bb4
bb3:
%10 = Sext i12 26 to i64
%11 = i64 Shl i64 %10, 1
%12 = load i64, i64 PC
%13 = i64 Add i64 %12, %11
store i64 %13, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb6, label %bb7
bb6:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb9:
br label %bb2

propagate
bb_0 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%12 = load i64, [32, i64] XREG[0]
%13 = load i64, [32, i64] XREG[11]
%9 = i1 Sge i64 %12, %13
br i1 %9, label %bb3, label %bb4
bb3:
%10 = load i64, i64 PC
%11 = i64 Add i64 %10, 52
store i64 %11, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb6, label %bb7
bb6:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb8
bb7:
br label %bb8
bb8:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb9
bb9:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_0 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%12 = load i64, [32, i64] XREG[0]
%13 = load i64, [32, i64] XREG[11]
%9 = i1 Sge i64 %12, %13
br i1 %9, label %bb1, label %bb2
bb1:
%10 = load i64, i64 PC
%11 = i64 Add i64 %10, 52
store i64 %11, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb4, label %bb5
bb4:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%2 = load i64, i64 PC
store i64 %2, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%12 = load i64, [32, i64] XREG!2[0]
%13 = load i64, [32, i64] XREG!2[11]
%9 = i1 Sge i64 %12, %13
br i1 %9, label %bb1, label %bb2
bb1:
%10 = load i64, i64 PC!1
%11 = i64 Add i64 %10, 52
PC!2 = store i64 %11, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %9 PC!2 PC!1
%4 = load i64, i64 PC!3
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb4, label %bb5
bb4:
%7 = load i64, i64 PC!3
%8 = i64 Add i64 %7, 4
PC!4 = store i64 %8, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %5 PC!4 PC!3
%2 = load i64, i64 PC!5
PC!6 = store i64 %2, i64 PC!5
%1 = load i64, i64 PC!6
PC!7 = store i64 %1, i64 PC!6
ret void

SSA forward
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[0]
%6 = load i64, [32, i64] XREG!2[11]
%3 = i1 Sge i64 %5, %6
br i1 %3, label %bb1, label %bb2
bb1:
%4 = i64 Add i64 PC!1, 52
PC!2 = store i64 %4, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 %4 PC!1
%1 = i1 Eq i64 PC!3, PC!1
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!3, 4
PC!4 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %1 %2 PC!3
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

Nested SCCP
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[0]
%6 = load i64, [32, i64] XREG!2[11]
%3 = i1 Sge i64 %5, %6
br i1 %3, label %bb1, label %bb2
bb1:
%4 = i64 Add i64 PC!1, 52
PC!2 = store i64 %4, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 %4 PC!1
%1 = i1 Eq i64 PC!3, PC!1
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!3, 4
PC!4 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %3 %4 %2
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

SCCP forward
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[0]
%6 = load i64, [32, i64] XREG!2[11]
%3 = i1 Sge i64 %5, %6
br i1 %3, label %bb1, label %bb2
bb1:
%4 = i64 Add i64 PC!1, 52
PC!2 = store i64 %4, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 %4 PC!1
%1 = i1 Eq i64 PC!3, PC!1
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!3, 4
PC!4 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %3 %4 %2
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

cherry
bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[0]
%6 = load i64, [32, i64] XREG!2[11]
%3 = i1 Sge i64 %5, %6
br i1 %3, label %bb1, label %bb2
bb1:
%4 = i64 Add i64 PC!1, 52
PC!2 = store i64 %4, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 %4 PC!1
%1 = i1 Eq i64 PC!3, PC!1
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!3, 4
PC!4 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %3 %4 %2
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

bb_0 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[0]
%6 = load i64, [32, i64] XREG!2[11]
%3 = i1 Sge i64 %5, %6
br i1 %3, label %bb1, label %bb2
bb1:
%4 = i64 Add i64 PC!1, 52
PC!2 = store i64 %4, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %3 %4 PC!1
%1 = i1 Eq i64 PC!3, PC!1
br i1 %1, label %bb4, label %bb5
bb4:
%2 = i64 Add i64 PC!3, 4
PC!4 = store i64 %2, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %3 %4 %2
PC!6 = store i64 PC!5, i64 PC!5
PC!7 = store i64 PC!5, i64 PC!6
ret void

COMPILE
bb_1 func void []
bb0:
call void insn_1.action %0 ()
call void insn_2.action %0 ()
call void insn_3.action %0 ()
call void insn_4.action %0 ()
call void insn_5.action %0 ()
call void insn_6.action %0 ()
call void insn_7.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_1 func void []
bb0:
br label %bb6
bb1:
br label %bb12
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 4095 to i32
%13 = load i64, [32, i64] XREG[11]
%10 = Extract i32 of i64 %13 <31, 0>
%11 = i32 Add i32 %10, %9
%12 = Sext i32 %11 to i64
store i64 %12, [32, i64] XREG[14]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
br label %bb18
bb8:
store i64 0, [32, i64] XREG[0]
%15 = load i64, i64 PC
store i64 %15, i64 prev_pc
%22 = load i64, [32, i64] XREG[14]
%21 = i64 Shl i64 %22, 32
store i64 %21, [32, i64] XREG[14]
%16 = load i64, i64 PC
%18 = load i64, i64 prev_pc
%17 = i1 Eq i64 %16, %18
br i1 %17, label %bb9, label %bb10
bb9:
%19 = load i64, i64 PC
%20 = i64 Add i64 %19, 4
store i64 %20, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%14 = load i64, i64 PC
store i64 %14, i64 PC
br label %bb7
bb12:
br label %bb8
bb13:
br label %bb24
bb14:
store i64 0, [32, i64] XREG[0]
%24 = load i64, i64 PC
store i64 %24, i64 prev_pc
%30 = Sext i12 4 to i64
%32 = load i64, [32, i64] XREG[10]
%31 = i64 Add i64 %32, %30
store i64 %31, [32, i64] XREG[13]
%25 = load i64, i64 PC
%27 = load i64, i64 prev_pc
%26 = i1 Eq i64 %25, %27
br i1 %26, label %bb15, label %bb16
bb15:
%28 = load i64, i64 PC
%29 = i64 Add i64 %28, 4
store i64 %29, i64 PC
br label %bb17
bb16:
br label %bb17
bb17:
%23 = load i64, i64 PC
store i64 %23, i64 PC
br label %bb13
bb18:
br label %bb14
bb19:
br label %bb30
bb20:
store i64 0, [32, i64] XREG[0]
%34 = load i64, i64 PC
store i64 %34, i64 prev_pc
%41 = load i64, [32, i64] XREG[14]
%40 = i64 Lshr i64 %41, 30
store i64 %40, [32, i64] XREG[14]
%35 = load i64, i64 PC
%37 = load i64, i64 prev_pc
%36 = i1 Eq i64 %35, %37
br i1 %36, label %bb21, label %bb22
bb21:
%38 = load i64, i64 PC
%39 = i64 Add i64 %38, 4
store i64 %39, i64 PC
br label %bb23
bb22:
br label %bb23
bb23:
%33 = load i64, i64 PC
store i64 %33, i64 PC
br label %bb19
bb24:
br label %bb20
bb25:
br label %bb36
bb26:
store i64 0, [32, i64] XREG[0]
%43 = load i64, i64 PC
store i64 %43, i64 prev_pc
%49 = Sext i12 0 to i64
%51 = load i64, [32, i64] XREG[10]
%50 = i64 Add i64 %51, %49
store i64 %50, [32, i64] XREG[15]
%44 = load i64, i64 PC
%46 = load i64, i64 prev_pc
%45 = i1 Eq i64 %44, %46
br i1 %45, label %bb27, label %bb28
bb27:
%47 = load i64, i64 PC
%48 = i64 Add i64 %47, 4
store i64 %48, i64 PC
br label %bb29
bb28:
br label %bb29
bb29:
%42 = load i64, i64 PC
store i64 %42, i64 PC
br label %bb25
bb30:
br label %bb26
bb31:
br label %bb42
bb32:
store i64 0, [32, i64] XREG[0]
%53 = load i64, i64 PC
store i64 %53, i64 prev_pc
%60 = load i64, [32, i64] XREG[14]
%61 = load i64, [32, i64] XREG[13]
%59 = i64 Add i64 %60, %61
store i64 %59, [32, i64] XREG[14]
%54 = load i64, i64 PC
%56 = load i64, i64 prev_pc
%55 = i1 Eq i64 %54, %56
br i1 %55, label %bb33, label %bb34
bb33:
%57 = load i64, i64 PC
%58 = i64 Add i64 %57, 4
store i64 %58, i64 PC
br label %bb35
bb34:
br label %bb35
bb35:
%52 = load i64, i64 PC
store i64 %52, i64 PC
br label %bb31
bb36:
br label %bb32
bb37:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb38:
store i64 0, [32, i64] XREG[0]
%63 = load i64, i64 PC
store i64 %63, i64 prev_pc
%69 = Sext i12 0 to i64
%71 = load i64, [32, i64] XREG[0]
%70 = i64 Add i64 %71, %69
store i64 %70, [32, i64] XREG[10]
%64 = load i64, i64 PC
%66 = load i64, i64 prev_pc
%65 = i1 Eq i64 %64, %66
br i1 %65, label %bb39, label %bb40
bb39:
%67 = load i64, i64 PC
%68 = i64 Add i64 %67, 4
store i64 %68, i64 PC
br label %bb41
bb40:
br label %bb41
bb41:
%62 = load i64, i64 PC
store i64 %62, i64 PC
br label %bb37
bb42:
br label %bb38

propagate
bb_1 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%12 = load i64, [32, i64] XREG[11]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, -1
%11 = Sext i32 %10 to i64
store i64 %11, [32, i64] XREG[14]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%14 = load i64, i64 PC
store i64 %14, i64 prev_pc
%21 = load i64, [32, i64] XREG[14]
%20 = i64 Shl i64 %21, 32
store i64 %20, [32, i64] XREG[14]
%15 = load i64, i64 PC
%17 = load i64, i64 prev_pc
%16 = i1 Eq i64 %15, %17
br i1 %16, label %bb9, label %bb10
bb9:
%18 = load i64, i64 PC
%19 = i64 Add i64 %18, 4
store i64 %19, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%13 = load i64, i64 PC
store i64 %13, i64 PC
br label %bb12
bb12:
br label %bb13
bb13:
br label %bb14
bb14:
store i64 0, [32, i64] XREG[0]
%23 = load i64, i64 PC
store i64 %23, i64 prev_pc
%30 = load i64, [32, i64] XREG[10]
%29 = i64 Add i64 %30, 4
store i64 %29, [32, i64] XREG[13]
%24 = load i64, i64 PC
%26 = load i64, i64 prev_pc
%25 = i1 Eq i64 %24, %26
br i1 %25, label %bb15, label %bb16
bb15:
%27 = load i64, i64 PC
%28 = i64 Add i64 %27, 4
store i64 %28, i64 PC
br label %bb17
bb16:
br label %bb17
bb17:
%22 = load i64, i64 PC
store i64 %22, i64 PC
br label %bb18
bb18:
br label %bb19
bb19:
br label %bb20
bb20:
store i64 0, [32, i64] XREG[0]
%32 = load i64, i64 PC
store i64 %32, i64 prev_pc
%39 = load i64, [32, i64] XREG[14]
%38 = i64 Lshr i64 %39, 30
store i64 %38, [32, i64] XREG[14]
%33 = load i64, i64 PC
%35 = load i64, i64 prev_pc
%34 = i1 Eq i64 %33, %35
br i1 %34, label %bb21, label %bb22
bb21:
%36 = load i64, i64 PC
%37 = i64 Add i64 %36, 4
store i64 %37, i64 PC
br label %bb23
bb22:
br label %bb23
bb23:
%31 = load i64, i64 PC
store i64 %31, i64 PC
br label %bb24
bb24:
br label %bb25
bb25:
br label %bb26
bb26:
store i64 0, [32, i64] XREG[0]
%41 = load i64, i64 PC
store i64 %41, i64 prev_pc
%48 = load i64, [32, i64] XREG[10]
%47 = i64 Add i64 %48, 0
store i64 %47, [32, i64] XREG[15]
%42 = load i64, i64 PC
%44 = load i64, i64 prev_pc
%43 = i1 Eq i64 %42, %44
br i1 %43, label %bb27, label %bb28
bb27:
%45 = load i64, i64 PC
%46 = i64 Add i64 %45, 4
store i64 %46, i64 PC
br label %bb29
bb28:
br label %bb29
bb29:
%40 = load i64, i64 PC
store i64 %40, i64 PC
br label %bb30
bb30:
br label %bb31
bb31:
br label %bb32
bb32:
store i64 0, [32, i64] XREG[0]
%50 = load i64, i64 PC
store i64 %50, i64 prev_pc
%57 = load i64, [32, i64] XREG[14]
%58 = load i64, [32, i64] XREG[13]
%56 = i64 Add i64 %57, %58
store i64 %56, [32, i64] XREG[14]
%51 = load i64, i64 PC
%53 = load i64, i64 prev_pc
%52 = i1 Eq i64 %51, %53
br i1 %52, label %bb33, label %bb34
bb33:
%54 = load i64, i64 PC
%55 = i64 Add i64 %54, 4
store i64 %55, i64 PC
br label %bb35
bb34:
br label %bb35
bb35:
%49 = load i64, i64 PC
store i64 %49, i64 PC
br label %bb36
bb36:
br label %bb37
bb37:
br label %bb38
bb38:
store i64 0, [32, i64] XREG[0]
%60 = load i64, i64 PC
store i64 %60, i64 prev_pc
%67 = load i64, [32, i64] XREG[0]
%66 = i64 Add i64 %67, 0
store i64 %66, [32, i64] XREG[10]
%61 = load i64, i64 PC
%63 = load i64, i64 prev_pc
%62 = i1 Eq i64 %61, %63
br i1 %62, label %bb39, label %bb40
bb39:
%64 = load i64, i64 PC
%65 = i64 Add i64 %64, 4
store i64 %65, i64 PC
br label %bb41
bb40:
br label %bb41
bb41:
%59 = load i64, i64 PC
store i64 %59, i64 PC
br label %bb42
bb42:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_1 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%12 = load i64, [32, i64] XREG[11]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, -1
%11 = Sext i32 %10 to i64
store i64 %11, [32, i64] XREG[14]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%14 = load i64, i64 PC
store i64 %14, i64 prev_pc
%21 = load i64, [32, i64] XREG[14]
%20 = i64 Shl i64 %21, 32
store i64 %20, [32, i64] XREG[14]
%15 = load i64, i64 PC
%17 = load i64, i64 prev_pc
%16 = i1 Eq i64 %15, %17
br i1 %16, label %bb4, label %bb5
bb4:
%18 = load i64, i64 PC
%19 = i64 Add i64 %18, 4
store i64 %19, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%13 = load i64, i64 PC
store i64 %13, i64 PC
store i64 0, [32, i64] XREG[0]
%23 = load i64, i64 PC
store i64 %23, i64 prev_pc
%30 = load i64, [32, i64] XREG[10]
%29 = i64 Add i64 %30, 4
store i64 %29, [32, i64] XREG[13]
%24 = load i64, i64 PC
%26 = load i64, i64 prev_pc
%25 = i1 Eq i64 %24, %26
br i1 %25, label %bb7, label %bb8
bb7:
%27 = load i64, i64 PC
%28 = i64 Add i64 %27, 4
store i64 %28, i64 PC
br label %bb9
bb8:
br label %bb9
bb9:
%22 = load i64, i64 PC
store i64 %22, i64 PC
store i64 0, [32, i64] XREG[0]
%32 = load i64, i64 PC
store i64 %32, i64 prev_pc
%39 = load i64, [32, i64] XREG[14]
%38 = i64 Lshr i64 %39, 30
store i64 %38, [32, i64] XREG[14]
%33 = load i64, i64 PC
%35 = load i64, i64 prev_pc
%34 = i1 Eq i64 %33, %35
br i1 %34, label %bb10, label %bb11
bb10:
%36 = load i64, i64 PC
%37 = i64 Add i64 %36, 4
store i64 %37, i64 PC
br label %bb12
bb11:
br label %bb12
bb12:
%31 = load i64, i64 PC
store i64 %31, i64 PC
store i64 0, [32, i64] XREG[0]
%41 = load i64, i64 PC
store i64 %41, i64 prev_pc
%48 = load i64, [32, i64] XREG[10]
%47 = i64 Add i64 %48, 0
store i64 %47, [32, i64] XREG[15]
%42 = load i64, i64 PC
%44 = load i64, i64 prev_pc
%43 = i1 Eq i64 %42, %44
br i1 %43, label %bb13, label %bb14
bb13:
%45 = load i64, i64 PC
%46 = i64 Add i64 %45, 4
store i64 %46, i64 PC
br label %bb15
bb14:
br label %bb15
bb15:
%40 = load i64, i64 PC
store i64 %40, i64 PC
store i64 0, [32, i64] XREG[0]
%50 = load i64, i64 PC
store i64 %50, i64 prev_pc
%57 = load i64, [32, i64] XREG[14]
%58 = load i64, [32, i64] XREG[13]
%56 = i64 Add i64 %57, %58
store i64 %56, [32, i64] XREG[14]
%51 = load i64, i64 PC
%53 = load i64, i64 prev_pc
%52 = i1 Eq i64 %51, %53
br i1 %52, label %bb16, label %bb17
bb16:
%54 = load i64, i64 PC
%55 = i64 Add i64 %54, 4
store i64 %55, i64 PC
br label %bb18
bb17:
br label %bb18
bb18:
%49 = load i64, i64 PC
store i64 %49, i64 PC
store i64 0, [32, i64] XREG[0]
%60 = load i64, i64 PC
store i64 %60, i64 prev_pc
%67 = load i64, [32, i64] XREG[0]
%66 = i64 Add i64 %67, 0
store i64 %66, [32, i64] XREG[10]
%61 = load i64, i64 PC
%63 = load i64, i64 prev_pc
%62 = i1 Eq i64 %61, %63
br i1 %62, label %bb19, label %bb20
bb19:
%64 = load i64, i64 PC
%65 = i64 Add i64 %64, 4
store i64 %65, i64 PC
br label %bb21
bb20:
br label %bb21
bb21:
%59 = load i64, i64 PC
store i64 %59, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%12 = load i64, [32, i64] XREG!2[11]
%9 = Extract i32 of i64 %12 <31, 0>
%10 = i32 Add i32 %9, -1
%11 = Sext i32 %10 to i64
XREG!3 = store i64 %11, [32, i64] XREG!2[14]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!23 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!2 = phi ite %5 PC!23 PC!1
%2 = load i64, i64 PC!2
PC!3 = store i64 %2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%14 = load i64, i64 PC!3
prev_pc!3 = store i64 %14, i64 prev_pc!2
%21 = load i64, [32, i64] XREG!4[14]
%20 = i64 Shl i64 %21, 32
XREG!5 = store i64 %20, [32, i64] XREG!4[14]
%15 = load i64, i64 PC!3
%17 = load i64, i64 prev_pc!3
%16 = i1 Eq i64 %15, %17
br i1 %16, label %bb4, label %bb5
bb4:
%18 = load i64, i64 PC!3
%19 = i64 Add i64 %18, 4
PC!4 = store i64 %19, i64 PC!3
br label %bb6
bb5:
br label %bb6
bb6:
PC!5 = phi ite %16 PC!4 PC!3
%13 = load i64, i64 PC!5
PC!6 = store i64 %13, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
%23 = load i64, i64 PC!6
prev_pc!4 = store i64 %23, i64 prev_pc!3
%30 = load i64, [32, i64] XREG!6[10]
%29 = i64 Add i64 %30, 4
XREG!7 = store i64 %29, [32, i64] XREG!6[13]
%24 = load i64, i64 PC!6
%26 = load i64, i64 prev_pc!4
%25 = i1 Eq i64 %24, %26
br i1 %25, label %bb7, label %bb8
bb7:
%27 = load i64, i64 PC!6
%28 = i64 Add i64 %27, 4
PC!22 = store i64 %28, i64 PC!6
br label %bb9
bb8:
br label %bb9
bb9:
PC!7 = phi ite %25 PC!22 PC!6
%22 = load i64, i64 PC!7
PC!8 = store i64 %22, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
%32 = load i64, i64 PC!8
prev_pc!5 = store i64 %32, i64 prev_pc!4
%39 = load i64, [32, i64] XREG!8[14]
%38 = i64 Lshr i64 %39, 30
XREG!9 = store i64 %38, [32, i64] XREG!8[14]
%33 = load i64, i64 PC!8
%35 = load i64, i64 prev_pc!5
%34 = i1 Eq i64 %33, %35
br i1 %34, label %bb10, label %bb11
bb10:
%36 = load i64, i64 PC!8
%37 = i64 Add i64 %36, 4
PC!9 = store i64 %37, i64 PC!8
br label %bb12
bb11:
br label %bb12
bb12:
PC!10 = phi ite %34 PC!9 PC!8
%31 = load i64, i64 PC!10
PC!11 = store i64 %31, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
%41 = load i64, i64 PC!11
prev_pc!6 = store i64 %41, i64 prev_pc!5
%48 = load i64, [32, i64] XREG!10[10]
%47 = i64 Add i64 %48, 0
XREG!11 = store i64 %47, [32, i64] XREG!10[15]
%42 = load i64, i64 PC!11
%44 = load i64, i64 prev_pc!6
%43 = i1 Eq i64 %42, %44
br i1 %43, label %bb13, label %bb14
bb13:
%45 = load i64, i64 PC!11
%46 = i64 Add i64 %45, 4
PC!21 = store i64 %46, i64 PC!11
br label %bb15
bb14:
br label %bb15
bb15:
PC!12 = phi ite %43 PC!21 PC!11
%40 = load i64, i64 PC!12
PC!13 = store i64 %40, i64 PC!12
XREG!12 = store i64 0, [32, i64] XREG!11[0]
%50 = load i64, i64 PC!13
prev_pc!7 = store i64 %50, i64 prev_pc!6
%57 = load i64, [32, i64] XREG!12[14]
%58 = load i64, [32, i64] XREG!12[13]
%56 = i64 Add i64 %57, %58
XREG!13 = store i64 %56, [32, i64] XREG!12[14]
%51 = load i64, i64 PC!13
%53 = load i64, i64 prev_pc!7
%52 = i1 Eq i64 %51, %53
br i1 %52, label %bb16, label %bb17
bb16:
%54 = load i64, i64 PC!13
%55 = i64 Add i64 %54, 4
PC!20 = store i64 %55, i64 PC!13
br label %bb18
bb17:
br label %bb18
bb18:
PC!14 = phi ite %52 PC!20 PC!13
%49 = load i64, i64 PC!14
PC!15 = store i64 %49, i64 PC!14
XREG!14 = store i64 0, [32, i64] XREG!13[0]
%60 = load i64, i64 PC!15
prev_pc!8 = store i64 %60, i64 prev_pc!7
%67 = load i64, [32, i64] XREG!14[0]
%66 = i64 Add i64 %67, 0
XREG!15 = store i64 %66, [32, i64] XREG!14[10]
%61 = load i64, i64 PC!15
%63 = load i64, i64 prev_pc!8
%62 = i1 Eq i64 %61, %63
br i1 %62, label %bb19, label %bb20
bb19:
%64 = load i64, i64 PC!15
%65 = i64 Add i64 %64, 4
PC!16 = store i64 %65, i64 PC!15
br label %bb21
bb20:
br label %bb21
bb21:
PC!17 = phi ite %62 PC!16 PC!15
%59 = load i64, i64 PC!17
PC!18 = store i64 %59, i64 PC!17
%1 = load i64, i64 PC!18
PC!19 = store i64 %1, i64 PC!18
ret void

SSA forward
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[11]
%2 = Extract i32 of i64 %5 <31, 0>
%3 = i32 Add i32 %2, -1
%4 = Sext i32 %3 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[14]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!23 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%8 = load i64, [32, i64] XREG!4[14]
%7 = i64 Shl i64 %8, 32
XREG!5 = store i64 %7, [32, i64] XREG!4[14]
br label %bb3
bb3:
%6 = i64 Add i64 PC!2, 4
PC!4 = store i64 %6, i64 PC!3
br label %bb4
bb4:
store i64 %6, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[10]
%10 = i64 Add i64 %11, 4
XREG!7 = store i64 %10, [32, i64] XREG!6[13]
br label %bb5
bb5:
%9 = i64 Add i64 PC!5, 4
PC!22 = store i64 %9, i64 PC!6
br label %bb6
bb6:
store i64 %9, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%14 = load i64, [32, i64] XREG!8[14]
%13 = i64 Lshr i64 %14, 30
XREG!9 = store i64 %13, [32, i64] XREG!8[14]
br label %bb7
bb7:
%12 = i64 Add i64 PC!7, 4
PC!9 = store i64 %12, i64 PC!8
br label %bb8
bb8:
store i64 %12, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%17 = load i64, [32, i64] XREG!10[10]
%16 = i64 Add i64 %17, 0
XREG!11 = store i64 %16, [32, i64] XREG!10[15]
br label %bb9
bb9:
%15 = i64 Add i64 PC!10, 4
PC!21 = store i64 %15, i64 PC!11
br label %bb10
bb10:
store i64 %15, i64 PC!12
PC!13 = store i64 PC!12, i64 PC!12
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!12, i64 prev_pc!6
%20 = load i64, [32, i64] XREG!12[14]
%21 = load i64, [32, i64] XREG!12[13]
%19 = i64 Add i64 %20, %21
XREG!13 = store i64 %19, [32, i64] XREG!12[14]
br label %bb11
bb11:
%18 = i64 Add i64 PC!12, 4
PC!20 = store i64 %18, i64 PC!13
br label %bb12
bb12:
store i64 %18, i64 PC!14
PC!15 = store i64 PC!14, i64 PC!14
XREG!14 = store i64 0, [32, i64] XREG!13[0]
prev_pc!8 = store i64 PC!14, i64 prev_pc!7
%24 = load i64, [32, i64] XREG!14[0]
%23 = i64 Add i64 %24, 0
XREG!15 = store i64 %23, [32, i64] XREG!14[10]
br label %bb13
bb13:
%22 = i64 Add i64 PC!14, 4
PC!16 = store i64 %22, i64 PC!15
br label %bb14
bb14:
store i64 %22, i64 PC!17
PC!18 = store i64 PC!17, i64 PC!17
PC!19 = store i64 PC!17, i64 PC!18
ret void

Nested SCCP
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[11]
%2 = Extract i32 of i64 %5 <31, 0>
%3 = i32 Add i32 %2, -1
%4 = Sext i32 %3 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[14]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!23 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%8 = load i64, [32, i64] XREG!4[14]
%7 = i64 Shl i64 %8, 32
XREG!5 = store i64 %7, [32, i64] XREG!4[14]
br label %bb3
bb3:
%6 = i64 Add i64 PC!2, 4
PC!4 = store i64 %6, i64 PC!3
br label %bb4
bb4:
store i64 %6, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[10]
%10 = i64 Add i64 %11, 4
XREG!7 = store i64 %10, [32, i64] XREG!6[13]
br label %bb5
bb5:
%9 = i64 Add i64 PC!5, 4
PC!22 = store i64 %9, i64 PC!6
br label %bb6
bb6:
store i64 %9, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%14 = load i64, [32, i64] XREG!8[14]
%13 = i64 Lshr i64 %14, 30
XREG!9 = store i64 %13, [32, i64] XREG!8[14]
br label %bb7
bb7:
%12 = i64 Add i64 PC!7, 4
PC!9 = store i64 %12, i64 PC!8
br label %bb8
bb8:
store i64 %12, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%17 = load i64, [32, i64] XREG!10[10]
%16 = i64 Add i64 %17, 0
XREG!11 = store i64 %16, [32, i64] XREG!10[15]
br label %bb9
bb9:
%15 = i64 Add i64 PC!10, 4
PC!21 = store i64 %15, i64 PC!11
br label %bb10
bb10:
store i64 %15, i64 PC!12
PC!13 = store i64 PC!12, i64 PC!12
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!12, i64 prev_pc!6
%20 = load i64, [32, i64] XREG!12[14]
%21 = load i64, [32, i64] XREG!12[13]
%19 = i64 Add i64 %20, %21
XREG!13 = store i64 %19, [32, i64] XREG!12[14]
br label %bb11
bb11:
%18 = i64 Add i64 PC!12, 4
PC!20 = store i64 %18, i64 PC!13
br label %bb12
bb12:
store i64 %18, i64 PC!14
PC!15 = store i64 PC!14, i64 PC!14
XREG!14 = store i64 0, [32, i64] XREG!13[0]
prev_pc!8 = store i64 PC!14, i64 prev_pc!7
%24 = load i64, [32, i64] XREG!14[0]
%23 = i64 Add i64 %24, 0
XREG!15 = store i64 %23, [32, i64] XREG!14[10]
br label %bb13
bb13:
%22 = i64 Add i64 PC!14, 4
PC!16 = store i64 %22, i64 PC!15
br label %bb14
bb14:
store i64 %22, i64 PC!17
PC!18 = store i64 PC!17, i64 PC!17
PC!19 = store i64 PC!17, i64 PC!18
ret void

SCCP forward
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[11]
%2 = Extract i32 of i64 %5 <31, 0>
%3 = i32 Add i32 %2, -1
%4 = Sext i32 %3 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[14]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!23 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%8 = load i64, [32, i64] XREG!4[14]
%7 = i64 Shl i64 %8, 32
XREG!5 = store i64 %7, [32, i64] XREG!4[14]
br label %bb3
bb3:
%6 = i64 Add i64 PC!2, 4
PC!4 = store i64 %6, i64 PC!3
br label %bb4
bb4:
store i64 %6, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[10]
%10 = i64 Add i64 %11, 4
XREG!7 = store i64 %10, [32, i64] XREG!6[13]
br label %bb5
bb5:
%9 = i64 Add i64 PC!5, 4
PC!22 = store i64 %9, i64 PC!6
br label %bb6
bb6:
store i64 %9, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%14 = load i64, [32, i64] XREG!8[14]
%13 = i64 Lshr i64 %14, 30
XREG!9 = store i64 %13, [32, i64] XREG!8[14]
br label %bb7
bb7:
%12 = i64 Add i64 PC!7, 4
PC!9 = store i64 %12, i64 PC!8
br label %bb8
bb8:
store i64 %12, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%17 = load i64, [32, i64] XREG!10[10]
%16 = i64 Add i64 %17, 0
XREG!11 = store i64 %16, [32, i64] XREG!10[15]
br label %bb9
bb9:
%15 = i64 Add i64 PC!10, 4
PC!21 = store i64 %15, i64 PC!11
br label %bb10
bb10:
store i64 %15, i64 PC!12
PC!13 = store i64 PC!12, i64 PC!12
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!12, i64 prev_pc!6
%20 = load i64, [32, i64] XREG!12[14]
%21 = load i64, [32, i64] XREG!12[13]
%19 = i64 Add i64 %20, %21
XREG!13 = store i64 %19, [32, i64] XREG!12[14]
br label %bb11
bb11:
%18 = i64 Add i64 PC!12, 4
PC!20 = store i64 %18, i64 PC!13
br label %bb12
bb12:
store i64 %18, i64 PC!14
PC!15 = store i64 PC!14, i64 PC!14
XREG!14 = store i64 0, [32, i64] XREG!13[0]
prev_pc!8 = store i64 PC!14, i64 prev_pc!7
%24 = load i64, [32, i64] XREG!14[0]
%23 = i64 Add i64 %24, 0
XREG!15 = store i64 %23, [32, i64] XREG!14[10]
br label %bb13
bb13:
%22 = i64 Add i64 PC!14, 4
PC!16 = store i64 %22, i64 PC!15
br label %bb14
bb14:
store i64 %22, i64 PC!17
PC!18 = store i64 PC!17, i64 PC!17
PC!19 = store i64 PC!17, i64 PC!18
ret void

cherry
bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[11]
%2 = Extract i32 of i64 %5 <31, 0>
%3 = i32 Add i32 %2, -1
%4 = Sext i32 %3 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[14]
%1 = i64 Add i64 PC!1, 4
PC!23 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%8 = load i64, [32, i64] XREG!4[14]
%7 = i64 Shl i64 %8, 32
XREG!5 = store i64 %7, [32, i64] XREG!4[14]
%6 = i64 Add i64 PC!2, 4
PC!4 = store i64 %6, i64 PC!3
store i64 %6, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[10]
%10 = i64 Add i64 %11, 4
XREG!7 = store i64 %10, [32, i64] XREG!6[13]
%9 = i64 Add i64 PC!5, 4
PC!22 = store i64 %9, i64 PC!6
store i64 %9, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%14 = load i64, [32, i64] XREG!8[14]
%13 = i64 Lshr i64 %14, 30
XREG!9 = store i64 %13, [32, i64] XREG!8[14]
%12 = i64 Add i64 PC!7, 4
PC!9 = store i64 %12, i64 PC!8
store i64 %12, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%17 = load i64, [32, i64] XREG!10[10]
%16 = i64 Add i64 %17, 0
XREG!11 = store i64 %16, [32, i64] XREG!10[15]
%15 = i64 Add i64 PC!10, 4
PC!21 = store i64 %15, i64 PC!11
store i64 %15, i64 PC!12
PC!13 = store i64 PC!12, i64 PC!12
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!12, i64 prev_pc!6
%20 = load i64, [32, i64] XREG!12[14]
%21 = load i64, [32, i64] XREG!12[13]
%19 = i64 Add i64 %20, %21
XREG!13 = store i64 %19, [32, i64] XREG!12[14]
%18 = i64 Add i64 PC!12, 4
PC!20 = store i64 %18, i64 PC!13
store i64 %18, i64 PC!14
PC!15 = store i64 PC!14, i64 PC!14
XREG!14 = store i64 0, [32, i64] XREG!13[0]
prev_pc!8 = store i64 PC!14, i64 prev_pc!7
%24 = load i64, [32, i64] XREG!14[0]
%23 = i64 Add i64 %24, 0
XREG!15 = store i64 %23, [32, i64] XREG!14[10]
%22 = i64 Add i64 PC!14, 4
PC!16 = store i64 %22, i64 PC!15
store i64 %22, i64 PC!17
PC!18 = store i64 PC!17, i64 PC!17
PC!19 = store i64 PC!17, i64 PC!18
ret void

bb_1 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%5 = load i64, [32, i64] XREG!2[11]
%2 = Extract i32 of i64 %5 <31, 0>
%3 = i32 Add i32 %2, -1
%4 = Sext i32 %3 to i64
XREG!3 = store i64 %4, [32, i64] XREG!2[14]
%1 = i64 Add i64 PC!1, 4
PC!23 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%8 = load i64, [32, i64] XREG!4[14]
%7 = i64 Shl i64 %8, 32
XREG!5 = store i64 %7, [32, i64] XREG!4[14]
%6 = i64 Add i64 PC!2, 4
PC!4 = store i64 %6, i64 PC!3
store i64 %6, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%11 = load i64, [32, i64] XREG!6[10]
%10 = i64 Add i64 %11, 4
XREG!7 = store i64 %10, [32, i64] XREG!6[13]
%9 = i64 Add i64 PC!5, 4
PC!22 = store i64 %9, i64 PC!6
store i64 %9, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%14 = load i64, [32, i64] XREG!8[14]
%13 = i64 Lshr i64 %14, 30
XREG!9 = store i64 %13, [32, i64] XREG!8[14]
%12 = i64 Add i64 PC!7, 4
PC!9 = store i64 %12, i64 PC!8
store i64 %12, i64 PC!10
PC!11 = store i64 PC!10, i64 PC!10
XREG!10 = store i64 0, [32, i64] XREG!9[0]
prev_pc!6 = store i64 PC!10, i64 prev_pc!5
%17 = load i64, [32, i64] XREG!10[10]
%16 = i64 Add i64 %17, 0
XREG!11 = store i64 %16, [32, i64] XREG!10[15]
%15 = i64 Add i64 PC!10, 4
PC!21 = store i64 %15, i64 PC!11
store i64 %15, i64 PC!12
PC!13 = store i64 PC!12, i64 PC!12
XREG!12 = store i64 0, [32, i64] XREG!11[0]
prev_pc!7 = store i64 PC!12, i64 prev_pc!6
%20 = load i64, [32, i64] XREG!12[14]
%21 = load i64, [32, i64] XREG!12[13]
%19 = i64 Add i64 %20, %21
XREG!13 = store i64 %19, [32, i64] XREG!12[14]
%18 = i64 Add i64 PC!12, 4
PC!20 = store i64 %18, i64 PC!13
store i64 %18, i64 PC!14
PC!15 = store i64 PC!14, i64 PC!14
XREG!14 = store i64 0, [32, i64] XREG!13[0]
prev_pc!8 = store i64 PC!14, i64 prev_pc!7
%24 = load i64, [32, i64] XREG!14[0]
%23 = i64 Add i64 %24, 0
XREG!15 = store i64 %23, [32, i64] XREG!14[10]
%22 = i64 Add i64 PC!14, 4
PC!16 = store i64 %22, i64 PC!15
store i64 %22, i64 PC!17
PC!18 = store i64 PC!17, i64 PC!17
PC!19 = store i64 PC!17, i64 PC!18
ret void

COMPILE
bb_2 func void []
bb0:
call void insn_8.action %0 ()
call void insn_9.action %0 ()
call void insn_10.action %0 ()
call void insn_11.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_2 func void []
bb0:
br label %bb13
bb1:
br label %bb19
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 0 to i64
%12 = load i64, [32, i64] XREG[15]
%10 = i64 Add i64 %12, %9
store i64 %10, i64 tmp_address
%11 = load i64, i64 tmp_address
%14 = i64 Lshr i64 %11, 3
%15 = Extract i53 of i64 %14 <52, 0>
store i53 %15, i53 mem_index
%16 = Extract i3 of i64 %11 <2, 0>
%17 = Zext i3 %16 to i6
%18 = i6 Mul i6 %17, 8
store i6 %18, i6 tmp_bit_offset
%19 = Extract i3 of i64 %11 <2, 0>
%20 = i1 Ult i3 %19, -3
br i1 %20, label %bb3, label %bb4
bb3:
%21 = load i6, i6 tmp_bit_offset
%22 = load i6, i6 tmp_bit_offset
%23 = i6 Add i6 %22, 31
%24 = load i53, i53 mem_index
%25 = load i64, [9007199254740992, i64] MEM[%24]
%26 = Extract i32 of i64 %25 <%23, %21>
store i32 %26, i32 tmp_word
br label %bb5
bb4:
%27 = load i53, i53 mem_index
%28 = i53 Add i53 %27, 1
%29 = load i64, [9007199254740992, i64] MEM[%28]
store i64 %29, i64 tmp_dword1
%30 = load i53, i53 mem_index
%31 = load i64, [9007199254740992, i64] MEM[%30]
store i64 %31, i64 tmp_dword2
%32 = Extract i2 of i64 %11 <1, 0>
%33 = i1 Eq i2 %32, 1
br i1 %33, label %bb6, label %bb7
bb5:
%51 = load i32, i32 tmp_word
%52 = Sext i32 %51 to i64
store i64 %52, i64 rd_var
%13 = load i64, i64 rd_var
store i64 %13, [32, i64] XREG[13]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb10, label %bb11
bb6:
%35 = load i64, i64 tmp_dword1
%36 = Extract i8 of i64 %35 <7, 0>
%37 = load i64, i64 tmp_dword2
%38 = Extract i24 of i64 %37 <63, 40>
%34 = Concat i32 i8 %36, i24 %38
store i32 %34, i32 tmp_word
br label %bb5
bb7:
%39 = Extract i2 of i64 %11 <1, 0>
%40 = i1 Eq i2 %39, -2
br i1 %40, label %bb8, label %bb9
bb8:
%42 = load i64, i64 tmp_dword1
%43 = Extract i16 of i64 %42 <15, 0>
%44 = load i64, i64 tmp_dword2
%45 = Extract i16 of i64 %44 <63, 48>
%41 = Concat i32 i16 %43, i16 %45
store i32 %41, i32 tmp_word
br label %bb5
bb9:
%47 = load i64, i64 tmp_dword1
%48 = Extract i24 of i64 %47 <23, 0>
%49 = load i64, i64 tmp_dword2
%50 = Extract i8 of i64 %49 <63, 56>
%46 = Concat i32 i24 %48, i8 %50
store i32 %46, i32 tmp_word
br label %bb5
bb10:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb12
bb11:
br label %bb12
bb12:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb13:
br label %bb2
bb14:
br label %bb25
bb15:
store i64 0, [32, i64] XREG[0]
%54 = load i64, i64 PC
store i64 %54, i64 prev_pc
%60 = Sext i12 4 to i64
%62 = load i64, [32, i64] XREG[15]
%61 = i64 Add i64 %62, %60
store i64 %61, [32, i64] XREG[15]
%55 = load i64, i64 PC
%57 = load i64, i64 prev_pc
%56 = i1 Eq i64 %55, %57
br i1 %56, label %bb16, label %bb17
bb16:
%58 = load i64, i64 PC
%59 = i64 Add i64 %58, 4
store i64 %59, i64 PC
br label %bb18
bb17:
br label %bb18
bb18:
%53 = load i64, i64 PC
store i64 %53, i64 PC
br label %bb14
bb19:
br label %bb15
bb20:
br label %bb34
bb21:
store i64 0, [32, i64] XREG[0]
%64 = load i64, i64 PC
store i64 %64, i64 prev_pc
%74 = load i64, [32, i64] XREG[13]
%70 = Extract i32 of i64 %74 <31, 0>
%75 = load i64, [32, i64] XREG[10]
%72 = Extract i32 of i64 %75 <31, 0>
%71 = i32 Add i32 %70, %72
%73 = Sext i32 %71 to i64
store i64 %73, [32, i64] XREG[10]
%65 = load i64, i64 PC
%67 = load i64, i64 prev_pc
%66 = i1 Eq i64 %65, %67
br i1 %66, label %bb22, label %bb23
bb22:
%68 = load i64, i64 PC
%69 = i64 Add i64 %68, 4
store i64 %69, i64 PC
br label %bb24
bb23:
br label %bb24
bb24:
%63 = load i64, i64 PC
store i64 %63, i64 PC
br label %bb20
bb25:
br label %bb21
bb26:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb27:
store i64 0, [32, i64] XREG[0]
%77 = load i64, i64 PC
store i64 %77, i64 prev_pc
%88 = load i64, [32, i64] XREG[14]
%89 = load i64, [32, i64] XREG[15]
%83 = i1 Ne i64 %88, %89
br i1 %83, label %bb28, label %bb29
bb28:
%84 = Sext i12 4090 to i64
%85 = i64 Shl i64 %84, 1
%86 = load i64, i64 PC
%87 = i64 Add i64 %86, %85
store i64 %87, i64 PC
br label %bb30
bb29:
br label %bb30
bb30:
%78 = load i64, i64 PC
%80 = load i64, i64 prev_pc
%79 = i1 Eq i64 %78, %80
br i1 %79, label %bb31, label %bb32
bb31:
%81 = load i64, i64 PC
%82 = i64 Add i64 %81, 4
store i64 %82, i64 PC
br label %bb33
bb32:
br label %bb33
bb33:
%76 = load i64, i64 PC
store i64 %76, i64 PC
br label %bb26
bb34:
br label %bb27

propagate
bb_2 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, 0
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = Zext i3 %15 to i6
%17 = i6 Mul i6 %16, 8
store i6 %17, i6 tmp_bit_offset
%18 = Extract i3 of i64 %10 <2, 0>
%19 = i1 Ult i3 %18, -3
br i1 %19, label %bb3, label %bb4
bb3:
%20 = load i6, i6 tmp_bit_offset
%21 = load i6, i6 tmp_bit_offset
%22 = i6 Add i6 %21, 31
%23 = load i53, i53 mem_index
%24 = load i64, [9007199254740992, i64] MEM[%23]
%25 = Extract i32 of i64 %24 <%22, %20>
store i32 %25, i32 tmp_word
br label %bb5
bb4:
%26 = load i53, i53 mem_index
%27 = i53 Add i53 %26, 1
%28 = load i64, [9007199254740992, i64] MEM[%27]
store i64 %28, i64 tmp_dword1
%29 = load i53, i53 mem_index
%30 = load i64, [9007199254740992, i64] MEM[%29]
store i64 %30, i64 tmp_dword2
%31 = Extract i2 of i64 %10 <1, 0>
%32 = i1 Eq i2 %31, 1
br i1 %32, label %bb6, label %bb7
bb5:
%50 = load i32, i32 tmp_word
%51 = Sext i32 %50 to i64
store i64 %51, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[13]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb8, label %bb9
bb6:
%34 = load i64, i64 tmp_dword1
%35 = Extract i8 of i64 %34 <7, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i24 of i64 %36 <63, 40>
%33 = Concat i32 i8 %35, i24 %37
store i32 %33, i32 tmp_word
br label %bb5
bb7:
%38 = Extract i2 of i64 %10 <1, 0>
%39 = i1 Eq i2 %38, -2
br i1 %39, label %bb10, label %bb11
bb8:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb12
bb9:
br label %bb12
bb10:
%41 = load i64, i64 tmp_dword1
%42 = Extract i16 of i64 %41 <15, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i16 of i64 %43 <63, 48>
%40 = Concat i32 i16 %42, i16 %44
store i32 %40, i32 tmp_word
br label %bb5
bb11:
%46 = load i64, i64 tmp_dword1
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2
%49 = Extract i8 of i64 %48 <63, 56>
%45 = Concat i32 i24 %47, i8 %49
store i32 %45, i32 tmp_word
br label %bb5
bb12:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb13
bb13:
br label %bb14
bb14:
br label %bb15
bb15:
store i64 0, [32, i64] XREG[0]
%53 = load i64, i64 PC
store i64 %53, i64 prev_pc
%60 = load i64, [32, i64] XREG[15]
%59 = i64 Add i64 %60, 4
store i64 %59, [32, i64] XREG[15]
%54 = load i64, i64 PC
%56 = load i64, i64 prev_pc
%55 = i1 Eq i64 %54, %56
br i1 %55, label %bb16, label %bb17
bb16:
%57 = load i64, i64 PC
%58 = i64 Add i64 %57, 4
store i64 %58, i64 PC
br label %bb18
bb17:
br label %bb18
bb18:
%52 = load i64, i64 PC
store i64 %52, i64 PC
br label %bb19
bb19:
br label %bb20
bb20:
br label %bb21
bb21:
store i64 0, [32, i64] XREG[0]
%62 = load i64, i64 PC
store i64 %62, i64 prev_pc
%72 = load i64, [32, i64] XREG[13]
%68 = Extract i32 of i64 %72 <31, 0>
%73 = load i64, [32, i64] XREG[10]
%70 = Extract i32 of i64 %73 <31, 0>
%69 = i32 Add i32 %68, %70
%71 = Sext i32 %69 to i64
store i64 %71, [32, i64] XREG[10]
%63 = load i64, i64 PC
%65 = load i64, i64 prev_pc
%64 = i1 Eq i64 %63, %65
br i1 %64, label %bb22, label %bb23
bb22:
%66 = load i64, i64 PC
%67 = i64 Add i64 %66, 4
store i64 %67, i64 PC
br label %bb24
bb23:
br label %bb24
bb24:
%61 = load i64, i64 PC
store i64 %61, i64 PC
br label %bb25
bb25:
br label %bb26
bb26:
br label %bb27
bb27:
store i64 0, [32, i64] XREG[0]
%75 = load i64, i64 PC
store i64 %75, i64 prev_pc
%84 = load i64, [32, i64] XREG[14]
%85 = load i64, [32, i64] XREG[15]
%81 = i1 Ne i64 %84, %85
br i1 %81, label %bb28, label %bb29
bb28:
%82 = load i64, i64 PC
%83 = i64 Add i64 %82, -12
store i64 %83, i64 PC
br label %bb30
bb29:
br label %bb30
bb30:
%76 = load i64, i64 PC
%78 = load i64, i64 prev_pc
%77 = i1 Eq i64 %76, %78
br i1 %77, label %bb31, label %bb32
bb31:
%79 = load i64, i64 PC
%80 = i64 Add i64 %79, 4
store i64 %80, i64 PC
br label %bb33
bb32:
br label %bb33
bb33:
%74 = load i64, i64 PC
store i64 %74, i64 PC
br label %bb34
bb34:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_2 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%11 = load i64, [32, i64] XREG[15]
%9 = i64 Add i64 %11, 0
store i64 %9, i64 tmp_address
%10 = load i64, i64 tmp_address
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
store i53 %14, i53 mem_index
%15 = Extract i3 of i64 %10 <2, 0>
%16 = Zext i3 %15 to i6
%17 = i6 Mul i6 %16, 8
store i6 %17, i6 tmp_bit_offset
%18 = Extract i3 of i64 %10 <2, 0>
%19 = i1 Ult i3 %18, -3
br i1 %19, label %bb1, label %bb2
bb1:
%20 = load i6, i6 tmp_bit_offset
%21 = load i6, i6 tmp_bit_offset
%22 = i6 Add i6 %21, 31
%23 = load i53, i53 mem_index
%24 = load i64, [9007199254740992, i64] MEM[%23]
%25 = Extract i32 of i64 %24 <%22, %20>
store i32 %25, i32 tmp_word
br label %bb3
bb2:
%26 = load i53, i53 mem_index
%27 = i53 Add i53 %26, 1
%28 = load i64, [9007199254740992, i64] MEM[%27]
store i64 %28, i64 tmp_dword1
%29 = load i53, i53 mem_index
%30 = load i64, [9007199254740992, i64] MEM[%29]
store i64 %30, i64 tmp_dword2
%31 = Extract i2 of i64 %10 <1, 0>
%32 = i1 Eq i2 %31, 1
br i1 %32, label %bb4, label %bb5
bb3:
%50 = load i32, i32 tmp_word
%51 = Sext i32 %50 to i64
store i64 %51, i64 rd_var
%12 = load i64, i64 rd_var
store i64 %12, [32, i64] XREG[13]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb6, label %bb7
bb4:
%34 = load i64, i64 tmp_dword1
%35 = Extract i8 of i64 %34 <7, 0>
%36 = load i64, i64 tmp_dword2
%37 = Extract i24 of i64 %36 <63, 40>
%33 = Concat i32 i8 %35, i24 %37
store i32 %33, i32 tmp_word
br label %bb3
bb5:
%38 = Extract i2 of i64 %10 <1, 0>
%39 = i1 Eq i2 %38, -2
br i1 %39, label %bb8, label %bb9
bb6:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb10
bb7:
br label %bb10
bb8:
%41 = load i64, i64 tmp_dword1
%42 = Extract i16 of i64 %41 <15, 0>
%43 = load i64, i64 tmp_dword2
%44 = Extract i16 of i64 %43 <63, 48>
%40 = Concat i32 i16 %42, i16 %44
store i32 %40, i32 tmp_word
br label %bb3
bb9:
%46 = load i64, i64 tmp_dword1
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2
%49 = Extract i8 of i64 %48 <63, 56>
%45 = Concat i32 i24 %47, i8 %49
store i32 %45, i32 tmp_word
br label %bb3
bb10:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%53 = load i64, i64 PC
store i64 %53, i64 prev_pc
%60 = load i64, [32, i64] XREG[15]
%59 = i64 Add i64 %60, 4
store i64 %59, [32, i64] XREG[15]
%54 = load i64, i64 PC
%56 = load i64, i64 prev_pc
%55 = i1 Eq i64 %54, %56
br i1 %55, label %bb11, label %bb12
bb11:
%57 = load i64, i64 PC
%58 = i64 Add i64 %57, 4
store i64 %58, i64 PC
br label %bb13
bb12:
br label %bb13
bb13:
%52 = load i64, i64 PC
store i64 %52, i64 PC
store i64 0, [32, i64] XREG[0]
%62 = load i64, i64 PC
store i64 %62, i64 prev_pc
%72 = load i64, [32, i64] XREG[13]
%68 = Extract i32 of i64 %72 <31, 0>
%73 = load i64, [32, i64] XREG[10]
%70 = Extract i32 of i64 %73 <31, 0>
%69 = i32 Add i32 %68, %70
%71 = Sext i32 %69 to i64
store i64 %71, [32, i64] XREG[10]
%63 = load i64, i64 PC
%65 = load i64, i64 prev_pc
%64 = i1 Eq i64 %63, %65
br i1 %64, label %bb14, label %bb15
bb14:
%66 = load i64, i64 PC
%67 = i64 Add i64 %66, 4
store i64 %67, i64 PC
br label %bb16
bb15:
br label %bb16
bb16:
%61 = load i64, i64 PC
store i64 %61, i64 PC
store i64 0, [32, i64] XREG[0]
%75 = load i64, i64 PC
store i64 %75, i64 prev_pc
%84 = load i64, [32, i64] XREG[14]
%85 = load i64, [32, i64] XREG[15]
%81 = i1 Ne i64 %84, %85
br i1 %81, label %bb17, label %bb18
bb17:
%82 = load i64, i64 PC
%83 = i64 Add i64 %82, -12
store i64 %83, i64 PC
br label %bb19
bb18:
br label %bb19
bb19:
%76 = load i64, i64 PC
%78 = load i64, i64 prev_pc
%77 = i1 Eq i64 %76, %78
br i1 %77, label %bb20, label %bb21
bb20:
%79 = load i64, i64 PC
%80 = i64 Add i64 %79, 4
store i64 %80, i64 PC
br label %bb22
bb21:
br label %bb22
bb22:
%74 = load i64, i64 PC
store i64 %74, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%11 = load i64, [32, i64] XREG!2[15]
%9 = i64 Add i64 %11, 0
tmp_address!2 = store i64 %9, i64 tmp_address!1
%10 = load i64, i64 tmp_address!2
%13 = i64 Lshr i64 %10, 3
%14 = Extract i53 of i64 %13 <52, 0>
mem_index!2 = store i53 %14, i53 mem_index!1
%15 = Extract i3 of i64 %10 <2, 0>
%16 = Zext i3 %15 to i6
%17 = i6 Mul i6 %16, 8
tmp_bit_offset!2 = store i6 %17, i6 tmp_bit_offset!1
%18 = Extract i3 of i64 %10 <2, 0>
%19 = i1 Ult i3 %18, -3
br i1 %19, label %bb1, label %bb2
bb1:
%20 = load i6, i6 tmp_bit_offset!2
%21 = load i6, i6 tmp_bit_offset!2
%22 = i6 Add i6 %21, 31
%23 = load i53, i53 mem_index!2
%24 = load i64, [9007199254740992, i64] MEM!1[%23]
%25 = Extract i32 of i64 %24 <%22, %20>
tmp_word!5 = store i32 %25, i32 tmp_word!1
br label %bb3
bb2:
%26 = load i53, i53 mem_index!2
%27 = i53 Add i53 %26, 1
%28 = load i64, [9007199254740992, i64] MEM!1[%27]
tmp_dword1!2 = store i64 %28, i64 tmp_dword1!1
%29 = load i53, i53 mem_index!2
%30 = load i64, [9007199254740992, i64] MEM!1[%29]
tmp_dword2!2 = store i64 %30, i64 tmp_dword2!1
%31 = Extract i2 of i64 %10 <1, 0>
%32 = i1 Eq i2 %31, 1
br i1 %32, label %bb4, label %bb5
bb3:
tmp_word!6 = phi ite %19 tmp_word!5 ite %32 tmp_word!4 ite %39 tmp_word!3 tmp_word!2
tmp_dword2!3 = phi ite %19 tmp_dword2!1 tmp_dword2!2
tmp_dword1!3 = phi ite %19 tmp_dword1!1 tmp_dword1!2
%50 = load i32, i32 tmp_word!6
%51 = Sext i32 %50 to i64
rd_var!2 = store i64 %51, i64 rd_var!1
%12 = load i64, i64 rd_var!2
XREG!3 = store i64 %12, [32, i64] XREG!2[13]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb6, label %bb7
bb4:
%34 = load i64, i64 tmp_dword1!2
%35 = Extract i8 of i64 %34 <7, 0>
%36 = load i64, i64 tmp_dword2!2
%37 = Extract i24 of i64 %36 <63, 40>
%33 = Concat i32 i8 %35, i24 %37
tmp_word!4 = store i32 %33, i32 tmp_word!1
br label %bb3
bb5:
%38 = Extract i2 of i64 %10 <1, 0>
%39 = i1 Eq i2 %38, -2
br i1 %39, label %bb8, label %bb9
bb6:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!16 = store i64 %8, i64 PC!1
br label %bb10
bb7:
br label %bb10
bb8:
%41 = load i64, i64 tmp_dword1!2
%42 = Extract i16 of i64 %41 <15, 0>
%43 = load i64, i64 tmp_dword2!2
%44 = Extract i16 of i64 %43 <63, 48>
%40 = Concat i32 i16 %42, i16 %44
tmp_word!3 = store i32 %40, i32 tmp_word!1
br label %bb3
bb9:
%46 = load i64, i64 tmp_dword1!2
%47 = Extract i24 of i64 %46 <23, 0>
%48 = load i64, i64 tmp_dword2!2
%49 = Extract i8 of i64 %48 <63, 56>
%45 = Concat i32 i24 %47, i8 %49
tmp_word!2 = store i32 %45, i32 tmp_word!1
br label %bb3
bb10:
PC!2 = phi ite %5 PC!16 PC!1
%2 = load i64, i64 PC!2
PC!3 = store i64 %2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%53 = load i64, i64 PC!3
prev_pc!3 = store i64 %53, i64 prev_pc!2
%60 = load i64, [32, i64] XREG!4[15]
%59 = i64 Add i64 %60, 4
XREG!5 = store i64 %59, [32, i64] XREG!4[15]
%54 = load i64, i64 PC!3
%56 = load i64, i64 prev_pc!3
%55 = i1 Eq i64 %54, %56
br i1 %55, label %bb11, label %bb12
bb11:
%57 = load i64, i64 PC!3
%58 = i64 Add i64 %57, 4
PC!4 = store i64 %58, i64 PC!3
br label %bb13
bb12:
br label %bb13
bb13:
PC!5 = phi ite %55 PC!4 PC!3
%52 = load i64, i64 PC!5
PC!6 = store i64 %52, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
%62 = load i64, i64 PC!6
prev_pc!4 = store i64 %62, i64 prev_pc!3
%72 = load i64, [32, i64] XREG!6[13]
%68 = Extract i32 of i64 %72 <31, 0>
%73 = load i64, [32, i64] XREG!6[10]
%70 = Extract i32 of i64 %73 <31, 0>
%69 = i32 Add i32 %68, %70
%71 = Sext i32 %69 to i64
XREG!7 = store i64 %71, [32, i64] XREG!6[10]
%63 = load i64, i64 PC!6
%65 = load i64, i64 prev_pc!4
%64 = i1 Eq i64 %63, %65
br i1 %64, label %bb14, label %bb15
bb14:
%66 = load i64, i64 PC!6
%67 = i64 Add i64 %66, 4
PC!15 = store i64 %67, i64 PC!6
br label %bb16
bb15:
br label %bb16
bb16:
PC!7 = phi ite %64 PC!15 PC!6
%61 = load i64, i64 PC!7
PC!8 = store i64 %61, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
%75 = load i64, i64 PC!8
prev_pc!5 = store i64 %75, i64 prev_pc!4
%84 = load i64, [32, i64] XREG!8[14]
%85 = load i64, [32, i64] XREG!8[15]
%81 = i1 Ne i64 %84, %85
br i1 %81, label %bb17, label %bb18
bb17:
%82 = load i64, i64 PC!8
%83 = i64 Add i64 %82, -12
PC!9 = store i64 %83, i64 PC!8
br label %bb19
bb18:
br label %bb19
bb19:
PC!10 = phi ite %81 PC!9 PC!8
%76 = load i64, i64 PC!10
%78 = load i64, i64 prev_pc!5
%77 = i1 Eq i64 %76, %78
br i1 %77, label %bb20, label %bb21
bb20:
%79 = load i64, i64 PC!10
%80 = i64 Add i64 %79, 4
PC!14 = store i64 %80, i64 PC!10
br label %bb22
bb21:
br label %bb22
bb22:
PC!11 = phi ite %77 PC!14 PC!10
%74 = load i64, i64 PC!11
PC!12 = store i64 %74, i64 PC!11
%1 = load i64, i64 PC!12
PC!13 = store i64 %1, i64 PC!12
ret void

SSA forward
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = Zext i3 %6 to i6
%8 = i6 Mul i6 %7, 8
tmp_bit_offset!2 = store i6 %8, i6 tmp_bit_offset!1
%9 = Extract i3 of i64 %2 <2, 0>
%10 = i1 Ult i3 %9, -3
br i1 %10, label %bb1, label %bb2
bb1:
%11 = i6 Add i6 %8, 31
%12 = load i64, [9007199254740992, i64] MEM!1[%5]
%13 = Extract i32 of i64 %12 <%11, %8>
tmp_word!5 = store i32 %13, i32 tmp_word!1
br label %bb3
bb2:
%14 = i53 Add i53 %5, 1
%15 = load i64, [9007199254740992, i64] MEM!1[%14]
tmp_dword1!2 = store i64 %15, i64 tmp_dword1!1
%16 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %16, i64 tmp_dword2!1
%17 = Extract i2 of i64 %2 <1, 0>
%18 = i1 Eq i2 %17, 1
br i1 %18, label %bb4, label %bb5
bb3:
tmp_word!6 = phi ite %10 %13 ite %18 %19 ite %23 %24 %27
tmp_dword2!3 = phi ite %10 tmp_dword2!1 %16
tmp_dword1!3 = phi ite %10 tmp_dword1!1 %15
%30 = Sext i32 tmp_word!6 to i64
rd_var!2 = store i64 %30, i64 rd_var!1
XREG!3 = store i64 %30, [32, i64] XREG!2[13]
br label %bb6
bb4:
%20 = Extract i8 of i64 %15 <7, 0>
%21 = Extract i24 of i64 %16 <63, 40>
%19 = Concat i32 i8 %20, i24 %21
tmp_word!4 = store i32 %19, i32 tmp_word!1
br label %bb3
bb5:
%22 = Extract i2 of i64 %2 <1, 0>
%23 = i1 Eq i2 %22, -2
br i1 %23, label %bb7, label %bb8
bb6:
%1 = i64 Add i64 PC!1, 4
PC!16 = store i64 %1, i64 PC!1
br label %bb9
bb7:
%25 = Extract i16 of i64 %15 <15, 0>
%26 = Extract i16 of i64 %16 <63, 48>
%24 = Concat i32 i16 %25, i16 %26
tmp_word!3 = store i32 %24, i32 tmp_word!1
br label %bb3
bb8:
%28 = Extract i24 of i64 %15 <23, 0>
%29 = Extract i8 of i64 %16 <63, 56>
%27 = Concat i32 i24 %28, i8 %29
tmp_word!2 = store i32 %27, i32 tmp_word!1
br label %bb3
bb9:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%33 = load i64, [32, i64] XREG!4[15]
%32 = i64 Add i64 %33, 4
XREG!5 = store i64 %32, [32, i64] XREG!4[15]
br label %bb10
bb10:
%31 = i64 Add i64 PC!2, 4
PC!4 = store i64 %31, i64 PC!3
br label %bb11
bb11:
store i64 %31, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%39 = load i64, [32, i64] XREG!6[13]
%35 = Extract i32 of i64 %39 <31, 0>
%40 = load i64, [32, i64] XREG!6[10]
%37 = Extract i32 of i64 %40 <31, 0>
%36 = i32 Add i32 %35, %37
%38 = Sext i32 %36 to i64
XREG!7 = store i64 %38, [32, i64] XREG!6[10]
br label %bb12
bb12:
%34 = i64 Add i64 PC!5, 4
PC!15 = store i64 %34, i64 PC!6
br label %bb13
bb13:
store i64 %34, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%45 = load i64, [32, i64] XREG!8[14]
%46 = load i64, [32, i64] XREG!8[15]
%43 = i1 Ne i64 %45, %46
br i1 %43, label %bb14, label %bb15
bb14:
%44 = i64 Add i64 PC!7, -12
PC!9 = store i64 %44, i64 PC!8
br label %bb16
bb15:
br label %bb16
bb16:
PC!10 = phi ite %43 %44 PC!7
%41 = i1 Eq i64 PC!10, PC!7
br i1 %41, label %bb17, label %bb18
bb17:
%42 = i64 Add i64 PC!10, 4
PC!14 = store i64 %42, i64 PC!10
br label %bb19
bb18:
br label %bb19
bb19:
PC!11 = phi ite %41 %42 PC!10
PC!12 = store i64 PC!11, i64 PC!11
PC!13 = store i64 PC!11, i64 PC!12
ret void

Nested SCCP
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = Zext i3 %6 to i6
%8 = i6 Mul i6 %7, 8
tmp_bit_offset!2 = store i6 %8, i6 tmp_bit_offset!1
%9 = Extract i3 of i64 %2 <2, 0>
%10 = i1 Ult i3 %9, -3
br i1 %10, label %bb1, label %bb2
bb1:
%11 = i6 Add i6 %8, 31
%12 = load i64, [9007199254740992, i64] MEM!1[%5]
%13 = Extract i32 of i64 %12 <%11, %8>
tmp_word!5 = store i32 %13, i32 tmp_word!1
br label %bb3
bb2:
%14 = i53 Add i53 %5, 1
%15 = load i64, [9007199254740992, i64] MEM!1[%14]
tmp_dword1!2 = store i64 %15, i64 tmp_dword1!1
%16 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %16, i64 tmp_dword2!1
%17 = Extract i2 of i64 %2 <1, 0>
%18 = i1 Eq i2 %17, 1
br i1 %18, label %bb4, label %bb5
bb3:
tmp_word!6 = phi ite %10 %13 ite %18 %19 ite %23 %24 %27
tmp_dword2!3 = phi ite %10 tmp_dword2!1 %16
tmp_dword1!3 = phi ite %10 tmp_dword1!1 %15
%30 = Sext i32 tmp_word!6 to i64
rd_var!2 = store i64 %30, i64 rd_var!1
XREG!3 = store i64 %30, [32, i64] XREG!2[13]
br label %bb6
bb4:
%20 = Extract i8 of i64 %15 <7, 0>
%21 = Extract i24 of i64 %16 <63, 40>
%19 = Concat i32 i8 %20, i24 %21
tmp_word!4 = store i32 %19, i32 tmp_word!1
br label %bb3
bb5:
%22 = Extract i2 of i64 %2 <1, 0>
%23 = i1 Eq i2 %22, -2
br i1 %23, label %bb7, label %bb8
bb6:
%1 = i64 Add i64 PC!1, 4
PC!16 = store i64 %1, i64 PC!1
br label %bb9
bb7:
%25 = Extract i16 of i64 %15 <15, 0>
%26 = Extract i16 of i64 %16 <63, 48>
%24 = Concat i32 i16 %25, i16 %26
tmp_word!3 = store i32 %24, i32 tmp_word!1
br label %bb3
bb8:
%28 = Extract i24 of i64 %15 <23, 0>
%29 = Extract i8 of i64 %16 <63, 56>
%27 = Concat i32 i24 %28, i8 %29
tmp_word!2 = store i32 %27, i32 tmp_word!1
br label %bb3
bb9:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%33 = load i64, [32, i64] XREG!4[15]
%32 = i64 Add i64 %33, 4
XREG!5 = store i64 %32, [32, i64] XREG!4[15]
br label %bb10
bb10:
%31 = i64 Add i64 PC!2, 4
PC!4 = store i64 %31, i64 PC!3
br label %bb11
bb11:
store i64 %31, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%39 = load i64, [32, i64] XREG!6[13]
%35 = Extract i32 of i64 %39 <31, 0>
%40 = load i64, [32, i64] XREG!6[10]
%37 = Extract i32 of i64 %40 <31, 0>
%36 = i32 Add i32 %35, %37
%38 = Sext i32 %36 to i64
XREG!7 = store i64 %38, [32, i64] XREG!6[10]
br label %bb12
bb12:
%34 = i64 Add i64 PC!5, 4
PC!15 = store i64 %34, i64 PC!6
br label %bb13
bb13:
store i64 %34, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%45 = load i64, [32, i64] XREG!8[14]
%46 = load i64, [32, i64] XREG!8[15]
%43 = i1 Ne i64 %45, %46
br i1 %43, label %bb14, label %bb15
bb14:
%44 = i64 Add i64 PC!7, -12
PC!9 = store i64 %44, i64 PC!8
br label %bb16
bb15:
br label %bb16
bb16:
PC!10 = phi ite %43 %44 PC!7
%41 = i1 Eq i64 PC!10, PC!7
br i1 %41, label %bb17, label %bb18
bb17:
%42 = i64 Add i64 PC!10, 4
PC!14 = store i64 %42, i64 PC!10
br label %bb19
bb18:
br label %bb19
bb19:
PC!11 = phi ite %43 %44 %42
PC!12 = store i64 PC!11, i64 PC!11
PC!13 = store i64 PC!11, i64 PC!12
ret void

SCCP forward
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = Zext i3 %6 to i6
%8 = i6 Mul i6 %7, 8
tmp_bit_offset!2 = store i6 %8, i6 tmp_bit_offset!1
%9 = Extract i3 of i64 %2 <2, 0>
%10 = i1 Ult i3 %9, -3
br i1 %10, label %bb1, label %bb2
bb1:
%11 = i6 Add i6 %8, 31
%12 = load i64, [9007199254740992, i64] MEM!1[%5]
%13 = Extract i32 of i64 %12 <%11, %8>
tmp_word!5 = store i32 %13, i32 tmp_word!1
br label %bb3
bb2:
%14 = i53 Add i53 %5, 1
%15 = load i64, [9007199254740992, i64] MEM!1[%14]
tmp_dword1!2 = store i64 %15, i64 tmp_dword1!1
%16 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %16, i64 tmp_dword2!1
%17 = Extract i2 of i64 %2 <1, 0>
%18 = i1 Eq i2 %17, 1
br i1 %18, label %bb4, label %bb5
bb3:
tmp_word!6 = phi ite %10 %13 ite %18 %19 ite %23 %24 %27
tmp_dword2!3 = phi ite %10 tmp_dword2!1 %16
tmp_dword1!3 = phi ite %10 tmp_dword1!1 %15
%30 = Sext i32 tmp_word!6 to i64
rd_var!2 = store i64 %30, i64 rd_var!1
XREG!3 = store i64 %30, [32, i64] XREG!2[13]
br label %bb6
bb4:
%20 = Extract i8 of i64 %15 <7, 0>
%21 = Extract i24 of i64 %16 <63, 40>
%19 = Concat i32 i8 %20, i24 %21
tmp_word!4 = store i32 %19, i32 tmp_word!1
br label %bb3
bb5:
%22 = Extract i2 of i64 %2 <1, 0>
%23 = i1 Eq i2 %22, -2
br i1 %23, label %bb7, label %bb8
bb6:
%1 = i64 Add i64 PC!1, 4
PC!16 = store i64 %1, i64 PC!1
br label %bb9
bb7:
%25 = Extract i16 of i64 %15 <15, 0>
%26 = Extract i16 of i64 %16 <63, 48>
%24 = Concat i32 i16 %25, i16 %26
tmp_word!3 = store i32 %24, i32 tmp_word!1
br label %bb3
bb8:
%28 = Extract i24 of i64 %15 <23, 0>
%29 = Extract i8 of i64 %16 <63, 56>
%27 = Concat i32 i24 %28, i8 %29
tmp_word!2 = store i32 %27, i32 tmp_word!1
br label %bb3
bb9:
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%33 = load i64, [32, i64] XREG!4[15]
%32 = i64 Add i64 %33, 4
XREG!5 = store i64 %32, [32, i64] XREG!4[15]
br label %bb10
bb10:
%31 = i64 Add i64 PC!2, 4
PC!4 = store i64 %31, i64 PC!3
br label %bb11
bb11:
store i64 %31, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%39 = load i64, [32, i64] XREG!6[13]
%35 = Extract i32 of i64 %39 <31, 0>
%40 = load i64, [32, i64] XREG!6[10]
%37 = Extract i32 of i64 %40 <31, 0>
%36 = i32 Add i32 %35, %37
%38 = Sext i32 %36 to i64
XREG!7 = store i64 %38, [32, i64] XREG!6[10]
br label %bb12
bb12:
%34 = i64 Add i64 PC!5, 4
PC!15 = store i64 %34, i64 PC!6
br label %bb13
bb13:
store i64 %34, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%45 = load i64, [32, i64] XREG!8[14]
%46 = load i64, [32, i64] XREG!8[15]
%43 = i1 Ne i64 %45, %46
br i1 %43, label %bb14, label %bb15
bb14:
%44 = i64 Add i64 PC!7, -12
PC!9 = store i64 %44, i64 PC!8
br label %bb16
bb15:
br label %bb16
bb16:
PC!10 = phi ite %43 %44 PC!7
%41 = i1 Eq i64 PC!10, PC!7
br i1 %41, label %bb17, label %bb18
bb17:
%42 = i64 Add i64 PC!10, 4
PC!14 = store i64 %42, i64 PC!10
br label %bb19
bb18:
br label %bb19
bb19:
PC!11 = phi ite %43 %44 %42
PC!12 = store i64 PC!11, i64 PC!11
PC!13 = store i64 PC!11, i64 PC!12
ret void

cherry
bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = Zext i3 %6 to i6
%8 = i6 Mul i6 %7, 8
tmp_bit_offset!2 = store i6 %8, i6 tmp_bit_offset!1
%9 = Extract i3 of i64 %2 <2, 0>
%10 = i1 Ult i3 %9, -3
br i1 %10, label %bb1, label %bb2
bb1:
%11 = i6 Add i6 %8, 31
%12 = load i64, [9007199254740992, i64] MEM!1[%5]
%13 = Extract i32 of i64 %12 <%11, %8>
tmp_word!5 = store i32 %13, i32 tmp_word!1
br label %bb3
bb2:
%14 = i53 Add i53 %5, 1
%15 = load i64, [9007199254740992, i64] MEM!1[%14]
tmp_dword1!2 = store i64 %15, i64 tmp_dword1!1
%16 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %16, i64 tmp_dword2!1
%17 = Extract i2 of i64 %2 <1, 0>
%18 = i1 Eq i2 %17, 1
br i1 %18, label %bb4, label %bb5
bb3:
tmp_word!6 = phi ite %10 %13 ite %18 %19 ite %23 %24 %27
tmp_dword2!3 = phi ite %10 tmp_dword2!1 %16
tmp_dword1!3 = phi ite %10 tmp_dword1!1 %15
%30 = Sext i32 tmp_word!6 to i64
rd_var!2 = store i64 %30, i64 rd_var!1
XREG!3 = store i64 %30, [32, i64] XREG!2[13]
%1 = i64 Add i64 PC!1, 4
PC!16 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%33 = load i64, [32, i64] XREG!4[15]
%32 = i64 Add i64 %33, 4
XREG!5 = store i64 %32, [32, i64] XREG!4[15]
%31 = i64 Add i64 PC!2, 4
PC!4 = store i64 %31, i64 PC!3
store i64 %31, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%39 = load i64, [32, i64] XREG!6[13]
%35 = Extract i32 of i64 %39 <31, 0>
%40 = load i64, [32, i64] XREG!6[10]
%37 = Extract i32 of i64 %40 <31, 0>
%36 = i32 Add i32 %35, %37
%38 = Sext i32 %36 to i64
XREG!7 = store i64 %38, [32, i64] XREG!6[10]
%34 = i64 Add i64 PC!5, 4
PC!15 = store i64 %34, i64 PC!6
store i64 %34, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%45 = load i64, [32, i64] XREG!8[14]
%46 = load i64, [32, i64] XREG!8[15]
%43 = i1 Ne i64 %45, %46
br i1 %43, label %bb8, label %bb9
bb4:
%20 = Extract i8 of i64 %15 <7, 0>
%21 = Extract i24 of i64 %16 <63, 40>
%19 = Concat i32 i8 %20, i24 %21
tmp_word!4 = store i32 %19, i32 tmp_word!1
br label %bb3
bb5:
%22 = Extract i2 of i64 %2 <1, 0>
%23 = i1 Eq i2 %22, -2
br i1 %23, label %bb6, label %bb7
bb6:
%25 = Extract i16 of i64 %15 <15, 0>
%26 = Extract i16 of i64 %16 <63, 48>
%24 = Concat i32 i16 %25, i16 %26
tmp_word!3 = store i32 %24, i32 tmp_word!1
br label %bb3
bb7:
%28 = Extract i24 of i64 %15 <23, 0>
%29 = Extract i8 of i64 %16 <63, 56>
%27 = Concat i32 i24 %28, i8 %29
tmp_word!2 = store i32 %27, i32 tmp_word!1
br label %bb3
bb8:
%44 = i64 Add i64 PC!7, -12
PC!9 = store i64 %44, i64 PC!8
br label %bb10
bb9:
br label %bb10
bb10:
PC!10 = phi ite %43 %44 PC!7
%41 = i1 Eq i64 PC!10, PC!7
br i1 %41, label %bb11, label %bb12
bb11:
%42 = i64 Add i64 PC!10, 4
PC!14 = store i64 %42, i64 PC!10
br label %bb13
bb12:
br label %bb13
bb13:
PC!11 = phi ite %43 %44 %42
PC!12 = store i64 PC!11, i64 PC!11
PC!13 = store i64 PC!11, i64 PC!12
ret void

bb_2 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[15]
%2 = i64 Add i64 %3, 0
tmp_address!2 = store i64 %2, i64 tmp_address!1
%4 = i64 Lshr i64 %2, 3
%5 = Extract i53 of i64 %4 <52, 0>
mem_index!2 = store i53 %5, i53 mem_index!1
%6 = Extract i3 of i64 %2 <2, 0>
%7 = Zext i3 %6 to i6
%8 = i6 Mul i6 %7, 8
tmp_bit_offset!2 = store i6 %8, i6 tmp_bit_offset!1
%9 = Extract i3 of i64 %2 <2, 0>
%10 = i1 Ult i3 %9, -3
br i1 %10, label %bb1, label %bb2
bb1:
%11 = i6 Add i6 %8, 31
%12 = load i64, [9007199254740992, i64] MEM!1[%5]
%13 = Extract i32 of i64 %12 <%11, %8>
tmp_word!5 = store i32 %13, i32 tmp_word!1
br label %bb3
bb2:
%14 = i53 Add i53 %5, 1
%15 = load i64, [9007199254740992, i64] MEM!1[%14]
tmp_dword1!2 = store i64 %15, i64 tmp_dword1!1
%16 = load i64, [9007199254740992, i64] MEM!1[%5]
tmp_dword2!2 = store i64 %16, i64 tmp_dword2!1
%17 = Extract i2 of i64 %2 <1, 0>
%18 = i1 Eq i2 %17, 1
br i1 %18, label %bb4, label %bb5
bb3:
tmp_word!6 = phi ite %10 %13 ite %18 %19 ite %23 %24 %27
tmp_dword2!3 = phi ite %10 tmp_dword2!1 %16
tmp_dword1!3 = phi ite %10 tmp_dword1!1 %15
%30 = Sext i32 tmp_word!6 to i64
rd_var!2 = store i64 %30, i64 rd_var!1
XREG!3 = store i64 %30, [32, i64] XREG!2[13]
%1 = i64 Add i64 PC!1, 4
PC!16 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!2
PC!3 = store i64 PC!2, i64 PC!2
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!2, i64 prev_pc!2
%33 = load i64, [32, i64] XREG!4[15]
%32 = i64 Add i64 %33, 4
XREG!5 = store i64 %32, [32, i64] XREG!4[15]
%31 = i64 Add i64 PC!2, 4
PC!4 = store i64 %31, i64 PC!3
store i64 %31, i64 PC!5
PC!6 = store i64 PC!5, i64 PC!5
XREG!6 = store i64 0, [32, i64] XREG!5[0]
prev_pc!4 = store i64 PC!5, i64 prev_pc!3
%39 = load i64, [32, i64] XREG!6[13]
%35 = Extract i32 of i64 %39 <31, 0>
%40 = load i64, [32, i64] XREG!6[10]
%37 = Extract i32 of i64 %40 <31, 0>
%36 = i32 Add i32 %35, %37
%38 = Sext i32 %36 to i64
XREG!7 = store i64 %38, [32, i64] XREG!6[10]
%34 = i64 Add i64 PC!5, 4
PC!15 = store i64 %34, i64 PC!6
store i64 %34, i64 PC!7
PC!8 = store i64 PC!7, i64 PC!7
XREG!8 = store i64 0, [32, i64] XREG!7[0]
prev_pc!5 = store i64 PC!7, i64 prev_pc!4
%45 = load i64, [32, i64] XREG!8[14]
%46 = load i64, [32, i64] XREG!8[15]
%43 = i1 Ne i64 %45, %46
br i1 %43, label %bb8, label %bb9
bb4:
%20 = Extract i8 of i64 %15 <7, 0>
%21 = Extract i24 of i64 %16 <63, 40>
%19 = Concat i32 i8 %20, i24 %21
tmp_word!4 = store i32 %19, i32 tmp_word!1
br label %bb3
bb5:
%22 = Extract i2 of i64 %2 <1, 0>
%23 = i1 Eq i2 %22, -2
br i1 %23, label %bb6, label %bb7
bb6:
%25 = Extract i16 of i64 %15 <15, 0>
%26 = Extract i16 of i64 %16 <63, 48>
%24 = Concat i32 i16 %25, i16 %26
tmp_word!3 = store i32 %24, i32 tmp_word!1
br label %bb3
bb7:
%28 = Extract i24 of i64 %15 <23, 0>
%29 = Extract i8 of i64 %16 <63, 56>
%27 = Concat i32 i24 %28, i8 %29
tmp_word!2 = store i32 %27, i32 tmp_word!1
br label %bb3
bb8:
%44 = i64 Add i64 PC!7, -12
PC!9 = store i64 %44, i64 PC!8
br label %bb10
bb9:
br label %bb10
bb10:
PC!10 = phi ite %43 %44 PC!7
%41 = i1 Eq i64 PC!10, PC!7
br i1 %41, label %bb11, label %bb12
bb11:
%42 = i64 Add i64 PC!10, 4
PC!14 = store i64 %42, i64 PC!10
br label %bb13
bb12:
br label %bb13
bb13:
PC!11 = phi ite %43 %44 %42
PC!12 = store i64 PC!11, i64 PC!11
PC!13 = store i64 PC!11, i64 PC!12
ret void

COMPILE
bb_3 func void []
bb0:
call void insn_12.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_3 func void []
bb0:
br label %bb6
bb1:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = load i64, i64 PC
%10 = i64 Add i64 %9, 4
store i64 %10, [32, i64] XREG[0]
%11 = Sext i12 0 to i64
%12 = i64 Lshr i64 %11, 1
%13 = i64 Shl i64 %12, 1
%15 = load i64, [32, i64] XREG[1]
%14 = i64 Add i64 %15, %13
store i64 %14, i64 PC
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2

propagate
bb_3 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = load i64, i64 PC
%10 = i64 Add i64 %9, 4
store i64 %10, [32, i64] XREG[0]
%12 = load i64, [32, i64] XREG[1]
%11 = i64 Add i64 %12, 0
store i64 %11, i64 PC
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_3 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = load i64, i64 PC
%10 = i64 Add i64 %9, 4
store i64 %10, [32, i64] XREG[0]
%12 = load i64, [32, i64] XREG[1]
%11 = i64 Add i64 %12, 0
store i64 %11, i64 PC
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%9 = load i64, i64 PC!1
%10 = i64 Add i64 %9, 4
XREG!3 = store i64 %10, [32, i64] XREG!2[0]
%12 = load i64, [32, i64] XREG!3[1]
%11 = i64 Add i64 %12, 0
PC!2 = store i64 %11, i64 PC!1
%4 = load i64, i64 PC!2
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!2
%8 = i64 Add i64 %7, 4
PC!6 = store i64 %8, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %5 PC!6 PC!2
%2 = load i64, i64 PC!3
PC!4 = store i64 %2, i64 PC!3
%1 = load i64, i64 PC!4
PC!5 = store i64 %1, i64 PC!4
ret void

SSA forward
bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = i64 Add i64 PC!1, 4
XREG!3 = store i64 %3, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!3[1]
%4 = i64 Add i64 %5, 0
PC!2 = store i64 %4, i64 PC!1
%1 = i1 Eq i64 %4, PC!1
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %4, 4
PC!6 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %4
PC!4 = store i64 PC!3, i64 PC!3
PC!5 = store i64 PC!3, i64 PC!4
ret void

Nested SCCP
bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = i64 Add i64 PC!1, 4
XREG!3 = store i64 %3, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!3[1]
%4 = i64 Add i64 %5, 0
PC!2 = store i64 %4, i64 PC!1
%1 = i1 Eq i64 %4, PC!1
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %4, 4
PC!6 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %4
PC!4 = store i64 PC!3, i64 PC!3
PC!5 = store i64 PC!3, i64 PC!4
ret void

SCCP forward
bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = i64 Add i64 PC!1, 4
XREG!3 = store i64 %3, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!3[1]
%4 = i64 Add i64 %5, 0
PC!2 = store i64 %4, i64 PC!1
%1 = i1 Eq i64 %4, PC!1
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %4, 4
PC!6 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %4
PC!4 = store i64 PC!3, i64 PC!3
PC!5 = store i64 PC!3, i64 PC!4
ret void

cherry
bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = i64 Add i64 PC!1, 4
XREG!3 = store i64 %3, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!3[1]
%4 = i64 Add i64 %5, 0
PC!2 = store i64 %4, i64 PC!1
%1 = i1 Eq i64 %4, PC!1
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %4, 4
PC!6 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %4
PC!4 = store i64 PC!3, i64 PC!3
PC!5 = store i64 PC!3, i64 PC!4
ret void

bb_3 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = i64 Add i64 PC!1, 4
XREG!3 = store i64 %3, [32, i64] XREG!2[0]
%5 = load i64, [32, i64] XREG!3[1]
%4 = i64 Add i64 %5, 0
PC!2 = store i64 %4, i64 PC!1
%1 = i1 Eq i64 %4, PC!1
br i1 %1, label %bb1, label %bb2
bb1:
%2 = i64 Add i64 %4, 4
PC!6 = store i64 %2, i64 PC!2
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %1 %2 %4
PC!4 = store i64 PC!3, i64 PC!3
PC!5 = store i64 PC!3, i64 PC!4
ret void

COMPILE
bb_4 func void []
bb0:
call void insn_13.action %0 ()
call void insn_14.action %0 ()
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline calls
bb_4 func void []
bb0:
br label %bb6
bb1:
br label %bb12
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%9 = Sext i12 0 to i64
%11 = load i64, [32, i64] XREG[0]
%10 = i64 Add i64 %11, %9
store i64 %10, [32, i64] XREG[10]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb1
bb6:
br label %bb2
bb7:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void
bb8:
store i64 0, [32, i64] XREG[0]
%13 = load i64, i64 PC
store i64 %13, i64 prev_pc
%19 = load i64, i64 PC
%20 = i64 Add i64 %19, 4
store i64 %20, [32, i64] XREG[0]
%21 = Sext i12 0 to i64
%22 = i64 Lshr i64 %21, 1
%23 = i64 Shl i64 %22, 1
%25 = load i64, [32, i64] XREG[1]
%24 = i64 Add i64 %25, %23
store i64 %24, i64 PC
%14 = load i64, i64 PC
%16 = load i64, i64 prev_pc
%15 = i1 Eq i64 %14, %16
br i1 %15, label %bb9, label %bb10
bb9:
%17 = load i64, i64 PC
%18 = i64 Add i64 %17, 4
store i64 %18, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%12 = load i64, i64 PC
store i64 %12, i64 PC
br label %bb7
bb12:
br label %bb8

propagate
bb_4 func void []
bb0:
br label %bb1
bb1:
br label %bb2
bb2:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, 0
store i64 %9, [32, i64] XREG[10]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb3, label %bb4
bb3:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb5
bb4:
br label %bb5
bb5:
%2 = load i64, i64 PC
store i64 %2, i64 PC
br label %bb6
bb6:
br label %bb7
bb7:
br label %bb8
bb8:
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%18 = load i64, i64 PC
%19 = i64 Add i64 %18, 4
store i64 %19, [32, i64] XREG[0]
%21 = load i64, [32, i64] XREG[1]
%20 = i64 Add i64 %21, 0
store i64 %20, i64 PC
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb9, label %bb10
bb9:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb11
bb10:
br label %bb11
bb11:
%11 = load i64, i64 PC
store i64 %11, i64 PC
br label %bb12
bb12:
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

inline blocks
bb_4 func void []
bb0:
store i64 0, [32, i64] XREG[0]
%3 = load i64, i64 PC
store i64 %3, i64 prev_pc
%10 = load i64, [32, i64] XREG[0]
%9 = i64 Add i64 %10, 0
store i64 %9, [32, i64] XREG[10]
%4 = load i64, i64 PC
%6 = load i64, i64 prev_pc
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC
%8 = i64 Add i64 %7, 4
store i64 %8, i64 PC
br label %bb3
bb2:
br label %bb3
bb3:
%2 = load i64, i64 PC
store i64 %2, i64 PC
store i64 0, [32, i64] XREG[0]
%12 = load i64, i64 PC
store i64 %12, i64 prev_pc
%18 = load i64, i64 PC
%19 = i64 Add i64 %18, 4
store i64 %19, [32, i64] XREG[0]
%21 = load i64, [32, i64] XREG[1]
%20 = i64 Add i64 %21, 0
store i64 %20, i64 PC
%13 = load i64, i64 PC
%15 = load i64, i64 prev_pc
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC
%17 = i64 Add i64 %16, 4
store i64 %17, i64 PC
br label %bb6
bb5:
br label %bb6
bb6:
%11 = load i64, i64 PC
store i64 %11, i64 PC
%1 = load i64, i64 PC
store i64 %1, i64 PC
ret void

build SSA
bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
%3 = load i64, i64 PC!1
prev_pc!2 = store i64 %3, i64 prev_pc!1
%10 = load i64, [32, i64] XREG!2[0]
%9 = i64 Add i64 %10, 0
XREG!3 = store i64 %9, [32, i64] XREG!2[10]
%4 = load i64, i64 PC!1
%6 = load i64, i64 prev_pc!2
%5 = i1 Eq i64 %4, %6
br i1 %5, label %bb1, label %bb2
bb1:
%7 = load i64, i64 PC!1
%8 = i64 Add i64 %7, 4
PC!2 = store i64 %8, i64 PC!1
br label %bb3
bb2:
br label %bb3
bb3:
PC!3 = phi ite %5 PC!2 PC!1
%2 = load i64, i64 PC!3
PC!4 = store i64 %2, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
%12 = load i64, i64 PC!4
prev_pc!3 = store i64 %12, i64 prev_pc!2
%18 = load i64, i64 PC!4
%19 = i64 Add i64 %18, 4
XREG!5 = store i64 %19, [32, i64] XREG!4[0]
%21 = load i64, [32, i64] XREG!5[1]
%20 = i64 Add i64 %21, 0
PC!5 = store i64 %20, i64 PC!4
%13 = load i64, i64 PC!5
%15 = load i64, i64 prev_pc!3
%14 = i1 Eq i64 %13, %15
br i1 %14, label %bb4, label %bb5
bb4:
%16 = load i64, i64 PC!5
%17 = i64 Add i64 %16, 4
PC!6 = store i64 %17, i64 PC!5
br label %bb6
bb5:
br label %bb6
bb6:
PC!7 = phi ite %14 PC!6 PC!5
%11 = load i64, i64 PC!7
PC!8 = store i64 %11, i64 PC!7
%1 = load i64, i64 PC!8
PC!9 = store i64 %1, i64 PC!8
ret void

SSA forward
bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[10]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = i64 Add i64 PC!3, 4
XREG!5 = store i64 %6, [32, i64] XREG!4[0]
%8 = load i64, [32, i64] XREG!5[1]
%7 = i64 Add i64 %8, 0
PC!5 = store i64 %7, i64 PC!4
%4 = i1 Eq i64 %7, PC!3
br i1 %4, label %bb3, label %bb4
bb3:
%5 = i64 Add i64 %7, 4
PC!6 = store i64 %5, i64 PC!5
br label %bb5
bb4:
br label %bb5
bb5:
PC!7 = phi ite %4 %5 %7
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

Nested SCCP
bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[10]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = i64 Add i64 PC!3, 4
XREG!5 = store i64 %6, [32, i64] XREG!4[0]
%8 = load i64, [32, i64] XREG!5[1]
%7 = i64 Add i64 %8, 0
PC!5 = store i64 %7, i64 PC!4
%4 = i1 Eq i64 %7, PC!3
br i1 %4, label %bb3, label %bb4
bb3:
%5 = i64 Add i64 %7, 4
PC!6 = store i64 %5, i64 PC!5
br label %bb5
bb4:
br label %bb5
bb5:
PC!7 = phi ite %4 %5 %7
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

SCCP forward
bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[10]
br label %bb1
bb1:
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
br label %bb2
bb2:
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = i64 Add i64 PC!3, 4
XREG!5 = store i64 %6, [32, i64] XREG!4[0]
%8 = load i64, [32, i64] XREG!5[1]
%7 = i64 Add i64 %8, 0
PC!5 = store i64 %7, i64 PC!4
%4 = i1 Eq i64 %7, PC!3
br i1 %4, label %bb3, label %bb4
bb3:
%5 = i64 Add i64 %7, 4
PC!6 = store i64 %5, i64 PC!5
br label %bb5
bb4:
br label %bb5
bb5:
PC!7 = phi ite %4 %5 %7
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

cherry
bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[10]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = i64 Add i64 PC!3, 4
XREG!5 = store i64 %6, [32, i64] XREG!4[0]
%8 = load i64, [32, i64] XREG!5[1]
%7 = i64 Add i64 %8, 0
PC!5 = store i64 %7, i64 PC!4
%4 = i1 Eq i64 %7, PC!3
br i1 %4, label %bb1, label %bb2
bb1:
%5 = i64 Add i64 %7, 4
PC!6 = store i64 %5, i64 PC!5
br label %bb3
bb2:
br label %bb3
bb3:
PC!7 = phi ite %4 %5 %7
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

bb_4 func void []
bb0:
XREG!2 = store i64 0, [32, i64] XREG!1[0]
prev_pc!2 = store i64 PC!1, i64 prev_pc!1
%3 = load i64, [32, i64] XREG!2[0]
%2 = i64 Add i64 %3, 0
XREG!3 = store i64 %2, [32, i64] XREG!2[10]
%1 = i64 Add i64 PC!1, 4
PC!2 = store i64 %1, i64 PC!1
store i64 %1, i64 PC!3
PC!4 = store i64 PC!3, i64 PC!3
XREG!4 = store i64 0, [32, i64] XREG!3[0]
prev_pc!3 = store i64 PC!3, i64 prev_pc!2
%6 = i64 Add i64 PC!3, 4
XREG!5 = store i64 %6, [32, i64] XREG!4[0]
%8 = load i64, [32, i64] XREG!5[1]
%7 = i64 Add i64 %8, 0
PC!5 = store i64 %7, i64 PC!4
%4 = i1 Eq i64 %7, PC!3
br i1 %4, label %bb1, label %bb2
bb1:
%5 = i64 Add i64 %7, 4
PC!6 = store i64 %5, i64 PC!5
br label %bb3
bb2:
br label %bb3
bb3:
PC!7 = phi ite %4 %5 %7
PC!8 = store i64 PC!7, i64 PC!7
PC!9 = store i64 PC!7, i64 PC!8
ret void

Created file: sum.bin.smt2
