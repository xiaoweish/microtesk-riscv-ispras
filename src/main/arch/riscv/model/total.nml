#ifdef RV64I
  let XLEN = 64
  let XLEN_RANGE = 63
  let SHLEN = 6
#else
  let XLEN = 32
  let SHLEN = 5
#endif
type XWORD = card(XLEN)
type XINT = int(XLEN)
type XDWORD = card(XLEN*2)
type XLONG = int(XLEN*2)
type   BIT = card(1)
type  BYTE = card(8)
type HWORD = card(16)
type  WORD = card(32)
type DWORD = card(64)
type QWORD = card(128)
type SHORT = int(16)
type   INT = int(32)
type  LONG = int(64)
type  FLOAT32 = float(23, 8)
type  FLOAT64 = float(52, 11)
type FLOAT128 = float(112, 15)
let FP_FMT_S = 0b00
let FP_FMT_D = 0b01
let FP_FMT_Q = 0b11
reg XREG [32, XWORD]
#ifdef RV32F
  #ifdef RV128F
    let FLEN = 128
  #else
    #ifdef RV64F
      let FLEN = 64
    #else
      let FLEN = 32
    #endif
  #endif
  reg FPR [32, card(FLEN)]
#endif
reg PC [XWORD]
type CSR_TYPE = card(XLEN)
reg CSR[1 << 12, CSR_TYPE]
let MEM_SIZE = XLEN
let MEM_SIZE_IN_WORDS = 2 ** (MEM_SIZE)
shared mem MEM [MEM_SIZE_IN_WORDS, WORD]
#ifdef RV32A
  reg LOAD_RESERVATION[XWORD]
#else
  #ifdef RV64A
    reg LOAD_RESERVATION[XWORD]
  #endif
#endif
mode ZERO () = XREG [0]
  syntax = format("zero")
mode RA () = XREG [1]
  syntax = format("ra")
mode SP () = XREG [2]
  syntax = format("sp")
mode GP () = XREG [3]
  syntax = format("gp")
mode TP () = XREG [4]
  syntax = format("tp")
mode TemporariesCaller (i: card(3))
  syntax = format("t%d", i)
mode SavedCallee (i: card(4))
  syntax = format("s%d", i)
mode FunctionCaller (i: card(3))
  syntax = format("a%d", i)
mode X (i: card(5)) = XREG [i]
  syntax = format("%s", if i == 0 then ZERO().syntax
                        elif i == 1 then RA().syntax
                        elif i == 2 then SP().syntax
                        elif i == 3 then GP().syntax
                        elif i == 4 then TP().syntax
                        elif i >= 5 && i <= 7 then TemporariesCaller(coerce(card(3), i-5)).syntax
                        elif i >= 8 && i <= 9 then SavedCallee(coerce(card(4), i-8)).syntax
                        elif i >= 10 && i <= 17 then FunctionCaller(coerce(card(3), i-10)).syntax
                        elif i >= 18 && i <= 27 then SavedCallee(coerce(card(4), i-16)).syntax
                        elif i >= 28 && i <= 31 then TemporariesCaller(coerce(card(3), i-25)).syntax
                        else "error" endif)
  image  = format("%5s", i)
mode FPTemporariesCaller (i: card(4))
  syntax = format("ft%d", i)
mode FPSavedCallee (i: card(4))
  syntax = format("fs%d", i)
mode FPArgumentsCaller (i: card(3))
  syntax = format("fa%d", i)
mode F (i: card(5)) = FPR[i]
  syntax = format("%s", if i >= 0 && i <= 7 then FPTemporariesCaller(coerce(card(4), i)).syntax
                        elif i >= 8 && i <= 9 then FPSavedCallee(coerce(card(4), i-8)).syntax
                        elif i >= 10 && i <= 17 then FPArgumentsCaller(coerce(card(3), i-10)).syntax
                        elif i >= 18 && i <= 27 then FPSavedCallee(coerce(card(4), i-16)).syntax
                        elif i >= 28 && i <= 31 then FPTemporariesCaller(coerce(card(4), i-20)).syntax
                        else "error" endif)
  image  = format("%5s", i)
var prev_pc [XWORD]
var tmp_address [XWORD]
var tmp_index [XWORD]
var tmp_bit [BIT]
var tmp_byte [BYTE]
var tmp_half [HWORD]
var tmp_dword [DWORD]
var tmp_word [WORD]
var tmp_int1 [INT]
var tmp_int2 [INT]
var tmp_long1 [LONG]
var tmp_long2 [LONG]
var mem_index [card(MEM_SIZE)]
#ifdef RV32F
  var temp_fps  [FLOAT32]
  var temp_fps2 [FLOAT32]
  var temp_fps3 [FLOAT32]
#endif
#ifdef RV32D
  var temp_fpd  [FLOAT64]
  var temp_fpd2 [FLOAT64]
  var temp_fpd3 [FLOAT64]
#endif
#ifndef RV32D
#ifdef RV64F
  var temp_fpd  [FLOAT64]
  var temp_fpd2 [FLOAT64]
  var temp_fpd3 [FLOAT64]
#endif
#endif
var tmp_bit_offset [card(5)]
var opcode_xtype[card(7)]
var funct3[card(3)]
var funct7[card(7)]
#include "riscv_csreg.nml"
#ifdef RV32A
  #define LOAD_STORE_MEM
#endif
#ifdef RV32F
  #define LOAD_STORE_MEM
  #define ROUNDING_MODE_ON
#endif
#ifdef LOAD_STORE_MEM
let MEM_DWORD = 8
let MEM_WORD  = 4
let MEM_HWORD = 2
let MEM_BYTE  = 1
var temp_address_load[DWORD]
var temp_address_tail[card(2)]
internal op check_aligned(op_type: card(4), address: XWORD)
  action = {
    if (op_type == MEM_DWORD && address<2..0> != 0) ||
       (op_type == MEM_WORD && address<1..0> != 0) ||
       (op_type == MEM_HWORD && address<0> != 0) then
      trace("For best performance, the effective address for all loads and stores should be");
      trace("naturally aligned for each data type");
      exception("Address Error: rv32a");
      tmp_bit = 1;
    endif;
  }
var load_value[XWORD]
internal op load_data(op_type: card(4), address: XWORD)
  action = {
    tmp_bit = 0;
    check_aligned(op_type, address).action;
    mem_index = coerce(card(MEM_SIZE), address >> 2);
    if tmp_bit != 1 then
      if op_type == MEM_DWORD then
#ifdef RV64I
        load_value<63..0> = MEM[mem_index + 1] :: MEM[mem_index];
#endif
      elif op_type == MEM_WORD then
        load_value = 0;
        load_value<31..0> = MEM[mem_index];
      endif;
    endif;
  }
internal op store_data(op_type: card(4), address: XWORD, store_value: XWORD)
  action = {
    tmp_bit = 0;
    check_aligned(op_type, address).action;
    mem_index = coerce(card(MEM_SIZE), address >> 2);
    if tmp_bit != 1 then
      if op_type == MEM_DWORD then
#ifdef RV64I
        MEM[mem_index + 1] :: MEM[mem_index] = store_value;
#endif
      elif op_type == MEM_WORD then
        MEM[mem_index] = store_value<31..0>;
      endif;
    endif;
  }
#endif
internal op process_float_exception_flags()
  action = {
    tmp_word = float_exception_flags;
    FFLAGS_EXCEP = tmp_word<4..0>;
    FCSR_EXCEP = tmp_word<4..0>;
    float_exception_flags = 0;
  }
#ifdef ROUNDING_MODE_ON
let RM_RNE = 0b000
let RM_RTZ = 0b001
let RM_RDN = 0b010
let RM_RUP = 0b011
let RM_RMM = 0b100
internal op setSFRoundingMode(rmode: card(3))
action = {
  if rmode == coerce(card(3), RM_RNE) then
    float_rounding_mode = coerce(WORD, 0);
  elif rmode == coerce(card(3), RM_RTZ) then
    float_rounding_mode = coerce(WORD, 3);
  elif rmode == coerce(card(3), RM_RDN) then
    float_rounding_mode = coerce(WORD, 2);
  elif rmode == coerce(card(3), RM_RUP) then
    float_rounding_mode = coerce(WORD, 1);
  elif rmode == coerce(card(3), RM_RMM) then
    float_rounding_mode = coerce(WORD, 4);
  endif;
}
internal op setFPRoundingMode(rmode: card(3))
action = {
  setSFRoundingMode(rmode).action;
  FCSR_FRM = rmode;
  FRM_FRM = rmode;
}
#endif
pseudo op print_imm12(imm: card(12))
  syntax = format("%d", cast(int(12), imm))
#include "riscv_rv32i.nml"
#include "riscv_rv32i_sys.nml"
#ifdef RV32M
  #include "riscv_rv32m.nml"
#endif
#ifdef RV32A
  #include "riscv_rv32a.nml"
#endif
#ifdef RV32F
  #include "riscv_rv32f.nml"
#endif
#ifdef RV64I
  #include "riscv_rv64i.nml"
#endif
#ifdef RV64M
  #include "riscv_rv64m.nml"
#endif
#ifdef RV64A
  #include "riscv_rv64a.nml"
#endif
#ifdef RV64F
  #include "riscv_rv64f.nml"
#endif
#ifdef RV32D
  #include "riscv_rv32d.nml"
#endif
#ifdef RV64D
  #include "riscv_rv64d.nml"
#endif
#ifdef RV32V
  #include "riscv_rv32v.nml"
#endif
#ifdef RV32C
  #include "riscv_rvc.nml"
#endif
@rev(RV64C)
op instruction(operation: Op)
  syntax = operation.syntax
  image  = operation.image
  action = {
    XREG[0] = 0;
    prev_pc = PC;
    operation.action;
    if PC == prev_pc then
      PC = PC + 4;
    endif;
  }
@rev(RV64C)
op instruction16(operation: Op16)
  syntax = operation.syntax
  image  = operation.image
  action = {
    XREG[0] = 0;
    prev_pc = PC;
    operation.action;
    if PC == prev_pc then
      PC = PC + 2;
    endif;
  }
internal op exception()
action = {
  PC = PC + 4;
}
#include "riscv_pseudo.nml"
#ifndef RISCV_CSR_INCLUDED
#define RISCV_CSR_INCLUDED
let U_MODE = 0b00
let S_MODE = 0b01
let RESERVED_MODE = 0b10
let M_MODE = 0b11
struct CSR_ADDRESS (
  read: card(2),
  priv: card(2),
  std:  card(2),
  tag:  card(6)
)
var csr_index[card(12)]
mode USTATUS() = CSR[0x000]
  init = { csr_index = 0x000; }
  syntax = format("ustatus")
  image = format("%12s", csr_index)
mode UIE() = CSR[0x004]
  init = { csr_index = 0x004; }
  syntax = format("uie")
  image = format("%12s", csr_index)
mode UTVEC() = CSR[0x005]
  init = { csr_index = 0x005; }
  syntax = format("utvec")
  image = format("%12s", csr_index)
mode USCRATCH() = CSR[0x040]
  init = { csr_index = 0x040; }
  syntax = format("uscratch")
  image = format("%12s", csr_index)
mode UEPC() = CSR[0x041]
  init = { csr_index = 0x041; }
  syntax = format("uepc")
  image = format("%12s", csr_index)
mode UCAUSE() = CSR[0x042]
  init = { csr_index = 0x042; }
  syntax = format("ucause")
  image = format("%12s", csr_index)
mode UTVAL() = CSR[0x043]
  init = { csr_index = 0x043; }
  syntax = format("utval")
  image = format("%12s", csr_index)
mode UIP() = CSR[0x044]
  init = { csr_index = 0x044; }
  syntax = format("uip")
  image = format("%12s", csr_index)
mode FFLAGS() = XREG[0]<XLEN-1..5>::CSR[0x003]<4..0>
  init = { csr_index = 0x001; }
  syntax = format("fflags")
  image = format("%12s", csr_index)
reg FFLAGS_EXCEP[card(5)] alias = FFLAGS_CSR<4..0>
mode FRM() = XREG[0]<XLEN-1..3>::CSR[0x003]<7..5>
  init = { csr_index = 0x002; }
  syntax = format("frm")
  image = format("%12s", csr_index)
reg FRM_FRM [card(3)] alias = FRM_CSR<2..0>
mode FCSR() = XREG[0]<XLEN-1..8>::CSR[0x003]<7..0>
  init = { csr_index = 0x003; }
  syntax = format("fcsr")
  image = format("%12s", csr_index)
reg FCSR_EXCEP[card(5)] alias = FCSR_CSR<4..0>
reg FCSR_FRM [card(3)] alias = FCSR_CSR<7..5>
mode CYCLE() = CSR[0xC00]
  init = { csr_index = 0xC00; }
  syntax = format("cycle")
  image = format("%12s", csr_index)
mode TIME() = CSR[0xC01]
  init = { csr_index = 0xC01; }
  syntax = format("time")
  image = format("%12s", csr_index)
mode INSTRET() = CSR[0xC02]
  init = { csr_index = 0xC02; }
  syntax = format("instret")
  image = format("%12s", csr_index)
mode HPMCOUNTER3() = CSR[0xC03]
  init = { csr_index = 0xC03; }
  syntax = format("hpmcounter3")
  image = format("%12s", csr_index)
mode HPMCOUNTER4() = CSR[0xC04]
  init = { csr_index = 0xC04; }
  syntax = format("hpmcounter4")
  image = format("%12s", csr_index)
mode HPMCOUNTER5() = CSR[0xC05]
  init = { csr_index = 0xC05; }
  syntax = format("hpmcounter5")
  image = format("%12s", csr_index)
mode HPMCOUNTER6() = CSR[0xC06]
  init = { csr_index = 0xC06; }
  syntax = format("hpmcounter6")
  image = format("%12s", csr_index)
mode HPMCOUNTER7() = CSR[0xC07]
  init = { csr_index = 0xC07; }
  syntax = format("hpmcounter7")
  image = format("%12s", csr_index)
mode HPMCOUNTER8() = CSR[0xC08]
  init = { csr_index = 0xC08; }
  syntax = format("hpmcounter8")
  image = format("%12s", csr_index)
mode HPMCOUNTER9() = CSR[0xC09]
  init = { csr_index = 0xC09; }
  syntax = format("hpmcounter9")
  image = format("%12s", csr_index)
mode HPMCOUNTER10() = CSR[0xC0A]
  init = { csr_index = 0xC0A; }
  syntax = format("hpmcounter10")
  image = format("%12s", csr_index)
mode HPMCOUNTER11() = CSR[0xC0B]
  init = { csr_index = 0xC0B; }
  syntax = format("hpmcounter11")
  image = format("%12s", csr_index)
mode HPMCOUNTER12() = CSR[0xC0C]
  init = { csr_index = 0xC0C; }
  syntax = format("hpmcounter12")
  image = format("%12s", csr_index)
mode HPMCOUNTER13() = CSR[0xC0D]
  init = { csr_index = 0xC0D; }
  syntax = format("hpmcounter13")
  image = format("%12s", csr_index)
mode HPMCOUNTER14() = CSR[0xC0E]
  init = { csr_index = 0xC0E; }
  syntax = format("hpmcounter14")
  image = format("%12s", csr_index)
mode HPMCOUNTER15() = CSR[0xC0F]
  init = { csr_index = 0xC0F; }
  syntax = format("hpmcounter15")
  image = format("%12s", csr_index)
mode HPMCOUNTER16() = CSR[0xC10]
  init = { csr_index = 0xC10; }
  syntax = format("hpmcounter16")
  image = format("%12s", csr_index)
mode HPMCOUNTER17() = CSR[0xC11]
  init = { csr_index = 0xC11; }
  syntax = format("hpmcounter17")
  image = format("%12s", csr_index)
mode HPMCOUNTER18() = CSR[0xC12]
  init = { csr_index = 0xC12; }
  syntax = format("hpmcounter18")
  image = format("%12s", csr_index)
mode HPMCOUNTER19() = CSR[0xC13]
  init = { csr_index = 0xC13; }
  syntax = format("hpmcounter19")
  image = format("%12s", csr_index)
mode HPMCOUNTER20() = CSR[0xC14]
  init = { csr_index = 0xC14; }
  syntax = format("hpmcounter20")
  image = format("%12s", csr_index)
mode HPMCOUNTER21() = CSR[0xC15]
  init = { csr_index = 0xC15; }
  syntax = format("hpmcounter21")
  image = format("%12s", csr_index)
mode HPMCOUNTER22() = CSR[0xC16]
  init = { csr_index = 0xC16; }
  syntax = format("hpmcounter22")
  image = format("%12s", csr_index)
mode HPMCOUNTER23() = CSR[0xC17]
  init = { csr_index = 0xC17; }
  syntax = format("hpmcounter23")
  image = format("%12s", csr_index)
mode HPMCOUNTER24() = CSR[0xC18]
  init = { csr_index = 0xC18; }
  syntax = format("hpmcounter24")
  image = format("%12s", csr_index)
mode HPMCOUNTER25() = CSR[0xC19]
  init = { csr_index = 0xC19; }
  syntax = format("hpmcounter25")
  image = format("%12s", csr_index)
mode HPMCOUNTER26() = CSR[0xC1A]
  init = { csr_index = 0xC1A; }
  syntax = format("hpmcounter26")
  image = format("%12s", csr_index)
mode HPMCOUNTER27() = CSR[0xC1B]
  init = { csr_index = 0xC1B; }
  syntax = format("hpmcounter27")
  image = format("%12s", csr_index)
mode HPMCOUNTER28() = CSR[0xC1C]
  init = { csr_index = 0xC1C; }
  syntax = format("hpmcounter28")
  image = format("%12s", csr_index)
mode HPMCOUNTER29() = CSR[0xC1D]
  init = { csr_index = 0xC1D; }
  syntax = format("hpmcounter29")
  image = format("%12s", csr_index)
mode HPMCOUNTER30() = CSR[0xC1E]
  init = { csr_index = 0xC1E; }
  syntax = format("hpmcounter30")
  image = format("%12s", csr_index)
mode HPMCOUNTER31() = CSR[0xC1F]
  init = { csr_index = 0xC1F; }
  syntax = format("hpmcounter31")
  image = format("%12s", csr_index)
#ifndef RV64I
mode CYCLEH() = CSR[0xC80]
  init = { csr_index = 0xC80; }
  syntax = format("cycleh")
  image = format("%12s", csr_index)
mode TIMEH() = CSR[0xC81]
  init = { csr_index = 0xC81; }
  syntax = format("timeh")
  image = format("%12s", csr_index)
mode INSTRETH() = CSR[0xC82]
  init = { csr_index = 0xC82; }
  syntax = format("instreth")
  image = format("%12s", csr_index)
mode HPMCOUNTER3H() = CSR[0xC83]
  init = { csr_index = 0xC83; }
  syntax = format("hpmcounter3h")
  image = format("%12s", csr_index)
mode HPMCOUNTER4H() = CSR[0xC84]
  init = { csr_index = 0xC84; }
  syntax = format("hpmcounter4h")
  image = format("%12s", csr_index)
mode HPMCOUNTER5H() = CSR[0xC85]
  init = { csr_index = 0xC85; }
  syntax = format("hpmcounter5h")
  image = format("%12s", csr_index)
mode HPMCOUNTER6H() = CSR[0xC86]
  init = { csr_index = 0xC86; }
  syntax = format("hpmcounter6h")
  image = format("%12s", csr_index)
mode HPMCOUNTER7H() = CSR[0xC87]
  init = { csr_index = 0xC87; }
  syntax = format("hpmcounter7h")
  image = format("%12s", csr_index)
mode HPMCOUNTER8H() = CSR[0xC88]
  init = { csr_index = 0xC88; }
  syntax = format("hpmcounter8h")
  image = format("%12s", csr_index)
mode HPMCOUNTER9H() = CSR[0xC89]
  init = { csr_index = 0xC89; }
  syntax = format("hpmcounter9h")
  image = format("%12s", csr_index)
mode HPMCOUNTER10H() = CSR[0xC8A]
  init = { csr_index = 0xC8A; }
  syntax = format("hpmcounter10h")
  image = format("%12s", csr_index)
mode HPMCOUNTER11H() = CSR[0xC8B]
  init = { csr_index = 0xC8B; }
  syntax = format("hpmcounter11h")
  image = format("%12s", csr_index)
mode HPMCOUNTER12H() = CSR[0xC8C]
  init = { csr_index = 0xC8C; }
  syntax = format("hpmcounter12h")
  image = format("%12s", csr_index)
mode HPMCOUNTER13H() = CSR[0xC8D]
  init = { csr_index = 0xC8D; }
  syntax = format("hpmcounter13h")
  image = format("%12s", csr_index)
mode HPMCOUNTER14H() = CSR[0xC8E]
  init = { csr_index = 0xC8E; }
  syntax = format("hpmcounter14h")
  image = format("%12s", csr_index)
mode HPMCOUNTER15H() = CSR[0xC8F]
  init = { csr_index = 0xC8F; }
  syntax = format("hpmcounter15h")
  image = format("%12s", csr_index)
mode HPMCOUNTER16H() = CSR[0xC90]
  init = { csr_index = 0xC90; }
  syntax = format("hpmcounter16h")
  image = format("%12s", csr_index)
mode HPMCOUNTER17H() = CSR[0xC91]
  init = { csr_index = 0xC91; }
  syntax = format("hpmcounter17h")
  image = format("%12s", csr_index)
mode HPMCOUNTER18H() = CSR[0xC92]
  init = { csr_index = 0xC92; }
  syntax = format("hpmcounter18h")
  image = format("%12s", csr_index)
mode HPMCOUNTER19H() = CSR[0xC93]
  init = { csr_index = 0xC93; }
  syntax = format("hpmcounter19h")
  image = format("%12s", csr_index)
mode HPMCOUNTER20H() = CSR[0xC94]
  init = { csr_index = 0xC94; }
  syntax = format("hpmcounter20h")
  image = format("%12s", csr_index)
mode HPMCOUNTER21H() = CSR[0xC95]
  init = { csr_index = 0xC95; }
  syntax = format("hpmcounter21h")
  image = format("%12s", csr_index)
mode HPMCOUNTER22H() = CSR[0xC96]
  init = { csr_index = 0xC96; }
  syntax = format("hpmcounter22h")
  image = format("%12s", csr_index)
mode HPMCOUNTER23H() = CSR[0xC97]
  init = { csr_index = 0xC97; }
  syntax = format("hpmcounter23h")
  image = format("%12s", csr_index)
mode HPMCOUNTER24H() = CSR[0xC98]
  init = { csr_index = 0xC98; }
  syntax = format("hpmcounter24h")
  image = format("%12s", csr_index)
mode HPMCOUNTER25H() = CSR[0xC99]
  init = { csr_index = 0xC99; }
  syntax = format("hpmcounter25h")
  image = format("%12s", csr_index)
mode HPMCOUNTER26H() = CSR[0xC9A]
  init = { csr_index = 0xC9A; }
  syntax = format("hpmcounter26h")
  image = format("%12s", csr_index)
mode HPMCOUNTER27H() = CSR[0xC9B]
  init = { csr_index = 0xC9B; }
  syntax = format("hpmcounter27h")
  image = format("%12s", csr_index)
mode HPMCOUNTER28H() = CSR[0xC9C]
  init = { csr_index = 0xC9C; }
  syntax = format("hpmcounter28h")
  image = format("%12s", csr_index)
mode HPMCOUNTER29H() = CSR[0xC9D]
  init = { csr_index = 0xC9D; }
  syntax = format("hpmcounter29h")
  image = format("%12s", csr_index)
mode HPMCOUNTER30H() = CSR[0xC9E]
  init = { csr_index = 0xC9E; }
  syntax = format("hpmcounter30h")
  image = format("%12s", csr_index)
mode HPMCOUNTER31H() = CSR[0xC9F]
  init = { csr_index = 0xC9F; }
  syntax = format("hpmcounter31h")
  image = format("%12s", csr_index)
#endif
mode SSTATUS() = CSR[0x100]
  init = { csr_index = 0x100; }
  syntax = format("sstatus")
  image = format("%12s", csr_index)
mode SEDELEG() = CSR[0x102]
  init = { csr_index = 0x102; }
  syntax = format("sedeleg")
  image = format("%12s", csr_index)
mode SIDELEG() = CSR[0x103]
  init = { csr_index = 0x103; }
  syntax = format("sideleg")
  image = format("%12s", csr_index)
mode SIE() = CSR[0x104]
  init = { csr_index = 0x104; }
  syntax = format("sie")
  image = format("%12s", csr_index)
mode STVEC() = CSR[0x105]
  init = { csr_index = 0x105; }
  syntax = format("stvec")
  image = format("%12s", csr_index)
mode SCOUNTEREN() = CSR[0x106]
  init = { csr_index = 0x106; }
  syntax = format("scounteren")
  image = format("%12s", csr_index)
mode SSCRATCH() = CSR[0x140]
  init = { csr_index = 0x140; }
  syntax = format("sscratch")
  image = format("%12s", csr_index)
mode SEPC() = CSR[0x141]
  init = { csr_index = 0x141; }
  syntax = format("sepc")
  image = format("%12s", csr_index)
mode SCAUSE() = CSR[0x142]
  init = { csr_index = 0x142; }
  syntax = format("scause")
  image = format("%12s", csr_index)
mode STVAL() = CSR[0x143]
  init = { csr_index = 0x143; }
  syntax = format("stval")
  image = format("%12s", csr_index)
mode SIP() = CSR[0x144]
  init = { csr_index = 0x144; }
  syntax = format("sip")
  image = format("%12s", csr_index)
mode SATP() = CSR[0x180]
  init = { csr_index = 0x180; }
  syntax = format("satp")
  image = format("%12s", csr_index)
reg SATP_CSR[CSR_TYPE] alias = CSR[0x300]
@rev(RV32) reg SATP_MODE [BIT]      alias = SATP_CSR<31>
@rev(RV32) reg SATP_ASID [card(9)]  alias = SATP_CSR<30..22>
@rev(RV32) reg SATP_PPN  [card(22)] alias = SATP_CSR<21..0>
@rev(RV64) reg SATP_MODE [card(4)]  alias = SATP_CSR<63..60>
@rev(RV64) reg SATP_ASID [card(16)] alias = SATP_CSR<59..44>
@rev(RV64) reg SATP_PPN  [card(44)] alias = SATP_CSR<43..0>
mode MVENDORID() = CSR[0xF11]
  init = { csr_index = 0xF11; }
  syntax = format("mvendorid")
  image = format("%12s", csr_index)
mode MARCHID() = CSR[0xF12]
  init = { csr_index = 0xF12; }
  syntax = format("marchid")
  image = format("%12s", csr_index)
mode MIMPID() = CSR[0xF13]
  init = { csr_index = 0xF13; }
  syntax = format("mimpid")
  image = format("%12s", csr_index)
mode MHARTID() = CSR[0xF14]
  init = { csr_index = 0xF14; }
  syntax = format("mhartid")
  image = format("%12s", csr_index)
mode MSTATUS() = CSR[0x300]
  init = { csr_index = 0x300; }
  syntax = format("mstatus")
  image = format("%12s", csr_index)
reg MSTATUS_CSR[CSR_TYPE] alias = CSR[0x300]
@rev(RV32) reg MSTATUS_SD [BIT] alias = MSTATUS_CSR<31>
@rev(RV64) reg MSTATUS_SD [BIT] alias = MSTATUS_CSR<XLEN-1>
@rev(RV64) reg MSTATUS_SXL [card(2)] alias = MSTATUS_CSR<35..34>
@rev(RV64) reg MSTATUS_UXL [card(2)] alias = MSTATUS_CSR<33..32>
reg MSTATUS_TSR  [BIT] alias = MSTATUS_CSR<22>
reg MSTATUS_TW   [BIT] alias = MSTATUS_CSR<21>
reg MSTATUS_TVM  [BIT] alias = MSTATUS_CSR<20>
reg MSTATUS_MXR  [BIT] alias = MSTATUS_CSR<19>
reg MSTATUS_SUM  [BIT] alias = MSTATUS_CSR<18>
reg MSTATUS_XS   [card(2)] alias = MSTATUS_CSR<16..15>
reg MSTATUS_FS   [card(2)] alias = MSTATUS_CSR<14..13>
reg MSTATUS_MPP  [card(2)] alias = MSTATUS_CSR<12..11>
reg MSTATUS_SPP  [BIT] alias = MSTATUS_CSR<8>
reg MSTATUS_MPIE [BIT] alias = MSTATUS_CSR<7>
reg MSTATUS_SPIE [BIT] alias = MSTATUS_CSR<5>
reg MSTATUS_UPIE [BIT] alias = MSTATUS_CSR<4>
reg MSTATUS_MIE  [BIT] alias = MSTATUS_CSR<3>
reg MSTATUS_SIE  [BIT] alias = MSTATUS_CSR<1>
reg MSTATUS_UIE  [BIT] alias = MSTATUS_CSR<0>
mode MISA() = CSR[0x301]
  init = { csr_index = 0x301; }
  syntax = format("misa")
  image = format("%12s", csr_index)
mode MEDELEG() = CSR[0x302]
  init = { csr_index = 0x302; }
  syntax = format("medeleg")
  image = format("%12s", csr_index)
mode MIDELEG() = CSR[0x303]
  init = { csr_index = 0x303; }
  syntax = format("mideleg")
  image = format("%12s", csr_index)
mode MIE() = CSR[0x304]
  init = { csr_index = 0x304; }
  syntax = format("mie")
  image = format("%12s", csr_index)
mode MTVEC() = CSR[0x305]
  init = { csr_index = 0x305; }
  syntax = format("mtvec")
  image = format("%12s", csr_index)
mode MCOUNTEREN() = CSR[0x306]
  init = { csr_index = 0x306; }
  syntax = format("mcounteren")
  image = format("%12s", csr_index)
mode MSCRATCH() = CSR[0x340]
  init = { csr_index = 0x340; }
  syntax = format("mscratch")
  image = format("%12s", csr_index)
mode MEPC() = CSR[0x341]
  init = { csr_index = 0x341; }
  syntax = format("mepc")
  image = format("%12s", csr_index)
mode MCAUSE() = CSR[0x342]
  init = { csr_index = 0x342; }
  syntax = format("mcause")
  image = format("%12s", csr_index)
mode MTVAL() = CSR[0x343]
  init = { csr_index = 0x343; }
  syntax = format("mtval")
  image = format("%12s", csr_index)
mode MIP() = CSR[0x344]
  init = { csr_index = 0x344; }
  syntax = format("mip")
  image = format("%12s", csr_index)
mode PMPCFG0() = CSR[0x3A0]
  init = { csr_index = 0x3A0; }
  syntax = format("pmpcfg0")
  image = format("%12s", csr_index)
mode PMPCFG1() = CSR[0x3A1]
  init = { csr_index = 0x3A1; }
  syntax = format("pmpcfg1")
  image = format("%12s", csr_index)
mode PMPCFG2() = CSR[0x3A2]
  init = { csr_index = 0x3A2; }
  syntax = format("pmpcfg2")
  image = format("%12s", csr_index)
mode PMPCFG3() = CSR[0x3A3]
  init = { csr_index = 0x3A3; }
  syntax = format("pmpcfg3")
  image = format("%12s", csr_index)
mode PMPADDR0() = CSR[0x3B0]
  init = { csr_index = 0x3B0; }
  syntax = format("pmpaddr0")
  image = format("%12s", csr_index)
mode PMPADDR1() = CSR[0x3B1]
  init = { csr_index = 0x3B1; }
  syntax = format("pmpaddr1")
  image = format("%12s", csr_index)
mode PMPADDR2() = CSR[0x3B2]
  init = { csr_index = 0x3B2; }
  syntax = format("pmpaddr2")
  image = format("%12s", csr_index)
mode PMPADDR3() = CSR[0x3B3]
  init = { csr_index = 0x3B3; }
  syntax = format("pmpaddr3")
  image = format("%12s", csr_index)
mode PMPADDR4() = CSR[0x3B4]
  init = { csr_index = 0x3B4; }
  syntax = format("pmpaddr4")
  image = format("%12s", csr_index)
mode PMPADDR5() = CSR[0x3B5]
  init = { csr_index = 0x3B5; }
  syntax = format("pmpaddr5")
  image = format("%12s", csr_index)
mode PMPADDR6() = CSR[0x3B6]
  init = { csr_index = 0x3B6; }
  syntax = format("pmpaddr6")
  image = format("%12s", csr_index)
mode PMPADDR7() = CSR[0x3B7]
  init = { csr_index = 0x3B7; }
  syntax = format("pmpaddr7")
  image = format("%12s", csr_index)
mode PMPADDR8() = CSR[0x3B8]
  init = { csr_index = 0x3B8; }
  syntax = format("pmpaddr8")
  image = format("%12s", csr_index)
mode PMPADDR9() = CSR[0x3B9]
  init = { csr_index = 0x3B9; }
  syntax = format("pmpaddr9")
  image = format("%12s", csr_index)
mode PMPADDR10() = CSR[0x3BA]
  init = { csr_index = 0x3BA; }
  syntax = format("pmpaddr10")
  image = format("%12s", csr_index)
mode PMPADDR11() = CSR[0x3BB]
  init = { csr_index = 0x3BB; }
  syntax = format("pmpaddr11")
  image = format("%12s", csr_index)
mode PMPADDR12() = CSR[0x3BC]
  init = { csr_index = 0x3BC; }
  syntax = format("pmpaddr12")
  image = format("%12s", csr_index)
mode PMPADDR13() = CSR[0x3BD]
  init = { csr_index = 0x3BD; }
  syntax = format("pmpaddr13")
  image = format("%12s", csr_index)
mode PMPADDR14() = CSR[0x3BE]
  init = { csr_index = 0x3BE; }
  syntax = format("pmpaddr14")
  image = format("%12s", csr_index)
mode PMPADDR15() = CSR[0x3BF]
  init = { csr_index = 0x3BF; }
  syntax = format("pmpaddr15")
  image = format("%12s", csr_index)
mode MCYCLE() = CSR[0xB00]
  init = { csr_index = 0xB00; }
  syntax = format("mcycle")
  image = format("%12s", csr_index)
mode MINSTRET() = CSR[0xB02]
  init = { csr_index = 0xB02; }
  syntax = format("minstret")
  image = format("%12s", csr_index)
mode MHPMCOUNTER3() = CSR[0xB03]
  init = { csr_index = 0xB03; }
  syntax = format("mhpmcounter3")
  image = format("%12s", csr_index)
mode MHPMCOUNTER4() = CSR[0xB04]
  init = { csr_index = 0xB04; }
  syntax = format("mhpmcounter4")
  image = format("%12s", csr_index)
mode MHPMCOUNTER5() = CSR[0xB05]
  init = { csr_index = 0xB05; }
  syntax = format("mhpmcounter5")
  image = format("%12s", csr_index)
mode MHPMCOUNTER6() = CSR[0xB06]
  init = { csr_index = 0xB06; }
  syntax = format("mhpmcounter6")
  image = format("%12s", csr_index)
mode MHPMCOUNTER7() = CSR[0xB07]
  init = { csr_index = 0xB07; }
  syntax = format("mhpmcounter7")
  image = format("%12s", csr_index)
mode MHPMCOUNTER8() = CSR[0xB08]
  init = { csr_index = 0xB08; }
  syntax = format("mhpmcounter8")
  image = format("%12s", csr_index)
mode MHPMCOUNTER9() = CSR[0xB09]
  init = { csr_index = 0xB09; }
  syntax = format("mhpmcounter9")
  image = format("%12s", csr_index)
mode MHPMCOUNTER10() = CSR[0xB0A]
  init = { csr_index = 0xB0A; }
  syntax = format("mhpmcounter10")
  image = format("%12s", csr_index)
mode MHPMCOUNTER11() = CSR[0xB0B]
  init = { csr_index = 0xB0B; }
  syntax = format("mhpmcounter11")
  image = format("%12s", csr_index)
mode MHPMCOUNTER12() = CSR[0xB0C]
  init = { csr_index = 0xB0C; }
  syntax = format("mhpmcounter12")
  image = format("%12s", csr_index)
mode MHPMCOUNTER13() = CSR[0xB0D]
  init = { csr_index = 0xB0D; }
  syntax = format("mhpmcounter13")
  image = format("%12s", csr_index)
mode MHPMCOUNTER14() = CSR[0xB0E]
  init = { csr_index = 0xB0E; }
  syntax = format("mhpmcounter14")
  image = format("%12s", csr_index)
mode MHPMCOUNTER15() = CSR[0xB0F]
  init = { csr_index = 0xB0F; }
  syntax = format("mhpmcounter15")
  image = format("%12s", csr_index)
mode MHPMCOUNTER16() = CSR[0xB10]
  init = { csr_index = 0xB10; }
  syntax = format("mhpmcounter16")
  image = format("%12s", csr_index)
mode MHPMCOUNTER17() = CSR[0xB11]
  init = { csr_index = 0xB11; }
  syntax = format("mhpmcounter17")
  image = format("%12s", csr_index)
mode MHPMCOUNTER18() = CSR[0xB12]
  init = { csr_index = 0xB12; }
  syntax = format("mhpmcounter18")
  image = format("%12s", csr_index)
mode MHPMCOUNTER19() = CSR[0xB13]
  init = { csr_index = 0xB13; }
  syntax = format("mhpmcounter19")
  image = format("%12s", csr_index)
mode MHPMCOUNTER20() = CSR[0xB14]
  init = { csr_index = 0xB14; }
  syntax = format("mhpmcounter20")
  image = format("%12s", csr_index)
mode MHPMCOUNTER21() = CSR[0xB15]
  init = { csr_index = 0xB15; }
  syntax = format("mhpmcounter21")
  image = format("%12s", csr_index)
mode MHPMCOUNTER22() = CSR[0xB16]
  init = { csr_index = 0xB16; }
  syntax = format("mhpmcounter22")
  image = format("%12s", csr_index)
mode MHPMCOUNTER23() = CSR[0xB17]
  init = { csr_index = 0xB17; }
  syntax = format("mhpmcounter23")
  image = format("%12s", csr_index)
mode MHPMCOUNTER24() = CSR[0xB18]
  init = { csr_index = 0xB18; }
  syntax = format("mhpmcounter24")
  image = format("%12s", csr_index)
mode MHPMCOUNTER25() = CSR[0xB19]
  init = { csr_index = 0xB19; }
  syntax = format("mhpmcounter25")
  image = format("%12s", csr_index)
mode MHPMCOUNTER26() = CSR[0xB1A]
  init = { csr_index = 0xB1A; }
  syntax = format("mhpmcounter26")
  image = format("%12s", csr_index)
mode MHPMCOUNTER27() = CSR[0xB1B]
  init = { csr_index = 0xB1B; }
  syntax = format("mhpmcounter27")
  image = format("%12s", csr_index)
mode MHPMCOUNTER28() = CSR[0xB1C]
  init = { csr_index = 0xB1C; }
  syntax = format("mhpmcounter28")
  image = format("%12s", csr_index)
mode MHPMCOUNTER29() = CSR[0xB1D]
  init = { csr_index = 0xB1D; }
  syntax = format("mhpmcounter29")
  image = format("%12s", csr_index)
mode MHPMCOUNTER30() = CSR[0xB1E]
  init = { csr_index = 0xB1E; }
  syntax = format("mhpmcounter30")
  image = format("%12s", csr_index)
mode MHPMCOUNTER31() = CSR[0xB1F]
  init = { csr_index = 0xB1F; }
  syntax = format("mhpmcounter31")
  image = format("%12s", csr_index)
#ifndef RV64I
mode MCYCLEH() = CSR[0xB80]
  init = { csr_index = 0xB80; }
  syntax = format("mcycleh")
  image = format("%12s", csr_index)
mode MINSTRETH() = CSR[0xB82]
  init = { csr_index = 0xB82; }
  syntax = format("minstreth")
  image = format("%12s", csr_index)
mode MHPMCOUNTER3H() = CSR[0xB83]
  init = { csr_index = 0xB83; }
  syntax = format("mhpmcounter3h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER4H() = CSR[0xB84]
  init = { csr_index = 0xB84; }
  syntax = format("mhpmcounter4h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER5H() = CSR[0xB85]
  init = { csr_index = 0xB85; }
  syntax = format("mhpmcounter5h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER6H() = CSR[0xB86]
  init = { csr_index = 0xB86; }
  syntax = format("mhpmcounter6h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER7H() = CSR[0xB87]
  init = { csr_index = 0xB87; }
  syntax = format("mhpmcounter7h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER8H() = CSR[0xB88]
  init = { csr_index = 0xB88; }
  syntax = format("mhpmcounter8h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER9H() = CSR[0xB89]
  init = { csr_index = 0xB89; }
  syntax = format("mhpmcounter9h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER10H() = CSR[0xB8A]
  init = { csr_index = 0xB8A; }
  syntax = format("mhpmcounter10h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER11H() = CSR[0xB8B]
  init = { csr_index = 0xB8B; }
  syntax = format("mhpmcounter11h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER12H() = CSR[0xB8C]
  init = { csr_index = 0xB8C; }
  syntax = format("mhpmcounter12h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER13H() = CSR[0xB8D]
  init = { csr_index = 0xB8D; }
  syntax = format("mhpmcounter13h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER14H() = CSR[0xB8E]
  init = { csr_index = 0xB8E; }
  syntax = format("mhpmcounter14h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER15H() = CSR[0xB8F]
  init = { csr_index = 0xB8F; }
  syntax = format("mhpmcounter15h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER16H() = CSR[0xB90]
  init = { csr_index = 0xB90; }
  syntax = format("mhpmcounter16h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER17H() = CSR[0xB91]
  init = { csr_index = 0xB91; }
  syntax = format("mhpmcounter17h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER18H() = CSR[0xB92]
  init = { csr_index = 0xB92; }
  syntax = format("mhpmcounter18h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER19H() = CSR[0xB93]
  init = { csr_index = 0xB93; }
  syntax = format("mhpmcounter19h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER20H() = CSR[0xB94]
  init = { csr_index = 0xB94; }
  syntax = format("mhpmcounter20h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER21H() = CSR[0xB95]
  init = { csr_index = 0xB95; }
  syntax = format("mhpmcounter21h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER22H() = CSR[0xB96]
  init = { csr_index = 0xB96; }
  syntax = format("mhpmcounter22h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER23H() = CSR[0xB97]
  init = { csr_index = 0xB97; }
  syntax = format("mhpmcounter23h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER24H() = CSR[0xB98]
  init = { csr_index = 0xB98; }
  syntax = format("mhpmcounter24h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER25H() = CSR[0xB99]
  init = { csr_index = 0xB99; }
  syntax = format("mhpmcounter25h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER26H() = CSR[0xB9A]
  init = { csr_index = 0xB9A; }
  syntax = format("mhpmcounter26h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER27H() = CSR[0xB9B]
  init = { csr_index = 0xB9B; }
  syntax = format("mhpmcounter27h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER28H() = CSR[0xB9C]
  init = { csr_index = 0xB9C; }
  syntax = format("mhpmcounter28h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER29H() = CSR[0xB9D]
  init = { csr_index = 0xB9D; }
  syntax = format("mhpmcounter29h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER30H() = CSR[0xB9E]
  init = { csr_index = 0xB9E; }
  syntax = format("mhpmcounter30h")
  image = format("%12s", csr_index)
mode MHPMCOUNTER31H() = CSR[0xB9F]
  init = { csr_index = 0xB9F; }
  syntax = format("mhpmcounter31h")
  image = format("%12s", csr_index)
#endif
mode MHPMEVENT3() = CSR[0x323]
  init = { csr_index = 0x323; }
  syntax = format("mhpmevent3")
  image = format("%12s", csr_index)
mode MHPMEVENT4() = CSR[0x324]
  init = { csr_index = 0x324; }
  syntax = format("mhpmevent4")
  image = format("%12s", csr_index)
mode MHPMEVENT5() = CSR[0x325]
  init = { csr_index = 0x325; }
  syntax = format("mhpmevent5")
  image = format("%12s", csr_index)
mode MHPMEVENT6() = CSR[0x326]
  init = { csr_index = 0x326; }
  syntax = format("mhpmevent6")
  image = format("%12s", csr_index)
mode MHPMEVENT7() = CSR[0x327]
  init = { csr_index = 0x327; }
  syntax = format("mhpmevent7")
  image = format("%12s", csr_index)
mode MHPMEVENT8() = CSR[0x328]
  init = { csr_index = 0x328; }
  syntax = format("mhpmevent8")
  image = format("%12s", csr_index)
mode MHPMEVENT9() = CSR[0x329]
  init = { csr_index = 0x329; }
  syntax = format("mhpmevent9")
  image = format("%12s", csr_index)
mode MHPMEVENT10() = CSR[0x32A]
  init = { csr_index = 0x32A; }
  syntax = format("mhpmevent10")
  image = format("%12s", csr_index)
mode MHPMEVENT11() = CSR[0x32B]
  init = { csr_index = 0x32B; }
  syntax = format("mhpmevent11")
  image = format("%12s", csr_index)
mode MHPMEVENT12() = CSR[0x32C]
  init = { csr_index = 0x32C; }
  syntax = format("mhpmevent12")
  image = format("%12s", csr_index)
mode MHPMEVENT13() = CSR[0x32D]
  init = { csr_index = 0x32D; }
  syntax = format("mhpmevent13")
  image = format("%12s", csr_index)
mode MHPMEVENT14() = CSR[0x32E]
  init = { csr_index = 0x32E; }
  syntax = format("mhpmevent14")
  image = format("%12s", csr_index)
mode MHPMEVENT15() = CSR[0x32F]
  init = { csr_index = 0x32F; }
  syntax = format("mhpmevent15")
  image = format("%12s", csr_index)
mode MHPMEVENT16() = CSR[0x330]
  init = { csr_index = 0x330; }
  syntax = format("mhpmevent16")
  image = format("%12s", csr_index)
mode MHPMEVENT17() = CSR[0x331]
  init = { csr_index = 0x331; }
  syntax = format("mhpmevent17")
  image = format("%12s", csr_index)
mode MHPMEVENT18() = CSR[0x332]
  init = { csr_index = 0x332; }
  syntax = format("mhpmevent18")
  image = format("%12s", csr_index)
mode MHPMEVENT19() = CSR[0x333]
  init = { csr_index = 0x333; }
  syntax = format("mhpmevent19")
  image = format("%12s", csr_index)
mode MHPMEVENT20() = CSR[0x334]
  init = { csr_index = 0x334; }
  syntax = format("mhpmevent20")
  image = format("%12s", csr_index)
mode MHPMEVENT21() = CSR[0x335]
  init = { csr_index = 0x335; }
  syntax = format("mhpmevent21")
  image = format("%12s", csr_index)
mode MHPMEVENT22() = CSR[0x336]
  init = { csr_index = 0x336; }
  syntax = format("mhpmevent22")
  image = format("%12s", csr_index)
mode MHPMEVENT23() = CSR[0x337]
  init = { csr_index = 0x337; }
  syntax = format("mhpmevent23")
  image = format("%12s", csr_index)
mode MHPMEVENT24() = CSR[0x338]
  init = { csr_index = 0x338; }
  syntax = format("mhpmevent24")
  image = format("%12s", csr_index)
mode MHPMEVENT25() = CSR[0x339]
  init = { csr_index = 0x339; }
  syntax = format("mhpmevent25")
  image = format("%12s", csr_index)
mode MHPMEVENT26() = CSR[0x33A]
  init = { csr_index = 0x33A; }
  syntax = format("mhpmevent26")
  image = format("%12s", csr_index)
mode MHPMEVENT27() = CSR[0x33B]
  init = { csr_index = 0x33B; }
  syntax = format("mhpmevent27")
  image = format("%12s", csr_index)
mode MHPMEVENT28() = CSR[0x33C]
  init = { csr_index = 0x33C; }
  syntax = format("mhpmevent28")
  image = format("%12s", csr_index)
mode MHPMEVENT29() = CSR[0x33D]
  init = { csr_index = 0x33D; }
  syntax = format("mhpmevent29")
  image = format("%12s", csr_index)
mode MHPMEVENT30() = CSR[0x33E]
  init = { csr_index = 0x33E; }
  syntax = format("mhpmevent30")
  image = format("%12s", csr_index)
mode MHPMEVENT31() = CSR[0x33F]
  init = { csr_index = 0x33F; }
  syntax = format("mhpmevent31")
  image = format("%12s", csr_index)
mode TSELECT() = CSR[0x7A0]
  init = { csr_index = 0x7A0; }
  syntax = format("tselect")
  image = format("%12s", csr_index)
mode TDATA1() = CSR[0x7A1]
  init = { csr_index = 0x7A1; }
  syntax = format("tdata1")
  image = format("%12s", csr_index)
mode TDATA2() = CSR[0x7A2]
  init = { csr_index = 0x7A2; }
  syntax = format("tdata2")
  image = format("%12s", csr_index)
mode TDATA3() = CSR[0x7A3]
  init = { csr_index = 0x7A3; }
  syntax = format("tdata3")
  image = format("%12s", csr_index)
mode DCSR() = CSR[0x7B0]
  init = { csr_index = 0x7B0; }
  syntax = format("dcsr")
  image = format("%12s", csr_index)
mode DPC() = CSR[0x7B1]
  init = { csr_index = 0x7B1; }
  syntax = format("dpc")
  image = format("%12s", csr_index)
mode DSCRATCH() = CSR[0x7B2]
  init = { csr_index = 0x7B2; }
  syntax = format("dscratch")
  image = format("%12s", csr_index)
mode CSR_MODE =
                USTATUS
              | UIE
              | UTVEC
              | USCRATCH
              | UEPC
              | UCAUSE
              | UTVAL
              | UIP
              | FFLAGS
              | FRM
              | FCSR
              | CYCLE
              | TIME
              | INSTRET
              | HPMCOUNTER3
              | HPMCOUNTER4
              | HPMCOUNTER5
              | HPMCOUNTER6
              | HPMCOUNTER7
              | HPMCOUNTER8
              | HPMCOUNTER9
              | HPMCOUNTER10
              | HPMCOUNTER11
              | HPMCOUNTER12
              | HPMCOUNTER13
              | HPMCOUNTER14
              | HPMCOUNTER15
              | HPMCOUNTER16
              | HPMCOUNTER17
              | HPMCOUNTER18
              | HPMCOUNTER19
              | HPMCOUNTER20
              | HPMCOUNTER21
              | HPMCOUNTER22
              | HPMCOUNTER23
              | HPMCOUNTER24
              | HPMCOUNTER25
              | HPMCOUNTER26
              | HPMCOUNTER27
              | HPMCOUNTER28
              | HPMCOUNTER29
              | HPMCOUNTER30
              | HPMCOUNTER31
#ifndef RV64I
              | CYCLEH
              | TIMEH
              | INSTRETH
              | HPMCOUNTER3H
              | HPMCOUNTER4H
              | HPMCOUNTER5H
              | HPMCOUNTER6H
              | HPMCOUNTER7H
              | HPMCOUNTER8H
              | HPMCOUNTER9H
              | HPMCOUNTER10H
              | HPMCOUNTER11H
              | HPMCOUNTER12H
              | HPMCOUNTER13H
              | HPMCOUNTER14H
              | HPMCOUNTER15H
              | HPMCOUNTER16H
              | HPMCOUNTER17H
              | HPMCOUNTER18H
              | HPMCOUNTER19H
              | HPMCOUNTER20H
              | HPMCOUNTER21H
              | HPMCOUNTER22H
              | HPMCOUNTER23H
              | HPMCOUNTER24H
              | HPMCOUNTER25H
              | HPMCOUNTER26H
              | HPMCOUNTER27H
              | HPMCOUNTER28H
              | HPMCOUNTER29H
              | HPMCOUNTER30H
              | HPMCOUNTER31H
#endif
              | SSTATUS
              | SEDELEG
              | SIDELEG
              | SIE
              | STVEC
              | SCOUNTEREN
              | SSCRATCH
              | SEPC
              | SCAUSE
              | STVAL
              | SIP
              | SATP
              | MVENDORID
              | MARCHID
              | MIMPID
              | MHARTID
              | MSTATUS
              | MISA
              | MEDELEG
              | MIDELEG
              | MIE
              | MTVEC
              | MCOUNTEREN
              | MSCRATCH
              | MEPC
              | MCAUSE
              | MTVAL
              | MIP
              | PMPCFG0
              | PMPCFG1
              | PMPCFG2
              | PMPCFG3
              | PMPADDR0
              | PMPADDR1
              | PMPADDR2
              | PMPADDR3
              | PMPADDR4
              | PMPADDR5
              | PMPADDR6
              | PMPADDR7
              | PMPADDR8
              | PMPADDR9
              | PMPADDR10
              | PMPADDR11
              | PMPADDR12
              | PMPADDR13
              | PMPADDR14
              | PMPADDR15
              | MCYCLE
              | MINSTRET
              | MHPMCOUNTER3
              | MHPMCOUNTER4
              | MHPMCOUNTER5
              | MHPMCOUNTER6
              | MHPMCOUNTER7
              | MHPMCOUNTER8
              | MHPMCOUNTER9
              | MHPMCOUNTER10
              | MHPMCOUNTER11
              | MHPMCOUNTER12
              | MHPMCOUNTER13
              | MHPMCOUNTER14
              | MHPMCOUNTER15
              | MHPMCOUNTER16
              | MHPMCOUNTER17
              | MHPMCOUNTER18
              | MHPMCOUNTER19
              | MHPMCOUNTER20
              | MHPMCOUNTER21
              | MHPMCOUNTER22
              | MHPMCOUNTER23
              | MHPMCOUNTER24
              | MHPMCOUNTER25
              | MHPMCOUNTER26
              | MHPMCOUNTER27
              | MHPMCOUNTER28
              | MHPMCOUNTER29
              | MHPMCOUNTER30
              | MHPMCOUNTER31
#ifndef RV64I
              | MCYCLEH
              | MINSTRETH
              | MHPMCOUNTER3H
              | MHPMCOUNTER4H
              | MHPMCOUNTER5H
              | MHPMCOUNTER6H
              | MHPMCOUNTER7H
              | MHPMCOUNTER8H
              | MHPMCOUNTER9H
              | MHPMCOUNTER10H
              | MHPMCOUNTER11H
              | MHPMCOUNTER12H
              | MHPMCOUNTER13H
              | MHPMCOUNTER14H
              | MHPMCOUNTER15H
              | MHPMCOUNTER16H
              | MHPMCOUNTER17H
              | MHPMCOUNTER18H
              | MHPMCOUNTER19H
              | MHPMCOUNTER20H
              | MHPMCOUNTER21H
              | MHPMCOUNTER22H
              | MHPMCOUNTER23H
              | MHPMCOUNTER24H
              | MHPMCOUNTER25H
              | MHPMCOUNTER26H
              | MHPMCOUNTER27H
              | MHPMCOUNTER28H
              | MHPMCOUNTER29H
              | MHPMCOUNTER30H
              | MHPMCOUNTER31H
#endif
              | MHPMEVENT3
              | MHPMEVENT4
              | MHPMEVENT5
              | MHPMEVENT6
              | MHPMEVENT7
              | MHPMEVENT8
              | MHPMEVENT9
              | MHPMEVENT10
              | MHPMEVENT11
              | MHPMEVENT12
              | MHPMEVENT13
              | MHPMEVENT14
              | MHPMEVENT15
              | MHPMEVENT16
              | MHPMEVENT17
              | MHPMEVENT18
              | MHPMEVENT19
              | MHPMEVENT20
              | MHPMEVENT21
              | MHPMEVENT22
              | MHPMEVENT23
              | MHPMEVENT24
              | MHPMEVENT25
              | MHPMEVENT26
              | MHPMEVENT27
              | MHPMEVENT28
              | MHPMEVENT29
              | MHPMEVENT30
              | MHPMEVENT31
              | TSELECT
              | TDATA1
              | TDATA2
              | TDATA3
              | DCSR
              | DPC
              | DSCRATCH
#endif
#ifndef RISCV_PSEUDO_INCLUDED
#define RISCV_PSEUDO_INCLUDED
var tmp_delta[card(32)]
label mode DELTA_LABEL(target: XWORD, current: XWORD) = target<31..0> - current<31..0>
  init = {
    tmp_delta = target<31..0> - current<31..0>;
  }
  syntax = ""
  image = format("%s", tmp_delta)
mode DELTA_IMM(imm: card(32)) = imm
  init = {
    tmp_delta = imm;
  }
  syntax = format("0x%x", imm)
  image = format("%s", imm)
mode DELTA = DELTA_LABEL | DELTA_IMM
@rev(RV32I)
pseudo op la(rd: X, delta: DELTA)
  init   = { delta.init; }
  syntax = format("la %s, %s", rd.syntax, delta.syntax)
  image  = format("%s%s", auipc(rd, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          addi(rd, rd, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rd, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(addi(rd, rd, delta<11..0>)).action;
  }
@rev(RV32I)
pseudo op lla(rd: X, delta: DELTA, imm: int(32))
  init   = { delta.init; }
  syntax = format("lla %s, %s%s%d", rd.syntax, delta.syntax, if imm >=0 then "+" else "" endif, imm)
  image  = format("%s", la(rd, DELTA_IMM(tmp_delta + cast(card(32), imm))).image)
  action = {
    la(rd, DELTA_IMM(delta + cast(card(32), imm))).action;
  }
@rev(RV32I)
pseudo op lb_global(rd: X, delta: DELTA)
  init   = { delta.init; }
  syntax = format("lb %s, %s", rd.syntax, delta.syntax)
  image  = format("%s%s", auipc(rd, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          lb(rd, rd, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rd, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(lb(rd, rd, delta<11..0>)).action;
  }
@rev(RV32I)
pseudo op lh_global(rd: X, delta: DELTA)
  init   = { delta.init; }
  syntax = format("lh %s, %s", rd.syntax, delta.syntax)
  image  = format("%s%s", auipc(rd, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          lh(rd, rd, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rd, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(lh(rd, rd, delta<11..0>)).action;
  }
@rev(RV32I)
pseudo op lh_global2(rd: X, delta: DELTA, imm: int(32))
  init   = {
    delta.init;
    tmp_word = tmp_delta + cast(card(32), imm);
  }
  syntax = format("lh %s, %s%s%d",
                  rd.syntax, delta.syntax, if imm < 0 then "" else "+" endif, imm)
  image  = format("%s%s", auipc(rd, tmp_word<31..12> + zero_extend(card(20), tmp_word<11>)).image,
                          lh(rd, rd, tmp_word<11..0>).image)
  action = {
    instruction(auipc(rd, tmp_word<31..12> + zero_extend(card(20), tmp_word<11>))).action;
    instruction(lh(rd, rd, tmp_word<11..0>)).action;
  }
@rev(RV32I)
pseudo op lw_global(rd: X, delta: DELTA)
  init   = { delta.init; }
  syntax = format("lw %s, %s", rd.syntax, delta.syntax)
  image  = format("%s%s", auipc(rd, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          lw(rd, rd, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rd, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(lw(rd, rd, delta<11..0>)).action;
  }
@rev(RV64I)
pseudo op ld_global(rd: X, delta: DELTA)
  init   = { delta.init; }
  syntax = format("ld %s, %s", rd.syntax, delta.syntax)
  image  = format("%s%s", auipc(rd, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          ld(rd, rd, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rd, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(ld(rd, rd, delta<11..0>)).action;
  }
@rev(RV32I)
pseudo op sb_global(rd: X, delta: DELTA, rt: X)
  init   = { delta.init; }
  syntax = format("sb %s, %s, %s", rd.syntax, delta.syntax, rt.syntax)
  image  = format("%s%s", auipc(rd, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          sb(rd, rt, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rt, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(sb(rd, rt, delta<11..0>)).action;
  }
@rev(RV32I)
pseudo op sh_global(rd: X, delta: DELTA, rt: X)
  init   = { delta.init; }
  syntax = format("sh %s, %s, %s", rd.syntax, delta.syntax, rt.syntax)
  image  = format("%s%s", auipc(rt, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          sh(rd, rt, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rt, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(sh(rd, rt, delta<11..0>)).action;
  }
@rev(RV32I)
pseudo op sh_global2(rd: X, delta: DELTA, imm: int(32), rt: X)
  init   = {
    delta.init;
    tmp_word = tmp_delta + cast(card(32), imm);
  }
  syntax = format("sh %s, %s%s%d, %s",
                  rd.syntax, delta.syntax, if imm < 0 then "" else "+" endif, imm, rt.syntax)
  image  = format("%s%s", auipc(rt, tmp_word<31..12> + zero_extend(card(20), tmp_word<11>)).image,
                          sh(rd, rt, tmp_word<11..0>).image)
  action = {
    instruction(auipc(rt, tmp_word<31..12> + zero_extend(card(20), tmp_word<11>))).action;
    instruction(sh(rd, rt, tmp_word<11..0>)).action;
  }
@rev(RV32I)
pseudo op sw_global(rd: X, delta: DELTA, rt: X)
  init   = { delta.init; }
  syntax = format("sw %s, %s, %s", rd.syntax, delta.syntax, rt.syntax)
  image  = format("%s%s", auipc(rt, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          sw(rd, rt, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rt, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(sw(rd, rt, delta<11..0>)).action;
  }
@rev(RV64I)
pseudo op sd_global(rd: X, delta: DELTA, rt: X)
  init   = { delta.init; }
  syntax = format("sd %s, %s, %s", rd.syntax, delta.syntax, rt.syntax)
  image  = format("%s%s", auipc(rt, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          sd(rd, rt, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rt, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(sd(rd, rt, delta<11..0>)).action;
  }
@rev(RV32I)
pseudo op li32(rd: X, imm: WORD)
  syntax = format("li %s, 0x%x", rd.syntax, imm)
  image = format(
     "%s%s",
     lui(rd, imm<31..12> + zero_extend(card(20), imm<11>)).image,
     addi(rd, rd, imm<11..0>).image
  )
  action = {
    instruction(lui(rd, imm<31..12> + zero_extend(card(20), imm<11>))).action;
    instruction(addi(rd, rd, imm<11..0>)).action;
  }
@rev(RV64I)
pseudo op li64(rd: X, imm: DWORD)
  syntax = format("li %s, 0x%x", rd.syntax, imm)
  image = format(
     "%s%s%s%s%s%s%s",
     li32(rd, imm<63..32>).image,
     slli(rd, rd, 11).image,
     ori(rd, rd, coerce(card(12), imm<31..21>)).image,
     slli(rd, rd, 11).image,
     ori(rd, rd, coerce(card(12), imm<20..10>)).image,
     slli(rd, rd, 10).image,
     ori(rd, rd, coerce(card(12), imm<9..0>)).image
  )
  action = {
    li32(rd, imm<63..32>).action;
    instruction(slli(rd, rd, 11)).action;
    instruction(ori(rd, rd, coerce(card(12), imm<31..21>))).action;
    instruction(slli(rd, rd, 11)).action;
    instruction(ori(rd, rd, coerce(card(12), imm<20..10>))).action;
    instruction(slli(rd, rd, 10)).action;
    instruction(ori(rd, rd, coerce(card(12), imm<9..0>))).action;
  }
@rev(RV32I)
pseudo op li(rd : X, imm : XWORD)
  syntax = format("li %s, 0x%x", rd.syntax, imm)
  image  = format("%s",
#ifdef RV64I
    if imm<63..11> == 0 || imm<63..11> == -1 then
      addi(rd, X(0), imm<11..0>).image
    elif imm<63..31> == 0 && imm<11> == 0 || imm<63..31> == -1 then
      li32(rd, imm<31..0>).image
    else
      li64(rd, imm).image
    endif
#else
    li32(rd, imm).image
#endif
  )
  action = {
#ifdef RV64I
    if imm<63..11> == 0 || imm<63..11> == -1 then
      instruction(addi(rd, X(0), imm<11..0>)).action;
    elif imm<63..31> == 0 && imm<11> == 0 || imm<63..31> == -1 then
      li32(rd, imm<31..0>).action;
    else
      li64(rd, imm).action;
    endif;
#else
    li32(rd, imm).action;
#endif
  }
@rev(RV32F)
pseudo op flw_global(rd: F, delta: DELTA, rt: X)
  init   = { delta.init; }
  syntax = format("flw %s, %s, %s", rd.syntax, delta.syntax, rt.syntax)
  image  = format("%s%s", auipc(rt, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          flw(rd, rt, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rt, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(flw(rd, rt, delta<11..0>)).action;
  }
@rev(RV32D)
pseudo op fld_global(rd: F, delta: DELTA, rt: X)
  init   = { delta.init; }
  syntax = format("fld %s, %s, %s", rd.syntax, delta.syntax, rt.syntax)
  image  = format("%s%s", auipc(rt, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          fld(rd, rt, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rt, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(fld(rd, rt, delta<11..0>)).action;
  }
@rev(RV32F)
pseudo op fsw_global(rd: F, delta: DELTA, rt: X)
  init   = { delta.init; }
  syntax = format("fsw %s, %s, %s", rd.syntax, delta.syntax, rt.syntax)
  image  = format("%s%s", auipc(rt, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          fsw(rd, rt, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rt, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(fsw(rd, rt, delta<11..0>)).action;
  }
@rev(RV32D)
pseudo op fsd_global(rd: F, delta: DELTA, rt: X)
  init   = { delta.init; }
  syntax = format("fsd %s, %s, %s", rd.syntax, delta.syntax, rt.syntax)
  image  = format("%s%s", auipc(rt, tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          fsd(rd, rt, tmp_delta<11..0>).image)
  action = {
    instruction(auipc(rt, delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(fsd(rd, rt, delta<11..0>)).action;
  }
@rev(RV32I)
pseudo op call(delta: DELTA)
  init   = { delta.init; }
  syntax = format("call %s", delta.syntax)
  image  = format("%s%s", auipc(X(6), tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          jalr(X(1), X(6), tmp_delta<11..0>).image)
  action = {
    instruction(auipc(X(6), delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(jalr(X(1), X(6), delta<11..0>)).action;
  }
@rev(RV32I)
pseudo op tail(delta: DELTA)
  init   = { delta.init; }
  syntax = format("tail %s", delta.syntax)
  image  = format("%s%s", auipc(X(6), tmp_delta<31..12> + zero_extend(card(20), tmp_delta<11>)).image,
                          jalr(X(0), X(6), tmp_delta<11..0>).image)
  action = {
    instruction(auipc(X(6), delta<31..12> + zero_extend(card(20), delta<11>))).action;
    instruction(jalr(X(0), X(6), delta<11..0>)).action;
  }
pseudo op ret()
  init   = {}
  syntax = format("ret")
  image  = format("%s", jalr(X(0), X(1), 0).image)
  action = {
    instruction(jalr(X(0), X(1), 0)).action;
  }
#endif
#ifndef RISCV_RV32A_INCLUDED
#define RISCV_RV32A_INCLUDED
op lr_w(rd: X, rs1: X)
  syntax = format("lr.w %s, (%s)", rd.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "00010", "0", "0", "00000", rs1.image, "010", rd.image)
  action = {
    LOAD_RESERVATION = rs1;
    rd = sign_extend(XWORD, load_value<31..0>);
  }
op sc_w(rd: X, rs2: X, rs1: X)
  syntax = format("sc.w %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "00011", "0", "0", rs2.image, rs1.image, "010", rd.image)
  action = {
    if rs1 == LOAD_RESERVATION then
      store_data(MEM_WORD, rs1, sign_extend(XWORD, rs2<31..0>)).action;
      rd = 0;
    else
      rd = 1;
    endif;
  }
op amoswap_w(rd: X, rs2: X, rs1: X)
  syntax = format("amoswap.w %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "00001", "0", "0", rs2.image, rs1.image, "010", rd.image)
  action = {
    tmp_address = rs1;
    rd = sign_extend(XWORD, load_value<31..0>);
    store_data(MEM_WORD, tmp_address, sign_extend(XWORD, rs2<31..0>)).action;
  }
op amoadd_w(rd: X, rs2: X, rs1: X)
  syntax = format("amoadd.w %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "00000", "0", "0", rs2.image, rs1.image, "010", rd.image)
  action = {
    tmp_address = rs1;
    rd = sign_extend(XWORD, load_value<31..0>);
    tmp_word = rd<31..0> + rs2<31..0>;
    store_data(MEM_WORD, tmp_address, sign_extend(XWORD, tmp_word)).action;
  }
op amoand_w(rd: X, rs2: X, rs1: X)
  syntax = format("amoand.w %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "01100", "0", "0", rs2.image, rs1.image, "010", rd.image)
  action = {
    tmp_address = rs1;
    rd = sign_extend(XWORD, load_value<31..0>);
    tmp_word = rd<31..0> & rs2<31..0>;
    store_data(MEM_WORD, tmp_address, sign_extend(XWORD, tmp_word)).action;
  }
op amoor_w(rd: X, rs2: X, rs1: X)
  syntax = format("amoor.w %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "01000", "0", "0", rs2.image, rs1.image, "010", rd.image)
  action = {
    tmp_address = rs1;
    rd = sign_extend(XWORD, load_value<31..0>);
    tmp_word = rd<31..0> | rs2<31..0>;
    store_data(MEM_WORD, tmp_address, sign_extend(XWORD, tmp_word)).action;
  }
op amoxor_w(rd: X, rs2: X, rs1: X)
  syntax = format("amoxor.w %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "00100", "0", "0", rs2.image, rs1.image, "010", rd.image)
  action = {
    tmp_address = rs1;
    rd = sign_extend(XWORD, load_value<31..0>);
    tmp_word = rd<31..0> ^ rs2<31..0>;
    store_data(MEM_WORD, tmp_address, sign_extend(XWORD, tmp_word)).action;
  }
op amomin_w(rd: X, rs2: X, rs1: X)
  syntax = format("amomin.w %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "10000", "0", "0", rs2.image, rs1.image, "010", rd.image)
  action = {
    tmp_address = rs1;
    rd = sign_extend(XWORD, load_value<31..0>);
    tmp_int1 = coerce(INT, rd);
    tmp_int2 = coerce(INT, rs2);
    if tmp_int1 < tmp_int2 then
      tmp_word = rd<31..0>;
    else
      tmp_word = rs2<31..0>;
    endif;
    store_data(MEM_WORD, tmp_address, sign_extend(XWORD, tmp_word)).action;
  }
op amomax_w(rd: X, rs2: X, rs1: X)
  syntax = format("amomax.w %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "10100", "0", "0", rs2.image, rs1.image, "010", rd.image)
  action = {
    tmp_address = rs1;
    rd = sign_extend(XWORD, load_value<31..0>);
    tmp_int1 = coerce(INT, rd);
    tmp_int2 = coerce(INT, rs2);
    if tmp_int1 > tmp_int2 then
      tmp_word = rd<31..0>;
    else
      tmp_word = rs2<31..0>;
    endif;
    store_data(MEM_WORD, tmp_address, sign_extend(XWORD, tmp_word)).action;
  }
op amominu_w(rd: X, rs2: X, rs1: X)
  syntax = format("amominu.w %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "11000", "0", "0", rs2.image, rs1.image, "010", rd.image)
  action = {
    tmp_address = rs1;
    rd = sign_extend(XWORD, load_value<31..0>);
    if rd<31..0> < rs2<31..0> then
      tmp_word = rd<31..0>;
    else
      tmp_word = rs2<31..0>;
    endif;
    store_data(MEM_WORD, tmp_address, sign_extend(XWORD, tmp_word)).action;
  }
op amomaxu_w(rd: X, rs2: X, rs1: X)
  syntax = format("amomaxu.w %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "11100", "0", "0", rs2.image, rs1.image, "010", rd.image)
  action = {
    tmp_address = rs1;
    rd = sign_extend(XWORD, load_value<31..0>);
    if rd<31..0> > rs2<31..0> then
      tmp_word = rd<31..0>;
    else
      tmp_word = rs2<31..0>;
    endif;
    store_data(MEM_WORD, tmp_address, sign_extend(XWORD, tmp_word)).action;
  }
op rv32a = lr_w
         | sc_w
         | amoswap_w
         | amoadd_w
         | amoand_w
         | amoor_w
         | amoxor_w
         | amomin_w
         | amomax_w
         | amominu_w
         | amomaxu_w
#endif
#ifndef RISCV_RV32D_INCLUDED
#define RISCV_RV32D_INCLUDED
op fld(rd: F, rs1: X, imm: card(12))
  syntax = format("fld %s, %s(%s)", rd.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%12s%s011%s0000111", imm, rs1.image, rd.image)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    rd = 0;
    rd = load_value;
  }
op fsd(rs2: F, rs1: X, imm: card(12))
  syntax = format("fsd %s, %s(%s)", rs2.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%7s%5s%5s011%5s0100111", imm<11..5>, rs2.image, rs1.image, imm<4..0>)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    store_data(MEM_DWORD, tmp_address, rs2<(XLEN-1)..0>).action;
  }
op fadd_d(rd: F, rs1: F, rs2: F)
  syntax = format("fadd.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s%3s%s1010011", rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fpd = rs1;
    temp_fpd2 = rs2;
    rd = 0;
    temp_fpd3 = temp_fpd + temp_fpd2;
    rd<63..0> = temp_fpd3<63..0>;
    process_float_exception_flags().action;
  }
op fsub_d(rd: F, rs1: F, rs2: F)
  syntax = format("fsub.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000101%s%s%3s%s1010011", rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1<63..0>) - cast(FLOAT64, rs2<63..0>);
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fmul_d(rd: F, rs1: F, rs2: F)
  syntax = format("fmul.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0001001%s%s%3s%s1010011", rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1<63..0>) * cast(FLOAT64, rs2<63..0>);
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fdiv_d(rd: F, rs1: F, rs2: F)
  syntax = format("fdiv.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0001101%5s%5s%3s%5s1010011", rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1<63..0>) * cast(FLOAT64, rs2<63..0>);
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fmin_d(rd: F, rs1: F, rs2: F)
  syntax = format("fmin.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0010101%5s%5s%3s%5s1010011", rs2.image, rs1.image, "000", rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1<63..0>);
    temp_fpd2 = cast(FLOAT64, rs2<63..0>);
    rd = 0;
    if temp_fpd < temp_fpd2 then
      rd<63..0> = temp_fpd<63..0>;
    else
      rd<63..0> = temp_fpd2<63..0>;
    endif;
    process_float_exception_flags().action;
  }
op fmax_d(rd: F, rs1: F, rs2: F)
  syntax = format("fmax.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0010101%5s%5s%3s%5s1010011", rs2.image, rs1.image, "001", rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1<63..0>);
    temp_fpd2 = cast(FLOAT64, rs2<63..0>);
    rd = 0;
    if temp_fpd > temp_fpd2 then
      rd<63..0> = temp_fpd<63..0>;
    else
      rd<63..0> = temp_fpd2<63..0>;
    endif;
    process_float_exception_flags().action;
  }
op fsqrt_d(rd: F, rs1: F)
  syntax = format("fsqrt.d %s, %s", rd.syntax, rs1.syntax)
  image  = format("0101101%5s%5s%3s%5s1010011", "00000", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fpd = sqrt(cast(FLOAT64, rs1<63..0>));
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fsgnj_d(rd: F, rs1: F, rs2: F)
  syntax = format("fsgnj.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0010001%5s%5s%3s%5s1010011", rs2.image, rs1.image, "000", rd.image)
  action = {
    temp_fpd<30..0> = rs1<30..0>;
    temp_fpd<31> = rs2<31>;
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fsgnjn_d(rd: F, rs1: F, rs2: F)
  syntax = format("fsgnjn.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0010001%5s%5s%3s%5s1010011", rs2.image, rs1.image, "001", rd.image)
  action = {
    temp_fpd<30..0> = rs1<30..0>;
    temp_fpd<31> = ~rs2<31>;
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fsgnjx_d(rd: F, rs1: F, rs2: F)
  syntax = format("fsgnjx.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0010001%5s%5s%3s%5s1010011", rs2.image, rs1.image, "010", rd.image)
  action = {
    temp_fpd<30..0> = rs1<30..0>;
    temp_fpd<31> = rs1<31> ^ rs2<31>;
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fmadd_d(rd: F, rs1: F, rs2: F, rs3: F)
  syntax = format("fmadd.d %s, %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax, rs3.syntax)
  image  = format("%5s01%5s%5s%3s%5s1000011", rs3.image, rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1<63..0>) * cast(FLOAT64, rs2<63..0>) + cast(FLOAT64, rs3<63..0>);
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fmsub_d(rd: F, rs1: F, rs2: F, rs3: F)
  syntax = format("fmsub.d %s, %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax, rs3.syntax)
  image  = format("%5s01%5s%5s%3s%5s1000111", rs3.image, rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1<63..0>) * cast(FLOAT64, rs2<63..0>) - cast(FLOAT64, rs3<63..0>);
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fnmadd_d(rd: F, rs1: F, rs2: F, rs3: F)
  syntax = format("fnmadd.d %s, %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax, rs3.syntax)
  image  = format("%5s01%5s%5s%3s%5s1001111", rs3.image, rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    tmp_int1 = -1;
    temp_fpd2 = int_to_float(FLOAT64, tmp_int1);
    temp_fpd = temp_fpd2 * cast(FLOAT64, rs1<63..0>) *
               cast(FLOAT64, rs2<63..0>) + cast(FLOAT64, rs3<63..0>);
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fnmsub_d(rd: F, rs1: F, rs2: F, rs3: F)
  syntax = format("fnmsub.d %s, %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax, rs3.syntax)
  image  = format("%5s01%5s%5s%3s%5s1001011", rs3.image, rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    tmp_int1 = -1;
    temp_fpd2 = int_to_float(FLOAT64, tmp_int1);
    temp_fpd = temp_fpd2 * cast(FLOAT64, rs1<63..0>) *
               cast(FLOAT64, rs2<63..0>) - cast(FLOAT64, rs3<63..0>);
    rd = 0;
    rd<63..0> = temp_fpd<63..0>;
    process_float_exception_flags().action;
  }
op fcvt_w_d(rd: X, rs1: F, op_round_mod: card(3))
  syntax = format("fcvt.w.d %s, %s", rd.syntax, rs1.syntax)
  image  = format("1100001%5s%5s%3s%5s1010011", "00000", rs1.image, op_round_mod, rd.image)
  action = {
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(op_round_mod).action;
    rd = 0;
    tmp_word = float_to_int(WORD, cast(FLOAT64, rs1<63..0>));
    rd = sign_extend(XWORD, tmp_word);
    process_float_exception_flags().action;
  }
op fcvt_w_d2(rd: X, rs1: F)
  syntax = format("%s", fcvt_w_d(rd, rs1, coerce(card(3), RM_RTZ)).syntax)
  image  = format("%32s", fcvt_w_d(rd, rs1, coerce(card(3), RM_RTZ)).image)
  action = {
    fcvt_w_d(rd, rs1, coerce(card(3), RM_RTZ)).action;
  }
op fcvt_wu_d(rd: X, rs1: F, op_round_mod: card(3))
  syntax = format("fcvt.wu.d %s, %s", rd.syntax, rs1.syntax)
  image  = format("1100001%5s%5s%3s%5s1010011", "00001", rs1.image, op_round_mod, rd.image)
  action = {
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(op_round_mod).action;
    process_float_exception_flags().action;
  }
op fcvt_wu_d2(rd: X, rs1: F)
  syntax = format("%s", fcvt_wu_d(rd, rs1, coerce(card(3), RM_RTZ)).syntax)
  image  = format("%32s", fcvt_wu_d(rd, rs1, coerce(card(3), RM_RTZ)).image)
  action = {
    fcvt_wu_d(rd, rs1, coerce(card(3), RM_RTZ)).action;
  }
op fcvt_d_w(rd: F, rs1: X)
  syntax = format("fcvt.d.w %s, %s", rd.syntax, rs1.syntax)
  image  = format("1101001%5s%5s%3s%5s1010011", "00000", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    rd = 0;
    rd<63..0> = int_to_float(FLOAT64, rs1<31..0>);
  }
op fcvt_d_wu(rd: F, rs1: X)
  syntax = format("fcvt.d.wu %s, %s", rd.syntax, rs1.syntax)
  image  = format("1101001%5s%5s%3s%5s1010011", "00001", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    fcvt_d_w(rd, rs1).action;
  }
op fcvt_s_d(rd: F, rs1: F)
  syntax = format("fcvt.s.d %s, %s", rd.syntax, rs1.syntax)
  image  = format("0100000%5s%5s%3s%5s1010011", "00001", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    rd = 0;
    temp_fpd = cast(FLOAT64, rs1<63..0>);
    rd<31..0> = float_to_float(FLOAT32, temp_fpd);
  }
op fcvt_d_s(rd: F, rs1: F)
  syntax = format("fcvt.d.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("0100000%5s%5s%3s%5s1010011", "00000", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    rd = 0;
    temp_fps = cast(FLOAT32, rs1<31..0>);
    rd<63..0> = float_to_float(FLOAT64, temp_fps);
  }
op feq_d(rd: X, rs1: F, rs2: F)
  syntax = format("feq.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("1010001%5s%5s%3s%5s1010011", rs2.image, rs1.image, "010", rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1<63..0>);
    temp_fpd2 = cast(FLOAT64, rs2<63..0>);
    rd = 0;
    if is_nan(temp_fpd) && is_nan(temp_fpd2) then
      rd = 0;
    elif temp_fpd == temp_fpd2 then
      rd = 1;
    endif;
    if is_signaling_nan(temp_fpd) && is_signaling_nan(temp_fpd2) then
      FFLAGS_EXCEP<4> = 0b1;
      FCSR_EXCEP<4> = 0b1;
      exception("Invalid Operation");
    else
      process_float_exception_flags().action;
    endif;
  }
op flt_d(rd: X, rs1: F, rs2: F)
  syntax = format("flt.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("1010001%5s%5s%3s%5s1010011", rs2.image, rs1.image, "001", rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1<63..0>);
    temp_fpd2 = cast(FLOAT64, rs2<63..0>);
    rd = 0;
    if temp_fpd < temp_fpd2 then
      rd = 1;
    endif;
    if is_nan(temp_fpd) && is_nan(temp_fpd2) then
      FFLAGS_EXCEP<4> = 0b1;
      FCSR_EXCEP<4> = 0b1;
      exception("Invalid Operation");
    else
      process_float_exception_flags().action;
    endif;
  }
op fle_d(rd: X, rs1: F, rs2: F)
  syntax = format("fle.d %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("1010001%5s%5s%3s%5s1010011", rs2.image, rs1.image, "000", rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1<63..0>);
    temp_fpd2 = cast(FLOAT64, rs2<63..0>);
    rd = 0;
    if temp_fpd <= temp_fpd2 then
      rd = 1;
    endif;
    if is_nan(temp_fpd) && is_nan(temp_fpd2) then
      FFLAGS_EXCEP<4> = 0b1;
      FCSR_EXCEP<4> = 0b1;
      exception("Invalid Operation");
    else
      process_float_exception_flags().action;
    endif;
  }
var sign_bit_d [BIT]
var exponent_d [card(11)]
var precision_d [card(52)]
op fclass_d(rd: X, rs1: F)
  syntax = format("fclass.d %s, %s", rd.syntax, rs1.syntax)
  image  = format("1110001%5s%5s%3s%5s1010011", "00000", rs1.image, "001", rd.image)
  action = {
    temp_fpd = cast(FLOAT64, rs1);
    sign_bit_d = rs1<63>;
    exponent_d = rs1<62..52>;
    precision_d = rs1<51..0>;
    rd = 0;
    if sign_bit_d == 1 && exponent_d == coerce(card(11), 0x7ff) && precision_d == 0 then rd<0> = 1;
    elif sign_bit_d == 1 && exponent_d == 0 && precision_d == 0 then rd<3> = 1;
    elif sign_bit_d == 0 && exponent_d == 0 && precision_d == 0 then rd<4> = 1;
    elif sign_bit_d == 0 && exponent_d == coerce(card(11), 0x7ff) && precision_d == 0 then rd<7> = 1;
    elif is_signaling_nan(temp_fpd) then rd<8> = 1;
    elif is_nan(temp_fpd) then rd<9> = 1;
    elif sign_bit_d == 0 && exponent_d == coerce(card(11), 0) then rd<5> = 1;
    elif sign_bit_d == 1 && exponent_d == coerce(card(11), 0) then rd<2> = 1;
    else
      rd = 0;
    endif;
  }
pseudo op fmv_d(rd: F, rs: F)
  syntax = format("fmv.d %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", fsgnj_d(rd, rs, rs).image)
  action = {
    fsgnj_d(rd, rs, rs).action;
  }
pseudo op fabs_d(rd: F, rs: F)
  syntax = format("fabs.d %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", fsgnjx_d(rd, rs, rs).image)
  action = {
    fsgnjx_d(rd, rs, rs).action;
  }
pseudo op fneg_d(rd: F, rs: F)
  syntax = format("fneg.d %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", fsgnjn_d(rd, rs, rs).image)
  action = {
    fsgnjn_d(rd, rs, rs).action;
  }
op rv32d_pseudo = fmv_d
                | fabs_d
                | fneg_d
op rv32d = fld
         | fsd
         | fadd_d
         | fsub_d
         | fmul_d
         | fdiv_d
         | fmin_d
         | fmax_d
         | fsqrt_d
         | fsgnj_d
         | fsgnjn_d
         | fsgnjx_d
         | fmadd_d
         | fmsub_d
         | fnmadd_d
         | fnmsub_d
         | fcvt_w_d
         | fcvt_w_d2
         | fcvt_wu_d
         | fcvt_wu_d2
         | fcvt_d_w
         | fcvt_d_wu
         | fcvt_s_d
         | fcvt_d_s
         | feq_d
         | flt_d
         | fle_d
         | fclass_d
         | rv32d_pseudo
#endif
#ifndef RISCV_RV32F_INCLUDED
#define RISCV_RV32F_INCLUDED
op flw(rd: F, rs1: X, imm: card(12))
  syntax = format("flw %s, %s(%s)", rd.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%12s%s010%s0000111", imm, rs1.image, rd.image)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    rd = -1;
    rd<31..0> = load_value<31..0>;
  }
op fsw(rs2: F, rs1: X, imm: card(12))
  syntax = format("fsw %s, %s(%s)", rs2.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%7s%5s%5s010%5s0100111", imm<11..5>, rs2.image, rs1.image, imm<4..0>)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    store_data(MEM_WORD, tmp_address, zero_extend(XWORD, rs2<31..0>)).action;
  }
op fadd_s(rd: F, rs1: F, rs2: F)
  syntax = format("fadd.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s%3s%s1010011", rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fps<31..0> = rs1<31..0>;
    temp_fps2<31..0> = rs2<31..0>;
    rd = -1;
    temp_fps3 = temp_fps + temp_fps2;
    rd<31..0> = temp_fps3<31..0>;
    process_float_exception_flags().action;
  }
op fsub_s(rd: F, rs1: F, rs2: F)
  syntax = format("fsub.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000100%s%s%3s%s1010011", rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fps = cast(FLOAT32, rs1<31..0>) - cast(FLOAT32, rs2<31..0>);
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fmul_s(rd: F, rs1: F, rs2: F)
  syntax = format("fmul.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0001000%s%s%3s%s1010011", rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fps = cast(FLOAT32, rs1<31..0>) * cast(FLOAT32, rs2<31..0>);
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fdiv_s(rd: F, rs1: F, rs2: F)
  syntax = format("fdiv.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0001100%5s%5s%3s%5s1010011", rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    setSFRoundingMode(RM_RNE).action;
    temp_fps = cast(FLOAT32, rs1<31..0>) / cast(FLOAT32, rs2<31..0>);
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fmin_s(rd: F, rs1: F, rs2: F)
  syntax = format("fmin.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0010100%5s%5s%3s%5s1010011", rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(RM_RNE).action;
    temp_fps = cast(FLOAT32, rs1<31..0>);
    temp_fps2 = cast(FLOAT32, rs2<31..0>);
    rd = -1;
    tmp_word = float_exception_flags;
    trace("float_exception_flags: %x", tmp_word);
    if temp_fps < temp_fps2 then
      rd<31..0> = temp_fps<31..0>;
    else
      rd<31..0> = temp_fps2<31..0>;
    endif;
    tmp_word = float_exception_flags;
    trace("float_exception_flags: %x", tmp_word);
    float_rounding_mode = tmp_ui3;
    process_float_exception_flags().action;
  }
op fmax_s(rd: F, rs1: F, rs2: F)
  syntax = format("fmax.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0010100%5s%5s%3s%5s1010011", rs2.image, rs1.image, coerce(card(3), RM_RTZ), rd.image)
  action = {
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(RM_RTZ).action;
    temp_fps = cast(FLOAT32, rs1<31..0>);
    temp_fps2 = cast(FLOAT32, rs2<31..0>);
    rd = -1;
    float_exception_flags = 0;
    if temp_fps2 < temp_fps then
      rd<31..0> = temp_fps<31..0>;
    else
      rd<31..0> = temp_fps2<31..0>;
    endif;
    float_rounding_mode = tmp_ui3;
    process_float_exception_flags().action;
  }
op fsqrt_s(rd: F, rs1: F)
  syntax = format("fsqrt.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("0101100%5s%5s%3s%5s1010011", "00000", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fps = sqrt(cast(FLOAT32, rs1<31..0>));
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fsgnj_s(rd: F, rs1: F, rs2: F)
  syntax = format("fsgnj.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0010000%5s%5s%3s%5s1010011", rs2.image, rs1.image, "000", rd.image)
  action = {
    temp_fps<30..0> = rs1<30..0>;
    temp_fps<31> = rs2<31>;
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fsgnjn_s(rd: F, rs1: F, rs2: F)
  syntax = format("fsgnjn.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0010000%5s%5s%3s%5s1010011", rs2.image, rs1.image, "001", rd.image)
  action = {
    temp_fps<30..0> = rs1<30..0>;
    temp_fps<31> = ~rs2<31>;
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fsgnjx_s(rd: F, rs1: F, rs2: F)
  syntax = format("fsgnjx.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0010000%5s%5s%3s%5s1010011", rs2.image, rs1.image, "010", rd.image)
  action = {
    temp_fps<30..0> = rs1<30..0>;
    temp_fps<31> = rs1<31> ^ rs2<31>;
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fmadd_s(rd: F, rs1: F, rs2: F, rs3: F)
  syntax = format("fmadd.s %s, %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax, rs3.syntax)
  image  = format("%5s00%5s%5s%3s%5s1000011", rs3.image, rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fps = cast(FLOAT32, rs1<31..0>) * cast(FLOAT32, rs2<31..0>) + cast(FLOAT32, rs3<31..0>);
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fmsub_s(rd: F, rs1: F, rs2: F, rs3: F)
  syntax = format("fmsub.s %s, %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax, rs3.syntax)
  image  = format("%5s00%5s%5s%3s%5s1000111", rs3.image, rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    temp_fps = cast(FLOAT32, rs1<31..0>) * cast(FLOAT32, rs2<31..0>) - cast(FLOAT32, rs3<31..0>);
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fnmadd_s(rd: F, rs1: F, rs2: F, rs3: F)
  syntax = format("fnmadd.s %s, %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax, rs3.syntax)
  image  = format("%5s00%5s%5s%3s%5s1001111", rs3.image, rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    tmp_int1 = -1;
    temp_fps2 = int_to_float(FLOAT32, tmp_int1);
    temp_fps = temp_fps2 * cast(FLOAT32, rs1<31..0>) *
               cast(FLOAT32, rs2<31..0>) - cast(FLOAT32, rs3<31..0>);
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fnmsub_s(rd: F, rs1: F, rs2: F, rs3: F)
  syntax = format("fnmsub.s %s, %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax, rs3.syntax)
  image  = format("%5s00%5s%5s%3s%5s1001011", rs3.image, rs2.image, rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    tmp_int1 = -1;
    temp_fps2 = int_to_float(FLOAT32, tmp_int1);
    temp_fps = temp_fps2 * cast(FLOAT32, rs1<31..0>) *
               cast(FLOAT32, rs2<31..0>) + cast(FLOAT32, rs3<31..0>);
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fcvt_w_s(rd: X, rs1: F, op_round_mod: card(3))
  syntax = format("fcvt.w.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("1100000%5s%5s%3s%5s1010011", "00000", rs1.image, op_round_mod, rd.image)
  action = {
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(op_round_mod).action;
    tmp_word = float_to_int(WORD, cast(FLOAT32, rs1<31..0>));
    rd = sign_extend(XWORD, tmp_word);
    process_float_exception_flags().action;
  }
op fcvt_w_s2(rd: X, rs1: F)
  syntax = format("%s", fcvt_w_s(rd, rs1, coerce(card(3), RM_RTZ)).syntax)
  image  = format("%32s", fcvt_w_s(rd, rs1, coerce(card(3), RM_RTZ)).image)
  action = {
    fcvt_w_s(rd, rs1, coerce(card(3), RM_RTZ)).action;
  }
op fcvt_wu_s(rd: X, rs1: F, op_round_mod: card(3))
  syntax = format("fcvt.wu.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("1100000%5s%5s%3s%5s1010011", "00001", rs1.image, op_round_mod, rd.image)
  action = {
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(op_round_mod).action;
    if rs1<31> == 1 then
      temp_fps<31..0> = rs1<31..0>;
      if is_nan(temp_fps) then rd = -1;
      else rd = 0; endif;
    else
      tmp_dword = float_to_int(DWORD, cast(FLOAT32, rs1<31..0>));
      tmp_word = tmp_dword<31..0>;
      rd = sign_extend(XWORD, tmp_word);
    endif;
    process_float_exception_flags().action;
    if rs1<31> == 1 then
      tmp_dword = float_to_int(DWORD, cast(FLOAT32, XREG[0]<1>::rs1<30..0>));
      tmp_word = float_exception_flags;
      if tmp_word == 0 then
        FFLAGS_EXCEP<4> = 0b1;
        FCSR_EXCEP<4> = 0b1;
      else
        process_float_exception_flags().action;
      endif;
    endif;
  }
op fcvt_wu_s2(rd: X, rs1: F)
  syntax = format("%s", fcvt_wu_s(rd, rs1, coerce(card(3), RM_RTZ)).syntax)
  image  = format("%32s", fcvt_wu_s(rd, rs1, coerce(card(3), RM_RTZ)).image)
  action = {
    fcvt_wu_s(rd, rs1, coerce(card(3), RM_RTZ)).action;
  }
op fcvt_s_w(rd: F, rs1: X)
  syntax = format("fcvt.s.w %s, %s", rd.syntax, rs1.syntax)
  image  = format("1101000%5s%5s%3s%5s1010011", "00000", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    rd = -1;
    rd<31..0> = int_to_float(FLOAT32, rs1<31..0>);
  }
op fcvt_s_wu(rd: F, rs1: X)
  syntax = format("fcvt.s.wu %s, %s", rd.syntax, rs1.syntax)
  image  = format("1101000%5s%5s%3s%5s1010011", "00001", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    tmp_dword = 0;
    tmp_dword<31..0> = rs1<31..0>;
    rd = -1;
    rd<31..0> = int_to_float(FLOAT32, tmp_dword);
  }
  syntax = format("fmv.x.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("1110000%5s%5s%3s%5s1010011", "00000", rs1.image, "000", rd.image)
  action = {
    rd = sign_extend(XWORD, rs1<31..0>);
  }
  syntax = format("fmv.s.x %s, %s", rd.syntax, rs1.syntax)
  image  = format("1111000%5s%5s%3s%5s1010011", "00000", rs1.image, "000", rd.image)
  action = {
    rd = -1;
    rd<31..0> = rs1<31..0>;
  }
op feq_s(rd: X, rs1: F, rs2: F)
  syntax = format("feq.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("1010000%5s%5s%3s%5s1010011", rs2.image, rs1.image, "010", rd.image)
  action = {
    rd = 0;
    temp_fps = cast(FLOAT32, rs1<31..0>);
    temp_fps2 = cast(FLOAT32, rs2<31..0>);
    if is_nan(temp_fps) && is_nan(temp_fps2) then
      rd = 0;
    elif temp_fps == temp_fps2 then
      rd = 1;
    endif;
    if is_signaling_nan(temp_fps) && is_signaling_nan(temp_fps2) then
      FFLAGS_EXCEP<4> = 0b1;
      FCSR_EXCEP<4> = 0b1;
      exception("Invalid Operation");
    else
      process_float_exception_flags().action;
    endif;
  }
op flt_s(rd: X, rs1: F, rs2: F)
  syntax = format("flt.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("1010000%5s%5s%3s%5s1010011", rs2.image, rs1.image, "001", rd.image)
  action = {
    rd = 0;
    temp_fps = cast(FLOAT32, rs1<31..0>);
    temp_fps2 = cast(FLOAT32, rs2<31..0>);
    if temp_fps < temp_fps2 then
      rd = 1;
    endif;
    if is_nan(temp_fps) && is_nan(temp_fps2) then
      FFLAGS_EXCEP<4> = 0b1;
      FCSR_EXCEP<4> = 0b1;
      exception("Invalid Operation");
    else
      process_float_exception_flags().action;
    endif;
  }
op fle_s(rd: X, rs1: F, rs2: F)
  syntax = format("fle.s %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("1010000%5s%5s%3s%5s1010011", rs2.image, rs1.image, "000", rd.image)
  action = {
    rd = 0;
    temp_fps = cast(FLOAT32, rs1<31..0>);
    temp_fps2 = cast(FLOAT32, rs2<31..0>);
    if temp_fps <= temp_fps2 then
      rd = 1;
    endif;
    if is_nan(temp_fps) && is_nan(temp_fps2) then
      FFLAGS_EXCEP<4> = 0b1;
      FCSR_EXCEP<4> = 0b1;
      exception("Invalid Operation");
    else
      process_float_exception_flags().action;
    endif;
  }
var sign_bit [BIT]
var exponent [card(8)]
var precision [card(23)]
op fclass_s(rd: X, rs1: F)
  syntax = format("fclass.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("1110000%5s%5s%3s%5s1010011", "00000", rs1.image, "001", rd.image)
  action = {
    temp_fps = cast(FLOAT32, rs1<31..0>);
    sign_bit = rs1<31>;
    exponent = rs1<30..23>;
    precision = rs1<22..0>;
    rd = 0;
    if sign_bit == 1 && exponent == coerce(card(8), 0xff) && precision == 0 then rd<0> = 1;
    elif sign_bit == 1 && exponent == 0 && precision == 0 then rd<3> = 1;
    elif sign_bit == 0 && exponent == 0 && precision == 0 then rd<4> = 1;
    elif sign_bit == 0 && exponent == coerce(card(8), 0xff) && precision == 0 then rd<7> = 1;
    elif is_signaling_nan(temp_fps) then rd<8> = 1;
    elif is_nan(temp_fps) then rd<9> = 1;
    elif sign_bit == 0 && exponent == coerce(card(8), 0) then rd<5> = 1;
    elif sign_bit == 1 && exponent == coerce(card(8), 0) then rd<2> = 1;
    else
      rd = 0;
    endif;
  }
pseudo op fmv_s(rd: F, rs: F)
  syntax = format("fmv.s %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", fsgnj_s(rd, rs, rs).image)
  action = {
    fsgnj_s(rd, rs, rs).action;
  }
pseudo op fabs_s(rd: F, rs: F)
  syntax = format("fabs.s %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", fsgnjx_s(rd, rs, rs).image)
  action = {
    fsgnjx_s(rd, rs, rs).action;
  }
pseudo op fneg_s(rd: F, rs: F)
  syntax = format("fneg.s %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", fsgnjn_s(rd, rs, rs).image)
  action = {
    fsgnjn_s(rd, rs, rs).action;
  }
pseudo op fmv_x_s(rd: X, rs1: F)
  syntax = format("fmv.x.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("%s", fmv_x_w(rd, rs1).image)
  action = {
    fmv_x_w(rd, rs1).action;
  }
pseudo op fmv_s_x(rd: F, rs1: X)
  syntax = format("fmv.s.x %s, %s", rd.syntax, rs1.syntax)
  image  = format("%s", fmv_w_x(rd, rs1).image)
  action = {
    fmv_w_x(rd, rs1).action;
  }
op rv32f_pseudo = fmv_s
                | fabs_s
                | fneg_s
                | fmv_x_s
                | fmv_s_x
op rv32f = flw
         | fsw
         | fadd_s
         | fsub_s
         | fmul_s
         | fdiv_s
         | fmin_s
         | fmax_s
         | fsqrt_s
         | fsgnj_s
         | fsgnjn_s
         | fsgnjx_s
         | fmadd_s
         | fmsub_s
         | fnmadd_s
         | fnmsub_s
         | fcvt_w_s
         | fcvt_wu_s
         | fcvt_s_w
         | fcvt_s_wu
         | fmv_x_w
         | fmv_w_x
         | feq_s
         | flt_s
         | fle_s
         | fclass_s
         | rv32f_pseudo
#endif
#ifndef RISCV_RV32I_INCLUDED
#define RISCV_RV32I_INCLUDED
op lui(rd: X, imm: card(20))
  syntax = format("lui %s, 0x%x", rd.syntax, imm)
  image  = format("%20s%s0110111", imm, rd.image)
  action = {
    rd = sign_extend(XWORD, imm) << 12;
  }
op auipc(rd: X, imm: card(20))
  syntax = format("auipc %s, 0x%x", rd.syntax, imm)
  image  = format("%20s%s0010111", imm, rd.image)
  action = {
    rd = PC + (sign_extend(XWORD, imm) << 12);
  }
var jump_imm20[card(20)]
mode JUMP_IMM(imm: int(20)) = imm
  syntax = format("0x%x", imm)
  image  = format("%1s%10s%1s%8s", imm<19>, imm<9..0>, imm<10>, imm<18..11>)
label mode JUMP_LABEL_JAL(target: WORD, current: WORD) = target<20..1> - current<20..1>
  init = {
    jump_imm20 = target<20..1> - current<20..1>;
  }
  syntax = ""
  image  = format("%1s%10s%1s%8s",
                  jump_imm20<19>, jump_imm20<9..0>, jump_imm20<10>, jump_imm20<18..11>)
mode JUMP_ADDR_JAL = JUMP_LABEL_JAL | JUMP_IMM
op jal(rd: X, imm: JUMP_ADDR_JAL)
  syntax = format("jal %s, %s", rd.syntax, imm.syntax)
  image  = format("%20s%5s1101111", imm.image, rd.image)
  action = {
    rd = PC + 4;
    PC = PC + (sign_extend(XWORD, imm) << 1);
  }
op jalr(rd: X, rs1: X, imm: card(12))
  syntax = format("jalr %s, %s, %s", rd.syntax, rs1.syntax, print_imm12(imm).syntax)
  image  = format("%s%s000%s1100111", imm, rs1.image, rd.image)
  action = {
    rd = PC + 4;
    PC = rs1 + ((sign_extend(XWORD, imm) >> 1) << 1);
  }
var jump_imm12[card(12)]
label mode BRANCH_LABEL(target: WORD, current: WORD) = target<12..1> - current<12..1>
  init = {
    jump_imm12 = target<12..1> - current<12..1>;
  }
  syntax = ""
  image = format("%s", target<12..1> - current<12..1>)
mode BRANCH_IMM(imm: card(12)) = imm
  init = {
    jump_imm12 = imm;
  }
  syntax = format("%d", coerce(int(12), imm))
  image = format("%s", imm)
mode BRANCH_OFFSET = BRANCH_LABEL | BRANCH_IMM
internal op branch_image(rs1: X, rs2: X, imm: BRANCH_OFFSET, branch_index: card(3))
  syntax = format("")
  image  = format("%1s%6s%5s%5s%3s%4s%1s1100011", imm<11>, imm<9..4>,
                  rs2.image, rs1.image, branch_index, imm<3..0>, imm<10>)
  action = {}
op beq(rs1: X, rs2: X, imm: BRANCH_OFFSET)
  syntax = format("beq %s, %s, %s", rs1.syntax, rs2.syntax, imm.syntax)
  image  = format("%s", branch_image(rs1, rs2, imm, 0b000).image)
  action = {
    if rs1 == rs2 then
      PC = PC + (sign_extend(XWORD, imm) << 1);
    endif;
  }
op bne(rs1: X, rs2: X, imm: BRANCH_OFFSET)
  syntax = format("bne %s, %s, %s", rs1.syntax, rs2.syntax, imm.syntax)
  image  = format("%32s", branch_image(rs1, rs2, imm, 0b001).image)
  action = {
    if rs1 != rs2 then
      PC = PC + (sign_extend(XWORD, imm) << 1);
    endif;
  }
op blt(rs1: X, rs2: X, imm: BRANCH_OFFSET)
  syntax = format("blt %s, %s, %s", rs1.syntax, rs2.syntax, imm.syntax)
  image  = format("%32s", branch_image(rs1, rs2, imm, 0b100).image)
  action = {
    if cast(XINT, rs1) < cast(XINT, rs2) then
      PC = PC + (sign_extend(XWORD, imm) << 1);
    endif;
  }
op bltu(rs1: X, rs2: X, imm: BRANCH_OFFSET)
  syntax = format("bltu %s, %s, %s", rs1.syntax, rs2.syntax, imm.syntax)
  image  = format("%32s", branch_image(rs1, rs2, imm, 0b110).image)
  action = {
    if rs1 < rs2 then
      PC = PC + (sign_extend(XWORD, imm) << 1);
    endif;
  }
op bge(rs1: X, rs2: X, imm: BRANCH_OFFSET)
  syntax = format("bge %s, %s, %s", rs1.syntax, rs2.syntax, imm.syntax)
  image  = format("%32s", branch_image(rs1, rs2, imm, 0b101).image)
  action = {
    if cast(XINT, rs1) >= cast(XINT, rs2) then
      PC = PC + (sign_extend(XWORD, imm) << 1);
    endif;
  }
op bgeu(rs1: X, rs2: X, imm: BRANCH_OFFSET)
  syntax = format("bgeu %s, %s, %s", rs1.syntax, rs2.syntax, imm.syntax)
  image  = format("%32s", branch_image(rs1, rs2, imm, 0b111).image)
  action = {
    if rs1 >= rs2 then
      PC = PC + (sign_extend(XWORD, imm) << 1);
    endif;
  }
op lw(rd: X, rs1: X, imm: card(12))
  syntax = format("lw %s, %s(%s)", rd.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%12s%s010%s0000011", imm, rs1.image, rd.image)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
      tmp_word = MEM[mem_index];
    elif tmp_address<1..0> == 1 then
      tmp_word = MEM[mem_index + 1]<7..0> :: MEM[mem_index]<31..8>;
    elif tmp_address<1..0> == 2 then
      tmp_word = MEM[mem_index + 1]<15..0> :: MEM[mem_index]<31..16>;
    else
      tmp_word = MEM[mem_index + 1]<23..0> :: MEM[mem_index]<31..24>;
    endif;
    rd = sign_extend(XWORD, tmp_word);
  }
op lh(rd: X, rs1: X, imm: card(12))
  syntax = format("lh %s, %s(%s)", rd.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%12s%5s001%5s0000011", imm, rs1.image, rd.image)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
    if tmp_address<1..0> != 3 then
      tmp_bit_offset = zero_extend(card(5), tmp_address<1..0>) * 8;
      tmp_half = MEM[mem_index]<tmp_bit_offset + 15..tmp_bit_offset>;
    else
      tmp_half = MEM[mem_index + 1]<7..0> :: MEM[mem_index]<31..24>;
    endif;
    rd = sign_extend(XWORD, tmp_half);
  }
op lhu(rd: X, rs1: X, imm: card(12))
  syntax = format("lhu %s, %s(%s)", rd.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%12s%s101%s0000011", imm, rs1.image, rd.image)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
    if tmp_address<1..0> != 3 then
      tmp_bit_offset = zero_extend(card(5), tmp_address<1..0>) * 8;
      tmp_half = MEM[mem_index]<tmp_bit_offset + 15..tmp_bit_offset>;
    else
      tmp_half = MEM[mem_index + 1]<7..0> :: MEM[mem_index]<31..24>;
    endif;
    rd = zero_extend(XWORD, tmp_half);
  }
op lb(rd: X, rs1: X, imm: card(12))
  syntax = format("lb %s, %s(%s)", rd.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%12s%s000%s0000011", imm, rs1.image, rd.image)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
    tmp_bit_offset = zero_extend(card(5), tmp_address<1..0>) * 8;
    tmp_byte = MEM[mem_index]<tmp_bit_offset + 7..tmp_bit_offset>;
    rd = sign_extend(XWORD, tmp_byte);
  }
op lbu(rd: X, rs1: X, imm: card(12))
  syntax = format("lbu %s, %s(%s)", rd.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%12s%s100%s0000011", imm, rs1.image, rd.image)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
    tmp_bit_offset = zero_extend(card(5), tmp_address<1..0>) * 8;
    tmp_byte = MEM[mem_index]<tmp_bit_offset + 7..tmp_bit_offset>;
    rd = zero_extend(XWORD, tmp_byte);
  }
op sw(rs2: X, rs1: X, imm: card(12))
  syntax = format("sw %s, %s(%s)", rs2.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%7s%s%s010%5s0100011", imm<11..5>, rs2.image, rs1.image, imm<4..0>)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
      MEM[mem_index] = rs2<31..0>;
    elif tmp_address<1..0> == 1 then
      MEM[mem_index + 1]<7..0> ::
      MEM[mem_index]<31..8> = rs2<31..0>;
    elif tmp_address<1..0> == 2 then
      MEM[mem_index + 1]<15..0> ::
      MEM[mem_index]<31..16> = rs2<31..0>;
    else
      MEM[mem_index + 1]<23..0> ::
      MEM[mem_index]<31..24> = rs2<31..0>;
    endif;
  }
op sh(rs2: X, rs1: X, imm: card(12))
  syntax = format("sh %s, %s(%s)", rs2.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%7s%s%s001%5s0100011", imm<11..5>, rs2.image, rs1.image, imm<4..0>)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
    if tmp_address<1..0> != 3 then
      tmp_bit_offset = zero_extend(card(5), tmp_address<1..0>) * 8;
      MEM[mem_index]<tmp_bit_offset + 15..tmp_bit_offset> = rs2<15..0>;
    else
      MEM[mem_index + 1]<7..0> :: MEM[mem_index]<31..24> = rs2<15..0>;
    endif;
  }
op sb(rs2: X, rs1: X, imm: card(12))
  syntax = format("sb %s, %s(%s)", rs2.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%7s%5s%5s000%5s0100011", imm<11..5>, rs2.image, rs1.image, imm<4..0>)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
    tmp_bit_offset = zero_extend(card(5), tmp_address<1..0>) * 8;
    MEM[mem_index]<(tmp_bit_offset + 7)..tmp_bit_offset> = rs2<7..0>;
  }
op rv32i_mmu = lb
             | lh
             | lw
             | lbu
             | lhu
             | sb
             | sh
             | sw
op addi(rd: X, rs1: X, imm: card(12))
  syntax = format("addi %s, %s, %s", rd.syntax, rs1.syntax, print_imm12(imm).syntax)
  image  = format("%12s%5s000%5s0010011", imm, rs1.image, rd.image)
  action = {
    rd = rs1 + sign_extend(XWORD, imm);
  }
op slti(rd: X, rs1: X, imm: card(12))
  syntax = format("slti %s, %s, %s", rd.syntax, rs1.syntax, print_imm12(imm).syntax)
  image  = format("%12s%s010%s0010011", imm, rs1.image, rd.image)
  action = {
    if cast(XINT, rs1) < sign_extend(XINT, imm) then
      rd = 1;
    else
      rd = 0;
    endif;
  }
op sltiu(rd: X, rs1: X, imm: card(12))
  syntax = format("sltiu %s, %s, %s", rd.syntax, rs1.syntax, print_imm12(imm).syntax)
  image  = format("%12s%s011%s0010011", imm, rs1.image, rd.image)
  action = {
    if rs1 < sign_extend(XWORD, imm) then
      rd = 1;
    else
      rd = 0;
    endif;
  }
op xori(rd: X, rs1: X, imm: card(12))
  syntax = format("xori %s, %s, %s", rd.syntax, rs1.syntax, print_imm12(imm).syntax)
  image  = format("%12s%s100%s0010011", imm, rs1.image, rd.image)
  action = {
    rd = rs1 ^ sign_extend(XWORD, imm);
  }
op ori(rd: X, rs1: X, imm: card(12))
  image  = format("%12s%s110%s0010011", imm, rs1.image, rd.image)
  action = {
    rd = rs1 | sign_extend(XWORD, imm);
  }
op andi(rd: X, rs1: X, imm: card(12))
  syntax = format("andi %s, %s, %s", rd.syntax, rs1.syntax, print_imm12(imm).syntax)
  image  = format("%12s%s111%s0010011", imm, rs1.image, rd.image)
  action = {
    rd = rs1 & sign_extend(XWORD, imm);
  }
op slli(rd: X, rs1: X, imm: card(SHLEN))
  syntax = format("slli %s, %s, 0x%x", rd.syntax, rs1.syntax, imm)
  @rev(RV64I)
    image  = format("000000%1s%5s%s001%s0010011", imm<5>, imm<4..0>, rs1.image, rd.image)
#ifndef RV64I
  @rev(RV32I)
    image = format("000000%1s%5s%s001%s0010011", coerce(BIT, 0), imm<4..0>, rs1.image, rd.image)
#endif
  action = {
    rd = rs1 << imm;
  }
op srli(rd: X, rs1: X, imm: card(SHLEN))
  syntax = format("srli %s, %s, 0x%x", rd.syntax, rs1.syntax, imm)
  @rev(RV64I)
    image  = format("000000%1s%5s%s101%s0010011", imm<5>, imm<4..0>, rs1.image, rd.image)
#ifndef RV64I
  @rev(RV32I)
    image  = format("000000%1s%5s%s101%s0010011", coerce(BIT, 0), imm<4..0>, rs1.image, rd.image)
#endif
  action = {
    rd = rs1 >> imm;
  }
op srai(rd: X, rs1: X, imm: card(SHLEN))
  syntax = format("srai %s, %s, 0x%x", rd.syntax, rs1.syntax, imm)
  @rev(RV64I)
    image  = format("010000%1s%5s%s101%s0010011", imm<5>, imm<4..0>, rs1.image, rd.image)
#ifndef RV64I
  @rev(RV32I)
    image  = format("010000%1s%5s%s101%s0010011", coerce(BIT, 0), imm<4..0>, rs1.image, rd.image)
#endif
  action = {
    rd = cast(XINT, rs1) >> imm;
  }
op sll(rd: X, rs1: X, rs2: X)
  syntax = format("sll %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s001%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = rs1 << rs2<SHLEN-1..0>;
  }
op srl(rd: X, rs1: X, rs2: X)
  syntax = format("srl %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s101%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = rs1 >> rs2<SHLEN-1..0>;
  }
op sra(rd: X, rs1: X, rs2: X)
  syntax = format("sra %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0100000%s%s101%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = cast(XINT, rs1) >> rs2<SHLEN-1..0>;
  }
op add(rd: X, rs1: X, rs2: X)
  syntax = format("add %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s000%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = rs1 + rs2;
  }
op sub(rd: X, rs1: X, rs2: X)
  syntax = format("sub %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0100000%s%s000%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = rs1 - rs2;
  }
op slt(rd: X, rs1: X, rs2: X)
  syntax = format("slt %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s010%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    if cast(XINT, rs1) < cast(XINT, rs2) then
      rd = 1;
    else
      rd = 0;
    endif;
  }
op sltu(rd: X, rs1: X, rs2: X)
  syntax = format("sltu %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s011%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    if rs1 < rs2 then
      rd = 1;
    else
      rd = 0;
    endif;
  }
op and(rd: X, rs1: X, rs2: X)
  syntax = format("and %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s111%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = rs1 & rs2;
  }
op or(rd: X, rs1: X, rs2: X)
  syntax = format("or %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s110%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = rs1 | rs2;
  }
op xor(rd: X, rs1: X, rs2: X)
  syntax = format("xor %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s100%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = rs1 ^ rs2;
  }
pseudo op nop()
  syntax = "nop"
  image  = format("%32s", addi(X(0), X(0), 0).image)
  action = {}
pseudo op mv(rd: X, rs: X)
  syntax = format("mv %s, %s", rd.syntax, rs.syntax)
  image  = format("%s", addi(rs, rd, 0).image)
  action = {
    addi(rd, rs, 0).action;
  }
pseudo op not(rd: X, rs: X)
  syntax = format("not %s, %s", rd.syntax, rs.syntax)
  image  = format("%s", xori(rd, rs, -1).image)
  action = {
    xori(rd, rs, -1).action;
  }
pseudo op neg(rd: X, rs: X)
  syntax = format("neg %s, %s", rd.syntax, rs.syntax)
  image  = format("%s", sub(rd, X(0), rs).image)
  action = {
    sub(rd, X(0), rs).action;
  }
pseudo op seqz(rd: X, rs: X)
  syntax = format("seqz %s, %s", rd.syntax, rs.syntax)
  image  = format("%s", sltiu(rd, rs, 1).image)
  action = {
    sltiu(rd, rs, 1).action;
  }
pseudo op snez(rd: X, rs: X)
  syntax = format("snez %s, %s", rd.syntax, rs.syntax)
  image  = format("%s", sltu(rd, X(0), rs).image)
  action = {
    sltu(rd, X(0), rs).action;
  }
pseudo op sltz(rd: X, rs: X)
  syntax = format("sltz %s, %s", rd.syntax, rs.syntax)
  image  = format("%s", slt(rd, rs, X(0)).image)
  action = {
    slt(rd, rs, X(0)).action;
  }
pseudo op sgtz(rd: X, rs: X)
  syntax = format("sgtz %s, %s", rd.syntax, rs.syntax)
  image  = format("%s", slt(rd, X(0), rs).image)
  action = {
    slt(rd, X(0), rs).action;
  }
pseudo op j(offset: JUMP_ADDR_JAL)
  syntax = format("j %s", offset.syntax)
  image  = format("%s", jal(X(0), offset).image)
  action = {
    jal(X(0), offset).action;
  }
pseudo op jr(rs: X)
  syntax = format("jr %s", rs.syntax)
  image  = format("%s", jalr(X(0), rs, 0).image)
  action = {
    jalr(X(0), rs, 0).action;
  }
pseudo op beqz(rs: X, offset: BRANCH_OFFSET)
  syntax = format("beqz %s, %s", rs.syntax, offset.syntax)
  image  = format("%s", beq(rs, X(0), offset).image)
  action = {
    beq(rs, X(0), offset).action;
  }
pseudo op bnez(rs: X, offset: BRANCH_OFFSET)
  syntax = format("bnez %s, %s", rs.syntax, offset.syntax)
  image  = format("%s", bne(rs, X(0), offset).image)
  action = {
    bne(rs, X(0), offset).action;
  }
pseudo op blez(rs: X, offset: BRANCH_OFFSET)
  syntax = format("blez %s, %s", rs.syntax, offset.syntax)
  image  = format("%s", bge(X(0), rs, offset).image)
  action = {
    bge(X(0), rs, offset).action;
  }
pseudo op bgez(rs: X, offset: BRANCH_OFFSET)
  syntax = format("bgez %s, %s", rs.syntax, offset.syntax)
  image  = format("%s", bge(rs, X(0), offset).image)
  action = {
    bge(rs, X(0), offset).action;
  }
pseudo op bltz(rs: X, offset: BRANCH_OFFSET)
  syntax = format("bltz %s, %s", rs.syntax, offset.syntax)
  image  = format("%s", blt(rs, X(0), offset).image)
  action = {
    blt(rs, X(0), offset).action;
  }
pseudo op bgtz(rs: X, offset: BRANCH_OFFSET)
  syntax = format("bgtz %s, %s", rs.syntax, offset.syntax)
  image  = format("%s", blt(X(0), rs, offset).image)
  action = {
    blt(X(0), rs, offset).action;
  }
op rv32i = lui
         | auipc
         | jal
         | jalr
         | beq
         | bne
         | blt
         | bge
         | bltu
         | bgeu
         | addi
         | slti
         | sltiu
         | xori
         | ori
         | andi
         | slli
         | srli
         | srai
         | sll
         | srl
         | sra
         | add
         | sub
         | slt
         | sltu
         | xor
         | or
         | nop
         | mv
         | not
         | neg
         | seqz
         | snez
         | sltz
         | sgtz
         | j
         | jr
         | beqz
         | bnez
         | blez
         | bgez
         | bltz
op rv32i_load_upper_imm = lui
                        | auipc
op rv32i_arithmetic_rrr = add
                        | sub
                        | xor
                        | or
                        | and
op rv32i_arithmetic_rri = xori
                        | ori
                        | andi
#endif
#ifndef RISCV_RV32I_SYS_INCLUDED
#define RISCV_RV32I_SYS_INCLUDED
#include "riscv_csreg.nml"
op ebreak()
  syntax = format("ebreak")
  image  = format("%12s00000%3s00000%7s", "000000000001", "000", "1110011")
  action = {
  }
  syntax = format("fence")
  image  = format("%4s%4s%4s00000%3s00000%7s", "0000", "0000", "0000", "000", "0001111")
  action = {
  }
op fence_i()
  syntax = format("fence.i")
  image  = format("%12s00000%3s00000%7s", "000000000000", "001", "0001111")
  action = {
  }
internal op xret(pc: CSR_MODE)
  action = {
    PC = pc;
  }
op mret()
  syntax = format("mret")
  image  = format("00110000001000000000000001110011")
  action = {
    xret(MEPC()).action;
  }
op sret()
  syntax = format("sret")
  image  = format("00010000001000000000000001110011")
  action = {
    xret(SEPC()).action;
  }
op uret()
  syntax = format("uret")
  image  = format("00000000001000000000000001110011")
  action = {
    xret(UEPC()).action;
  }
op wfi()
  syntax = format("wfi")
  image  = format("00010000010100000000000001110011")
  action = {
  }
op csrrs(rd: X, csr: CSR_MODE, rs1: X)
  syntax = format("csrrs %s, %s, %s", rd.syntax, csr.syntax, rs1.syntax)
  image  = format("%12s%5s010%5s1110011", csr.image, rs1.image, rd.image)
  action = {
    rd = zero_extend(XWORD, csr);
    if rs1.i != 0 then
      csr = csr | rs1;
    endif;
  }
op csrrwi(rd: X, csr: CSR_MODE, imm: card(5))
  syntax = format("csrrwi %s, %s, 0x%x", rd.syntax, csr.syntax, imm)
  image  = format("%12s%5s101%5s1110011", csr.image, imm, rd.image)
  action = {
    if rd.i != 0 then
      rd = zero_extend(XWORD, csr);
    endif;
    csr = zero_extend(XWORD, imm);
  }
op csrrsi(rd: X, csr: CSR_MODE, imm: card(5))
  syntax = format("csrrsi %s, %s, 0x%x", rd.syntax, csr.syntax, imm)
  image  = format("%12s%5s110%5s1110011", csr.image, imm, rd.image)
  action = {
    rd = zero_extend(XWORD, csr);
    if imm != 0 then
      csr = csr | zero_extend(XWORD, imm);
    endif;
  }
op csrrci(rd: X, csr: CSR_MODE, imm: card(5))
  syntax = format("csrrci %s, %s, 0x%x", rd.syntax, csr.syntax, imm)
  image  = format("%12s%5s111%5s1110011", csr.image, imm, rd.image)
  action = {
    rd = zero_extend(XWORD, csr);
    if imm != 0 then
      csr = csr & ~zero_extend(XWORD, imm);
    endif;
  }
pseudo op csrw(csr: CSR_MODE, rs1: X)
  syntax = format("csrw %s, %s", csr.syntax, rs1.syntax)
  image  = format("%32s", csrrw(X(0), csr, rs1).image)
  action = {
    csrrw(X(0), csr, rs1).action;
  }
pseudo op csrr(rd: X, csr: CSR_MODE)
  syntax = format("csrr %s, %s", rd.syntax, csr.syntax)
  image  = format("%32s", csrrs(rd, csr, X(0)).image)
  action = {
    csrrs(rd, csr, X(0)).action;
  }
pseudo op csrs(csr: CSR_MODE, rs1: X)
  syntax = format("csrs %s, %s", csr.syntax, rs1.syntax)
  image  = format("%32s", csrrs(X(0), csr, rs1).image)
  action = {
    csrrs(X(0), csr, rs1).action;
  }
pseudo op csrc(csr: CSR_MODE, rs1: X)
  syntax = format("csrc %s, %s", csr.syntax, rs1.syntax)
  image  = format("%32s", csrrc(X(0), csr, rs1).image)
  action = {
    csrrc(X(0), csr, rs1).action;
  }
pseudo op csrwi(csr: CSR_MODE, imm: card(5))
  syntax = format("csrwi %s, 0x%x", csr.syntax, imm)
  image  = format("%32s", csrrwi(X(0), csr, imm).image)
  action = {
    csrrwi(X(0), csr, imm).action;
  }
pseudo op csrsi(csr: CSR_MODE, imm: card(5))
  syntax = format("csrsi %s, 0x%x", csr.syntax, imm)
  image  = format("%32s", csrrsi(X(0), csr, imm).image)
  action = {
    csrrsi(X(0), csr, imm).action;
  }
pseudo op csrci(csr: CSR_MODE, imm: card(5))
  syntax = format("csrci %s, 0x%x", csr.syntax, imm)
  image  = format("%32s", csrrci(X(0), csr, imm).image)
  action = {
    csrrci(X(0), csr, imm).action;
  }
pseudo op frcsr(rd: X)
  syntax = format("frcsr %s", rd.syntax)
  image  = format("%32s", csrrs(rd, FCSR(), X(0)).image)
  action = {
    csrrs(rd, FCSR(), X(0)).action;
  }
pseudo op fscsr(rd: X, rs: X)
  syntax = format("fscsr %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", csrrw(rd, FCSR(), rs).image)
  action = {
    csrrw(rd, FCSR(), rs).action;
  }
pseudo op fscsr2(rs: X)
  syntax = format("fscsr %s", rs.syntax)
  image  = format("%32s", csrrw(X(0), FCSR(), rs).image)
  action = {
    csrrw(X(0), FCSR(), rs).action;
  }
pseudo op frrm(rd: X)
  syntax = format("frrm %s", rd.syntax)
  image  = format("%32s", csrrs(rd, FRM(), X(0)).image)
  action = {
    csrrs(rd, FRM(), X(0)).action;
  }
pseudo op fsrm(rd: X, rs: X)
  syntax = format("fsrm %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", csrrw(rd, FRM(), rs).image)
  action = {
    csrrw(rd, FRM(), rs).action;
  }
pseudo op fsrm2(rs: X)
  syntax = format("fsrm %s", rs.syntax)
  image  = format("%32s", csrrw(X(0), FRM(), rs).image)
  action = {
    csrrw(X(0), FRM(), rs).action;
  }
pseudo op fsrmi(rd: X, imm: card(5))
  syntax = format("fsrmi %s, 0x%x", rd.syntax, imm)
  image  = format("%32s", csrrwi(rd, FRM(), imm).image)
  action = {
    csrrwi(rd, FRM(), imm).action;
  }
pseudo op fsrmi2(imm: card(5))
  syntax = format("fsrmi 0x%x", imm)
  image  = format("%32s", csrrwi(X(0), FRM(), imm).image)
  action = {
    csrrwi(X(0), FRM(), imm).action;
  }
pseudo op frflags(rd: X)
  syntax = format("frflags %s", rd.syntax)
  image  = format("%32s", csrrs(rd, FFLAGS(), X(0)).image)
  action = {
    csrrs(rd, FFLAGS(), X(0)).action;
  }
pseudo op fsflags(rd: X, rs: X)
  syntax = format("fsflags %s, %s", rd.syntax, rs.syntax)
  image  = format("%32s", csrrw(rd, FFLAGS(), rs).image)
  action = {
    csrrw(rd, FFLAGS(), rs).action;
  }
pseudo op fsflags2(rs: X)
  syntax = format("fsflags %s", rs.syntax)
  image  = format("%32s", csrrw(X(0), FFLAGS(), rs).image)
  action = {
    csrrw(X(0), FFLAGS(), rs).action;
  }
pseudo op fsflagsi(rd: X, imm: card(5))
  syntax = format("fsflagsi %s, 0x%x", rd.syntax, imm)
  image  = format("%32s", csrrwi(rd, FFLAGS(), imm).image)
  action = {
    csrrwi(rd, FFLAGS(), imm).action;
  }
pseudo op fsflagsi2(imm: card(5))
  syntax = format("fsflagsi 0x%x", imm)
  image  = format("%32s", csrrwi(X(0), FFLAGS(), imm).image)
  action = {
    csrrwi(X(0), FFLAGS(), imm).action;
  }
pseudo op rdinstret(rd: X)
  syntax = format("rdinstret %s", rd.syntax)
  image  = format("%s", csrrs(rd, INSTRET(), X(0)).image)
  action = {
    csrrs(rd, INSTRET(), X(0)).action;
  }
#ifndef RV64I
pseudo op rdinstreth(rd: X)
  syntax = format("rdinstreth %s", rd.syntax)
  image  = format("%s", csrrs(rd, INSTRETH(), X(0)).image)
  action = {
    csrrs(rd, INSTRETH(), X(0)).action;
  }
#endif
pseudo op rdcycle(rd: X)
  syntax = format("rdcycle %s", rd.syntax)
  image  = format("%s", csrrs(rd, CYCLE(), X(0)).image)
  action = {
    csrrs(rd, CYCLE(), X(0)).action;
  }
#ifndef RV64I
pseudo op rdcycleh(rd: X)
  syntax = format("rdcycleh %s", rd.syntax)
  image  = format("%s", csrrs(rd, CYCLEH(), X(0)).image)
  action = {
    csrrs(rd, CYCLEH(), X(0)).action;
  }
#endif
pseudo op rdtime(rd: X)
  syntax = format("rdtime %s", rd.syntax)
  image  = format("%s", csrrs(rd, TIME(), X(0)).image)
  action = {
    csrrs(rd, TIME(), X(0)).action;
  }
#ifndef RV64I
pseudo op rdtimeh(rd: X)
  syntax = format("rdtimeh %s", rd.syntax)
  image  = format("%s", csrrs(rd, TIMEH(), X(0)).image)
  action = {
    csrrs(rd, TIMEH(), X(0)).action;
  }
#endif
op rv32i_system = ecall
                | ebreak
                | fence
                | fence_i
                | mret
                | sret
                | uret
                | wfi
                | csrrw
                | csrrs
                | csrrc
                | csrrwi
                | csrrsi
                | csrrci
op rv32i_pseudo_system = csrw
                       | csrr
                       | csrs
                       | csrc
                       | csrwi
                       | csrsi
                       | csrci
                       | frcsr
                       | fscsr
                       | fscsr2
                       | frrm
                       | fsrm
                       | fsrm2
                       | fsrmi
                       | fsrmi2
                       | frflags
                       | fsflags
                       | fsflags2
                       | fsflagsi
                       | fsflagsi2
                       | rdinstret
                       | rdcycle
                       | rdtime
#ifndef RV64I
                       | rdinstreth
                       | rdcycleh
                       | rdtimeh
#endif
#endif
#ifndef RISCV_RV32M_INCLUDED
#define RISCV_RV32M_INCLUDED
var tmp_rv32m[XDWORD]
op mul(rd: X, rs1: X, rs2: X)
  syntax = format("mul %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s000%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    rd = rs1 * rs2;
  }
op mulh(rd: X, rs1: X, rs2: X)
  syntax = format("mulh %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s001%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    tmp_rv32m = sign_extend(XLONG, rs1) * sign_extend(XLONG, rs2);
    rd = tmp_rv32m<2*XLEN-1..XLEN>;
  }
op mulhu(rd: X, rs1: X, rs2: X)
  syntax = format("mulhu %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s011%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    tmp_rv32m = zero_extend(XDWORD, rs1) * zero_extend(XDWORD, rs2);
    rd = tmp_rv32m<2*XLEN-1..XLEN>;
  }
op mulhsu(rd: X, rs1: X, rs2: X)
  syntax = format("mulhsu %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s010%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    tmp_rv32m = sign_extend(XLONG, rs1) * zero_extend(XLONG, rs2);
    rd = tmp_rv32m<2*XLEN-1..XLEN>;
  }
op div(rd: X, rs1: X, rs2: X)
  syntax = format("div %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s100%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    if rs2 == 0 then
      rd = -1;
    elif rs1 == 1 << (XLEN - 1) && rs2 == -1 then
      rd = rs1;
    else
      rd = cast(XINT, rs1) / cast(XINT, rs2);
    endif;
  }
op divu(rd: X, rs1: X, rs2: X)
  syntax = format("divu %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s101%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    if rs2 == 0 then
      rd = (1 << XLEN) - 1;
    else
      rd = cast(XWORD, rs1) / cast(XWORD, rs2);
    endif;
  }
op rem(rd: X, rs1: X, rs2: X)
  syntax = format("rem %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s110%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    if rs2 == 0 then
      rd = rs1;
    elif rs1 == 1 << (XLEN - 1) && rs2 == -1 then
      rd = 0;
    else
      rd = cast(XINT, rs1) % cast(XINT, rs2);
    endif;
  }
op remu(rd: X, rs1: X, rs2: X)
  syntax = format("remu %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s111%s0110011", rs2.image, rs1.image, rd.image)
  action = {
    if rs2 == 0 then
      rd = rs1;
    else
      rd = cast(XWORD, rs1) % cast(XWORD, rs2);
    endif;
  }
op rv32m = mul
         | mulh
         | mulhsu
         | mulhu
         | div
         | divu
         | rem
         | remu
#endif
#ifndef RISCV_RV32V_INCLUDED
#define RISCV_RV32V_INCLUDED
var funct2[card(2)]
var func7_0[card(4)]
var func7_1[card(3)]
var vp[BIT]
var vs2_const[card(5)]
var m[card(2)]
var im_2b[card(2)]
reg VREG [32, HWORD]
mode VR (i: card(5)) = VREG [i]
  syntax = format("v%d", i)
  image  = format("%5s", i)
op vadd(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vadd %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsub(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsub %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsl(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsl %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsr(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1101;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsr %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vand(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1111;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vand %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vor(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1110;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vor %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vxor(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vxor %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vseq(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vseq %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsne(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b101;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsne %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vslt(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b110;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vslt %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsge(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b111;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsge %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vclip(vd: VR, vs1: VR, rs2: X)
  init = {
    func7_0 = 0b1011;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vclip %s, %s, %s", vd.syntax, vs1.syntax, rs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, rs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vcvt(vd: VR, vs1: VR, rs2: X)
  init = {
    func7_0 = 0b1011;
    func7_1 = 0b001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vcvt %s, %s, %s", vd.syntax, vs1.syntax, rs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, rs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vmpop(rd: X, vs1: VR)
  init = {
    func7_0 = 0b1010;
    func7_1 = 0b111;
    vs2_const = 0b00001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmpop %s, %s", rd.syntax, vs1.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2_const, vs1.image, vp, m, rd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vmfirst(rd: X, vs1: VR)
  init = {
    func7_0 = 0b1010;
    func7_1 = 0b111;
    vs2_const = 0b00000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmfirst %s, %s", rd.syntax, vs1.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2_const, vs1.image, vp, m, rd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vextract(rd: X, vs1: VR, rs2: X)
  init = {
    func7_0 = 0b1010;
    func7_1 = 0b000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vextract %s, %s, %s", rd.syntax, vs1.syntax, rs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, rs2.image, vs1.image, vp, m, rd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vinsert(vd: VR, rs1: X, rs2: X)
  init = {
    func7_0 = 0b1011;
    func7_1 = 0b100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vinsert %s, %s, %s", vd.syntax, rs1.syntax, rs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, rs2.image, rs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vmerge(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmerge %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vselect(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b010;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vselect %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vslide(vd: VR, vs1: VR, rs2: X)
  init = {
    func7_0 = 0b1011;
    func7_1 = 0b010;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vslide %s, %s, %s", vd.syntax, vs1.syntax, rs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, rs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vdiv(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vdiv %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vrem(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b101;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vrem %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vmul(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b110;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmul %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vmulh(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b111;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmulh %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vmin(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b010;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmin %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vmax(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1000;
    func7_1 = 0b011;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vmax %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsgnj(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b010;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsgnj %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsgnjn(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b011;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsgnjn %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsgnjx(vd: VR, vs1: VR, vs2: VR)
  init = {
    func7_0 = 0b1001;
    func7_1 = 0b001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsgnjn %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsqrt(vd: VR, vs1: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b111;
    vs2_const = 0b00010;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsqrt %s, %s", vd.syntax, vs1.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2_const, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vclass(vd: VR, vs1: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b111;
    vs2_const = 0b00000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vclass %s, %s", vd.syntax, vs1.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2_const, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vpopc(vd: VR, vs1: VR)
  init = {
    func7_0 = 0b1100;
    func7_1 = 0b111;
    vs2_const = 0b00001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vpopc %s, %s", vd.syntax, vs1.syntax)
  image  = format("%4s%3s%5s%5s%1s%2s%5s%7s",
                 func7_0, func7_1, vs2_const, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vaddi(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vaddi %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsli(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsli %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vsri(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0101;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsri %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vandi(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0111;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vandi %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vori(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0110;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vori %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vxori(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vxori %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vclipi(vd: VR, vs1: VR, imm: card(8))
  init = {
    func7_0 = 0b0011;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vclipi %s, %s, %d", vd.syntax, vs1.syntax, imm)
  image  = format("%4s%8s%5s%1s%2s%5s%7s",
                 func7_0, imm, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vmadd(vd: VR, vs1: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b00;
    vp = 0;
    m = 0b00;
  }
  syntax = format("vmadd %s, %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vmsub(vd: VR, vs1: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b01;
    vp = 0;
    m = 0b00;
  }
  syntax = format("vmsub %s, %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vnmadd(vd: VR, vs1: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vp = 0;
    m = 0b00;
  }
  syntax = format("vnmadd %s, %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vnmsub(vd: VR, vs1: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b10;
    vp = 0;
    m = 0b00;
  }
  syntax = format("vnmsub %s, %s, %s, %s", vd.syntax, vs1.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs1.image, vp, m, vd.image, coerce(card(7), RV32V_SE))
  action = {
  }
op vld(vd: VR, rs1: X, imm: card(5))
  init = {
    im_2b = 0b00;
    vs2_const = 0b00000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vld %s, %s, %d", vd.syntax, rs1.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 imm, im_2b, vs2_const, rs1.image, vp, m, vd.image, coerce(card(7), RV32V_SEC1))
  action = {
  }
op vlds(vd: VR, rs1: X, rs2: X, imm: card(5))
  init = {
    im_2b = 0b01;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vlds %s, %s, %s, %d", vd.syntax, rs1.syntax, rs2.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 imm, im_2b, rs2.image, rs1.image, vp, m, vd.image, coerce(card(7), RV32V_SEC1))
  action = {
  }
op vldx(vd: VR, rs1: X, vs2: VR, imm: card(5))
  init = {
    im_2b = 0b10;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vldx %s, %s, %s, %d", vd.syntax, rs1.syntax, vs2.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 imm, im_2b, vs2.image, rs1.image, vp, m, vd.image, coerce(card(7), RV32V_SEC1))
  action = {
  }
op vst(rs1: X, vs3: VR, imm: card(5))
  init = {
    im_2b = 0b00;
    vs2_const = 0b00000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vst %s, %s, %d", rs1.syntax, vs3.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b, vs2_const, rs1.image, vp, m, imm, coerce(card(7), RV32V_SEC2))
  action = {
  }
op vsts(rs1: X, rs2: X, vs3: VR, imm: card(5))
  init = {
    im_2b = 0b01;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vsts %s, %s, %s, %d", rs1.syntax, rs2.syntax, vs3.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b, rs2.image, rs1.image, vp, m, imm, coerce(card(7), RV32V_SEC2))
  action = {
  }
op vstx(rs1: X, vs2: VR, vs3: VR, imm: card(5))
  init = {
    im_2b = 0b10;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vstx %s, %s, %s, %d", rs1.syntax, vs2.syntax, vs3.syntax, imm)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b, vs2.image, rs1.image, vp, m, imm, coerce(card(7), RV32V_SEC2))
  action = {
  }
op vamoswap(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b00001;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamoswap %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
  }
op vamoadd(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b00000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamoadd %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
  }
op vamoand(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b01100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamoand %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
  }
op vamoor(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b01000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamoor %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
  }
op vamoxor(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b00100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamoxor %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
  }
op vamomin(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b10000;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamomin %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
  }
op vamomax(vd: VR, vs2: VR, vs3: VR)
  init = {
    im_2b = 0b11;
    vs2_const = 0b10100;
    vp = 1;
    m = 0b00;
  }
  syntax = format("vamomax %s, %s, %s", vd.syntax, vs2.syntax, vs3.syntax)
  image  = format("%5s%2s%5s%5s%1s%2s%5s%7s",
                 vs3.image, im_2b , vs2.image, vs2_const, vp, m, vd.image, coerce(card(7), RV32V_SEC2))
  action = {
  }
op rv32v = vadd
         | vsub
         | vsl
         | vsr
         | vand
         | vor
         | vxor
         | vseq
         | vsne
         | vsge
         | vclip
         | vcvt
         | vmpop
         | vmfirst
         | vextract
         | vinsert
         | vmerge
         | vselect
         | vdiv
         | vrem
         | vmul
         | vmulh
         | vmin
         | vmax
         | vsgnj
         | vsgnjn
         | vsgnjx
         | vclass
         | vpopc 
         | vaddi
         | vsli
         | vsri
         | vandi
         | vori
         | vxori
         | vclipi
         | vmsub
         | vnmadd
         | vnmsub
         | vld
         | vlds
         | vldx
         | vst
         | vsts
         | vstx
         | vamoadd
         | vamoand
         | vamoor
         | vamoxor
         | vamomin
         | vamomax
#endif
#ifndef RISCV_RV64A_INCLUDED
#define RISCV_RV64A_INCLUDED
op lr_d(rd: X, rs1: X)
  syntax = format("lr.d %s, (%s)", rd.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "00010", "0", "0", "00000", rs1.image, "011", rd.image)
  action = {
    LOAD_RESERVATION = rs1;
    rd = load_value;
  }
op sc_d(rd: X, rs2: X, rs1: X)
  syntax = format("sc.d %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "00011", "0", "0", rs2.image, rs1.image, "011", rd.image)
  action = {
    if rs1 == LOAD_RESERVATION then
      store_data(MEM_DWORD, rs1, coerce(DWORD, rs2)).action;
      rd = 0;
    else
      rd = 1;
    endif;
  }
op amoswap_d(rd: X, rs2: X, rs1: X)
  syntax = format("amoswap.d %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "00001", "0", "0", rs2.image, rs1.image, "011", rd.image)
  action = {
    rd = load_value;
    store_data(MEM_DWORD, rs1, coerce(DWORD, rs2)).action;
  }
op amoadd_d(rd: X, rs2: X, rs1: X)
  syntax = format("amoadd.d %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "00000", "0", "0", rs2.image, rs1.image, "011", rd.image)
  action = {
    rd = load_value;
    tmp_dword = rd + rs2;
    store_data(MEM_DWORD, rs1, coerce(DWORD, tmp_dword)).action;
  }
op amoand_d(rd: X, rs2: X, rs1: X)
  syntax = format("amoand.d %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "01100", "0", "0", rs2.image, rs1.image, "011", rd.image)
  action = {
    rd = load_value;
    tmp_dword = rd & rs2;
    store_data(MEM_DWORD, rs1, coerce(DWORD, tmp_dword)).action;
  }
op amoor_d(rd: X, rs2: X, rs1: X)
  syntax = format("amoor.d %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "01000", "0", "0", rs2.image, rs1.image, "011", rd.image)
  action = {
    rd = load_value;
    tmp_dword = rd | rs2;
    store_data(MEM_DWORD, rs1, coerce(DWORD, tmp_dword)).action;
  }
op amoxor_d(rd: X, rs2: X, rs1: X)
  syntax = format("amoxor.d %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "00100", "0", "0", rs2.image, rs1.image, "011", rd.image)
  action = {
    rd = load_value;
    tmp_dword = rd ^ rs2;
    store_data(MEM_DWORD, rs1, coerce(DWORD, tmp_dword)).action;
  }
op amomin_d(rd: X, rs2: X, rs1: X)
  syntax = format("amomin.d %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "10000", "0", "0", rs2.image, rs1.image, "011", rd.image)
  action = {
    rd = load_value;
    tmp_long1 = coerce(LONG, rd);
    tmp_long2 = coerce(LONG, rs2);
    if tmp_long1 < tmp_long2 then
      tmp_dword = rd;
    else
      tmp_dword = rs2;
    endif;
    store_data(MEM_DWORD, rs1, coerce(DWORD, tmp_dword)).action;
  }
op amomax_d(rd: X, rs2: X, rs1: X)
  syntax = format("amomax.d %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "10100", "0", "0", rs2.image, rs1.image, "011", rd.image)
  action = {
    rd = load_value;
    tmp_long1 = coerce(LONG, rd);
    tmp_long2 = coerce(LONG, rs2);
    if tmp_long1 > tmp_long2 then
      tmp_dword = rd;
    else
      tmp_dword = rs2;
    endif;
    store_data(MEM_DWORD, rs1, coerce(DWORD, tmp_dword)).action;
  }
op amominu_d(rd: X, rs2: X, rs1: X)
  syntax = format("amominu.d %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "11000", "0", "0", rs2.image, rs1.image, "011", rd.image)
  action = {
    rd = load_value;
    if rd < rs2 then
      tmp_dword = rd;
    else
      tmp_dword = rs2;
    endif;
    store_data(MEM_DWORD, rs1, coerce(DWORD, tmp_dword)).action;
  }
op amomaxu_d(rd: X, rs2: X, rs1: X)
  syntax = format("amomaxu.d %s, %s, (%s)", rd.syntax, rs2.syntax, rs1.syntax)
  image  = format("%5s%1s%1s%5s%5s%3s%5s0101111", "11100", "0", "0", rs2.image, rs1.image, "011", rd.image)
  action = {
    rd = load_value;
    tmp_long1 = coerce(LONG, rd);
    tmp_long2 = coerce(LONG, rs2);
    if rd > rs2 then
      tmp_dword = rd;
    else
      tmp_dword = rs2;
    endif;
    store_data(MEM_DWORD, rs1, coerce(DWORD, tmp_dword)).action;
  }
op rv64a = lr_d
         | sc_d
         | amoswap_d
         | amoadd_d
         | amoand_d
         | amoor_d
         | amoxor_d
         | amomin_d
         | amomax_d
         | amominu_d
         | amomaxu_d
#endif
#ifndef RISCV_RV64D_INCLUDED
#define RISCV_RV64D_INCLUDED
op fcvt_l_d(rd: X, rs1: F, op_round_mod: card(3))
  syntax = format("fcvt.l.d %s, %s", rd.syntax, rs1.syntax)
  image  = format("1100001%5s%5s%3s%5s1010011", "00010", rs1.image, op_round_mod, rd.image)
  action = {
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(op_round_mod).action;
    rd = float_to_int(DWORD, rs1);
    process_float_exception_flags().action;
  }
op fcvt_l_d2(rd: X, rs1: F)
  syntax = format("%s", fcvt_l_d(rd, rs1, coerce(card(3), RM_RTZ)).syntax)
  image  = format("%32s", fcvt_l_d(rd, rs1, coerce(card(3), RM_RTZ)).image)
  action = {
    fcvt_l_d(rd, rs1, coerce(card(3), RM_RTZ)).action;
  }
op fcvt_lu_d(rd: X, rs1: F, op_round_mod: card(3))
  syntax = format("fcvt.lu.d %s, %s", rd.syntax, rs1.syntax)
  image  = format("1100001%5s%5s%3s%5s1010011", "00011", rs1.image, op_round_mod, rd.image)
  action = {
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(op_round_mod).action;
    process_float_exception_flags().action;
  }
op fcvt_lu_d2(rd: X, rs1: F)
  syntax = format("%s", fcvt_lu_d(rd, rs1, coerce(card(3), RM_RTZ)).syntax)
  image  = format("%32s", fcvt_lu_d(rd, rs1, coerce(card(3), RM_RTZ)).image)
  action = {
    fcvt_lu_d(rd, rs1, coerce(card(3), RM_RTZ)).action;
  }
op fcvt_d_l(rd: F, rs1: X)
  syntax = format("fcvt.d.l %s, %s", rd.syntax, rs1.syntax)
  image  = format("1101001%5s%5s%3s%5s1010011", "00010", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    rd = int_to_float(FLOAT64, rs1);
  }
op fcvt_d_lu(rd: F, rs1: X)
  syntax = format("fcvt.d.lu %s, %s", rd.syntax, rs1.syntax)
  image  = format("1101001%5s%5s%3s%5s1010011", "00011", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    fcvt_d_l(rd, rs1).action;
  }
op fmv_x_d(rd: X, rs1: F)
  syntax = format("fmv.x.d %s, %s", rd.syntax, rs1.syntax)
  image  = format("1110001%5s%5s%3s%5s1010011", "00000", rs1.image, "000", rd.image)
  action = {
    rd = rs1<63..0>;
  }
op fmv_d_x(rd: F, rs1: X)
  syntax = format("fmv.d.x %s, %s", rd.syntax, rs1.syntax)
  image  = format("1111001%5s%5s%3s%5s1010011", "00000", rs1.image, "000", rd.image)
  action = {
    rd<63..0> = rs1<63..0>;
  }
op rv64d = fcvt_l_d
         | fcvt_lu_d
         | fcvt_l_d2
         | fcvt_lu_d2
         | fcvt_d_l
         | fcvt_d_lu
         | fmv_x_d
         | fmv_d_x
#endif
#ifndef RISCV_RV64F_INCLUDED
#define RISCV_RV64F_INCLUDED
op fcvt_l_s(rd: X, rs1: F, op_round_mod: card(3))
  syntax = format("fcvt.l.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("1100000%5s%5s%3s%5s1010011", "00010", rs1.image, op_round_mod, rd.image)
  action = {
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(op_round_mod).action;
    rd = float_to_int(DWORD, cast(FLOAT32, rs1<31..0>));
    process_float_exception_flags().action;
  }
op fcvt_l_s2(rd: X, rs1: F)
  syntax = format("%s", fcvt_l_s(rd, rs1, coerce(card(3), RM_RTZ)).syntax)
  image  = format("%32s", fcvt_l_s(rd, rs1, coerce(card(3), RM_RTZ)).image)
  action = {
    fcvt_l_s(rd, rs1, coerce(card(3), RM_RTZ)).action;
  }
op fcvt_lu_s(rd: X, rs1: F, op_round_mod: card(3))
  syntax = format("fcvt.lu.s %s, %s", rd.syntax, rs1.syntax)
  image  = format("1100000%5s%5s%3s%5s1010011", "00011", rs1.image, op_round_mod, rd.image)
  action = {
    tmp_ui3 = float_rounding_mode;
    setSFRoundingMode(op_round_mod).action;
    temp_fps<31..0> = rs1<31..0>;
    if rs1<31> == 1 then
      rd = 0;
      if is_nan(temp_fps) then rd = -1;
      else rd = 0; endif;
    else
      exponent = rs1<30..23>;
      precision = rs1<22..0>;
      if is_nan(temp_fps) then rd = -1;
      elif exponent == coerce(card(8), 0xff) && precision == 0 then rd = -1;
      else
        rd = float_to_int(DWORD, cast(FLOAT32, rs1<31..0>));
        process_float_exception_flags().action;
        tmp_word = 0x7fffFFFF;
        temp_fps = int_to_float(FLOAT32, tmp_word);
        temp_fps2 = cast(FLOAT32, rs1<31..0>);
        if temp_fps2 > temp_fps then
          rd = float_to_int(DWORD, temp_fps2 - temp_fps);
          rd<63> = 0b1;
        endif;
      endif;
    endif;
    if rs1<31> == 1 then
      float_exception_flags = 0;
      process_float_exception_flags().action;
      tmp_dword = float_to_int(DWORD, cast(FLOAT32, XREG[0]<1>::rs1<30..0>));
      tmp_word = float_exception_flags;
      if tmp_word == 0 then
        FFLAGS_EXCEP<4> = 0b1;
        FCSR_EXCEP<4> = 0b1;
      else
        process_float_exception_flags().action;
      endif;
    endif;
  }
op fcvt_lu_s2(rd: X, rs1: F)
  syntax = format("%s", fcvt_lu_s(rd, rs1, coerce(card(3), RM_RTZ)).syntax)
  image  = format("%32s", fcvt_lu_s(rd, rs1, coerce(card(3), RM_RTZ)).image)
  action = {
    fcvt_lu_s(rd, rs1, coerce(card(3), RM_RTZ)).action;
  }
op fcvt_s_l(rd: F, rs1: X)
  syntax = format("fcvt.s.l %s, %s", rd.syntax, rs1.syntax)
  image  = format("1101000%5s%5s%3s%5s1010011", "00010", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    rd = -1;
    temp_fps = int_to_float(FLOAT32, rs1<63..0>);
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op fcvt_s_lu(rd: F, rs1: X)
  syntax = format("fcvt.s.lu %s, %s", rd.syntax, rs1.syntax)
  image  = format("1101000%5s%5s%3s%5s1010011", "00011", rs1.image, coerce(card(3), RM_RNE), rd.image)
  action = {
    tmp_word = 0;
    temp_fps = int_to_float(FLOAT32, tmp_word);
    if rs1<63> == 1 then
      tmp_dword<62> = 1;
      temp_fps = int_to_float(FLOAT32, tmp_dword<63..0>);
      temp_fps = temp_fps + temp_fps;
    endif;
    tmp_dword = 0;
    tmp_dword<62..0> = rs1<62..0>;
    temp_fps2 = int_to_float(FLOAT32, tmp_dword<63..0>);
    temp_fps = temp_fps + temp_fps2;
    rd = -1;
    rd<31..0> = temp_fps<31..0>;
    process_float_exception_flags().action;
  }
op rv64f = fcvt_l_s
         | fcvt_lu_s
         | fcvt_s_l
         | fcvt_s_lu
#endif
#ifndef RISCV_RV64I_INCLUDED
#define RISCV_RV64I_INCLUDED
op lwu(rd: X, rs1: X, imm: card(12))
  syntax = format("lwu %s, %s(%s)", rd.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%12s%s110%s0000011", imm, rs1.image, rd.image)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
      tmp_word = MEM[mem_index];
    elif tmp_address<1..0> == 1 then
      tmp_word = MEM[mem_index + 1]<7..0> :: MEM[mem_index]<31..8>;
    elif tmp_address<1..0> == 2 then
      tmp_word = MEM[mem_index + 1]<15..0> :: MEM[mem_index]<31..16>;
    else
      tmp_word = MEM[mem_index + 1]<23..0> :: MEM[mem_index]<31..24>;
    endif;
    rd = zero_extend(XWORD, tmp_word);
  }
op ld(rd: X, rs1: X, imm: card(12))
  syntax = format("ld %s, %s(%s)", rd.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%12s%s011%s0000011", imm, rs1.image, rd.image)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
      tmp_dword<63..32> = MEM[mem_index + 1];
      tmp_dword<31..0>  = MEM[mem_index];
    elif tmp_address<1..0> == 1 then
      tmp_dword<63..56> = MEM[mem_index + 2]<7..0>;
      tmp_dword<55..24> = MEM[mem_index + 1];
      tmp_dword<23..0>  = MEM[mem_index]<31..8>;
    elif tmp_address<1..0> == 2 then
      tmp_dword = MEM[mem_index + 2]<15..0> ::
                  MEM[mem_index + 1] ::
                  MEM[mem_index]<31..16>;
    else
      tmp_dword = MEM[mem_index + 2]<23..0> ::
                  MEM[mem_index + 1] ::
                  MEM[mem_index]<31..24>;
    endif;
    rd = tmp_dword;
  }
op sd(rs2: X, rs1: X, imm: card(12))
  syntax = format("sd %s, %s(%s)", rs2.syntax, print_imm12(imm).syntax, rs1.syntax)
  image  = format("%7s%s%s011%5s0100011", imm<11..5>, rs2.image, rs1.image, imm<4..0>)
  action = {
    tmp_address = rs1 + sign_extend(XWORD, imm);
    mem_index = coerce(card(MEM_SIZE), tmp_address >> 2);
      MEM[mem_index + 1] = rs2<63..32>;
      MEM[mem_index] = rs2<31..0>;
    elif tmp_address<1..0> == 1 then
      MEM[mem_index + 2]<7..0> = rs2<63..56>;
      MEM[mem_index + 1] = rs2<55..24>;
      MEM[mem_index]<31..8> = rs2<23..0>;
    elif tmp_address<1..0> == 2 then
      MEM[mem_index + 2]<15..0> ::
      MEM[mem_index + 1] ::
      MEM[mem_index]<31..16> = rs2;
    else
      MEM[mem_index + 2]<23..0> ::
      MEM[mem_index + 1] ::
      MEM[mem_index]<31..24> = rs2;
    endif;
  }
op addiw(rd: X, rs1: X, imm: card(12))
  syntax = format("addiw %s, %s, %s", rd.syntax, rs1.syntax, print_imm12(imm).syntax)
  image  = format("%12s%s000%s0011011", imm, rs1.image, rd.image)
  action = {
    rd = sign_extend(XWORD, rs1<31..0> + sign_extend(WORD, imm));
  }
op slliw(rd: X, rs1: X, imm: card(5))
  syntax = format("slliw %s, %s, 0x%x", rd.syntax, rs1.syntax, imm)
  image  = format("0000000%5s%s001%s0011011", imm, rs1.image, rd.image)
  action = {
    rd = sign_extend(XWORD, rs1<31..0> << imm);
  }
op srliw(rd: X, rs1: X, imm: card(5))
  syntax = format("srliw %s, %s, 0x%x", rd.syntax, rs1.syntax, imm)
  image  = format("0000000%5s%s101%s0011011", imm, rs1.image, rd.image)
  action = {
    rd = sign_extend(XWORD, rs1<31..0> >> imm);
  }
op sraiw(rd: X, rs1: X, imm: card(5))
  syntax = format("sraiw %s, %s, 0x%x", rd.syntax, rs1.syntax, imm)
  image  = format("0100000%5s%s101%s0011011", imm, rs1.image, rd.image)
  action = {
    rd = sign_extend(XWORD, cast(INT, rs1<31..0>) >> imm);
  }
op addw(rd: X, rs1: X, rs2: X)
  syntax = format("addw %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s000%s0111011", rs2.image, rs1.image, rd.image)
  action = {
    rd = sign_extend(XWORD, rs1<31..0> + rs2<31..0>);
  }
op subw(rd: X, rs1: X, rs2: X)
  syntax = format("subw %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0100000%s%s000%s0111011", rs2.image, rs1.image, rd.image)
  action = {
    rd = sign_extend(XWORD, rs1<31..0> - rs2<31..0>);
  }
op sllw(rd: X, rs1: X, rs2: X)
  syntax = format("sllw %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s001%s0111011", rs2.image, rs1.image, rd.image)
  action = {
    rd = sign_extend(XWORD, rs1<31..0> << rs2<4..0>);
  }
op srlw(rd: X, rs1: X, rs2: X)
  syntax = format("srlw %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000000%s%s101%s0111011", rs2.image, rs1.image, rd.image)
  action = {
    rd = sign_extend(XWORD, rs1<31..0> >> rs2<4..0>);
  }
op sraw(rd: X, rs1: X, rs2: X)
  syntax = format("sraw %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0100000%s%s101%s0111011", rs2.image, rs1.image, rd.image)
  action = {
    rd = sign_extend(XWORD, cast(INT, rs1<31..0>) >> rs2<4..0>);
  }
op rv64i = lwu
         | ld
         | sd
         | addiw
         | slliw
         | srliw
         | sraiw
         | addw
         | subw
         | sllw
         | srlw
         | sraw
#endif
#ifndef RISCV_RV64M_INCLUDED
#define RISCV_RV64M_INCLUDED
var tmp_rv64m[XWORD]
op mulw(rd: X, rs1: X, rs2: X)
  syntax = format("mulw %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s000%s0111011", rs2.image, rs1.image, rd.image)
  action = {
    tmp_rv64m = zero_extend(XWORD, rs1<31..0>) * zero_extend(XWORD, rs2<31..0>);
    rd = sign_extend(XWORD, tmp_rv64m<31..0>);
  }
op divw(rd: X, rs1: X, rs2: X)
  syntax = format("divw %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s100%s0111011", rs2.image, rs1.image, rd.image)
  action = {
    if rs2<31..0> == 0 then
      rd = -1;
    elif rs1<31..0> == 1 << 31 && rs2<31..0> == -1 then
      rd = sign_extend(XWORD, rs1<31..0>);
    else
      rd = sign_extend(XWORD, cast(INT, rs1<31..0>) / cast(INT, rs2<31..0>));
    endif;
  }
op divuw(rd: X, rs1: X, rs2: X)
  syntax = format("divuw %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s101%s0111011", rs2.image, rs1.image, rd.image)
  action = {
    if rs2<31..0> == 0 then
      rd = (1 << XLEN) - 1;
    else
      rd = sign_extend(XWORD, cast(WORD, rs1<31..0>) / cast(WORD, rs2<31..0>));
    endif;
  }
op remw(rd: X, rs1: X, rs2: X)
  syntax = format("remw %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s110%s0111011", rs2.image, rs1.image, rd.image)
  action = {
    if rs2<31..0> == 0 then
      rd = sign_extend(XWORD, rs1<31..0>);
    elif rs1<31..0> == 1 << 31 && rs2<31..0> == -1 then
      rd = 0;
    else
      rd = sign_extend(XWORD, cast(INT, rs1<31..0>) % cast(INT, rs2<31..0>));
    endif;
  }
op remuw(rd: X, rs1: X, rs2: X)
  syntax = format("remuw %s, %s, %s", rd.syntax, rs1.syntax, rs2.syntax)
  image  = format("0000001%s%s111%s0111011", rs2.image, rs1.image, rd.image)
  action = {
    if rs2<31..0> == 0 then
      rd = sign_extend(XWORD, rs1<31..0>);
    else
      rd = sign_extend(XWORD, cast(WORD, rs1<31..0>) % cast(WORD, rs2<31..0>));
    endif;
  }
op rv64m = mulw
         | divw
         | divuw
         | remw
         | remuw
#endif
#ifndef RISCV_RVC_INCLUDED
#define RISCV_RVC_INCLUDED
#include "riscv_rv32i.nml"
#ifdef RV64I
  #include "riscv_rv64i.nml"
#endif
#ifdef RV32D
  #include "riscv_rv32d.nml"
#endif
#ifdef RV32F
  #include "riscv_rv32f.nml"
#endif
mode CX (i: card(3)) = XREG [coerce(card(5), i) + 8]
  syntax = format("%s", X(coerce(card(5), i) + 8).syntax)
  image  = format("%3s", i)
mode CF (i: card(3)) = FPR [coerce(card(5), i) + 8]
  syntax = format("%s", F(coerce(card(5), i) + 8).syntax)
  image  = format("%3s", i)
op c_addi4spn(rd: CX, nzuimm: card(10))
  init   = {
    assert(nzuimm != 0,       "C.ADDI4SPN: nzuimm == 0");
    assert(nzuimm<1..0> == 0, "C.ADDI4SPN: nzuimm<1..0> != 0");
  }
  syntax = format("c.addi4spn %s, %s, %d", rd.syntax, X(2).syntax, nzuimm)
  image  = format("000%2s%4s%1s%1s%3s00", nzuimm<5..4>, nzuimm<9..6>, nzuimm<2>, nzuimm<3>, rd.image)
  action = {
    addi(
      X(zero_extend(card(5), rd.i) + 8),
      X(2), zero_extend(card(12), nzuimm<9..2>) << 2).action;
  }
@rev(RV128C)
op c_lq(rd: CX, rs1: CX, offset: card(5))
  syntax = format("c.lq %s, %d(%s)", rd.syntax, offset, rs1.syntax)
  image  = format("001%2s%1s%3s%2s%3s00", offset<1..0>, offset<4>, rs1.image, offset<3..2>, rd.image)
  action = {
  }
@rev(RV32FC)
op c_flw(rd: CF, rs1: CX, offset: card(5))
  syntax = format("c.flw %s, %d(%s)", rd.syntax, offset, rs1.syntax)
  image  = format("011%3s%3s%1s%1s%3s00", offset<3..1>, rs1.image, offset<0>, offset<4>, rd.image)
  action = {
    flw(
      F(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rs1.i) + 8),
      zero_extend(card(12), offset) << 2).action;
  }
@rev(RV32DC)
op c_fld(rd: CF, rs1: CX, offset: card(8))
  syntax = format("c.fld %s, %d(%s)", rd.syntax, offset, rs1.syntax)
  image  = format("001%3s%3s%2s%3s00", offset<5..3>, rs1.image, offset<7..6>, rd.image)
  action = {
    fld(
      F(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rs1.i) + 8),
      zero_extend(card(12), offset<7..3>) << 3).action;
  }
op c_sw(rs2: CX, rs1: CX, offset: card(7))
  init   = {
    assert(offset<1..0> == 0, "C.SW: offset<1..0> != 0");
  }
  syntax = format("c.sw %s, %d(%s)", rs2.syntax, offset, rs1.syntax)
  image  = format("110%3s%3s%1s%1s%3s00", offset<5..3>, rs1.image, offset<2>, offset<6>, rs2.image)
  action = {
    sw(
      X(zero_extend(card(5), rs2.i) + 8),
      X(zero_extend(card(5), rs1.i) + 8),
      zero_extend(card(12), offset<6..2>) << 2).action;
  }
@rev(RV64C)
op c_sd(rs2: CX, rs1: CX, offset: card(8))
  init   = {
    assert(offset<2..0> == 0, "C.SD: offset<2..0> != 0");
  }
  syntax = format("c.sd %s, %d(%s)", rs2.syntax, offset, rs1.syntax)
  image  = format("111%3s%3s%2s%3s00", offset<5..3>, rs1.image, offset<7..6>, rs2.image)
  action = {
    sd(
      X(zero_extend(card(5), rs2.i) + 8),
      X(zero_extend(card(5), rs1.i) + 8),
      zero_extend(card(12), offset<7..3>) << 3).action;
  }
@rev(RV128C)
op c_sq(rs2: CX, rs1: CX, offset: card(5))
  syntax = format("c.sq %s, %d(%s)", rs2.syntax, offset, rs1.syntax)
  image  = format("101%2s%1s%3s%2s%3s00", offset<1..0>, offset<4>, rs1.image, offset<3..2>, rs2.image)
  action = {
  }
@rev(RV32FC)
op c_fsw(rs2: CF, rs1: CX, offset: card(5))
  syntax = format("c.fsw %s, %d(%s)", rs2.syntax, offset, rs1.syntax)
  image  = format("111%3s%3s%1s%1s%3s00", offset<3..1>, rs1.image, offset<0>, offset<4>, rs2.image)
  action = {
    fsw(
      F(zero_extend(card(5), rs2.i) + 8),
      X(zero_extend(card(5), rs1.i) + 8),
      zero_extend(card(12), offset) << 2).action;
  }
@rev(RV32DC)
op c_fsd(rs2: CF, rs1: CX, offset: card(8))
  init   = {
    assert(offset<2..0> == 0, "C.FSD: offset<2..0> != 0");
  }
  syntax = format("c.fsd %s, %d(%s)", rs2.syntax, offset, rs1.syntax)
  image  = format("101%3s%3s%2s%3s00", offset<5..3>, rs1.image, offset<7..6>, rs2.image)
  action = {
    fsd(
      F(zero_extend(card(5), rs2.i) + 8),
      X(zero_extend(card(5), rs1.i) + 8),
      zero_extend(card(12), offset<7..3>) << 3).action;
  }
op c_nop()
  syntax = format("c.nop")
  image  = format("0000%5s0000000", X(0).image)
  action = {
    addi(X(0), X(0), 0).action;
  }
op c_addi(rd: X 
@rev(RV64C)
op c_addiw(rd: X 
@rev(RV64I)
op c_addi16sp(nzimm: int(10))
  init   = {
    assert(nzimm != 0,       "C.ADDI16SP: nzimm == 0");
    assert(nzimm<3..0> == 0, "C.ADDI16SP: nzimm<3..0> != 0");
  }
  syntax = format("c.addi16sp %s, %d", X(2).syntax, nzimm)
  image  = format("011%1s%5s%1s%1s%2s%1s01", nzimm<9>, X(2).image, nzimm<4>, nzimm<6>, nzimm<8..7>, nzimm<5>)
  action = {
    addiw(X(2), X(2), sign_extend(card(12), nzimm<9..4>) << 4).action;
  }
op c_li(rd: X 
op c_lui(rd: X 
op c_srli(rd: CX, shamt: card(6))
  init   = {
#ifndef RV128C
  #ifdef RV64C
    assert(shamt != 0,      "C.SRLI(RV64C): shamt == 0");
  #else
    #ifdef RV32C
    assert(shamt<5> == 0b0, "C.SRLI(RV32C): shamt<5> != 0");
    assert(shamt != 0,      "C.SRLI(RV32C): shamt == 0");
    #endif
  #endif
#endif
  }
  syntax = format("c.srli %s, %d", rd.syntax, shamt)
  image  = format("100%1s00%3s%5s01", shamt<5>, rd.image, shamt<4..0>)
  action = {
#ifdef RV128C
    if shamt == 0 then
      srli(
        X(zero_extend(card(5), rd.i) + 8),
        X(zero_extend(card(5), rd.i) + 8),
        64).action;
    else
      srli(
        X(zero_extend(card(5), rd.i) + 8),
        X(zero_extend(card(5), rd.i) + 8),
        shamt).action;
    endif;
#else
    srli(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rd.i) + 8),
      coerce(card(SHLEN), shamt)).action;
#endif
  }
@rev(RV128C)
op c_srli64(rd: CX)
  init = {
    c_srli(rd, 0).init;
  }
  syntax = format("c.srli64 %s", rd.syntax)
  image  = format("%s", c_srli(rd, 0).image)
  action = {
    c_srli(rd, 0).action;
  }
op c_srai(rd: CX, shamt: card(6))
  init   = {
#ifndef RV128C
  #ifdef RV64C
      assert(shamt != 0b0,    "C.SRAI(RV64C): shamt == 0");
  #else
    #ifdef RV32C
      assert(shamt<5> == 0b0, "C.SRAI(RV32C): shamt<5> != 0");
      assert(shamt != 0b0,    "C.SRAI(RV32C): shamt == 0");
    #endif
  #endif
#endif
  }
  syntax = format("c.srai %s, %d", rd.syntax, shamt)
  image  = format("100%1s01%3s%5s01", shamt<5>, rd.image, shamt<4..0>)
  action = {
#ifdef RV128C
  if shamt == 0 then
    srai(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rd.i) + 8),
      64).action;
  else
    srai(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rd.i) + 8),
      shamt).action;
  endif;
#else
  srai(
    X(zero_extend(card(5), rd.i) + 8),
    X(zero_extend(card(5), rd.i) + 8),
    coerce(card(SHLEN), shamt)).action;
#endif
  }
@rev(RV128C)
op c_srai64(rd: CX)
  init = {
    c_srai(rd, 0).init;
  }
  syntax = format("c.srai64 %s", rd.syntax)
  image  = format("%s", c_srai(rd, 0).image)
  action = {
    c_srai(rd, 0).action;
  }
op c_lwsp(rd: X 
@rev(RV64C)
op c_ldsp(rd: X 
op c_swsp(rs2: X 
op c_sdsp(rs2: X, offset: card(9))
  init   = {
    assert(offset<2..0> == 0, "C.SDSP: offset<2..0> != 0");
  }
  syntax = format("c.sdsp %s, %d(%s)", rs2.syntax, offset, X(2).syntax)
  image  = format("111%3s%3s%5s10", offset<5..3>, offset<8..6>, rs2.image)
  action = {
    sw(rs2, X(2), zero_extend(card(12), offset<8..3>) << 3).action;
  }
op c_lw(rd: CX, rs1: CX, offset: card(7))
  init   = {
    assert(offset<1..0> == 0, "C.LW: offset<1..0> != 0");
  }
  syntax = format("c.lw %s, %d(%s)", rd.syntax, offset, rs1.syntax)
  image  = format("010%3s%3s%1s%1s%3s00", offset<5..3>, rs1.image, offset<2>, offset<6>, rd.image)
  action = {
    lw(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rs1.i) + 8),
      zero_extend(card(12), offset<6..2>) << 2).action;
  }
@rev(RV64C)
op c_ld(rd: CX, rs1: CX, offset: card(8))
  init   = {
    assert(offset<2..0> == 0, "C.LD: offset<2..0> != 0");
  }
  syntax = format("c.ld %s, %d(%s)", rd.syntax, offset, rs1.syntax)
  image  = format("011%3s%3s%2s%3s00", offset<5..3>, rs1.image, offset<7..6>, rd.image)
  action = {
    ld(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rs1.i) + 8),
      zero_extend(card(12), offset<7..3>) << 3).action;
  }
op c_andi(rd: CX, imm: int(6))
  syntax = format("c.andi %s, %d", rd.syntax, imm)
  image  = format("100%1s10%3s%5s01", imm<5>, rd.image, imm<4..0>)
  action = {
    andi(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rd.i) + 8),
      sign_extend(card(12), imm)).action;
  }
op c_add(rd: X 
)
  init   = {
    assert(rd.i != 0,  "C.ADD: rd == 0");
    assert(rs2.i != 0, "C.ADD: rs2 == 0");
  }
  syntax = format("c.add %s, %s", rd.syntax, rs2.syntax)
  image  = format("1001%5s%5s10", rd.image, rs2.image)
  action = {
    add(rd, rd, rs2).action;
  }
op c_or(rd: CX, rs2: CX)
  syntax = format("c.or %s, %s", rd.syntax, rs2.syntax)
  image  = format("100011%3s10%3s01", rd.image, rs2.image)
  action = {
    or(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rs2.i) + 8)).action;
  }
op c_xor(rd: CX, rs2: CX)
  syntax = format("c.xor %s, %s", rd.syntax, rs2.syntax)
  image  = format("100011%3s01%3s01", rd.image, rs2.image)
  action = {
    xor(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rs2.i) + 8)).action;
  }
op c_sub(rd: CX, rs2: CX)
  syntax = format("c.sub %s, %s", rd.syntax, rs2.syntax)
  image  = format("100011%3s00%3s01", rd.image, rs2.image)
  action = {
    sub(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rs2.i) + 8)).action;
  }
op c_and(rd: CX, rs2: CX)
  syntax = format("c.and %s, %s", rd.syntax, rs2.syntax)
  image  = format("100011%3s11%3s01", rd.image, rs2.image)
  action = {
    and(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rs2.i) + 8)).action;
  }
@rev(RV64C)
op c_addw(rd: CX, rs2: CX)
  syntax = format("c.addw %s, %s", rd.syntax, rs2.syntax)
  image  = format("100111%3s01%3s01", rd.image, rs2.image)
  action = {
    addw(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rs2.i) + 8)).action;
  }
@rev(RV64C)
op c_subw(rd: CX, rs2: CX)
  syntax = format("c.subw %s, %s", rd.syntax, rs2.syntax)
  image  = format("100111%3s00%3s01", rd.image, rs2.image)
  action = {
    subw(
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rd.i) + 8),
      X(zero_extend(card(5), rs2.i) + 8)).action;
  }
var c_jump_imm11[card(11)]
mode C_JUMP_IMM(imm: int(11)) = imm
  init = {
    c_jump_imm11 = imm;
  }
  syntax = format("0x%x", imm)
  image = format("%s", imm)
label mode C_JUMP_LABEL(target: WORD, current: WORD) = target<11..1> - current<11..1>
  init = {
    c_jump_imm11 = target<11..1> - current<11..1>;
  }
  syntax = ""
  image = format("%s", target<11..1> - current<11..1>)
mode C_JUMP_ADDR = C_JUMP_LABEL | C_JUMP_IMM
@rev(RV32C)
op c_j(target: C_JUMP_ADDR)
  syntax = format("c.j %s", target.syntax)
  image  = format("101%1s%1s%2s%1s%1s%1s%3s%1s01",
                  target<10>,
                  target<3>,
                  target<8..7>,
                  target<9>,
                  target<5>,
                  target<6>,
                  target<2..0>,
                  target<4>)
  action = {
    jal(X(0), JUMP_IMM(sign_extend(int(20), target))).action;
  }
op c_jal(target: C_JUMP_ADDR)
  syntax = format("c.jal %s", target.syntax)
  image  = format("001%1s%1s%2s%1s%1s%1s%3s%1s01",
                  target<10>,
                  target<3>,
                  target<8..7>,
                  target<9>,
                  target<5>,
                  target<6>,
                  target<2..0>,
                  target<4>)
  action = {
    jal(X(1), JUMP_IMM(sign_extend(int(20), target))).action;
    XREG[1] = prev_pc + 2;
  }
var c_jump_imm8[card(8)]
mode C_BRANCH_IMM(imm: card(8)) = imm
  init = {
    c_jump_imm8 = imm;
  }
  syntax = format("%d", coerce(int(8), imm))
  image = format("%s", imm)
label mode C_BRANCH_LABEL_M2(target: WORD, current: WORD) = target<8..1> - current<8..1>
  init = {
    c_jump_imm8 = target<8..1> - current<8..1>;
  }
  syntax = ""
  image = format("%s", target<8..1> - current<8..1>)
mode C_BRANCH_OFFSET_M2 = C_BRANCH_LABEL_M2 | C_BRANCH_IMM
op c_beqz(rs1: CX, offset: C_BRANCH_OFFSET_M2)
  syntax = format("c.beqz %s, %s", rs1.syntax, offset.syntax)
  image  = format("110%1s%2s%3s%2s%2s%1s01",
                  offset<7>,
                  offset<3..2>,
                  rs1.image,
                  offset<6..5>,
                  offset<1..0>,
                  offset<4>)
  action = {
    beq(
      X(zero_extend(card(5), rs1.i) + 8),
      X(0),
      BRANCH_IMM(sign_extend(card(12), offset))).action;
  }
op c_bnez(rs1: CX, offset: C_BRANCH_OFFSET_M2)
  syntax = format("c.bnez %s, %s", rs1.syntax, offset.syntax)
  image  = format("111%1s%2s%3s%2s%2s%1s01",
                  offset<7>,
                  offset<3..2>,
                  rs1.image,
                  offset<6..5>,
                  offset<1..0>,
                  offset<4>)
  action = {
    bne(
      X(zero_extend(card(5), rs1.i) + 8),
      X(0),
      BRANCH_IMM(sign_extend(card(12), offset))).action;
  }
op c_jr(rs1: X 
op c_jalr(rs1: X 
op c_slli(rd: X 
)
  init = {
    c_slli(rd, 0).init;
  }
  syntax = format("c.slli64 %s", rd.syntax)
  image = format("%s", c_slli(rd, 0).image)
  action = {
    c_slli(rd, 0).action;
  }
@rev(RV128C)
op c_lqsp(rd: X 
@rev(RV32FC)
op c_flwsp(rd: F 
@rev(RV32DC)
op c_fldsp(rd: F 
op c_mv(rd: X 
)
  init   = {
    assert(rd.i != 0, "C.MV: rd == 0");
    assert(rs2.i != 0, "C.MV: rs2 == 0");
  }
  syntax = format("c.mv %s, %s", rd.syntax, rs2.syntax)
  image  = format("1000%5s%5s10", rd.image, rs2.image)
  action = {
    add(rd, X(0), rs2).action;
  }
op c_ebreak()
  syntax = format("c.ebreak")
  image  = format("1001%5s%5s10", coerce(card(5), 0), coerce(card(5), 0))
  action = {
  }
@rev(RV128C)
op c_sqsp(rs2: X 
@rev(RV32FC)
op c_fswsp(rs2: F 
@rev(RV32DC)
op c_fsdsp(rs2: F 
