#
# ISP RAS (http://www.ispras.ru)
#
# This ruby template was automatically generated by the MicroTESK tool
# Generation started: Wed Feb 06 16:57:26 MSK 2019
#

require_relative '../riscv_base'

class BoundaryGenTemplate < RiscVBaseTemplate
  def pre
    super
    data {
      label :data
      word rand(1, 9), rand(1, 9), rand(1, 9), rand(1, 9)
      label :end_data
      space 1
    }
  end
  
  def run
    set_default_allocator FREE
    
    # Only arithmetic operations
    
    sequence {
      addi x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      slti x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      sltiu x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      xori x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      ori x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      andi x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      slli x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      srli x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      srai x(_), x(_), _ do testdata('boundary') end      
    }.run
    
    sequence {
      sll x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      srl x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      sra x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      add x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      sub x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      slt x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      sltu x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      AND x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      OR x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      xor x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      mul x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      mulh x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      mulhu x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      mulhsu x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      div x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      divu x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      rem x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
    sequence {
      remu x(_), x(_), x(_) do testdata('boundary') end      
    }.run
    
  end
end
